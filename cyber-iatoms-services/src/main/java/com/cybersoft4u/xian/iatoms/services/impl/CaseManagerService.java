package com.cybersoft4u.xian.iatoms.services.impl;

import java.io.File;
import java.io.InputStream;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLDecoder;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.activiti.engine.impl.util.json.JSONObject;
import org.activiti.rest.service.api.runtime.task.TaskQueryRequest;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.util.CollectionUtils;
import org.springframework.web.multipart.MultipartFile;

import cafe.core.bean.Message;
import cafe.core.bean.Parameter;
import cafe.core.bean.dto.parameter.BaseParameterItemDefDTO;
import cafe.core.bean.identity.LogonUser;
import cafe.core.config.SystemConfigManager;
import cafe.core.context.BaseParameterInquiryContext;
import cafe.core.context.MultiParameterInquiryContext;
import cafe.core.context.SessionContext;
import cafe.core.dao.DataAccessException;
import cafe.core.dao.parameter.IBaseParameterItemDefDAO;
import cafe.core.exception.ICommonException;
import cafe.core.service.ServiceException;
import cafe.core.util.DateTimeUtils;
import cafe.core.util.StringUtils;
import cafe.core.util.i18NUtil;
import cafe.core.util.convert.ConvertException;
import cafe.core.util.convert.SimpleDtoDmoTransformer;
import cafe.core.util.convert.Transformer;
import cafe.core.util.log.CafeLog;
import cafe.core.util.log.CafeLogFactory;
import cafe.workflow.bean.ITask;
import cafe.workflow.config.WfSystemConfigManager;
import cafe.workflow.context.ITaskInquiryContext;
import cafe.workflow.context.IWorkflowContext;
import cafe.workflow.context.bpmn20.activiti.ActivitiRestTaskInquiryContext;
import cafe.workflow.context.bpmn20.activiti.ActivitiWorkflowContext;

import com.cybersoft4u.xian.iatoms.common.IATOMS_PARAM_TYPE;
import com.cybersoft4u.xian.iatoms.common.IAtomsConstants;
import com.cybersoft4u.xian.iatoms.common.IAtomsConstants.CASE_ACTION;
import com.cybersoft4u.xian.iatoms.common.IAtomsLogonUser;
import com.cybersoft4u.xian.iatoms.common.IAtomsMessageCode;
import com.cybersoft4u.xian.iatoms.common.bean.dto.ActivitiDataDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.ActivitiResultDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.AdmRoleDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.ApiAuthorizationInfoDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.ApiLogDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.BimContractDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.BimDepartmentDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.BimMerchantHeaderDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.CompanyDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.ContractSlaDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.DmmRepositoryDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.DmmRepositoryHistoryDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.DmmSuppliesDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.MailListDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.MerchantDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.PvmDtidDefDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.ReceiveJobNoticeDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.ReportSettingDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.SrmCaseAssetFunctionDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.SrmCaseAssetLinkDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.SrmCaseAttFileDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.SrmCaseHandleInfoDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.SrmCaseNewTransactionParameterDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.SrmCaseTransactionDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.SrmCaseTransactionParameterDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.SrmHistoryCaseHandleInfoDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.SrmPaymentInfoDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.SrmTransactionParameterDetailDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.SrmTransactionParameterItemDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.TMSParameterDTO;
import com.cybersoft4u.xian.iatoms.common.bean.dto.TMSTransactionParameterDTO;
import com.cybersoft4u.xian.iatoms.common.bean.formDTO.AssetManageFormDTO;
import com.cybersoft4u.xian.iatoms.common.bean.formDTO.BaseParameterManagerFormDTO;
import com.cybersoft4u.xian.iatoms.common.bean.formDTO.CaseManagerFormDTO;
import com.cybersoft4u.xian.iatoms.common.bean.formDTO.PropertyNumberImportFormDTO;
import com.cybersoft4u.xian.iatoms.common.bean.workflow.AbstractIAtomsPayloadContext;
import com.cybersoft4u.xian.iatoms.common.bean.workflow.CaseProcessPayloadContext;
import com.cybersoft4u.xian.iatoms.common.bean.workflow.IAtomsTaskContext;
import com.cybersoft4u.xian.iatoms.common.utils.CSVUtils;
import com.cybersoft4u.xian.iatoms.common.utils.CopyPropertiesUtils;
import com.cybersoft4u.xian.iatoms.common.utils.FileUtils;
import com.cybersoft4u.xian.iatoms.common.utils.FtpClient;
import com.cybersoft4u.xian.iatoms.common.utils.IAtomsDateTimeUtils;
import com.cybersoft4u.xian.iatoms.common.utils.IAtomsUtils;
import com.cybersoft4u.xian.iatoms.common.utils.NetUtil;
import com.cybersoft4u.xian.iatoms.common.utils.PasswordEncoderUtilities;
import com.cybersoft4u.xian.iatoms.common.utils.ValidateUtils;
import com.cybersoft4u.xian.iatoms.common.utils.mail.MailComponent;
import com.cybersoft4u.xian.iatoms.services.IBaseParameterManagerService;
import com.cybersoft4u.xian.iatoms.services.ICaseCheckInfoService;
import com.cybersoft4u.xian.iatoms.services.ICaseManagerService;
import com.cybersoft4u.xian.iatoms.services.IIAtomsActivitiUtilsService;
import com.cybersoft4u.xian.iatoms.services.dao.IAdmRoleDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IAdmUserDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IApiLogDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IAssetTypeDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IBaseParameterPostCodeDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ICalendarDayDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ICaseDetailDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ICompanyDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IContractAssetDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IContractDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IContractSlaDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IDepartmentDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IDmmRepositoryDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IDmmRepositoryHistoryDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IMailListDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IMerchantDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IMerchantHeaderDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IPvmApplicationDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IPvmDtidDefDAO;
import com.cybersoft4u.xian.iatoms.services.dao.IReportSettingDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmCaseAssetFunctionDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmCaseAssetLinkDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmCaseAttFileDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmCaseCommModeDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmCaseHandleInfoDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmCaseNewAssetLinkDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmCaseNewHandleInfoDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmCaseNewTransactionParameterDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmCaseTemplatesDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmCaseTransactionDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmCaseTransactionParameterDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmHistoryCaseHandleInfoDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmHistoryCaseTransactionDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmPaymentInfoDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmPaymentItemDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmTransactionParameterDetailDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISrmTransactionParameterItemDAO;
import com.cybersoft4u.xian.iatoms.services.dao.ISuppliesTypeDAO;
import com.cybersoft4u.xian.iatoms.services.dmo.AdmUser;
import com.cybersoft4u.xian.iatoms.services.dmo.ApiLog;
import com.cybersoft4u.xian.iatoms.services.dmo.BimCalendarDay;
import com.cybersoft4u.xian.iatoms.services.dmo.BimCompany;
import com.cybersoft4u.xian.iatoms.services.dmo.BimContract;
import com.cybersoft4u.xian.iatoms.services.dmo.BimDepartment;
import com.cybersoft4u.xian.iatoms.services.dmo.BimMerchant;
import com.cybersoft4u.xian.iatoms.services.dmo.BimMerchantHeader;
import com.cybersoft4u.xian.iatoms.services.dmo.DmmAssetType;
import com.cybersoft4u.xian.iatoms.services.dmo.DmmRepository;
import com.cybersoft4u.xian.iatoms.services.dmo.DmmSupplies;
import com.cybersoft4u.xian.iatoms.services.dmo.PvmDtidDef;
import com.cybersoft4u.xian.iatoms.services.dmo.SrmCaseAssetFunction;
import com.cybersoft4u.xian.iatoms.services.dmo.SrmCaseAssetLink;
import com.cybersoft4u.xian.iatoms.services.dmo.SrmCaseAttFile;
import com.cybersoft4u.xian.iatoms.services.dmo.SrmCaseCommMode;
import com.cybersoft4u.xian.iatoms.services.dmo.SrmCaseHandleInfo;
import com.cybersoft4u.xian.iatoms.services.dmo.SrmCaseTemplates;
import com.cybersoft4u.xian.iatoms.services.dmo.SrmCaseTransaction;
import com.cybersoft4u.xian.iatoms.services.dmo.SrmCaseTransactionParameter;
import com.cybersoft4u.xian.iatoms.services.dmo.SrmHistoryCaseHandleInfo;
import com.cybersoft4u.xian.iatoms.services.dmo.SrmHistoryCaseTransaction;
import com.cybersoft4u.xian.iatoms.services.dmo.SrmPaymentInfo;
import com.cybersoft4u.xian.iatoms.services.dmo.SrmPaymentItem;
import com.cybersoft4u.xian.iatoms.services.utils.AnalyticalActivitiTaskDataUtils;
import com.cybersoft4u.xian.iatoms.services.workflow.impl.IAtomsHumanTaskActivityService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;
/**
 * Purpose: 案件處理Service實現類
 * @author CrissZhang
 * @since  JDK 1.7
 * @date   2016年8月5日
 * @MaintenancePersonnel CrissZhang
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class CaseManagerService extends IAtomsHumanTaskActivityService implements ICaseManagerService {
	
	/**
	 *  系統日誌記錄
	 */
	private static final CafeLog LOGGER = CafeLogFactory.getLog(CaseManagerService.class);
	/**
	 * 處理類型默認值
	 * key：案件類別
	 * value:該案件類別下的處理類型的默認值
	 */
	private Map<String,String> handleTypeDefaultValueMap;
	/**
	 * 預設耗材分類
	 * key：耗材分類
	 * value：分類的名稱
	 */
	private Map<String,String> caseSuppliesTypeMap;
	/**
	 * SRM_交易參數項目DAO
	 */
	private ISrmTransactionParameterItemDAO srmTransactionParameterItemDAO;
	/**
	 * SRM_交易參數項目明細DAO
	 */
	private ISrmTransactionParameterDetailDAO srmTransactionParameterDetailDAO;
	
	/**
	 * SRM_案件處理資料檔DAO
	 */
	private ISrmCaseHandleInfoDAO srmCaseHandleInfoDAO;
	/**
	 * SRM_案件處理最新資料檔DAO
	 */
	private ISrmCaseNewHandleInfoDAO srmCaseNewHandleInfoDAO;
	/**
	 * SRM_案件最新交易參數資料檔
	 */
	private ISrmCaseNewTransactionParameterDAO srmCaseNewTransactionParameterDAO;
	/**
	 * 公司
	 */
	private ICompanyDAO companyDAO;
	/**
	 * 案件交易參數DAO
	 */
	private ISrmCaseTransactionParameterDAO srmCaseTransactionParameterDAO;
	/**
	 * 合約sla設定DAO
	 */
	private IContractSlaDAO contractSlaDAO;
	
	/**
	 * 案件附件檔DAO
	 */
	private ISrmCaseAttFileDAO srmCaseAttFileDAO;
	
	/**
	 * DTIO帳號管理DAO
	 */
	private IPvmDtidDefDAO dtidDefDAO;
	
	/**
	 * 合约DAO
	 */
	private IContractDAO contractDAO;
	
	/**
	 * 行事曆 天 DAO
	 */
	private ICalendarDayDAO calendarDayDAO;
	
	/**
	 * 設備品項 DAO
	 */
	private IAssetTypeDAO assetTypeDAO;
	
	/**
	 * 基本參數DAO
	 */
	private IBaseParameterItemDefDAO baseParameterItemDefDAO;
	/**
	 * 发送邮件
	 */
	private MailComponent mailComponent;
	
	/**
	 * 案件處理記錄
	 */
	private ISrmCaseTransactionDAO srmCaseTransactionDAO;
	
	/**
	 * 案件處理中設備連接檔
	 */
	private ISrmCaseAssetLinkDAO srmCaseAssetLinkDAO;
	
	/**
	 * 案件處理中設備支援功能檔
	 */
	private ISrmCaseAssetFunctionDAO srmCaseAssetFunctionDAO;
	
	/**
	 * 部門資料檔
	 */
	private IDepartmentDAO departmentDAO;
	/**
	 * 合約設備DAO
	 */
	private IContractAssetDAO contractAssetDAO;
	/**
	 * 耗材品dao
	 */
	private ISuppliesTypeDAO suppliesDAO;
	/**
	 * 特店表頭DAO
	 */
	private IMerchantHeaderDAO merchantHeaderDAO;
	
	/**
	 * CaseDetailDAO注入
	 */
	private ICaseDetailDAO caseDetailDAO;
	/**
	 * activitiService注入
	 */
	private IIAtomsActivitiUtilsService iAtomsActivitiUtilsService;
	/**
	 * 程式版本維護DAO 
	 */
	private IPvmApplicationDAO pvmApplicationDAO;
	/**
	 * 特點DAO
	 */
	private IMerchantDAO merchantDAO;
	/**
	 * 庫存主檔
	 */
	private IDmmRepositoryDAO dmmRepositoryDAO;
	/**
	 * 庫存歷史當
	 */
	private IDmmRepositoryHistoryDAO dmmRepositoryHistoryDAO;
	
	/**
	 * SRM_案件最新設備連接檔DAO
	 */
	private ISrmCaseNewAssetLinkDAO srmCaseNewAssetLinkDAO;
	
	/**
	 * 工單範本維護DAO
	 */
	private ISrmCaseTemplatesDAO srmCaseTemplatesDAO;
	/**
	 * USERdao
	 */
	private IAdmUserDAO admUserDAO;
	/**
	 * 郵件通知群組
	 */
	private IMailListDAO mailListDAO;
	/**
	 * 角色DAO
	 */
	private IAdmRoleDAO admRoleDAO;
	/**
	 * 案件歷史處理資料檔DAO
	 */
	private ISrmHistoryCaseHandleInfoDAO historyCaseHandleInfoDAO;
	/**
	 * 案件歷史處理歷程記錄DAO
	 */
	private ISrmHistoryCaseTransactionDAO srmHistoryCaseTransactionDAO;
	/**
	 * 系統參數維護Service
	 */
	private IBaseParameterManagerService baseParameterManagerService;
	/**
	 * 案件狀態list
	 */
	private List<String> caseStatusList;
	/**
	 * 報表沖送DAO
	 */
	private IReportSettingDAO reportSettingDAO;
	/**
	 * SRM_案件處理中通訊模式維護檔 DAO
	 */
	private ISrmCaseCommModeDAO srmCaseCommModeDAO;
	/**
	 * 求償作業主檔
	 */
	private ISrmPaymentInfoDAO paymentInfoDAO;
	/**
	 * 求償作業Item
	 */
	private ISrmPaymentItemDAO srmPaymentItemDAO;
	/**
	 * 寫入API_LOG
	 */
	private IApiLogDAO apiLogDAO;
	/**
	 * 郵遞區號DAO
	 */
	private IBaseParameterPostCodeDAO baseParameterPostCodeDAO;
	
	/**
	 * 案件邏輯核檢
	 */
	private ICaseCheckInfoService caseCheckInfoService;
	
	/**
	 * Constructor: 無參構造
	 */
	public CaseManagerService() {
		super();
	}

	/**
	 * Purpose:送至下一關審核
	 * @author ElvaHe
	 * @param logonUser:登錄者
	 * @param formDTO:案件消息
	 * @param currentActivitiCode:當前關卡ID
	 * @param candidateGroup：下一關接受群組（僅已派工關卡需傳值）
	 * @param outcome:處理結果
	 * @throws ServiceException
	 */
	public Message sendNextActiviti(IAtomsLogonUser logonUser, CaseManagerFormDTO formDTO, String currentActivitiCode, String candidateGroup) throws ServiceException {
		//IAtomsCaseFormDTO caseFormDTO = new IAtomsCaseFormDTO();
		Map<String, ActivitiResultDTO> map = new HashMap<String, ActivitiResultDTO>();
		ActivitiWorkflowContext workflowContext = new ActivitiWorkflowContext(logonUser);
		IAtomsTaskContext taskContext = new IAtomsTaskContext();
		AbstractIAtomsPayloadContext payLoadContext = new CaseProcessPayloadContext();
		ActivitiResultDTO caseActivitiResultDTO = null;
		String taskId = null;
		Message msg = null;
		try {
			//傳遞的案件單號
			List<String> caseIds = formDTO.getCaseIds();
			formDTO.setCurrentActivitiCode(currentActivitiCode);
			formDTO.setProcessId(CaseManagerFormDTO.IATOMS_BP_CASE_PROCESS);
			TaskQueryRequest  filters = new TaskQueryRequest();
			ITaskInquiryContext taskQueryCtx = new ActivitiRestTaskInquiryContext();
			taskQueryCtx.setPredicate(filters);
			taskQueryCtx.setStartPage(0);
			taskQueryCtx.setPageSize(1000);
			formDTO.setTaskQueryCtx(taskQueryCtx);
			IWorkflowContext wfCtx = new ActivitiWorkflowContext(logonUser);
			formDTO.setWfCtx(wfCtx);
			//查找該關卡的workList案件
			List<ITask> tasks =  this.iAtomsActivitiUtilsService.getTaskList(formDTO);
			if(!CollectionUtils.isEmpty(tasks)){
				map = AnalyticalActivitiTaskDataUtils.analytical2Map(tasks);
				if(map != null){
					//查找當前流程中到登錄者跟前的案子
					caseActivitiResultDTO = map.get(CaseManagerFormDTO.SICK_CASE_TYPE);
					if(caseActivitiResultDTO != null){
						formDTO.setActivitiResultDTO(caseActivitiResultDTO);
						List<ActivitiDataDTO> activitiDataDTOs = caseActivitiResultDTO.getActivitiDataDTOList();
						if(!CollectionUtils.isEmpty(activitiDataDTOs)){
							//循環所有的案件編號獲取相應的taskID
							for (String caseId : caseIds) {
								taskId = null;
								for (ActivitiDataDTO activitiDataDTO : activitiDataDTOs) {
									//設置taskId
									if(activitiDataDTO.getCaseId().equals(caseId)){
										taskId = activitiDataDTO.getTaskId();
										break;
									}
								}
								//當存在taskId時進行相應的activiti操作，否則送至下一關失敗
								if (!StringUtils.hasText(taskId)) {
									LOGGER.error("CaseManagerService --> sendNextActiviti() --> ", i18NUtil.getName(IAtomsMessageCode.CASE_TASKID_IS_NULL,  new String[]{caseId}, null));
									msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.BPM_PERFORM_TASK_FAILED, new String[]{caseId});
									throw new ServiceException(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED, new String[]{caseId});
								} else{
									//根據案件單號查詢該案件的消息，修改異動人員消息
									//設置當前登錄者
								//	workflowContext.setUserId(logonUser.getUserCode());
									//設置activiti需要的消息
									formDTO.setLogonUser(logonUser);
									formDTO.setWorkflowContext(workflowContext);
									formDTO.setProcessId(CaseManagerFormDTO.IATOMS_BP_CASE_PROCESS);
									formDTO.setActionId(formDTO.getActionId());
									formDTO.setServiceId(formDTO.getServiceId());
									formDTO.setDispatchUser(logonUser.getUserCode());
									taskContext.setPayload(payLoadContext);
									//案件编号
									formDTO.setCaseId(caseId);
									formDTO.setTaskId(taskId);
									taskContext.setTaskId(taskId);
									taskContext.setCaseId(caseId);
									taskContext.setAssigner(logonUser.getName());
									formDTO.setTaskContext((IAtomsTaskContext) taskContext);									
									formDTO.setCandidateGroup(candidateGroup);
									formDTO.setOutcome(formDTO.getActionId());
									SessionContext ctx = new SessionContext();			
									ctx.setRequestParameter(formDTO);
									//送至下一關
									super.performTaskAction(formDTO, null);
									msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.BPM_PERFORM_TASK_FAILED);
								}
							} 
						} else {
							LOGGER.error("there is no tasks by activitiDataDTOs..." + caseIds);
						}
					} else {
						LOGGER.error("there is no tasks by caseActivitiResultDTO..." + caseIds);
					}
				} else {
					LOGGER.error("there is no tasks by map..." + caseIds);
				}
			} else {
				LOGGER.error("there is no tasks by this group..." + caseIds);
			}
			if (null == msg) {
				throw new ServiceException(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED, new String[]{caseIds.get(0)});
			} else {
				return msg;
			}
		} catch (Exception e) {
			LOGGER.error("sendNextActiviti() ",e);
			throw new ServiceException(e);
		}
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.se${contextPath}/admRole.dorvices.ICaseManagerService#initDetail(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext initDetail(SessionContext sessionContext)throws ServiceException {
		try{
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			// 環匯客戶編號
			CompanyDTO companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_GP);
			if(companyDTO != null){
				caseManagerFormDTO.setGpCustomerId(companyDTO.getCompanyId());
			}
			// Task #3335
			// 台新銀行客戶編號
			companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_TSB_EDC);
			if(companyDTO != null){
				caseManagerFormDTO.setTsbCustomerId(companyDTO.getCompanyId());
			}
			//Task #3522 #3523 #3524 #3525 陽信、彰銀、上銀
			companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAMTER_COMPANY_CODE_SYB);
			if(companyDTO != null){//陽信
			    caseManagerFormDTO.setSybCustomerId(companyDTO.getCompanyId());
			}
			companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAMTER_COMPANY_CODE_CHB);
			if(companyDTO != null){//彰銀
			    caseManagerFormDTO.setChbCustomerId(companyDTO.getCompanyId());
			}
			companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAMTER_COMPANY_CODE_SCSB);
			if(companyDTO != null){//上銀
			    caseManagerFormDTO.setScsbCustomerId(companyDTO.getCompanyId());
			}
			companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAMTER_COMPANY_CODE_GP_EDC);
			if(companyDTO != null){//環匯
			    caseManagerFormDTO.setGpCustomerId(companyDTO.getCompanyId());
			}
			//Task #3584 宣揚
			companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_BCC);
			if(companyDTO != null){
			    caseManagerFormDTO.setBccCustomerId(companyDTO.getCompanyId());
			}
			// 設置角色屬性
			setUserRoleAttribute(caseManagerFormDTO);
			//案件類別獲得默認處理方式
			String defaultProcessType = getDefaultProcessType(caseManagerFormDTO.getCaseCategory());
			caseManagerFormDTO.setDefaultProcessType(defaultProcessType);
			//判斷角色
			setUserRoleFlag(caseManagerFormDTO);
			String fileName = UUID.randomUUID().toString();
			String size = SystemConfigManager.getProperty(IAtomsConstants.SETTING, IAtomsConstants.UPLOAD_FILE_SIZE);
			if (!StringUtils.hasText(size)) {
				size = IAtomsConstants.PARAM_UPLOAD_FILE_SIZE;
			}
			int rate = Integer.valueOf(IAtomsConstants.PARAM_UPLOAD_CONVERSION_RATE);
			size = String.valueOf(Integer.valueOf(size) * rate);
			caseManagerFormDTO.setUploadFileSize(size);
			caseManagerFormDTO.setFileName(fileName);
			Message msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.INIT_PAGE_SUCCESS);
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(caseManagerFormDTO);
			return sessionContext;
		} catch(Exception e){
			LOGGER.error(this.getClass().getName()+".init() is error in Service:"+e, e);
			throw new ServiceException(IAtomsMessageCode.INIT_PAGE_FAILURE, e);
		}
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#initEdit(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext initEdit(SessionContext sessionContext) throws ServiceException {
		try{
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			// 環匯客戶編號
			CompanyDTO companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_GP);
			if(companyDTO != null){
				caseManagerFormDTO.setGpCustomerId(companyDTO.getCompanyId());
			}
			// Task #3335
			// 台新銀行客戶編號
			companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_TSB_EDC);
			if(companyDTO != null){
				caseManagerFormDTO.setTsbCustomerId(companyDTO.getCompanyId());
			}
			//Task #3522 #3523 #3524 #3525 陽信、彰銀、上銀
			companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAMTER_COMPANY_CODE_SYB);
			if(companyDTO != null){//陽信
			    caseManagerFormDTO.setSybCustomerId(companyDTO.getCompanyId());
			}
			companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAMTER_COMPANY_CODE_CHB);
			if(companyDTO != null){//彰銀
			    caseManagerFormDTO.setChbCustomerId(companyDTO.getCompanyId());
			}
			companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAMTER_COMPANY_CODE_SCSB);
			if(companyDTO != null){//上銀
			    caseManagerFormDTO.setScsbCustomerId(companyDTO.getCompanyId());
			}
			//Task #3584 宣揚
			companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_BCC);
			if(companyDTO != null){
			    caseManagerFormDTO.setBccCustomerId(companyDTO.getCompanyId());
			}
			// 設置角色屬性
			setUserRoleAttribute(caseManagerFormDTO);
			// 設置角色group
			setUserRoleFlag(caseManagerFormDTO);
		//	String caseId = caseManagerFormDTO.getCaseId();
			String caseId = URLDecoder.decode(caseManagerFormDTO.getCaseId(), IAtomsConstants.ENCODE_UTF_8); 
			String isHistory = caseManagerFormDTO.getIsHistory();
			SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = null;
			List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOList = null;
			// 案件編號不為空
			if(StringUtils.hasText(caseId)){
				srmCaseHandleInfoDTOList = this.srmCaseHandleInfoDAO.getCaseInfoById(caseId, isHistory);
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOList)) {
					srmCaseHandleInfoDTO = srmCaseHandleInfoDTOList.get(0);
				}
				// 得到原案件交易參數的信息
				List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseId, isHistory);
				// 得到原案件附加文檔的信息
				List<SrmCaseAttFileDTO> srmCaseAttFileDTOs = this.srmCaseAttFileDAO.listByCaseId(caseId, null, isHistory);
				// 案件處理記錄
//				List<SrmCaseTransactionDTO> srmCaseTransactionDTOs = this.srmCaseTransactionDAO.listByCaseId(caseId, isHistory, null, null);
				if(srmCaseHandleInfoDTO != null){
					// 將交易參數變為json字符串
					Gson gsonss = null;
					if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
						gsonss = new GsonBuilder().create();
						//将集合转化为JSON字符串
						String caseTransactionParameterStr = gsonss.toJson(srmCaseTransactionParameterDTOs);
						if(StringUtils.hasText(caseTransactionParameterStr)){
							srmCaseHandleInfoDTO.setCaseTransactionParameterStr(caseTransactionParameterStr);
							srmCaseHandleInfoDTO.setHaveTransParameter(IAtomsConstants.YES);
							// Bug #2598 工單範本為Y
							srmCaseHandleInfoDTO.setIsCaseTemplate(IAtomsConstants.NO);
						} else {
							srmCaseHandleInfoDTO.setHaveTransParameter(IAtomsConstants.NO);
						}
					} else {
						srmCaseHandleInfoDTO.setHaveTransParameter(IAtomsConstants.NO);
					}
					// 將案件處理記錄變為json字符串
/*					if(!CollectionUtils.isEmpty(srmCaseTransactionDTOs)){
						gsonss = new GsonBuilder().create();
						//将集合转化为JSON字符串
						String caseTransactionStr = gsonss.toJson(srmCaseTransactionDTOs);
						if(StringUtils.hasText(caseTransactionStr)){
							srmCaseHandleInfoDTO.setCaseTransactionStr(caseTransactionStr);
							srmCaseHandleInfoDTO.setHaveCaseTransaction(IAtomsConstants.YES);
						} else {
							srmCaseHandleInfoDTO.setHaveCaseTransaction(IAtomsConstants.NO);
						}
					} else {
						srmCaseHandleInfoDTO.setHaveCaseTransaction(IAtomsConstants.NO);
					}*/
					// set交易參數的集合
					srmCaseHandleInfoDTO.setCaseTransactionParameterDTOs(srmCaseTransactionParameterDTOs);
					// set案件附加資料集合
					srmCaseHandleInfoDTO.setCaseAttFileDTOs(srmCaseAttFileDTOs);
					
					srmCaseHandleInfoDTO.setIsHistory(isHistory);
					
					
					
					// 禁用所有按鈕標記
					boolean hiddenAllBtn = false;
					// 派工部門
					String departmentName = srmCaseHandleInfoDTO.getDispatchDeptName();
					// 判斷處理頁面按鈕禁用 // CR #2951 廠商客服 //Task #3578 客戶廠商客服
					if (caseManagerFormDTO.getIsCustomerService() || caseManagerFormDTO.getIsVendorService() || caseManagerFormDTO.getIsCusVendorService()) {
					} else {
						//CR #2394 增加cyberAgent update by 2017/09/13
						//不是VendorAgent 且 不是CyberAgent
						if((!caseManagerFormDTO.getIsVendorAgent()) && (!caseManagerFormDTO.getIsCyberAgent())){
							//既是tms又是QA時
							if (caseManagerFormDTO.getIsTMS() && caseManagerFormDTO.getIsQA() 
									&& !IAtomsConstants.CASE_ROLE.TMS.getCode().equals(departmentName)
									&& !IAtomsConstants.CASE_ROLE.QA.getCode().equals(departmentName)) {
								hiddenAllBtn = true;
								//是tms時
							} else if (caseManagerFormDTO.getIsTMS() && !caseManagerFormDTO.getIsQA() && !IAtomsConstants.CASE_ROLE.TMS.getCode().equals(departmentName)) {
								hiddenAllBtn = true;
								//是QA時
							} else if (caseManagerFormDTO.getIsQA() && !caseManagerFormDTO.getIsTMS() && !IAtomsConstants.CASE_ROLE.QA.getCode().equals(departmentName)) {
								hiddenAllBtn = true;
							}
						// VendorAgent 或 CyberAgent
						} else {
							LogonUser logonUser = caseManagerFormDTO.getLogonUser();
							//維護廠商不為登陸者公司
							if(!logonUser.getCompanyId().equals(srmCaseHandleInfoDTO.getCompanyId())) {
								if(!caseManagerFormDTO.getIsTMS() && !caseManagerFormDTO.getIsQA()){
									hiddenAllBtn = true;
								}
								//既是tms又是QA時
								else if (caseManagerFormDTO.getIsTMS() && caseManagerFormDTO.getIsQA() 
										&& !IAtomsConstants.CASE_ROLE.TMS.getCode().equals(departmentName)
										&& !IAtomsConstants.CASE_ROLE.QA.getCode().equals(departmentName)) {
									hiddenAllBtn = true;
									//是tms時
								} else if (caseManagerFormDTO.getIsTMS() && !caseManagerFormDTO.getIsQA() && !IAtomsConstants.CASE_ROLE.TMS.getCode().equals(departmentName)) {
									hiddenAllBtn = true;
									//是QA時
								} else if (caseManagerFormDTO.getIsQA() && !caseManagerFormDTO.getIsTMS() && !IAtomsConstants.CASE_ROLE.QA.getCode().equals(departmentName)) {
									hiddenAllBtn = true;
								}
							} else {
								//維護廠商為登陸者公司
								if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(departmentName) 
											|| IAtomsConstants.CASE_ROLE.QA.getCode().equals(departmentName) 
											|| i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE).equals(departmentName)){
									if(IAtomsConstants.CASE_ROLE.TMS.getCode().equals(departmentName) && !caseManagerFormDTO.getIsTMS()){
										hiddenAllBtn = true;
									}
									if(IAtomsConstants.CASE_ROLE.QA.getCode().equals(departmentName) && !caseManagerFormDTO.getIsQA()){
										hiddenAllBtn = true;
									}
									if(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE).equals(departmentName)){
										hiddenAllBtn = true;
									}
								}
							}
						}
					}
					// 控制按鈕禁用
					caseManagerFormDTO.setIsHiddenAllBtn(hiddenAllBtn);
					
					String fileName = UUID.randomUUID().toString();
					caseManagerFormDTO.setFileName(fileName);
					String size = SystemConfigManager.getProperty(IAtomsConstants.SETTING, IAtomsConstants.UPLOAD_FILE_SIZE);
					if (!StringUtils.hasText(size)) {
						size = IAtomsConstants.PARAM_UPLOAD_FILE_SIZE;
					}
					int rate = Integer.valueOf(IAtomsConstants.PARAM_UPLOAD_CONVERSION_RATE);
					size = String.valueOf(Integer.valueOf(size) * rate);
					caseManagerFormDTO.setUploadFileSize(size);
					// 設置案件類別
					caseManagerFormDTO.setCaseCategory(srmCaseHandleInfoDTO.getCaseCategory());
					caseManagerFormDTO.setSrmCaseHandleInfoDTO(srmCaseHandleInfoDTO);
					// 打印log
					LOGGER.debug("initEdit()", "parameters : caseId =" + caseId);
					LOGGER.debug("initEdit()", "parameters : dtid =" + srmCaseHandleInfoDTO.getDtid());
					LOGGER.debug("initEdit()", "parameters : customerId =" + srmCaseHandleInfoDTO.getCustomerId());
					LOGGER.debug("initEdit()", "parameters : contractId =" + srmCaseHandleInfoDTO.getContractId());
					LOGGER.debug("initEdit()", "parameters : companyId =" + srmCaseHandleInfoDTO.getCompanyId());
					LOGGER.debug("initEdit()", "parameters : departmentId =" + srmCaseHandleInfoDTO.getDepartmentId());
					LOGGER.debug("initEdit()", "parameters : caseType =" + srmCaseHandleInfoDTO.getCaseType());
					LOGGER.debug("initEdit()", "parameters : merchantCode =" + srmCaseHandleInfoDTO.getMerchantCode());
					LOGGER.debug("initEdit()", "parameters : merchantHeaderId =" + srmCaseHandleInfoDTO.getMerchantHeaderId());
					LOGGER.debug("initEdit()", "parameters : edcType =" + srmCaseHandleInfoDTO.getEdcType());
					LOGGER.debug("initEdit()", "parameters : peripherals =" + srmCaseHandleInfoDTO.getPeripherals());
					LOGGER.debug("initEdit()", "parameters : peripherals2 =" + srmCaseHandleInfoDTO.getPeripherals2());
					LOGGER.debug("initEdit()", "parameters : peripherals3 =" + srmCaseHandleInfoDTO.getPeripherals3());
					LOGGER.debug("initEdit()", "parameters : ecrConnection =" + srmCaseHandleInfoDTO.getEcrConnection());
					LOGGER.debug("initEdit()", "parameters : softwareVersion =" + srmCaseHandleInfoDTO.getSoftwareVersion());
				}
			}
			Message msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.INIT_PAGE_SUCCESS);
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(caseManagerFormDTO);
			return sessionContext;
		}catch(Exception e){
			LOGGER.error(this.getClass().getName()+".initEdit() is error in Service:"+e, e);
			throw new ServiceException(IAtomsMessageCode.INIT_PAGE_FAILURE, e);
		}
	}
	 /** (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#query(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext queryCase(SessionContext sessionContext) throws ServiceException {
		try {
			long startQueryTime = System.currentTimeMillis();
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
			setUserRoleFlag(formDTO);
			if(logonUser != null){
				// 不是客服\TMS\QA // CR #2951 廠商客服     			//Task #3578 客戶廠商客服 
				if(!formDTO.getIsCustomerService() && !formDTO.getIsVendorService() && !formDTO.getIsCusVendorService() && !formDTO.getIsTMS() && !formDTO.getIsQA() && !formDTO.getIsCyberAgent()){
					// 廠商Agent						  
					if(formDTO.getIsVendorAgent()){
					//	formDTO.setQueryDispatchVendorId(logonUser.getAdmUserDTO().getCompanyId());
						// 存放維護廠商主鍵的集合
						List<String> companyIdList = new ArrayList<String>();
						companyIdList.add(logonUser.getAdmUserDTO().getCompanyId());
						formDTO.setVendorIdList(companyIdList);
						String companyIdListString = null;
						if(!CollectionUtils.isEmpty(companyIdList)){
							int i = 0;
							for(String tempString : companyIdList){
								i++;
								if(i == 1){
									companyIdListString = tempString;
								} else {
									companyIdListString += IAtomsConstants.MARK_SEPARATOR + tempString;
								}
							}
						}
					/*	List<Parameter> departmentList = this.departmentDAO.getDeptList(logonUser.getAdmUserDTO().getCompanyId(), false);*/
						List<Parameter> departmentList = null;
						if(!CollectionUtils.isEmpty(companyIdList)){
							departmentList = this.departmentDAO.getDeptList(companyIdListString, false);
						}
						// 存放部門主鍵的集合
						List<String> deptCodeList = new ArrayList<String>();
						if(!CollectionUtils.isEmpty(departmentList)){
							for(Parameter parameter : departmentList){
								deptCodeList.add((String) parameter.getValue());
							}
						}
						formDTO.setDeptCodeList(deptCodeList);
					}
					// 部門Agent
					if(formDTO.getIsAgent() && !formDTO.getIsVendorAgent()){
						formDTO.setQueryDispatchDeptId(logonUser.getAdmUserDTO().getDeptCode());
					}
					// 工程師
					if(formDTO.getIsEngineer() && !formDTO.getIsAgent() && !formDTO.getIsVendorAgent()){
						formDTO.setQueryDispatchProcessUser(logonUser.getId());
					}
				}
			}
			// Bug #2582 CyberAgent、廠商Agent、TMS、QA 不應該看到未派工的案件 // CR #2951 廠商客服 //Task #3578 客戶廠商客服
			if(!formDTO.getIsCustomerService() && !formDTO.getIsVendorService() && !formDTO.getIsCusVendorService()){
				if(formDTO.getIsTMS() || formDTO.getIsQA() || formDTO.getIsCyberAgent() || formDTO.getIsVendorAgent()){
					formDTO.setIgnoreWaitDispatch(true);
				}
			}
			// 進件日期迄
			if(formDTO.getQueryCreateDateEnd() != null){
				formDTO.setQueryCreateDateEnd(DateTimeUtils.addCalendar(formDTO.getQueryCreateDateEnd(), 0, 0, 1));
			}
			// 應完成日期迄
			if(formDTO.getQueryAcceptableCompleteDateEnd() != null){
				formDTO.setQueryAcceptableCompleteDateEnd(DateTimeUtils.addCalendar(formDTO.getQueryAcceptableCompleteDateEnd(), 0, 0, 1));
			}
			// 完修日期迄
			if(formDTO.getQueryCompleteDateEnd() != null){
				formDTO.setQueryCompleteDateEnd(DateTimeUtils.addCalendar(formDTO.getQueryCompleteDateEnd(), 0, 0, 1));
			}
			// 案件轉移
			BaseParameterItemDefDTO baseParameterItemDefDTO =  this.baseParameterItemDefDAO.getParameterItemByValue(IATOMS_PARAM_TYPE.SYSTEM_LIMIT.getCode(), null, IAtomsConstants.PARAM_CASE_TRANSFER_VALUE);
			int transferMonth = 0;
			if(baseParameterItemDefDTO != null && StringUtils.hasText(baseParameterItemDefDTO.getTextField1())){
				transferMonth = Integer.parseInt(baseParameterItemDefDTO.getTextField1());
			}
			formDTO.setTransferMonth(transferMonth);
			// 計算應查詢的進件日期起迄
			Date currentDate = DateTimeUtils.getCurrentDate();
			Date beforeDate = DateTimeUtils.addCalendar(currentDate, 0, -transferMonth, 0);
			// 查即時設置
			if(formDTO.getIsInstant()){
				currentDate = DateTimeUtils.addCalendar(currentDate, 0, 0, 1);
				// 進件日期起
				if(formDTO.getQueryCreateDateStart() != null){
					if(IAtomsDateTimeUtils.dateSubtractionDay(formDTO.getQueryCreateDateStart(), beforeDate) >= 0){
						formDTO.setQueryCreateDateStart(beforeDate);
					}
				}
				// 進件日期迄
				if(formDTO.getQueryCreateDateEnd() != null){
					if(IAtomsDateTimeUtils.dateSubtractionDay(formDTO.getQueryCreateDateEnd(), currentDate) < 0){
						formDTO.setQueryCreateDateEnd(currentDate);
					}
				}
			}
			long startQueryListTime = System.currentTimeMillis();
		//	List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.listBy(formDTO);
			List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.queryListBy(formDTO);
			long endQueryListTime = System.currentTimeMillis();
			LOGGER.debug("calculate time --> queryCase", "Service queryListTime:" + (endQueryListTime - startQueryListTime));
			
			Map map = new HashMap();
			long startQueryCountTime = System.currentTimeMillis();
			int count = this.srmCaseHandleInfoDAO.count(formDTO);
			long endQueryCountTime = System.currentTimeMillis();
			LOGGER.debug("calculate time --> queryCase", "Service queryCountTime:" + (endQueryCountTime - startQueryCountTime));
			if(count>0 && CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
				formDTO.setPage(formDTO.getPage()-1);
			//	srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.listBy(formDTO);
				srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.queryListBy(formDTO);
			}
			if (!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)) {
				map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, true);
				map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, count);
				map.put(IAtomsConstants.PARAM_QUERY_RESULT_ROWS, srmCaseHandleInfoDTOs);
			} else {
				map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, false);
				map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, 0);
				map.put(IAtomsConstants.PARAM_QUERY_RESULT_ROWS, IAtomsConstants.MARK_EMPTY_STRING);
				map.put(IAtomsConstants.PARAM_ACTION_RESULT_MSG, i18NUtil.getName(IAtomsMessageCode.DATA_NOT_FOUND));
			}
			sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
			long endQueryTime = System.currentTimeMillis();
			LOGGER.debug("calculate time --> queryCase", "Service queryTotalTime:" + (endQueryTime - startQueryTime));
			return sessionContext;
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".queryCase() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".queryCase() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
	}
	
	/** (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#init(cafe.core.context.SessionContext)
	 */
	public SessionContext init(SessionContext sessionContext) throws ServiceException {
		try{
			long startInitTime = System.currentTimeMillis();
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)sessionContext.getRequestParameter();
			// 設置角色屬性
			setUserRoleAttribute(caseManagerFormDTO);
			//判斷角色
			setUserRoleFlag(caseManagerFormDTO);
			// Task #2540  [進件日期]改為非必填，不預設
/*			Date currentDate = DateTimeUtils.getCurrentDate();
			// 前一個月日期
			Date beforeDate = DateTimeUtils.addCalendar(currentDate, 0, -1, 0);
			caseManagerFormDTO.setCurrentDateStr(DateTimeUtils.toString(currentDate, DateTimeUtils.DT_FMT_YYYYMMDD_SLASH));
			caseManagerFormDTO.setPreMonthDateStr(DateTimeUtils.toString(beforeDate, DateTimeUtils.DT_FMT_YYYYMMDD_SLASH));*/
			setUserRoleFlag(caseManagerFormDTO);
			long startSearchTime = System.currentTimeMillis();
			// 案件轉移
			BaseParameterItemDefDTO baseParameterItemDefDTO =  this.baseParameterItemDefDAO.getParameterItemByValue(IATOMS_PARAM_TYPE.SYSTEM_LIMIT.getCode(), null, IAtomsConstants.PARAM_CASE_TRANSFER_VALUE);
			int transferMonth = 0;
			if(baseParameterItemDefDTO != null && StringUtils.hasText(baseParameterItemDefDTO.getTextField1())){
				transferMonth = Integer.parseInt(baseParameterItemDefDTO.getTextField1());
			}
			long endSearchTime = System.currentTimeMillis();
			caseManagerFormDTO.setTransferMonth(transferMonth);
			//初始化生成案件匯入保存臨時文件的文件名
			String fileName = UUID.randomUUID().toString();
			caseManagerFormDTO.setFileName(fileName);
			String size = SystemConfigManager.getProperty(IAtomsConstants.SETTING, IAtomsConstants.UPLOAD_FILE_SIZE);
			if (!StringUtils.hasText(size)) {
				size = IAtomsConstants.PARAM_UPLOAD_FILE_SIZE;
			}
			int rate = Integer.valueOf(IAtomsConstants.PARAM_UPLOAD_CONVERSION_RATE);
			size = String.valueOf(Integer.valueOf(size) * rate);
			caseManagerFormDTO.setUploadFileSize(size);
			// 台新銀行客戶編號
			CompanyDTO companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_TSB_EDC);
			if(companyDTO != null){
				caseManagerFormDTO.setTsbCustomerId(companyDTO.getCompanyId());
			}
			Message msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.INIT_PAGE_SUCCESS);
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(caseManagerFormDTO);
			long endInitTime = System.currentTimeMillis();
			LOGGER.debug("calculate time --> init", "Service searchTime:" + (endSearchTime - startSearchTime));
			LOGGER.debug("calculate time --> init", "Service totalTime:" + (endInitTime - startInitTime));
			return sessionContext;
		}catch(Exception e){
			LOGGER.error(this.getClass().getName()+".init() is error in Service:"+e,e);
			throw new ServiceException(IAtomsMessageCode.INIT_PAGE_FAILURE,e);
		}
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#initDtid(cafe.core.context.SessionContext)
	 */
	public SessionContext initDtid(SessionContext sessionContext) throws ServiceException {
		try{
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)sessionContext.getRequestParameter();
			sessionContext.setReturnMessage(new Message(Message.STATUS.SUCCESS));
			sessionContext.setResponseResult(caseManagerFormDTO);
			return sessionContext;			
		}catch(Exception e){
			LOGGER.error(this.getClass().getName()+".initDtid() is error in Service:"+e,e);
			throw new ServiceException(IAtomsMessageCode.INIT_PAGE_FAILURE,e);
		}
	}
	
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#initDtid(cafe.core.context.SessionContext)
	 */
	public SessionContext initColumnBlock(SessionContext sessionContext) throws ServiceException {
		try{
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)sessionContext.getRequestParameter();
			sessionContext.setReturnMessage(new Message(Message.STATUS.SUCCESS));
			sessionContext.setResponseResult(caseManagerFormDTO);
			return sessionContext;			
		}catch(Exception e){
			LOGGER.error(this.getClass().getName()+".initColumnBlock() is error in Service:"+e,e);
			throw new ServiceException(IAtomsMessageCode.INIT_PAGE_FAILURE,e);
		}
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#queryDTID(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext queryDTID(SessionContext sessionContext) throws ServiceException {
		try {
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)sessionContext.getRequestParameter();
			String customerId = caseManagerFormDTO.getQueryCustomerId();
			String dtid = caseManagerFormDTO.getQueryDtid();
			String merchantCode = caseManagerFormDTO.getQueryMerCode();
			String tId = caseManagerFormDTO.getQueryTID();
			String merchantName = caseManagerFormDTO.getQueryMerchantName();
			String edcNumber = caseManagerFormDTO.getQueryEDCNumber();
			String headerName = caseManagerFormDTO.getQueryHeaderName();
			//排序列名
			String sort = caseManagerFormDTO.getSort();
			String order = caseManagerFormDTO.getOrder();
			//當前頁碼
			Integer currentPage = caseManagerFormDTO.getPage();
			//一頁的條數
			Integer pageSize = caseManagerFormDTO.getRows();
			Map map = new HashMap();
			map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, 0);
			//獲取查詢結果
			List<SrmCaseHandleInfoDTO> DTIDList = this.srmCaseNewHandleInfoDAO.listDtidBy(customerId, merchantCode, tId, merchantName, edcNumber, headerName, dtid, sort, order, currentPage, pageSize);
			map.put(IAtomsConstants.PARAM_QUERY_RESULT_ROWS, DTIDList);
			if (!CollectionUtils.isEmpty(DTIDList)) {
				//查詢總筆數
//				int count = this.srmCaseNewHandleInfoDAO.getCount(customerId, merchantCode, tId, merchantName, edcNumber, headerName, dtid);
				int count = this.srmCaseNewHandleInfoDAO.getCount(customerId, merchantCode, tId, merchantName, edcNumber, headerName, dtid, true);
				count += this.srmCaseNewHandleInfoDAO.getCount(customerId, merchantCode, tId, merchantName, edcNumber, headerName, dtid, false);
				//總筆數放入formDTO
				//caseManagerFormDTO.getPageNavigation().setRowCount(count);
				map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, count);
				sessionContext.setReturnMessage(new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.QUERY_SUCCESS));
			}else{
				sessionContext.setReturnMessage(new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.DATA_NOT_FOUND));
			}
			sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
		//	sessionContext.setResponseResult(caseManagerFormDTO);			
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".list() Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, new String []{this.getMyName()}, e);
		}
		return sessionContext;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getCaseMessageByCaseId(cafe.core.context.MultiParameterInquiryContext)
	 */
	public SrmCaseHandleInfoDTO getCaseMessageByCaseId(MultiParameterInquiryContext param) throws ServiceException {
		SrmCaseHandleInfoDTO caseHandleInfoDTO = null;
		try{
			String dtid = (String) param.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.DTID.getValue());
			// 客戶
			String customerId = (String) param.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CUSTOMER_ID.getValue());
			String isNewFlag = (String) param.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.IS_NEW_CASE.getValue());
			if (StringUtils.hasText(dtid)) {
			//	caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTOById(dtid);
				// CR #2551 查詢最新資料檔是否有該dtid // 改為抓處理中  如果處理中全部結案（結案，協調完成，作廢，待派工都不算） 抓最新資料檔 2018/01/04 Bug #3055
				boolean isHave = this.srmCaseNewHandleInfoDAO.isInCase(dtid, customerId);
				if (StringUtils.hasText(isNewFlag) && IAtomsConstants.PARAM_YES.equals(isNewFlag)) {
					// 查詢案件資料
					caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(dtid, false, customerId);
				} else {
					// 查詢案件資料
					caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(dtid, isHave, customerId);
				}
				
				if (caseHandleInfoDTO != null) {
				//	List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.listTransactionParameterDTOsByDtid(dtid, isNewHave);
					// CR #2551  查詢交易參數Bug #3055
					List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.getTransactionParameterDTOsByDtid(dtid, isHave);
					caseHandleInfoDTO.setCaseNewTransactionParameterDTOs(caseNewTransactionParameterDTOs);
					//核檢當前dtid是否有未結案的案件
					List<SrmCaseHandleInfoDTO> caseHandleInfoDTOs = this.srmCaseHandleInfoDAO.listCaseIdByDtid(dtid);
					if (!CollectionUtils.isEmpty(caseHandleInfoDTOs)) {
						caseHandleInfoDTO.setCaseHandleInfoDTOs(caseHandleInfoDTOs);
					}
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".getCaseMessageByCaseId() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getCaseMessageByCaseId() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return caseHandleInfoDTO;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getCaseManagerListByCaseId(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext getCaseManagerListByCaseId(
			SessionContext sessionContext) throws ServiceException {
		List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOList = null;
		try {
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)sessionContext.getRequestParameter();
			// 是否為列印
			boolean isExport = caseManagerFormDTO.getIsExport();
			caseManagerFormDTO.setQueryCaseId(caseManagerFormDTO.getCaseId());
			caseManagerFormDTO.setIsExport(true);
			// 匯出交易參數 只需查詢dtid
			if(!isExport){
				caseManagerFormDTO.setQueryColumnMap(new HashMap<String, String>());
			}
		//	srmCaseHandleInfoDTOList = this.srmCaseHandleInfoDAO.listBy(caseManagerFormDTO);
			srmCaseHandleInfoDTOList = this.srmCaseHandleInfoDAO.queryListBy(caseManagerFormDTO);
			// 匯出交易參數
			if(!isExport){
				// 交易參數交易項配置檔
				String versionDate = DateTimeUtils.toString(DateTimeUtils.getCurrentTimestamp(), DateTimeUtils.DT_FMT_YYYYMMDD_DASH);
				List<SrmTransactionParameterItemDTO> srmTransactionParameterItemDTOs = srmTransactionParameterItemDAO.listby(versionDate);
				if (!CollectionUtils.isEmpty(srmCaseHandleInfoDTOList)) {
					for(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOList){
						srmCaseHandleInfoDTO.setSrmTransactionParameterItemDTOs(srmTransactionParameterItemDTOs);
					}
				}
			} else {
				// Task #3081 列印顯示應完修時間
				if (!CollectionUtils.isEmpty(srmCaseHandleInfoDTOList)) {
					for(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOList){
						srmCaseHandleInfoDTO.setExpectedCompletionDate(srmCaseHandleInfoDTO.getAcceptableFinishDate());
					}
				}
			}
			caseManagerFormDTO.setSrmCaseHandleInfoDTOs(srmCaseHandleInfoDTOList);
			sessionContext.setResponseResult(caseManagerFormDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".getCaseManagerListByCaseId() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getCaseManagerListByCaseId() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return sessionContext;
	}
	
	/**  
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getCaseTransactionParameterByCaseId(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext getCaseTransactionParameterByCaseId(SessionContext sessionContext) throws ServiceException {
		try {
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)sessionContext.getRequestParameter();
			String caseId = caseManagerFormDTO.getCaseId();
			//String[] caseId = caseIds.split(",");
			// 得到原案件交易參數的信息
			// isHistory標志
			String isHistory = null;
			if(caseManagerFormDTO.getSrmCaseHandleInfoDTOs().size() > 0) {
				for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : caseManagerFormDTO.getSrmCaseHandleInfoDTOs()) {
					if(srmCaseHandleInfoDTO.getCaseId().equals(caseId)) {
						isHistory = srmCaseHandleInfoDTO.getIsHistory();
						break;
					}
				}
			}
			List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseId, isHistory);
			caseManagerFormDTO.setSrmCaseTransactionParameterDTOs(srmCaseTransactionParameterDTOs);
			sessionContext.setResponseResult(caseManagerFormDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".getCaseTransactionParameterByCaseId() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getCaseTransactionParameterByCaseId() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return sessionContext;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getCaseTransactionDTOByCaseId(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext getCaseTransactionDTOByCaseId(SessionContext sessionContext) throws ServiceException {
		try {
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)sessionContext.getRequestParameter();
			String caseId = caseManagerFormDTO.getCaseId();
			//String[] caseId = caseIds.split(",");
			// 得到原案件交易參數的信息
			// isHistory標志位
			String isHistory = null;
			if(caseManagerFormDTO.getSrmCaseHandleInfoDTOs().size() > 0) {
				isHistory = caseManagerFormDTO.getSrmCaseHandleInfoDTOs().get(0).getIsHistory();
			}
			List<SrmCaseTransactionDTO> srmCaseTransactionDTOList = this.srmCaseTransactionDAO.listByCaseId(caseId, isHistory, null, null);
			caseManagerFormDTO.setSrmCaseTransactionDTOList(srmCaseTransactionDTOList);
			sessionContext.setResponseResult(caseManagerFormDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".getCaseTransactionParameterByCaseId() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getCaseTransactionParameterByCaseId() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return sessionContext;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getTransactionParameterItemList(cafe.core.context.MultiParameterInquiryContext)
	 */
	public List<SrmTransactionParameterItemDTO> getTransactionParameterItemList(MultiParameterInquiryContext inquiryContext) throws ServiceException {
		List<SrmTransactionParameterItemDTO> result;
		try{
			String versionDate = (String) inquiryContext.getParameter(SrmTransactionParameterItemDTO.ATTRIBUTE.EFFECTIVE_DATE.getValue());
			result = srmTransactionParameterItemDAO.listby(versionDate);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".getTransactionParameterItemList() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getTransactionParameterItemList() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return result;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getTransactionParameterItemList(cafe.core.context.SessionContext)
	 */
/*	public SessionContext getTransactionParameterItemList(SessionContext sessionContext) throws ServiceException {
		try {
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)sessionContext.getRequestParameter();
			List<SrmTransactionParameterItemDTO> result = srmTransactionParameterItemDAO.listby();
			caseManagerFormDTO.setSrmTransactionParameterItemDTOs(result);
			sessionContext.setResponseResult(caseManagerFormDTO);
		} catch (DataAccessException e) {
			LOGGER.error(".getTransactionParameterItemList() DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(".getTransactionParameterItemList() Service Exception--->", e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return sessionContext;
	}*/
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getEditFieldsGroupbyTransactionType(cafe.core.context.MultiParameterInquiryContext)
	 */
	@Override
	public Map<String, List<String>> getEditFieldsGroupbyTransactionType(MultiParameterInquiryContext inquiryContext)
			throws ServiceException {
		Map<String, List<String>> result;
		try{
			String versionDate = (String) inquiryContext.getParameter(SrmTransactionParameterItemDTO.ATTRIBUTE.EFFECTIVE_DATE.getValue());
			List<SrmTransactionParameterDetailDTO> parameterDetailDTOs = this.srmTransactionParameterDetailDAO.listby(null, null, IAtomsConstants.YES, versionDate);
			result = new HashMap<String, List<String>>();
			String prevType = null;
			String currentType = null;
			int length = parameterDetailDTOs.size();
			SrmTransactionParameterDetailDTO srmTransactionParameterDetailDTO = null;
			List<String> editFields = null;
			for (int i = 0; i < length; i++) {
				srmTransactionParameterDetailDTO = parameterDetailDTOs.get(i);
				currentType = srmTransactionParameterDetailDTO.getTransactionType();
				if (i == 0) {
					prevType = currentType;
					editFields = new ArrayList<String>();
					//editFields.add(srmTransactionParameterDetailDTO.getParamterItemCode());
				}
				else if (!currentType.equals(prevType)) {
					result.put(prevType, editFields);
					prevType = srmTransactionParameterDetailDTO.getTransactionType();
					editFields = new ArrayList<String>();					
				}
				editFields.add(srmTransactionParameterDetailDTO.getParamterItemCode());
				if (i == length - 1) {
					result.put(prevType, editFields);
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".getTransactionParameterItemList() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getTransactionParameterItemList() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return result;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getRepeatSupportFun(cafe.core.context.MultiParameterInquiryContext)
	 */
	public String getRepeatSupportFun(MultiParameterInquiryContext inquiryContext) throws ServiceException{
		// 重複的設備支援功能名稱
		String repeatSupportFun = IAtomsConstants.MARK_EMPTY_STRING;
		try {
			// 內建功能
			String builtInFeature = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.BUILT_IN_FEATURE.getValue());
			// 周邊設備功能1
			String peripheralsFunction = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION.getValue());
			// 周邊設備功能2
			String peripheralsFunction2 = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION2.getValue());
			// 周邊設備功能3
			String peripheralsFunction3 = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION3.getValue());
			// 存放重複支援功能名稱的集合
			List<String> repeatNameList = new ArrayList<String>();
			// 計數器
			int count = 0;
			// 所有支援功能的集合
			List<Parameter> supportFunList = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.SUPPORTED_FUNCTION.getCode(), null);
			// 遍歷所有支援功能
			for(Parameter parameter : supportFunList){
				count = 0;
				// 如果有內建功能 且內建功能選有當前支援功能
				if(StringUtils.hasText(builtInFeature) && builtInFeature.contains((String) parameter.getValue())){
					count ++;
				}
				// 如果有周邊設備功能1 且周邊設備功能1選有當前支援功能
				if(StringUtils.hasText(peripheralsFunction) && peripheralsFunction.contains((String) parameter.getValue())){
					count ++;
				}
				// 如果有周邊設備功能2 且周邊設備功能2選有當前支援功能
				if(StringUtils.hasText(peripheralsFunction2) && peripheralsFunction2.contains((String) parameter.getValue())){
					count ++;
				}
				// 如果有周邊設備功能3 且周邊設備功能3選有當前支援功能
				if(StringUtils.hasText(peripheralsFunction3) && peripheralsFunction3.contains((String) parameter.getValue())){
					count ++;
				}
				// 如果至少兩項包含此支援功能則添加到重複名稱列表裡面
				if(count >= 2){
					repeatNameList.add(parameter.getName());
				}
			}
			// 集合不為空，集合內容轉為字符串
			if(!CollectionUtils.isEmpty(repeatNameList)){
				StringBuilder sb = new StringBuilder();  
				for (int i = 0; i < repeatNameList.size(); i++) {  
					sb.append(repeatNameList.get(i)).append(IAtomsConstants.MARK_SEPARATOR);  
				}
				if(StringUtils.hasText(sb)){
					// 返回String類型的支援功能名稱
					repeatSupportFun = sb.toString().substring(0,sb.toString().length()-1);
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".getRepeatSupportFun() DataAccess Exception : " + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getRepeatSupportFun() Exception : " + e, e);
			throw new ServiceException(IAtomsMessageCode.INIT_PAGE_FAILURE, e);
		}
		return repeatSupportFun;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#checkDtidNumber(cafe.core.context.MultiParameterInquiryContext)
	 */
	public Map<String, Object> checkDtidNumber(MultiParameterInquiryContext inquiryContext) throws ServiceException {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = false;
		String customerName = null;
		String edcTypeName = null;
		try {
			// 複製案件筆數
			String caseNumber = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_NUMBER.getValue());
			// 客戶編號
			String customerId = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CUSTOMER_ID.getValue());
			// 刷卡機型
			String edcType = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.EDC_TYPE.getValue());
			BimCompany company = (BimCompany) this.companyDAO.findByPrimaryKey(BimCompany.class, customerId);
			customerName = company.getShortName();
			
			DmmAssetType assetType = this.assetTypeDAO.findByPrimaryKey(DmmAssetType.class, edcType);
			edcTypeName = assetType.getName();
			// 是否是單筆
			Boolean isSingle = (Boolean) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.IS_SINGLE.getValue());
			if(StringUtils.hasText(company.getDtidType()) && IAtomsConstants.PARAM_IATOMS_DTID_TYPE_SAME.equals(company.getDtidType())){
				result = true;
			} else if(StringUtils.hasText(company.getDtidType()) && IAtomsConstants.PARAM_IATOMS_DTID_TYPE_AUTO.equals(company.getDtidType())){
				// 拿到該客戶該機型下所有dtid（按照號段大小進行排序）
				List<PvmDtidDefDTO> pvmDtidDefDTOs = this.dtidDefDAO.listBy(customerId, edcType, null, null, null, null, 0, 0, false);
				// Task #2653 複製功能，要包含建案的那一筆
				// 複製案件筆數
				int caseNum = 0;
				if(StringUtils.hasText(caseNumber)){
					caseNum = Integer.parseInt(caseNumber);
					if(1 == caseNum){
						isSingle = true;
					} else {
						caseNum = caseNum --;
					}
				}
				PvmDtidDefDTO tempPvmDtidDefDTO = null;
				// 復制多筆
				if(isSingle !=null && !isSingle){
					if(!CollectionUtils.isEmpty(pvmDtidDefDTOs)){
						// Task #2653 複製功能，要包含建案的那一筆
						/*// 複製案件筆數
						int caseNum = 0;*/
/*						if(StringUtils.hasText(caseNumber)){
							caseNum = Integer.parseInt(caseNumber);
						}*/
						// 起始標記
						boolean isStart = false;
						// 起始標記
						int startNum = 0;
						// 是否有當前dtid號碼
						boolean hasCurrentNum = false;
						for(int i=0; i < pvmDtidDefDTOs.size(); i++){
							if(StringUtils.hasText(pvmDtidDefDTOs.get(i).getCurrentNumber())){
								hasCurrentNum = true;
								if(Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) > Integer.parseInt(pvmDtidDefDTOs.get(i).getCurrentNumber())){
									startNum = i;
									// 該號段可以作爲起始
									isStart = true;
									break;
								} else if(Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) == Integer.parseInt(pvmDtidDefDTOs.get(i).getCurrentNumber())){
									startNum = i;
								}
							}
						}
						// 可用dtid總數
						int dtidTotal = 0;
						// 集合均無當前dtid號碼，認爲所有號段均未啓用
						if(!hasCurrentNum){
							for(int i=0; i < pvmDtidDefDTOs.size(); i++){
								// dtid起訖值之差
								dtidTotal += Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) - Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidStart()) + 1;
								if(dtidTotal >= (caseNum + 1)){
									break;
								}
							}
						} else {
							for(int i = startNum; i < pvmDtidDefDTOs.size(); i++){
								if(!isStart){
									isStart = true;
									// 從下一號段作爲起始
									continue;
								}
								// dtid起訖值之差
								if(i == startNum){
									// 可用字段爲截止號段-當前號段
									dtidTotal += Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) - Integer.parseInt(pvmDtidDefDTOs.get(i).getCurrentNumber());
								} else {
									// 可用字段爲截止號段-起始號段
									dtidTotal += Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) - Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidStart()) + 1;
								}
								if(dtidTotal >= (caseNum + 1)){
									break;
								}
							}
						}
						// 可用dtid號碼數大於案件筆數
						if(dtidTotal >= (caseNum + 1)){
							result = true;
						}
					} else {
						result = false;
					}
				// 單筆
				} else {
					// 判斷最後一個號段是否設定當前號碼，有設定則判斷當前號碼是否小與截止號碼，無則驗證通過
					if(!CollectionUtils.isEmpty(pvmDtidDefDTOs)){
						// 拿到列表最後一個對象
						tempPvmDtidDefDTO = pvmDtidDefDTOs.get(pvmDtidDefDTOs.size() -1);
						// 當前對象是否有當前dtid號碼
						if(StringUtils.hasText(tempPvmDtidDefDTO.getCurrentNumber())){
							// dtid截止號碼大於當前dtid號碼
							if(Integer.parseInt(tempPvmDtidDefDTO.getDtidEnd()) > Integer.parseInt(tempPvmDtidDefDTO.getCurrentNumber())){
								result = true;
							}
						} else {
							result = true;
						}
					}
				}
			} else {
				result = false;
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".checkDtidNumber() DataAccess Exception : " + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".checkDtidNumber() Exception : " + e, e);
			throw new ServiceException(IAtomsMessageCode.INIT_PAGE_FAILURE, e);
		}
		map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, result);
		map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CUSTOMER_NAME.getValue(), customerName);
		map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.EDC_TYPE_NAME.getValue(), edcTypeName);
		return map;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#createCase(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext createCase(SessionContext sessionContext) throws ServiceException {
		Message msg = null;
		Transformer transformer = new SimpleDtoDmoTransformer();
		String caseId = null;
		try {
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)sessionContext.getRequestParameter();
			IAtomsLogonUser logonUser = (IAtomsLogonUser) caseManagerFormDTO.getLogonUser();
			if (logonUser != null) {
				//案件處理信息
				SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = caseManagerFormDTO.getSrmCaseHandleInfoDTO();
				// 打印log
				LOGGER.debug("createCase() dto-->", "parameters : caseId =" + srmCaseHandleInfoDTO.getCaseId());
				LOGGER.debug("createCase() dto-->", "parameters : dtid =" + srmCaseHandleInfoDTO.getDtid());
				LOGGER.debug("createCase() dto-->", "parameters : customerId =" + srmCaseHandleInfoDTO.getCustomerId());
				LOGGER.debug("createCase() dto-->", "parameters : contractId =" + srmCaseHandleInfoDTO.getContractId());
				LOGGER.debug("createCase() dto-->", "parameters : companyId =" + srmCaseHandleInfoDTO.getCompanyId());
				LOGGER.debug("createCase() dto-->", "parameters : departmentId =" + srmCaseHandleInfoDTO.getDepartmentId());
				LOGGER.debug("createCase() dto-->", "parameters : caseType =" + srmCaseHandleInfoDTO.getCaseType());
				LOGGER.debug("createCase() dto-->", "parameters : merchantCode =" + srmCaseHandleInfoDTO.getMerchantCode());
				LOGGER.debug("createCase() dto-->", "parameters : merchantHeaderId =" + srmCaseHandleInfoDTO.getMerchantHeaderId());
				LOGGER.debug("createCase() dto-->", "parameters : edcType =" + srmCaseHandleInfoDTO.getEdcType());
				LOGGER.debug("createCase() dto-->", "parameters : peripherals =" + srmCaseHandleInfoDTO.getPeripherals());
				LOGGER.debug("createCase() dto-->", "parameters : peripherals2 =" + srmCaseHandleInfoDTO.getPeripherals2());
				LOGGER.debug("createCase() dto-->", "parameters : peripherals3 =" + srmCaseHandleInfoDTO.getPeripherals3());
				LOGGER.debug("createCase() dto-->", "parameters : ecrConnection =" + srmCaseHandleInfoDTO.getEcrConnection());
				LOGGER.debug("createCase() dto-->", "parameters : softwareVersion =" + srmCaseHandleInfoDTO.getSoftwareVersion());
				if(StringUtils.hasText(caseManagerFormDTO.getCaseCategory())){
					srmCaseHandleInfoDTO.setCaseCategory(caseManagerFormDTO.getCaseCategory());
				}
				caseId = srmCaseHandleInfoDTO.getCaseId();
				if (IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(caseManagerFormDTO.getCaseCategory())) {
					msg = saveOtherCase(caseManagerFormDTO);
				} else {
					if (StringUtils.hasText(caseId)) {
						//交易參數信息
						List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = caseManagerFormDTO.getSrmCaseTransactionParameterDTOs();
						String caseType = null;
						
						// 只改變需求單號的標志位
						boolean isOnlyRequirementNo = false;
						// 結案、立即結案 // Task #2682 進入待結案審查，就只能改 需求單號
						if(IAtomsConstants.CASE_STATUS.IMMEDIATE_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
								|| IAtomsConstants.CASE_STATUS.CLOSED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
								|| IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
							isOnlyRequirementNo = true;
						}
						// 結案、立即結案保存
						if(isOnlyRequirementNo){
							// 更新標志位
							boolean isUpdate = false;
							// 修改歷史
							if(StringUtils.hasText(srmCaseHandleInfoDTO.getIsHistory()) && IAtomsConstants.YES.equals(srmCaseHandleInfoDTO.getIsHistory())){
								SrmHistoryCaseHandleInfo srmHistoryCaseHandleInfo = this.historyCaseHandleInfoDAO.findByPrimaryKey(SrmHistoryCaseHandleInfo.class, caseId);
								if(srmHistoryCaseHandleInfo != null){
									// 當前有需求單號
									if(StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo())){
										// 之前有需求單號
										if(StringUtils.hasText(srmHistoryCaseHandleInfo.getRequirementNo())){
											if(!srmCaseHandleInfoDTO.getRequirementNo().equals(srmHistoryCaseHandleInfo.getRequirementNo())){
												isUpdate = true;
											}
										} else {
											isUpdate = true;
										}
									// 當前無需求單號
									} else {
										// 之前有需求單號
										if(StringUtils.hasText(srmHistoryCaseHandleInfo.getRequirementNo())){
											isUpdate = true;
										}
									}
									// 實際完修時間
									/*Boolean isTrue = Boolean.TRUE;
									if((srmCaseHandleInfoDTO.getCompleteDate() != null) || (srmHistoryCaseHandleInfo.getCompleteDate() != null)){
										if (srmCaseHandleInfoDTO.getCompleteDate() != null && srmHistoryCaseHandleInfo.getCompleteDate() != null) {
											if((srmCaseHandleInfoDTO.getCompleteDate().getTime() != srmHistoryCaseHandleInfo.getCompleteDate().getTime())){
												isTrue = Boolean.FALSE;
											}
										} else {
											isTrue = Boolean.FALSE;
										}
									}*/
									String updateItem = null;
									StringBuilder tempBuilder = new StringBuilder();
									// 更新需求單號
									if(isUpdate){
										// 需求單號
										tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
										tempBuilder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO));
										tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
										tempBuilder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, new String[]{srmHistoryCaseHandleInfo.getRequirementNo(), srmCaseHandleInfoDTO.getRequirementNo()}, null));
										tempBuilder.append(IAtomsConstants.MARK_SEMICOLON);
										tempBuilder.append(IAtomsConstants.MARK_WRAP);
									}
									// 實際完修時間
									/*if(!isTrue){
										// 更新設備庫存信息
										this.dmmRepositoryDAO.updateRepositoryByCaseId(caseId, srmCaseHandleInfoDTO.getCompleteDate(), IAtomsConstants.YES);
										
										tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
										tempBuilder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPLETE_DATE));
										tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
										tempBuilder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
												new String[]{srmHistoryCaseHandleInfo.getCompleteDate() == null ? 
														IAtomsConstants.MARK_EMPTY_STRING : (DateTimeUtils.toString(srmHistoryCaseHandleInfo.getCompleteDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH)),
														srmCaseHandleInfoDTO.getCompleteDate() == null ? 
																IAtomsConstants.MARK_EMPTY_STRING : (DateTimeUtils.toString(srmCaseHandleInfoDTO.getCompleteDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH))}, null));
										tempBuilder.append(IAtomsConstants.MARK_SEMICOLON);
										
										// Task #3228 更新CUP啟用日、CUP移除日
										if(srmHistoryCaseHandleInfo.getCompleteDate() != null && srmHistoryCaseHandleInfo.getCupEnableDate() != null
												&& srmHistoryCaseHandleInfo.getCompleteDate().getTime() == srmHistoryCaseHandleInfo.getCupEnableDate().getTime()){
											srmHistoryCaseHandleInfo.setCupEnableDate(srmCaseHandleInfoDTO.getCompleteDate());
										}
										if(srmHistoryCaseHandleInfo.getCompleteDate() != null && srmHistoryCaseHandleInfo.getCupDisableDate() != null
												&& srmHistoryCaseHandleInfo.getCompleteDate().getTime() == srmHistoryCaseHandleInfo.getCupDisableDate().getTime()){
											srmHistoryCaseHandleInfo.setCupDisableDate(srmCaseHandleInfoDTO.getCompleteDate());
										}
										// Task #3228 更新裝機日期、拆機日期
										if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmHistoryCaseHandleInfo.getCaseCategory())){
											if(srmHistoryCaseHandleInfo.getCompleteDate() != null && srmHistoryCaseHandleInfo.getInstalledDate() != null
													&& srmHistoryCaseHandleInfo.getCompleteDate().getTime() == srmHistoryCaseHandleInfo.getInstalledDate().getTime()){
												srmHistoryCaseHandleInfo.setInstalledDate(srmCaseHandleInfoDTO.getCompleteDate());
											}
										}
										if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(srmHistoryCaseHandleInfo.getCaseCategory())){
											if(srmHistoryCaseHandleInfo.getCompleteDate() != null && srmHistoryCaseHandleInfo.getUninstalledDate() != null
													&& srmHistoryCaseHandleInfo.getCompleteDate().getTime() == srmHistoryCaseHandleInfo.getUninstalledDate().getTime()){
												srmHistoryCaseHandleInfo.setUninstalledDate(srmCaseHandleInfoDTO.getCompleteDate());
											}
										}
									}*/
									updateItem = tempBuilder.toString();
									
									// Task #3227 案件實際完修時間更新
									srmHistoryCaseHandleInfo.setCompleteDate(srmCaseHandleInfoDTO.getCompleteDate());
									// 存歷史案件處理
									srmHistoryCaseHandleInfo.setRequirementNo(srmCaseHandleInfoDTO.getRequirementNo());
									srmHistoryCaseHandleInfo.setUpdatedById(logonUser.getId());
									srmHistoryCaseHandleInfo.setUpdatedByName(logonUser.getName());
									srmHistoryCaseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
									//CR #2869 新增三個欄位 2017/11/22
									srmHistoryCaseHandleInfo.setThirdDescription(srmHistoryCaseHandleInfo.getSecondDescription());
									srmHistoryCaseHandleInfo.setSecondDescription(srmHistoryCaseHandleInfo.getFirstDescription());
									srmHistoryCaseHandleInfo.setFirstDescription(updateItem);
									this.historyCaseHandleInfoDAO.update(srmHistoryCaseHandleInfo);
									
									String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_HISTORY_CASE_TRANSACTION);
									// 存歷史案件歷程
									SrmHistoryCaseTransaction srmHistoryCaseTransaction = new SrmHistoryCaseTransaction();
									srmHistoryCaseTransaction.setTransactionId(transactionId);
									srmHistoryCaseTransaction.setCaseId(caseId);
									srmHistoryCaseTransaction.setCreatedById(logonUser.getId());
									srmHistoryCaseTransaction.setCreatedByName(logonUser.getName());
									srmHistoryCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
									srmHistoryCaseTransaction.setCaseStatus(srmHistoryCaseHandleInfo.getCaseStatus());
									srmHistoryCaseTransaction.setActionId(IAtomsConstants.ACTION_SAVE);
									srmHistoryCaseTransaction.setDealById(logonUser.getId());
									srmHistoryCaseTransaction.setDealByName(logonUser.getName());
									srmHistoryCaseTransaction.setDealDate(srmHistoryCaseTransaction.getCreatedDate());
									srmHistoryCaseTransaction.setUpdateItem(updateItem);
									this.srmHistoryCaseTransactionDAO.insert(srmHistoryCaseTransaction);
									msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.SAVE_CASE_SUCCESS, new String[]{caseId});
								} else {
									LOGGER.error("CaseManagerService --> createCase() --> ", "save case error!!!", "srmHistoryCaseHandleInfo is null");
									msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.SAVE_FAILURE, new String[]{this.getMyName()});
								}
							// 改處理中的
							} else {
								SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseId);
								if(srmCaseHandleInfo != null){
									// 當前有需求單號
									if(StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo())){
										// 之前有需求單號
										if(StringUtils.hasText(srmCaseHandleInfo.getRequirementNo())){
											if(!srmCaseHandleInfoDTO.getRequirementNo().equals(srmCaseHandleInfo.getRequirementNo())){
												isUpdate = true;
											}
										} else {
											isUpdate = true;
										}
									// 當前無需求單號
									} else {
										// 之前有需求單號
										if(StringUtils.hasText(srmCaseHandleInfo.getRequirementNo())){
											isUpdate = true;
										}
									}
									// 實際完修時間
									/*Boolean isTrue = Boolean.TRUE;
									if((srmCaseHandleInfoDTO.getCompleteDate() != null) || (srmCaseHandleInfo.getCompleteDate() != null)){
										if (srmCaseHandleInfoDTO.getCompleteDate() != null && srmCaseHandleInfo.getCompleteDate() != null) {
											if((srmCaseHandleInfoDTO.getCompleteDate().getTime() != srmCaseHandleInfo.getCompleteDate().getTime())){
												isTrue = Boolean.FALSE;
											}
										} else {
											isTrue = Boolean.FALSE;
										}
									}*/
									String updateItem = null;
									StringBuilder tempBuilder = new StringBuilder();
									boolean changeRequirementNo = false; 
									//Task #3584 
									CompanyDTO bccCompanyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_BCC);
									// 更新需求單號
									if(isUpdate){
										//Task #3584 裝幾件 需求單號改變 或者 宣揚 ei 裝機需求單號 改變
										if((IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())
												&&(bccCompanyDTO == null 
														|| (bccCompanyDTO != null 
																&& !bccCompanyDTO.getCompanyId().equals(srmCaseHandleInfo.getCustomerId()))) )
													|| (bccCompanyDTO != null 
																&& bccCompanyDTO.getCompanyId().equals(srmCaseHandleInfo.getCustomerId())
																&& StringUtils.hasText(srmCaseHandleInfo.getRequirementNo())
																&& (srmCaseHandleInfo.getRequirementNo().startsWith("ei")
																		|| srmCaseHandleInfo.getRequirementNo().startsWith("EI")))
													|| (bccCompanyDTO != null 
																&& bccCompanyDTO.getCompanyId().equals(srmCaseHandleInfo.getCustomerId())
																&& StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo())
																&& (srmCaseHandleInfoDTO.getRequirementNo().startsWith("ei")
																		|| srmCaseHandleInfoDTO.getRequirementNo().startsWith("EI")))){
											changeRequirementNo = true;
										}
										// 需求單號
										tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
										tempBuilder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO));
										tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
										tempBuilder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, new String[]{srmCaseHandleInfo.getRequirementNo(), srmCaseHandleInfoDTO.getRequirementNo()}, null));
										tempBuilder.append(IAtomsConstants.MARK_SEMICOLON);
										tempBuilder.append(IAtomsConstants.MARK_WRAP);
									}
									// 實際完修時間
									/*if(!isTrue){
										// 更新設備庫存信息
										this.dmmRepositoryDAO.updateRepositoryByCaseId(caseId, srmCaseHandleInfoDTO.getCompleteDate(), IAtomsConstants.NO);
										
										tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
										tempBuilder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPLETE_DATE));
										tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
										tempBuilder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
												new String[]{srmCaseHandleInfo.getCompleteDate() == null ? 
														IAtomsConstants.MARK_EMPTY_STRING : (DateTimeUtils.toString(srmCaseHandleInfo.getCompleteDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH)),
														srmCaseHandleInfoDTO.getCompleteDate() == null ? 
																IAtomsConstants.MARK_EMPTY_STRING : (DateTimeUtils.toString(srmCaseHandleInfoDTO.getCompleteDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH))}, null));
										tempBuilder.append(IAtomsConstants.MARK_SEMICOLON);
										
										// Task #3228 更新CUP啟用日、CUP移除日
										if(srmCaseHandleInfo.getCompleteDate() != null && srmCaseHandleInfo.getCupEnableDate() != null
												&& srmCaseHandleInfo.getCompleteDate().getTime() == srmCaseHandleInfo.getCupEnableDate().getTime()){
											srmCaseHandleInfo.setCupEnableDate(srmCaseHandleInfoDTO.getCompleteDate());
										}
										if(srmCaseHandleInfo.getCompleteDate() != null && srmCaseHandleInfo.getCupDisableDate() != null
												&& srmCaseHandleInfo.getCompleteDate().getTime() == srmCaseHandleInfo.getCupDisableDate().getTime()){
											srmCaseHandleInfo.setCupDisableDate(srmCaseHandleInfoDTO.getCompleteDate());
										}
										// Task #3228 更新裝機日期、拆機日期
										if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())){
											if(srmCaseHandleInfo.getCompleteDate() != null && srmCaseHandleInfo.getInstalledDate() != null
													&& srmCaseHandleInfo.getCompleteDate().getTime() == srmCaseHandleInfo.getInstalledDate().getTime()){
												srmCaseHandleInfo.setInstalledDate(srmCaseHandleInfoDTO.getCompleteDate());
											}
										}
										if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())){
											if(srmCaseHandleInfo.getCompleteDate() != null && srmCaseHandleInfo.getUninstalledDate() != null
													&& srmCaseHandleInfo.getCompleteDate().getTime() == srmCaseHandleInfo.getUninstalledDate().getTime()){
												srmCaseHandleInfo.setUninstalledDate(srmCaseHandleInfoDTO.getCompleteDate());
											}
										}
									}*/
									updateItem = tempBuilder.toString();
									
									// Task #3227 案件實際完修時間更新
									//srmCaseHandleInfo.setCompleteDate(srmCaseHandleInfoDTO.getCompleteDate());
									// 存案件處理
									srmCaseHandleInfo.setRequirementNo(srmCaseHandleInfoDTO.getRequirementNo());
									srmCaseHandleInfo.setUpdatedById(logonUser.getId());
									srmCaseHandleInfo.setUpdatedByName(logonUser.getName());
									srmCaseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
									//CR #2869 新增三個欄位 2017/11/22
									srmCaseHandleInfo.setThirdDescription(srmCaseHandleInfo.getSecondDescription());
									srmCaseHandleInfo.setSecondDescription(srmCaseHandleInfo.getFirstDescription());
									srmCaseHandleInfo.setFirstDescription(updateItem);
									
									String caseCategory = IAtomsConstants.MARK_EMPTY_STRING;
									//Task #3584  如果是宣揚
									if (bccCompanyDTO != null 
												&& StringUtils.hasText(bccCompanyDTO.getCompanyId()) 
												&& bccCompanyDTO.getCompanyId().equals(srmCaseHandleInfo.getCustomerId())){
										if(StringUtils.hasText(srmCaseHandleInfo.getRequirementNo()) 
													&& srmCaseHandleInfo.getRequirementNo().length() > 1) {
											caseCategory = srmCaseHandleInfo.getRequirementNo().substring(0, 2);
											if (caseCategory.equalsIgnoreCase("EI")) {
												//需求單號 如果是 裝機 ei開頭 寫入InstallCaseId
												srmCaseHandleInfo.setInstallCaseId(srmCaseHandleInfo.getRequirementNo());
											} else if ((!caseCategory.equalsIgnoreCase("EI"))
																&& (!caseCategory.equalsIgnoreCase("EC"))
																&& (!caseCategory.equalsIgnoreCase("EM"))
																&& (!caseCategory.equalsIgnoreCase("EU"))
																&& (!caseCategory.equalsIgnoreCase("EA"))
																&& (!caseCategory.equalsIgnoreCase("ER"))) {
												//需求單號 如果不是 ei ec em eu ea er 開頭
												srmCaseHandleInfo.setInstallCaseId(null);
											} else {
												String installCaseId = this.srmCaseHandleInfoDAO.getInstallCaseId(srmCaseHandleInfo.getDtid());
												if (StringUtils.hasText(installCaseId)) {
													//需求單號 如果 裝機 ei開頭 的案件已存在，將其InstallCaseId寫入 需求單號  ec em eu ea er 開頭的案件
													srmCaseHandleInfo.setInstallCaseId(installCaseId);
												}
											}
										} else {
											//無需求單號，或長度<2
											srmCaseHandleInfo.setInstallCaseId(null);
										}
									}
									this.srmCaseHandleInfoDAO.update(srmCaseHandleInfo);
									
									String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
									// 存案件歷程
									SrmCaseTransaction srmCaseTransaction = new SrmCaseTransaction();
									srmCaseTransaction.setTransactionId(transactionId);
									srmCaseTransaction.setCaseId(caseId);
									srmCaseTransaction.setCreatedById(logonUser.getId());
									srmCaseTransaction.setCreatedByName(logonUser.getName());
									srmCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
									srmCaseTransaction.setCaseStatus(srmCaseHandleInfo.getCaseStatus());
									srmCaseTransaction.setActionId(IAtomsConstants.ACTION_SAVE);
									srmCaseTransaction.setDealById(logonUser.getId());
									srmCaseTransaction.setDealByName(logonUser.getName());
									srmCaseTransaction.setDealDate(srmCaseTransaction.getCreatedDate());
									srmCaseTransaction.setUpdateItem(updateItem);
									this.srmCaseTransactionDAO.insert(srmCaseTransaction);
									//Task #3584 調用存儲過程，將同dtid下installCaseId的值改變， 或者同dtid下 em eu...installCaseId 的值改變
									if (changeRequirementNo) {
										this.srmCaseHandleInfoDAO.changeInstallCaseId(srmCaseHandleInfo.getCaseId(), srmCaseHandleInfo.getDtid(), srmCaseHandleInfo.getRequirementNo(), null, null);
									}
									msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.SAVE_CASE_SUCCESS, new String[]{caseId});
								} else {
									LOGGER.error("CaseManagerService --> createCase() --> ", "save case error!!!", "srmCaseHandleInfo is null");
									msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.SAVE_FAILURE, new String[]{this.getMyName()});
								}
							}
						} else {
							SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseId);
							// 打印log
							LOGGER.debug("createCase() dmo-->", "parameters : caseId =" + srmCaseHandleInfo.getCaseId());
							LOGGER.debug("createCase() dmo-->", "parameters : dtid =" + srmCaseHandleInfo.getDtid());
							LOGGER.debug("createCase() dmo-->", "parameters : customerId =" + srmCaseHandleInfo.getCustomerId());
							LOGGER.debug("createCase() dmo-->", "parameters : contractId =" + srmCaseHandleInfo.getContractId());
							LOGGER.debug("createCase() dmo-->", "parameters : companyId =" + srmCaseHandleInfo.getCompanyId());
							LOGGER.debug("createCase() dmo-->", "parameters : departmentId =" + srmCaseHandleInfo.getDepartmentId());
							LOGGER.debug("createCase() dmo-->", "parameters : caseType =" + srmCaseHandleInfo.getCaseType());
							LOGGER.debug("createCase() dmo-->", "parameters : merchantCode =" + srmCaseHandleInfo.getMerchantCode());
							LOGGER.debug("createCase() dmo-->", "parameters : merchantHeaderId =" + srmCaseHandleInfo.getMerchantHeaderId());
							LOGGER.debug("createCase() dmo-->", "parameters : edcType =" + srmCaseHandleInfo.getEdcType());
							LOGGER.debug("createCase() dmo-->", "parameters : peripherals =" + srmCaseHandleInfo.getPeripherals());
							LOGGER.debug("createCase() dmo-->", "parameters : peripherals2 =" + srmCaseHandleInfo.getPeripherals2());
							LOGGER.debug("createCase() dmo-->", "parameters : peripherals3 =" + srmCaseHandleInfo.getPeripherals3());
							LOGGER.debug("createCase() dmo-->", "parameters : ecrConnection =" + srmCaseHandleInfo.getEcrConnection());
							LOGGER.debug("createCase() dmo-->", "parameters : softwareVersion =" + srmCaseHandleInfo.getSoftwareVersion());
							//Task #3584 需求單號是否改變flag
							boolean changeRequirementNo = false;
							// 當前有需求單號
							if(StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo())){
								// 之前有需求單號
								if(StringUtils.hasText(srmCaseHandleInfo.getRequirementNo())){
									if(!srmCaseHandleInfoDTO.getRequirementNo().equals(srmCaseHandleInfo.getRequirementNo())){
										changeRequirementNo = true;
									}
								} else {
									changeRequirementNo = true;
								}
							// 當前無需求單號
							} else {
								// 之前有需求單號
								if(StringUtils.hasText(srmCaseHandleInfo.getRequirementNo())){
									changeRequirementNo = true;
								}
							}
							//bcc 宣揚
							CompanyDTO bccCompanyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_BCC);
							if (changeRequirementNo) {
								if((IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())
										&& (bccCompanyDTO == null 
												|| (bccCompanyDTO != null 
														&& !bccCompanyDTO.getCompanyId().equals(srmCaseHandleInfo.getCustomerId()))))
											|| (bccCompanyDTO != null 
														&& bccCompanyDTO.getCompanyId().equals(srmCaseHandleInfo.getCustomerId())
														&& StringUtils.hasText(srmCaseHandleInfo.getRequirementNo())
														&& (srmCaseHandleInfo.getRequirementNo().startsWith("ei")
																|| srmCaseHandleInfo.getRequirementNo().startsWith("EI")))
											|| (bccCompanyDTO != null 
														&& bccCompanyDTO.getCompanyId().equals(srmCaseHandleInfo.getCustomerId())
														&& StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo())
														&& (srmCaseHandleInfoDTO.getRequirementNo().startsWith("ei")
																|| srmCaseHandleInfoDTO.getRequirementNo().startsWith("EI")))){
									changeRequirementNo = true;
								} else {
									changeRequirementNo = false;
								}
							}
							srmCaseHandleInfoDTO.setCaseStatus(srmCaseHandleInfo.getCaseStatus());
							//Task #3548 案件修改時 【到場註記】不變
							srmCaseHandleInfoDTO.setHasArrive(srmCaseHandleInfo.getHasArrive());
							// 忽略處理設備鏈接部分 // Task #2682 進入待結案審查，就只能改 需求單號
							boolean isIgnoreAsset = false;
							// 異動設備
						//	boolean isUpdateAsset = false;
							// 待結案審查不可修改設備 // Task #2682 進入待結案審查，就只能改 需求單號
							if(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
								isIgnoreAsset = true;
							}
							if (!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())) {
								srmCaseHandleInfo.setInstallType(srmCaseHandleInfoDTO.getInstallType());
								if (IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(srmCaseHandleInfoDTO.getInstallType())) {
									srmCaseHandleInfo.setCmsCase(IAtomsConstants.YES);
								} else {
									srmCaseHandleInfo.setCmsCase(IAtomsConstants.NO);
								}
							}
							// 完修之後狀態 設備問題
							if(IAtomsConstants.CASE_STATUS.COMPLETED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
								// 裝機 籤收後退回至完修可修改設備
								if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory()) 
										|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfo.getCaseCategory())
										|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfo.getCaseCategory())){
									/*if(srmCaseHandleInfo.getAnalyzeDate() != null){
										isUpdateAsset = true;
									}*/
								// 非裝機 完修之後狀態不可修改設備
								} else {
									isIgnoreAsset = true;
								}
							}
							// 建案時按鍵dtid(除裝機類別其餘都要使用)
							String oldDtid = srmCaseHandleInfo.getDtid();
							// 之前的客戶編號
							String oldCustomerId = srmCaseHandleInfo.getCustomerId();
							// 之前的刷卡機型 // CR #2551 更改客戶才修改dtid
						//	String oldEdcType = srmCaseHandleInfo.getEdcType();
							// 之前的合約編號
							String oldContractId = srmCaseHandleInfo.getContractId();
							// 之前的特店表頭主鍵
							String oldMerchantHeaderId = srmCaseHandleInfo.getMerchantHeaderId();
							BimMerchantHeader oldMerchantHeader = this.merchantHeaderDAO.findByPrimaryKey(BimMerchantHeader.class, oldMerchantHeaderId);
							// 之前的特店區域
							String oldArea = null;
							if(oldMerchantHeader != null){
								oldArea = oldMerchantHeader.getArea();
							}
							// 之前的案件類別
							String oldCaseCategory = srmCaseHandleInfo.getCaseCategory();
							// 之前的案件類型
							String oldCaseType = srmCaseHandleInfo.getCaseType();
							String updateComment = null;
							// 之前的裝機類型
							String oldInstallType = srmCaseHandleInfo.getInstallType();
							// 異動信息
							if (StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) && !srmCaseHandleInfoDTO.getDtid().equals(oldDtid)) {
								updateComment = i18NUtil.getName(IAtomsMessageCode.CHANGE_DTID_MSG, new String[]{oldDtid, srmCaseHandleInfoDTO.getDtid()}, null);
							} else {
								updateComment = this.getUpdateContent(srmCaseHandleInfoDTO, false);
							}
							// 拿到公司信息
							BimCompany company = (BimCompany) this.companyDAO.findByPrimaryKey(BimCompany.class, srmCaseHandleInfo.getCustomerId());
							//設置dtid，生成dtid
							if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseManagerFormDTO.getCaseCategory())){
								//Task #3322
								if (IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(srmCaseHandleInfoDTO.getInstallType())) {
									srmCaseHandleInfo.setCmsCase(IAtomsConstants.YES);
								} else {
									srmCaseHandleInfo.setCmsCase(IAtomsConstants.NO);
								}
								// 装机的异动说明设置DTID
								srmCaseHandleInfoDTO.setDtid(oldDtid);
								// 【客戶DTID產生方式】為“同TID”，則DTID為交易類別為“一般交易”之TID
								if(StringUtils.hasText(company.getDtidType()) && IAtomsConstants.PARAM_IATOMS_DTID_TYPE_SAME.equals(company.getDtidType())){
									String dtid = calculateDtid(srmCaseHandleInfoDTO.getCustomerId(), srmCaseHandleInfoDTO.getEdcType(), srmCaseTransactionParameterDTOs);
									srmCaseHandleInfo.setDtid(dtid);
									srmCaseHandleInfoDTO.setDtid(dtid);
								} else {
								//	if(!srmCaseHandleInfoDTO.getCustomerId().equals(oldCustomerId) || !srmCaseHandleInfoDTO.getEdcType().equals(oldEdcType)){
									// CR #2551 更改客戶才修改dtid
									if(!srmCaseHandleInfoDTO.getCustomerId().equals(oldCustomerId)){
										String dtid = calculateDtid(srmCaseHandleInfoDTO.getCustomerId(), srmCaseHandleInfoDTO.getEdcType(), srmCaseTransactionParameterDTOs);
										srmCaseHandleInfo.setDtid(dtid);
										srmCaseHandleInfoDTO.setDtid(dtid);
									}
								}
							}
							// Task #2489 專案與查核案件，無須計算SLA
							// Task #3385若為雲端租賃設備(CMS_CASE=Y或裝機件 裝機類型=微型商戶)所有案件類別，合約編號非必填，不用驗證SLA
							// 該處判斷CMS_CASE=Y
							if(IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(srmCaseHandleInfo.getCaseCategory()) 
									|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfo.getCaseCategory())
									|| IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfo.getCmsCase())){
								//若是CMS_CASE=Y，則需做清空SLA的邏輯處理
								if(IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfo.getCmsCase())){
									//若裝機類型由其他變為微型商戶，則清除對應的SLA信息
									//若由其他類型的DTID換成微型商戶的DTID，則清除對應的SLA信息
									if((!IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(oldInstallType)
											&& IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfo.getCmsCase()))
											|| !srmCaseHandleInfoDTO.getDtid().equals(oldDtid)){
										srmCaseHandleInfo.setAcceptableResponseDate(null);
										srmCaseHandleInfo.setAcceptableArriveDate(null);
										srmCaseHandleInfo.setAcceptableFinishDate(null);
										srmCaseHandleInfo.setResponseWarnning(null);
										srmCaseHandleInfo.setArriveWarnning(null);
										srmCaseHandleInfo.setCompleteWarnning(null);
									}
								}
								msg = new Message(Message.STATUS.SUCCESS);
							} else {
								// 資料異動重新查sla
								if(!srmCaseHandleInfoDTO.getCustomerId().equals(oldCustomerId) || !srmCaseHandleInfoDTO.getContractId().equals(oldContractId)
										|| !srmCaseHandleInfoDTO.getMerLocation().equals(oldArea) || !srmCaseHandleInfoDTO.getCaseCategory().equals(oldCaseCategory)
										|| !srmCaseHandleInfoDTO.getCaseType().equals(oldCaseType) || srmCaseHandleInfoDTO.getExpectedCompletionDate() != null
										|| !srmCaseHandleInfoDTO.getInstallType().equals(oldInstallType) || !srmCaseHandleInfoDTO.getDtid().equals(oldDtid)){
									//查找sla信息，計算應完成時間。
									// 因預約件不會設定SLA，若案件類型為“預約”時，在計算警示時以案件類型為“一般”的SLA設定計算
									if(IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(srmCaseHandleInfoDTO.getCaseType())){
										caseType = IAtomsConstants.TICKET_MODE_COMMON;
									} else {
										caseType = srmCaseHandleInfoDTO.getCaseType();
									}
									// 得到sla信息
									List<ContractSlaDTO> contractSlaDTOList = this.contractSlaDAO.listBy(srmCaseHandleInfoDTO.getCustomerId(), srmCaseHandleInfoDTO.getContractId(), srmCaseHandleInfoDTO.getMerLocation(),
											srmCaseHandleInfoDTO.getCaseCategory(), caseType, null, null, null, null, false);
									if(!CollectionUtils.isEmpty(contractSlaDTOList) && contractSlaDTOList.size() == 1){
										ContractSlaDTO contractSlaDTO = contractSlaDTOList.get(0);
										// 開始計算sla的時間
									//	Date slaStartDate = DateTimeUtils.getCurrentTimestamp();
										Date slaStartDate = srmCaseHandleInfo.getCreatedDate();
										// 計算並設置應回應、到場、完修時間
										srmCaseHandleInfoDTO = this.settingAcceptDate(contractSlaDTO, slaStartDate, srmCaseHandleInfoDTO);
										if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTO.getDateMap())){
											srmCaseHandleInfo.setAcceptableResponseDate(srmCaseHandleInfoDTO.getAcceptableResponseDate());
											srmCaseHandleInfo.setAcceptableArriveDate(srmCaseHandleInfoDTO.getAcceptableArriveDate());
											srmCaseHandleInfo.setAcceptableFinishDate(srmCaseHandleInfoDTO.getAcceptableFinishDate());
											srmCaseHandleInfo.setResponseWarnning(srmCaseHandleInfoDTO.getResponseWarnning());
											srmCaseHandleInfo.setArriveWarnning(srmCaseHandleInfoDTO.getArriveWarnning());
											srmCaseHandleInfo.setCompleteWarnning(srmCaseHandleInfoDTO.getCompleteWarnning());
											msg = new Message(Message.STATUS.SUCCESS);
										} else {
											msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_WORK_TIME_FOR_CONTRACT);
										}
									} else {
										msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_SLA_FOR_CASE);
									}
								} else {
									msg = new Message(Message.STATUS.SUCCESS);
								}
							}
							// 判斷消息狀態
							if(Message.STATUS.SUCCESS.equals(msg.getStatus())){
								// CR #2551 通過dtid重新帶入案件資料
								if (IAtomsConstants.YES.equals(srmCaseHandleInfoDTO.getIsUpdateAsset())
										&& (srmCaseHandleInfo.getDtid().equals(srmCaseHandleInfoDTO.getDtid()))) {
									this.srmCaseAssetLinkDAO.deleteAll(caseId);
									String dtidByCase = srmCaseHandleInfo.getDtid();
									// 案件處理中設備链接档DTO集合
									List<SrmCaseAssetLinkDTO> tempAssetLinkDTOs = this.getCaseAssetList(srmCaseHandleInfoDTO, logonUser, dtidByCase);
									// 案件设备链接档保存
									if(!CollectionUtils.isEmpty(tempAssetLinkDTOs)){
										int j = 0;
										String assetLinkId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_LINK);
										for(SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : tempAssetLinkDTOs){
											j++;
											SrmCaseAssetLink saveSrmCaseAssetLink = (SrmCaseAssetLink)transformer.transform(srmCaseAssetLinkDTO, new SrmCaseAssetLink());
											saveSrmCaseAssetLink.setAssetLinkId(assetLinkId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(j));
											saveSrmCaseAssetLink.setCaseId(caseId);
											this.srmCaseAssetLinkDAO.insert(saveSrmCaseAssetLink);
										}
									}
								} else {
									if(!isIgnoreAsset){
										// 案件處理中設備鏈接檔
										// 裝機時案件附加檔案資料處理
										if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
											// 裝機更新設備信息
											this.saveCaseAssetLink(srmCaseHandleInfoDTO, logonUser);
											
										// 異動時案件附加檔案資料處理
										} else if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseManagerFormDTO.getCaseCategory())
												   || IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseManagerFormDTO.getCaseCategory())){
											// 與之前的ditd不同
											if(!srmCaseHandleInfoDTO.getDtid().equals(oldDtid)){
												this.srmCaseAssetLinkDAO.deleteAll(caseId);
												// 案件處理中設備链接档DTO集合
												List<SrmCaseAssetLinkDTO> tempAssetLinkDTOs = this.getCaseAssetList(srmCaseHandleInfoDTO, logonUser, null);
												// 案件设备链接档保存
												if(!CollectionUtils.isEmpty(tempAssetLinkDTOs)){
													int j = 0;
													String assetLinkId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_LINK);
													for(SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : tempAssetLinkDTOs){
														j++;
														SrmCaseAssetLink saveSrmCaseAssetLink = (SrmCaseAssetLink)transformer.transform(srmCaseAssetLinkDTO, new SrmCaseAssetLink());
														saveSrmCaseAssetLink.setAssetLinkId(assetLinkId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(j));
														saveSrmCaseAssetLink.setCaseId(caseId);
														this.srmCaseAssetLinkDAO.insert(saveSrmCaseAssetLink);
													}
												}
											// 與之前ditd相同
											} else {
												// 異動更新設備信息
												this.saveCaseAssetLink(srmCaseHandleInfoDTO, logonUser);
											}
										// 其他案件類別時案件附加檔案資料處理
										} else {
											// 與之前的ditd不同
											if(!srmCaseHandleInfoDTO.getDtid().equals(oldDtid)){
												// 刪除之前的設備鏈接檔
												this.srmCaseAssetLinkDAO.deleteAll(caseId);
												// 根據dtid得到最新案件信息
											//	SrmCaseHandleInfoDTO caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTOById(srmCaseHandleInfoDTO.getDtid());
												// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
												boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfoDTO.getDtid(), null);
												// 查詢案件資料
												SrmCaseHandleInfoDTO caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(srmCaseHandleInfoDTO.getDtid(), isNewHave);
												
												if(caseHandleInfoDTO != null){
												//	List<SrmCaseAssetLinkDTO> srmNewCaseAssetLinkDTOs = this.srmCaseNewAssetLinkDAO.listBy(caseHandleInfoDTO.getCaseId());
													// CR #2551  查詢設備鏈接 Bug #3055
													List<SrmCaseAssetLinkDTO> srmNewCaseAssetLinkDTOs = this.srmCaseNewAssetLinkDAO.listBy(caseHandleInfoDTO.getCaseId(), !isNewHave);
													SrmCaseAssetLink srmCaseAssetLink = null;
													// 鏈接檔主鍵
													String assetLinkId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_LINK);
													int i = 0;
													for(SrmCaseAssetLinkDTO srmNewCaseAssetLinkDTO : srmNewCaseAssetLinkDTOs){
														// 忽略耗材 不增加之前案件的耗材
														if(IAtomsConstants.PARAM_CASE_LINK_SUPPLIES.equals(srmNewCaseAssetLinkDTO.getItemType())){
															continue;
														}
														i ++;
														srmCaseAssetLink = (SrmCaseAssetLink) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLink());
														srmCaseAssetLink.setAssetLinkId(assetLinkId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(i));
														srmCaseAssetLink.setCaseId(caseId);
														this.srmCaseAssetLinkDAO.insert(srmCaseAssetLink);
													}
												}
											} else {
												// 其他案件類別異動更新設備信息 2018/01/30
												this.saveCaseAssetLink(srmCaseHandleInfoDTO, logonUser);
											}
										}
									}
								}

								// 連線方式有異動
								if(StringUtils.hasText(srmCaseHandleInfo.getConnectionType()) && (!srmCaseHandleInfo.getConnectionType().equals(srmCaseHandleInfoDTO.getConnectionType()))
										|| StringUtils.hasText(srmCaseHandleInfoDTO.getConnectionType()) && (!srmCaseHandleInfoDTO.getConnectionType().equals(srmCaseHandleInfo.getConnectionType()))){
									// 刪除之前連接方式
									this.srmCaseCommModeDAO.deleteAll(caseId);
									// 案件通訊模式維護檔保存
									if(StringUtils.hasText(srmCaseHandleInfoDTO.getConnectionType())){
										int j = 0;
										SrmCaseCommMode srmCaseCommMode = null;
										String connectionTypeId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_COMM_MODE);
										for(String tempId : StringUtils.toList(srmCaseHandleInfoDTO.getConnectionType(), IAtomsConstants.MARK_SEPARATOR)){
											j++;
											srmCaseCommMode = new SrmCaseCommMode();
											srmCaseCommMode.setCaseId(caseId);
											srmCaseCommMode.setId(connectionTypeId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(j));
											srmCaseCommMode.setCommModeId(tempId);
											this.srmCaseCommModeDAO.insert(srmCaseCommMode);
										}
									}
								}
								// 生成異動說明
								String updatedDescription = this.createUpdateDescription(caseManagerFormDTO, Boolean.FALSE, Boolean.TRUE);
								// 生成異動項目
								String updateItem = this.createUpdateItem(caseManagerFormDTO);
								// TODO

								if (IAtomsConstants.YES.equals(srmCaseHandleInfoDTO.getIsUpdateAsset()) 
										|| (StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) && !srmCaseHandleInfoDTO.getDtid().equals(srmCaseHandleInfo.getDtid()))) {
									srmCaseHandleInfoDTO.setIsUpdateAsset(IAtomsConstants.NO);
									
									// 調整案件預設默認值
									// fomsCase = "N";
									if(IAtomsConstants.NO.equals(srmCaseHandleInfoDTO.getFomsCase())){
										srmCaseHandleInfoDTO.setFomsCase(srmCaseHandleInfo.getFomsCase());
									}
									// isFirstInstalled = "N";
									if(IAtomsConstants.NO.equals(srmCaseHandleInfoDTO.getIsFirstInstalled())){
										srmCaseHandleInfoDTO.setIsFirstInstalled(srmCaseHandleInfo.getIsFirstInstalled());
									}
									// hasOnlineExclusion = "N";
									if(IAtomsConstants.NO.equals(srmCaseHandleInfoDTO.getHasOnlineExclusion())){
										srmCaseHandleInfoDTO.setHasOnlineExclusion(srmCaseHandleInfo.getHasOnlineExclusion());
									}
									// hasRetreat = "N";
									if(IAtomsConstants.NO.equals(srmCaseHandleInfoDTO.getHasRetreat())){
										srmCaseHandleInfoDTO.setHasRetreat(srmCaseHandleInfo.getHasRetreat());
									}
									// Task #3205 是否執行過延期 hasDelay = "N";
									if(IAtomsConstants.NO.equals(srmCaseHandleInfoDTO.getHasDelay())){
										srmCaseHandleInfoDTO.setHasRetreat(srmCaseHandleInfo.getHasDelay());
									}
									
									// 異動
									if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
										// contactIsBussinessAddress = "E";
										if(IAtomsConstants.PARAM_DEFAULT_CASE_MERCHANT_INFO.equals(srmCaseHandleInfoDTO.getContactIsBussinessAddress())){
											srmCaseHandleInfoDTO.setContactIsBussinessAddress(srmCaseHandleInfo.getContactIsBussinessAddress());
										}
										// contactIsBussinessContact = "E";
										if(IAtomsConstants.PARAM_DEFAULT_CASE_MERCHANT_INFO.equals(srmCaseHandleInfoDTO.getContactIsBussinessContact())){
											srmCaseHandleInfoDTO.setContactIsBussinessContact(srmCaseHandleInfo.getContactIsBussinessContact());
										}
										// contactIsBussinessContactPhone = "E";
										if(IAtomsConstants.PARAM_DEFAULT_CASE_MERCHANT_INFO.equals(srmCaseHandleInfoDTO.getContactIsBussinessContactPhone())){
											srmCaseHandleInfoDTO.setContactIsBussinessContactPhone(srmCaseHandleInfo.getContactIsBussinessContactPhone());
										}
									} else {
										// isBussinessContact = "E";
										if(IAtomsConstants.PARAM_DEFAULT_CASE_MERCHANT_INFO.equals(srmCaseHandleInfoDTO.getIsBussinessContact())){
											srmCaseHandleInfoDTO.setIsBussinessContact(srmCaseHandleInfo.getIsBussinessContact());
										}
										// isBussinessContactPhone = "E";
										if(IAtomsConstants.PARAM_DEFAULT_CASE_MERCHANT_INFO.equals(srmCaseHandleInfoDTO.getIsBussinessContactPhone())){
											srmCaseHandleInfoDTO.setIsBussinessContactPhone(srmCaseHandleInfo.getIsBussinessContactPhone());
										}
										// isProject = "N";
										if(IAtomsConstants.NO.equals(srmCaseHandleInfoDTO.getIsProject())){
											srmCaseHandleInfoDTO.setIsProject(srmCaseHandleInfo.getIsProject());
										}
									}
									// 不為待派工 
									if(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfo.getCaseStatus())){
										// isTms = "N";
										if(IAtomsConstants.NO.equals(srmCaseHandleInfoDTO.getIsTms())){
											srmCaseHandleInfoDTO.setIsTms(srmCaseHandleInfo.getIsTms());
										}
									}
									srmCaseHandleInfoDTO.setIsIatomsCreateCms(srmCaseHandleInfo.getIsIatomsCreateCms());
									srmCaseHandleInfoDTO.setCmsCase(srmCaseHandleInfo.getCmsCase());
									new CopyPropertiesUtils().copyProperties(srmCaseHandleInfoDTO, srmCaseHandleInfo, null);
								} else {
									// 需求單號
									srmCaseHandleInfo.setRequirementNo(srmCaseHandleInfoDTO.getRequirementNo());
									// 待結案審查之後
									if(!IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
										// 案件類型
										srmCaseHandleInfo.setCaseType(srmCaseHandleInfoDTO.getCaseType());
										// 預計完成日
										srmCaseHandleInfo.setExpectedCompletionDate(srmCaseHandleInfoDTO.getExpectedCompletionDate());
									}
									// 待派工 維護部門
									if(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
										// Task #3092 完修前(回應、到場)，都可以改維護部門
										// 維護部門
									//	srmCaseHandleInfo.setDepartmentId(srmCaseHandleInfoDTO.getDepartmentId());
										
										// Task #3028 併機 異動 拆機 查核 專案 報修，建案之維護廠商，DTID預設帶出後要能再調整
										// 維護廠商
										srmCaseHandleInfo.setCompanyId(srmCaseHandleInfoDTO.getCompanyId());
										//CR #3237 2018/03/07
										if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
												|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
												|| IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
												|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
											// isTMS
											srmCaseHandleInfo.setIsTms(srmCaseHandleInfoDTO.getIsTms());
											// 裝機 客戶+維護廠商
											if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
												// 客戶
												srmCaseHandleInfo.setCustomerId(srmCaseHandleInfoDTO.getCustomerId());
												// 維護廠商
											//	srmCaseHandleInfo.setCompanyId(srmCaseHandleInfoDTO.getCompanyId());
											}
										}
									// Task #2578 已派工狀態可修改維護部門、裝機已派工狀態可修改維護廠商
									} else if(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
										/*// 裝機 維護廠商
										if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
											// 維護廠商
											srmCaseHandleInfo.setCompanyId(srmCaseHandleInfoDTO.getCompanyId());
										}*/
										
										// Task #3028 併機 異動 拆機 查核 專案 報修，建案之維護廠商，DTID預設帶出後要能再調整
										// 維護廠商
										srmCaseHandleInfo.setCompanyId(srmCaseHandleInfoDTO.getCompanyId());
										// Task #3092 完修前(回應、到場)，都可以改維護部門
										// 維護部門
									//	srmCaseHandleInfo.setDepartmentId(srmCaseHandleInfoDTO.getDepartmentId());
									}
									//如果點擊dtid帶值 則需要將查出來的案件資料賦予該案件 2018/01/30
									String isCheckFlag = caseManagerFormDTO.getIsCheckDtidFlag();
									if(!(IAtomsConstants.YES.equals(srmCaseHandleInfoDTO.getIsUpdateAsset())
											&& (srmCaseHandleInfo.getDtid().equals(srmCaseHandleInfoDTO.getDtid())))
										&& IAtomsConstants.PARAM_YES.equals(isCheckFlag)){
										//
										changeCaseInfo(srmCaseHandleInfo, isCheckFlag, isIgnoreAsset);
									}
									// 裝機+異動修改欄位 
									if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
											|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
											|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
										if (!IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())) {
											// 專案
											srmCaseHandleInfo.setIsProject(srmCaseHandleInfoDTO.getIsProject());
											// 裝機地址 同營業地址
											srmCaseHandleInfo.setIsBussinessAddress(srmCaseHandleInfoDTO.getIsBussinessAddress());
											// 裝機地址 同營業地址(縣市)
											srmCaseHandleInfo.setInstalledAdressLocation(srmCaseHandleInfoDTO.getInstalledAdressLocation());
											srmCaseHandleInfo.setInstalledPostCode(srmCaseHandleInfoDTO.getInstalledPostCode());
											// 裝機地址
											srmCaseHandleInfo.setInstalledAdress(srmCaseHandleInfoDTO.getInstalledAdress());
											// 裝機聯絡人 同特店聯絡人
											srmCaseHandleInfo.setIsBussinessContact(srmCaseHandleInfoDTO.getIsBussinessContact());
											// 裝機聯絡人
											srmCaseHandleInfo.setInstalledContact(srmCaseHandleInfoDTO.getInstalledContact());
											// 裝機聯絡人電話 同特店聯絡人電話
											srmCaseHandleInfo.setIsBussinessContactPhone(srmCaseHandleInfoDTO.getIsBussinessContactPhone());
											// 裝機聯絡人電話
											srmCaseHandleInfo.setInstalledContactPhone(srmCaseHandleInfoDTO.getInstalledContactPhone());
											// 裝機聯絡人手機 同特店聯絡人行動電話
											srmCaseHandleInfo.setIsBussinessContactMobilePhone(srmCaseHandleInfoDTO.getIsBussinessContactMobilePhone());
											// 裝機聯絡人手機
											srmCaseHandleInfo.setInstalledContactMobilePhone(srmCaseHandleInfoDTO.getInstalledContactMobilePhone());
											// 裝機聯絡人Email 同特店聯絡人Email
											srmCaseHandleInfo.setIsBussinessContactEmail(srmCaseHandleInfoDTO.getIsBussinessContactEmail());
											// 裝機聯絡人Email
											srmCaseHandleInfo.setInstalledContactEmail(srmCaseHandleInfoDTO.getInstalledContactEmail());
										} else {
											// 聯系地址 同營業地址
											srmCaseHandleInfo.setContactIsBussinessAddress(srmCaseHandleInfoDTO.getContactIsBussinessAddress());
											// 聯系地址 同營業地址(縣市)
											srmCaseHandleInfo.setContactAddressLocation(srmCaseHandleInfoDTO.getContactAddressLocation());
											srmCaseHandleInfo.setContactPostCode(srmCaseHandleInfoDTO.getContactPostCode());
											// 聯系地址
											srmCaseHandleInfo.setContactAddress(srmCaseHandleInfoDTO.getContactAddress());
											// 聯系聯絡人 同特店聯絡人
											srmCaseHandleInfo.setContactIsBussinessContact(srmCaseHandleInfoDTO.getContactIsBussinessContact());
											// 聯系聯絡人
											srmCaseHandleInfo.setContactUser(srmCaseHandleInfoDTO.getContactUser());
											// 聯系聯絡人電話 同特店聯絡人電話
											srmCaseHandleInfo.setContactIsBussinessContactPhone(srmCaseHandleInfoDTO.getContactIsBussinessContactPhone());
											// 聯系聯絡人電話
											srmCaseHandleInfo.setContactUserPhone(srmCaseHandleInfoDTO.getContactUserPhone());
											// 聯系聯絡人手機 同特店聯絡人行動電話
											srmCaseHandleInfo.setContactIsBussinessContactMobilePhone(srmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone());
											// 聯系聯絡人手機
											srmCaseHandleInfo.setContactMobilePhone(srmCaseHandleInfoDTO.getContactMobilePhone());
											// 聯系聯絡人Email 同特店聯絡人Email
											srmCaseHandleInfo.setContactIsBussinessContactEmail(srmCaseHandleInfoDTO.getContactIsBussinessContactEmail());
											// 聯系裝機聯絡人Email
											srmCaseHandleInfo.setContactUserEmail(srmCaseHandleInfoDTO.getContactUserEmail());
											// 專案代碼
											srmCaseHandleInfo.setProjectCode(srmCaseHandleInfoDTO.getProjectCode());
											// 專案名稱
											srmCaseHandleInfo.setProjectName(srmCaseHandleInfoDTO.getProjectName());
										}
										// 特店代號
										srmCaseHandleInfo.setMerchantCode(srmCaseHandleInfoDTO.getMerchantCode());
										// 表頭（同對外名稱）
										srmCaseHandleInfo.setMerchantHeaderId(srmCaseHandleInfoDTO.getMerchantHeaderId());
										
										// 待結案審查之後
										if(!isIgnoreAsset){
											if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
												// 刷卡機型
												srmCaseHandleInfo.setEdcType(srmCaseHandleInfoDTO.getEdcType());
											}
											// 週邊設備1
											srmCaseHandleInfo.setPeripherals(srmCaseHandleInfoDTO.getPeripherals());
											// 週邊設備2
											srmCaseHandleInfo.setPeripherals2(srmCaseHandleInfoDTO.getPeripherals2());
											// 週邊設備3
											srmCaseHandleInfo.setPeripherals3(srmCaseHandleInfoDTO.getPeripherals3());
										}
										// 軟體版本
										srmCaseHandleInfo.setSoftwareVersion(srmCaseHandleInfoDTO.getSoftwareVersion());
										// 內建功能
										srmCaseHandleInfo.setBuiltInFeature(srmCaseHandleInfoDTO.getBuiltInFeature());
										// 雙模組模式
										srmCaseHandleInfo.setMultiModule(srmCaseHandleInfoDTO.getMultiModule());
										// 週邊設備功能1
										srmCaseHandleInfo.setPeripheralsFunction(srmCaseHandleInfoDTO.getPeripheralsFunction());
										// ECR連線
										srmCaseHandleInfo.setEcrConnection(srmCaseHandleInfoDTO.getEcrConnection());
										// 週邊設備功能2
										srmCaseHandleInfo.setPeripheralsFunction2(srmCaseHandleInfoDTO.getPeripheralsFunction2());
										// 連接方式
										srmCaseHandleInfo.setConnectionType(srmCaseHandleInfoDTO.getConnectionType());
										// 週邊設備功能3
										srmCaseHandleInfo.setPeripheralsFunction3(srmCaseHandleInfoDTO.getPeripheralsFunction3());
										// 是否開啟加密
										srmCaseHandleInfo.setIsOpenEncrypt(srmCaseHandleInfoDTO.getIsOpenEncrypt());
										// 電子化繳費平台
										srmCaseHandleInfo.setElectronicPayPlatform(srmCaseHandleInfoDTO.getElectronicPayPlatform());
										// LOGO
										srmCaseHandleInfo.setLogoStyle(srmCaseHandleInfoDTO.getLogoStyle());
										// 電子發票載具
										srmCaseHandleInfo.setElectronicInvoice(srmCaseHandleInfoDTO.getElectronicInvoice());
										// 銀聯閃付
										srmCaseHandleInfo.setCupQuickPass(srmCaseHandleInfoDTO.getCupQuickPass());
										//Receipt_type
										srmCaseHandleInfo.setReceiptType(srmCaseHandleInfoDTO.getReceiptType());
										// 本機IP
										srmCaseHandleInfo.setLocalhostIp(srmCaseHandleInfoDTO.getLocalhostIp());
										// 寬頻連線
										srmCaseHandleInfo.setNetVendorId(srmCaseHandleInfoDTO.getNetVendorId());
										// Gateway
										srmCaseHandleInfo.setGateway(srmCaseHandleInfoDTO.getGateway());
										// Netmask
										srmCaseHandleInfo.setNetmask(srmCaseHandleInfoDTO.getNetmask());
										// 其他說明
										srmCaseHandleInfo.setDescription(srmCaseHandleInfoDTO.getDescription());
										// TMS參數說明
										srmCaseHandleInfo.setTmsParamDesc(srmCaseHandleInfoDTO.getTmsParamDesc());
										
										//最新案件装机 异动时 更新contact字段 2018/01/15 由于目前方法装机异动不会更新contact相关栏位，会将值丢失 故作修改 
										if (IAtomsConstants.PARAM_YES.equals(caseManagerFormDTO.getHideForUpdateContactFlag())) {
											// 聯系地址 同營業地址
											srmCaseHandleInfo.setContactIsBussinessAddress(srmCaseHandleInfoDTO.getContactIsBussinessAddress());
											// 聯系地址 同營業地址(縣市)
											srmCaseHandleInfo.setContactAddressLocation(srmCaseHandleInfoDTO.getContactAddressLocation());
											// 聯系地址
											srmCaseHandleInfo.setContactAddress(srmCaseHandleInfoDTO.getContactAddress());
											// 聯系聯絡人 同特店聯絡人
											srmCaseHandleInfo.setContactIsBussinessContact(srmCaseHandleInfoDTO.getContactIsBussinessContact());
											// 聯系聯絡人
											srmCaseHandleInfo.setContactUser(srmCaseHandleInfoDTO.getContactUser());
											// 聯系聯絡人電話 同特店聯絡人電話
											srmCaseHandleInfo.setContactIsBussinessContactPhone(srmCaseHandleInfoDTO.getContactIsBussinessContactPhone());
											// 聯系聯絡人電話
											srmCaseHandleInfo.setContactUserPhone(srmCaseHandleInfoDTO.getContactUserPhone());
											// 聯系聯絡人手機 同特店聯絡人行動電話
											srmCaseHandleInfo.setContactIsBussinessContactMobilePhone(srmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone());
											// 聯系聯絡人手機
											srmCaseHandleInfo.setContactMobilePhone(srmCaseHandleInfoDTO.getContactMobilePhone());
											// 聯系聯絡人Email 同特店聯絡人Email
											srmCaseHandleInfo.setContactIsBussinessContactEmail(srmCaseHandleInfoDTO.getContactIsBussinessContactEmail());
											// 聯系裝機聯絡人Email
											srmCaseHandleInfo.setContactUserEmail(srmCaseHandleInfoDTO.getContactUserEmail());
											
										}
										// 異動
										if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
											// 完修
											if(!IAtomsConstants.CASE_STATUS.COMPLETED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()) || !isIgnoreAsset){
												// DTID
												srmCaseHandleInfo.setDtid(srmCaseHandleInfoDTO.getDtid());
											}
											// 是否同裝機作業
											srmCaseHandleInfo.setSameInstalled(srmCaseHandleInfoDTO.getSameInstalled());
											// 舊特店代號
											srmCaseHandleInfo.setOldMerchantCode(srmCaseHandleInfoDTO.getOldMerchantCode());
										// 裝機
										} else {
											// 裝機類型
											srmCaseHandleInfo.setInstallType(srmCaseHandleInfoDTO.getInstallType());
											// 待派工 客戶 合約
											if(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
												// 客戶
												srmCaseHandleInfo.setCustomerId(srmCaseHandleInfoDTO.getCustomerId());
												// 合約編號
												srmCaseHandleInfo.setContractId(srmCaseHandleInfoDTO.getContractId());
											}
										}
									} else {
										// 完修
										if(!IAtomsConstants.CASE_STATUS.COMPLETED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()) || !isIgnoreAsset){
											// DTID
											srmCaseHandleInfo.setDtid(srmCaseHandleInfoDTO.getDtid());
										}
										// 聯系地址 同營業地址
										srmCaseHandleInfo.setContactIsBussinessAddress(srmCaseHandleInfoDTO.getContactIsBussinessAddress());
										// 聯系地址 同營業地址(縣市)
										srmCaseHandleInfo.setContactAddressLocation(srmCaseHandleInfoDTO.getContactAddressLocation());
										srmCaseHandleInfo.setContactPostCode(srmCaseHandleInfoDTO.getContactPostCode());
										// 聯系地址
										srmCaseHandleInfo.setContactAddress(srmCaseHandleInfoDTO.getContactAddress());
										// 聯系聯絡人 同特店聯絡人
										srmCaseHandleInfo.setContactIsBussinessContact(srmCaseHandleInfoDTO.getContactIsBussinessContact());
										// 聯系聯絡人
										srmCaseHandleInfo.setContactUser(srmCaseHandleInfoDTO.getContactUser());
										// 聯系聯絡人電話 同特店聯絡人電話
										srmCaseHandleInfo.setContactIsBussinessContactPhone(srmCaseHandleInfoDTO.getContactIsBussinessContactPhone());
										// 聯系聯絡人電話
										srmCaseHandleInfo.setContactUserPhone(srmCaseHandleInfoDTO.getContactUserPhone());
										// 聯系聯絡人手機 同特店聯絡人行動電話
										srmCaseHandleInfo.setContactIsBussinessContactMobilePhone(srmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone());
										// 聯系聯絡人手機
										srmCaseHandleInfo.setContactMobilePhone(srmCaseHandleInfoDTO.getContactMobilePhone());
										// 聯系聯絡人Email 同特店聯絡人Email
										srmCaseHandleInfo.setContactIsBussinessContactEmail(srmCaseHandleInfoDTO.getContactIsBussinessContactEmail());
										// 聯系裝機聯絡人Email
										srmCaseHandleInfo.setContactUserEmail(srmCaseHandleInfoDTO.getContactUserEmail());
										// 其他說明
										srmCaseHandleInfo.setDescription(srmCaseHandleInfoDTO.getDescription());
										//更新設備信息 2018/01/29
										// 判斷待結案審查之後
										if(!isIgnoreAsset){
											if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
												// 刷卡機型
												srmCaseHandleInfo.setEdcType(srmCaseHandleInfoDTO.getEdcType());
											}
											// 週邊設備1
											srmCaseHandleInfo.setPeripherals(srmCaseHandleInfoDTO.getPeripherals());
											// 週邊設備2
											srmCaseHandleInfo.setPeripherals2(srmCaseHandleInfoDTO.getPeripherals2());
											// 週邊設備3
											srmCaseHandleInfo.setPeripherals3(srmCaseHandleInfoDTO.getPeripherals3());
										}
										// 軟體版本
										srmCaseHandleInfo.setSoftwareVersion(srmCaseHandleInfoDTO.getSoftwareVersion());
										// 內建功能
										srmCaseHandleInfo.setBuiltInFeature(srmCaseHandleInfoDTO.getBuiltInFeature());
										// 雙模組模式
										srmCaseHandleInfo.setMultiModule(srmCaseHandleInfoDTO.getMultiModule());
										// 週邊設備功能1
										srmCaseHandleInfo.setPeripheralsFunction(srmCaseHandleInfoDTO.getPeripheralsFunction());
										// ECR連線
										srmCaseHandleInfo.setEcrConnection(srmCaseHandleInfoDTO.getEcrConnection());
										// 週邊設備功能2
										srmCaseHandleInfo.setPeripheralsFunction2(srmCaseHandleInfoDTO.getPeripheralsFunction2());
										// 連接方式
										srmCaseHandleInfo.setConnectionType(srmCaseHandleInfoDTO.getConnectionType());
										// 週邊設備功能3
										srmCaseHandleInfo.setPeripheralsFunction3(srmCaseHandleInfoDTO.getPeripheralsFunction3());
										// 是否開啟加密
										srmCaseHandleInfo.setIsOpenEncrypt(srmCaseHandleInfoDTO.getIsOpenEncrypt());
										// 電子化繳費平台
										srmCaseHandleInfo.setElectronicPayPlatform(srmCaseHandleInfoDTO.getElectronicPayPlatform());
										// LOGO
										srmCaseHandleInfo.setLogoStyle(srmCaseHandleInfoDTO.getLogoStyle());
										// 電子發票載具
										srmCaseHandleInfo.setElectronicInvoice(srmCaseHandleInfoDTO.getElectronicInvoice());
										// 銀聯閃付
										srmCaseHandleInfo.setCupQuickPass(srmCaseHandleInfoDTO.getCupQuickPass());
										if (IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())) {
											//Receipt_type
											srmCaseHandleInfo.setReceiptType(srmCaseHandleInfoDTO.getReceiptType());
										}
										// 本機IP
										srmCaseHandleInfo.setLocalhostIp(srmCaseHandleInfoDTO.getLocalhostIp());
										// 寬頻連線
										srmCaseHandleInfo.setNetVendorId(srmCaseHandleInfoDTO.getNetVendorId());
										// Gateway
										srmCaseHandleInfo.setGateway(srmCaseHandleInfoDTO.getGateway());
										// Netmask
										srmCaseHandleInfo.setNetmask(srmCaseHandleInfoDTO.getNetmask());
										//最新案件非装机 非异动时 更新install字段  2018/01/15
										if (IAtomsConstants.PARAM_YES.equals(caseManagerFormDTO.getHideForUpdateContactFlag())) {
											// 裝機地址 同營業地址
											srmCaseHandleInfo.setIsBussinessAddress(srmCaseHandleInfoDTO.getIsBussinessAddress());
											// 裝機地址 同營業地址(縣市)
											srmCaseHandleInfo.setInstalledAdressLocation(srmCaseHandleInfoDTO.getInstalledAdressLocation());
											// 裝機地址
											srmCaseHandleInfo.setInstalledAdress(srmCaseHandleInfoDTO.getInstalledAdress());
											// 裝機聯絡人 同特店聯絡人
											srmCaseHandleInfo.setIsBussinessContact(srmCaseHandleInfoDTO.getIsBussinessContact());
											// 裝機聯絡人
											srmCaseHandleInfo.setInstalledContact(srmCaseHandleInfoDTO.getInstalledContact());
											// 裝機聯絡人電話 同特店聯絡人電話
											srmCaseHandleInfo.setIsBussinessContactPhone(srmCaseHandleInfoDTO.getIsBussinessContactPhone());
											// 裝機聯絡人電話
											srmCaseHandleInfo.setInstalledContactPhone(srmCaseHandleInfoDTO.getInstalledContactPhone());
											// 裝機聯絡人手機 同特店聯絡人行動電話
											srmCaseHandleInfo.setIsBussinessContactMobilePhone(srmCaseHandleInfoDTO.getIsBussinessContactMobilePhone());
											// 裝機聯絡人手機
											srmCaseHandleInfo.setInstalledContactMobilePhone(srmCaseHandleInfoDTO.getInstalledContactMobilePhone());
											// 裝機聯絡人Email 同特店聯絡人Email
											srmCaseHandleInfo.setIsBussinessContactEmail(srmCaseHandleInfoDTO.getIsBussinessContactEmail());
											// 裝機聯絡人Email
											srmCaseHandleInfo.setInstalledContactEmail(srmCaseHandleInfoDTO.getInstalledContactEmail());
										}
										
										// 併機
										if(IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
											// 是否同裝機作業
											srmCaseHandleInfo.setSameInstalled(srmCaseHandleInfoDTO.getSameInstalled());
											// 軟體版本
											srmCaseHandleInfo.setSoftwareVersion(srmCaseHandleInfoDTO.getSoftwareVersion());
											// TMS參數說明
											srmCaseHandleInfo.setTmsParamDesc(srmCaseHandleInfoDTO.getTmsParamDesc());
										// 拆機
										} else if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
											// 拆機類型
											srmCaseHandleInfo.setUninstallType(srmCaseHandleInfoDTO.getUninstallType());
										// 查核
										} else if(IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
										// 專案
										} /*else if(IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
											// 專案代碼
											srmCaseHandleInfo.setProjectCode(srmCaseHandleInfoDTO.getProjectCode());
											// 專案名稱
											srmCaseHandleInfo.setProjectName(srmCaseHandleInfoDTO.getProjectName());
										// 報修
										}*/ else if(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
											// 報修原因 
											srmCaseHandleInfo.setRepairReason(srmCaseHandleInfoDTO.getRepairReason());
										}
									}

									// Task #3092 完修前(回應、到場)，都可以改維護部門
									if(!IAtomsConstants.CASE_STATUS.COMPLETED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
										// 維護部門
										srmCaseHandleInfo.setDepartmentId(srmCaseHandleInfoDTO.getDepartmentId());
									}
									
								}
							//	new CopyPropertiesUtils().copyProperties(srmCaseHandleInfoDTO, srmCaseHandleInfo, null);
								// 保存異動說明
								srmCaseHandleInfo.setUpdatedDescription(updatedDescription);
								// 保存異動項目
								srmCaseHandleInfo.setUpdateItem(updateItem);
								// 修改異動人員時間信息
								srmCaseHandleInfo.setUpdatedById(srmCaseHandleInfo.getCreatedById());
								srmCaseHandleInfo.setUpdatedByName(logonUser.getName());
								srmCaseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
								if(!IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(srmCaseHandleInfo.getCaseType())){
									srmCaseHandleInfo.setExpectedCompletionDate(null);
								}
								//設置案件狀態
							//	srmCaseHandleInfo.setCaseStatus(srmCaseHandleInfo.getCaseStatus());
								// 處理案件處理記錄
								SrmCaseTransaction srmCaseTransaction = new SrmCaseTransaction();
								String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
								srmCaseTransaction.setTransactionId(transactionId);
								srmCaseTransaction.setCaseId(caseId);
								srmCaseTransaction.setCreatedById(logonUser.getId());
								srmCaseTransaction.setCreatedByName(logonUser.getName());
								srmCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
								srmCaseTransaction.setCaseStatus(srmCaseHandleInfo.getCaseStatus());
								srmCaseTransaction.setActionId(IAtomsConstants.ACTION_SAVE);
								srmCaseTransaction.setDealById(logonUser.getId());
								srmCaseTransaction.setDealByName(logonUser.getName());
								srmCaseTransaction.setDealDate(srmCaseTransaction.getCreatedDate());
								// 異動項目
								updatedDescription = null;
								if (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseManagerFormDTO.getCaseCategory())
										|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseManagerFormDTO.getCaseCategory())
										|| IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseManagerFormDTO.getCaseCategory())
										|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseManagerFormDTO.getCaseCategory())) {
									if (StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) && srmCaseHandleInfoDTO.getDtid().equals(oldDtid)) {
										updatedDescription = this.createUpdateDescription(caseManagerFormDTO, Boolean.TRUE, Boolean.FALSE);
									}
									if (StringUtils.hasText(updateComment)) {
										srmCaseTransaction.setUpdateItem(updateComment += (updatedDescription==null?"":updatedDescription));
									} else {
										srmCaseTransaction.setUpdateItem(updatedDescription==null?"":updatedDescription );
									}
								} else {
									srmCaseTransaction.setUpdateItem(updateComment);
								}
								//srmCaseTransaction.setUpdateItem(updateComment);
								// bug 2262   待派工案件處理頁面-派工--案件歷程表存儲
								if (IAtomsConstants.PARAM_YES.equals(caseManagerFormDTO.getHasCaseIdFlag())) {
									// 
									String description = IAtomsConstants.MARK_EMPTY_STRING;
									BimDepartment department = null;
									if (IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfoDTO.getIsTms())) {
										// 異動，併機，裝機有TMS//CR #3237
										if ((IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())) 
												|| (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())) 
												|| (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()))
												|| (IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()))) {
											// 處理內容為“派工至[TMS]”
											description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO)
																	+ IAtomsConstants.MARK_BRACKET_LEFT
																	+ IAtomsConstants.CASE_ROLE.TMS.getCode()
																	+ IAtomsConstants.MARK_BRACKET_RIGHT;
											srmCaseTransaction.setDeptCode(IAtomsConstants.CASE_ROLE.TMS.getCode());
										}
										// 若案件之【自動派工】未勾選
									} else {
										BimCompany bimCompany = null;
										// 處理內容為“派工至[維護廠商-維護部門]”
										bimCompany = this.getCompanyDAO().findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
										if (bimCompany != null) {
											
											//Bug #2305
											if(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDepartmentId())) {
												department = new BimDepartment();
												department.setDeptName(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE));
												description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT;
												description = description + department.getDeptName();
											} else {
												description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT + bimCompany.getShortName();
												if (StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentId())) {
													department = this.departmentDAO.findByPrimaryKey(BimDepartment.class, srmCaseHandleInfoDTO.getDepartmentId());
													description = description + IAtomsConstants.MARK_MIDDLE_LINE + department.getDeptName();
												}
											}
											srmCaseTransaction.setDeptCode(srmCaseHandleInfoDTO.getDepartmentId());
											description = description + IAtomsConstants.MARK_BRACKET_RIGHT;
										}
										//caseTransaction.setDeptCode(caseHandleInfo.getDepartmentId());
									}
									srmCaseTransaction.setDescription(description);
									srmCaseTransaction.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
									srmCaseTransaction.setActionId(IAtomsConstants.ACTION_DISPATCH);
									srmCaseTransaction.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));

									// 若關卡不變，則寫入當前關卡
									srmCaseTransaction.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH);
									// 若關卡不變，則寫入當前關卡
									srmCaseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode()));
								
								}						
								this.srmCaseTransactionDAO.insert(srmCaseTransaction);
								Map<String, String> callCmsMap = caseManagerFormDTO.getCallCmsMap();
								if (callCmsMap != null && callCmsMap.containsKey(srmCaseHandleInfoDTO.getCaseId())) {
									String apiLogResult = "true";
									this.insertApiLog(IAtomsConstants.API_RS, srmCaseHandleInfoDTO.getCaseId(), srmCaseTransaction.getTransactionId(), logonUser, apiLogResult, null, callCmsMap.get(srmCaseHandleInfoDTO.getCaseId()));
								}
								// 刪除之前的交易參數信息
								this.srmCaseTransactionParameterDAO.deleteAll(caseId);
								// 新獲取到的交易參數
								if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
									//交易參數全是新增
									SrmCaseTransactionParameter srmCaseTransactionParameter = null;
									String paramterValueId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION_PARAMETER);
									int i = 0;
									for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
										i++;
										srmCaseTransactionParameter = (SrmCaseTransactionParameter)
												transformer.transform(srmCaseTransactionParameterDTO, new SrmCaseTransactionParameter());
										srmCaseTransactionParameter.setCaseId(caseId);
										srmCaseTransactionParameter.setParamterValueId(paramterValueId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(i));
										this.srmCaseTransactionParameterDAO.insert(srmCaseTransactionParameter);						
									}
								}
								String deleteFileId = caseManagerFormDTO.getDeleteFileId();
								// 保存之前案件的附加文檔信息
								List<SrmCaseAttFileDTO> caseAttFileDTOs= this.srmCaseAttFileDAO.listByCaseId(caseId, null, null);
								SrmCaseAttFile tempSrmCaseAttFile = null;
								if(!CollectionUtils.isEmpty(caseAttFileDTOs)){
									File tempFilePath = null;
									// 刪除附加文檔的信息
									for(SrmCaseAttFileDTO srmCaseAttFileDTO : caseAttFileDTOs){
										if(StringUtils.hasText(deleteFileId) && deleteFileId.contains(srmCaseAttFileDTO.getAttFileId())){
											tempSrmCaseAttFile = (SrmCaseAttFile)
													transformer.transform(srmCaseAttFileDTO, new SrmCaseAttFile());
											this.srmCaseAttFileDAO.delete(tempSrmCaseAttFile);
											//刪除服務上的文件
											FileUtils.removeFile(srmCaseAttFileDTO.getFilePath());
											tempFilePath = new File(srmCaseAttFileDTO.getFilePath());
											File[] fa = tempFilePath.listFiles();
											if (fa != null && fa.length == 0) {
												FileUtils.removeFile(srmCaseAttFileDTO.getFilePath());
											}
										} else {
											continue;
										}
									}
								}
								//添加上傳的文件
								saveCaseAttFile(logonUser, caseManagerFormDTO.getFileName(), caseId, Boolean.TRUE);
								// 案件處理中設備支援功能檔
								
								// 刪除之前的設備支援功能資料
						//		List<SrmCaseAssetFunctionDTO> srmCaseAssetFunctionDTOs = this.srmCaseAssetFunctionDAO.listByCaseId(caseId);
								this.srmCaseAssetFunctionDAO.deleteAll(caseId);
								// 處理內建功能
								if(StringUtils.hasText(srmCaseHandleInfo.getBuiltInFeature())){
									this.dealCaseAssetFunction(srmCaseHandleInfo.getBuiltInFeature(), caseId, IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE);
								}
								// 周邊設備功能1
								if(StringUtils.hasText(srmCaseHandleInfo.getPeripheralsFunction())){
									this.dealCaseAssetFunction(srmCaseHandleInfo.getPeripheralsFunction(), caseId, IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS);
								}
								// 周邊設備功能2
								if(StringUtils.hasText(srmCaseHandleInfo.getPeripheralsFunction2())){
									this.dealCaseAssetFunction(srmCaseHandleInfo.getPeripheralsFunction2(), caseId, IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2);
								}
								// 周邊設備功能3
								if(StringUtils.hasText(srmCaseHandleInfo.getPeripheralsFunction3())){
									this.dealCaseAssetFunction(srmCaseHandleInfo.getPeripheralsFunction3(), caseId, IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3);
								}
								// bug 2262   待派工案件處理頁面-派工--案件主表存儲
								if (IAtomsConstants.PARAM_YES.equals(caseManagerFormDTO.getHasCaseIdFlag())) {
									// 派工時，如果不是派工給客服，TMS, QA則寫入派工單位
									if (!((IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransaction.getDeptCode())) || (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransaction.getDeptCode())) || (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransaction.getDeptCode())))) {
										srmCaseHandleInfo.setDepartmentId(srmCaseTransaction.getDeptCode());
										// 填入最後一次派工的派工單位（排除客服，TMS，QA）
										srmCaseHandleInfo.setInstalledDeptId(srmCaseTransaction.getDeptCode());
										// 填入最後一次派工的處理人員（排除客服，TMS，QA）
										//srmCaseHandleInfo.setInstalledUser(srmCaseTransaction.getDealById());
									}
									// 案件狀態更新為已派工
									srmCaseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
									
									// 派工單位，包括TMS，QA，客服
									srmCaseHandleInfo.setDispatchDeptId(srmCaseTransaction.getDeptCode());
									//srmCaseHandleInfo.setDispatchProcessUser(srmCaseTransaction.getDealById());
									//srmCaseHandleInfo.setDispatchProcessUsername(srmCaseTransaction.getDealByName());
									srmCaseHandleInfo.setDispatchDate(DateTimeUtils.getCurrentTimestamp());
									srmCaseHandleInfo.setDispatchUser(logonUser.getId());
									srmCaseHandleInfo.setDispatchUserName(logonUser.getName());
									// 進件完工日
									srmCaseHandleInfo.setCreatedFinishDate(srmCaseTransaction.getDealDate());
									// 處理方式
									srmCaseHandleInfo.setProcessType(null);
									//CR #2869 新增三個欄位 2017/11/22
									srmCaseHandleInfo.setFirstDescription(srmCaseTransaction.getDescription());
									String candidateGroup = null;
									/*if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransaction.getDeptCode())) {
										candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode();
									} else if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransaction.getDeptCode())) {
										candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.TMS.getCode();
									} else if (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransaction.getDeptCode())) {
										candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.QA.getCode();
									} else {
										candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.ENGINEER.getCode();
									}*/
									// CR #2951 廠商客服   		//Task #3578 客戶廠商客服
									candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.CUS_VENDOR_SERVICE.getCode();
									if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransaction.getDeptCode())) {
									} else if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransaction.getDeptCode())) {
										candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.TMS.getCode();
									} else if (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransaction.getDeptCode())) {
										candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.QA.getCode();
									} else {
										candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.ENGINEER.getCode();
									}
									caseManagerFormDTO.setCandidateGroup(candidateGroup);
								} else {
									//如果不是派工
									//CR #2869 新增三個欄位 2017/11/22
									srmCaseHandleInfo.setThirdDescription(srmCaseHandleInfo.getSecondDescription());
									srmCaseHandleInfo.setSecondDescription(srmCaseHandleInfo.getFirstDescription());
									srmCaseHandleInfo.setFirstDescription(srmCaseTransaction.getUpdateItem());
								}
								
								//Task #3584 reopen 若是裝機件，則此件之需求單號是裝機案件單號(ATOMS) 將其寫入裝機案件編號欄位
								String caseCategory = IAtomsConstants.MARK_EMPTY_STRING;
								//如果是宣揚
								if (bccCompanyDTO != null 
											&& StringUtils.hasText(bccCompanyDTO.getCompanyId()) 
											&& bccCompanyDTO.getCompanyId().equals(srmCaseHandleInfo.getCustomerId())){
									if(StringUtils.hasText(srmCaseHandleInfo.getRequirementNo()) 
												&& srmCaseHandleInfo.getRequirementNo().length() > 1) {
										caseCategory = srmCaseHandleInfo.getRequirementNo().substring(0, 2);
										if (caseCategory.equalsIgnoreCase("EI")) {
											//需求單號 如果是 裝機 ei開頭 寫入InstallCaseId
											srmCaseHandleInfo.setInstallCaseId(srmCaseHandleInfo.getRequirementNo());
										} else if ((!caseCategory.equalsIgnoreCase("EI"))
															&& (!caseCategory.equalsIgnoreCase("EC"))
															&& (!caseCategory.equalsIgnoreCase("EM"))
															&& (!caseCategory.equalsIgnoreCase("EU"))
															&& (!caseCategory.equalsIgnoreCase("EA"))
															&& (!caseCategory.equalsIgnoreCase("ER"))) {
											//需求單號 如果不是 ei ec em eu ea er 開頭
											srmCaseHandleInfo.setInstallCaseId(null);
										} else {
											String installCaseId = this.srmCaseHandleInfoDAO.getInstallCaseId(srmCaseHandleInfo.getDtid());
											if (StringUtils.hasText(installCaseId)) {
												//需求單號 如果 裝機 ei開頭 的案件已存在，將其InstallCaseId寫入 需求單號  ec em eu ea er 開頭的案件
												srmCaseHandleInfo.setInstallCaseId(installCaseId);
											}
										}
									} else {
										//無需求單號，或長度<2
										srmCaseHandleInfo.setInstallCaseId(null);
									}
								}
								
								//保存案件處理信息
								this.srmCaseHandleInfoDAO.update(srmCaseHandleInfo);
								
								//Task #3584 如果裝機 或者 atoms裝幾件 需求單號變了，installCaseId賦值
								if(changeRequirementNo){
									//調用存儲過程，將同dtid下installCaseId的值改變， 或者同dtid下 em eu...installCaseId 的值改變
									this.srmCaseHandleInfoDAO.changeInstallCaseId(srmCaseHandleInfo.getCaseId(), srmCaseHandleInfo.getDtid(), srmCaseHandleInfo.getRequirementNo(), null, null);
								}
							//	msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.SAVE_SUCCESS, new String[]{this.getMyName()});
								msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.SAVE_CASE_SUCCESS, new String[]{caseId});
							}
						}
						// bug 2262  待派工案件處理頁面-派工--返回消息
						if (IAtomsConstants.PARAM_YES.equals(caseManagerFormDTO.getHasCaseIdFlag())) {
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.DISPATCH_MANY_CASES_SUCCESS, new String[]{caseId});
							sessionContext.setReturnMessage(msg);
							return sessionContext;
						}	
					// 建案保存
					} else {
						// 保存案件信息返回一个消息
						msg = saveCaseInfo(caseManagerFormDTO);
						//Task #3519api建案 log中要記錄transactionId
						if(IAtomsConstants.PARAM_YES.equals(caseManagerFormDTO.getIsCmsCreate())){
							sessionContext.setAttribute("apiTransactionId", caseManagerFormDTO.getSrmCaseHandleInfoDTO().getApiTransactionId());
						}
					}
				}
			} else {
				msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.SESSION_INVALIDATED_TIME_OUT);
			}
			sessionContext.setReturnMessage(msg);
			Map map = new HashMap();
			if (msg != null && Message.STATUS.SUCCESS.equals(msg.getStatus())) {
				map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, true);
			} else {
				map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, false);
			}
			sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".createCase() DataAccess Exception:" + e, e);
			msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.SAVE_FAILURE, new String[]{this.getMyName()});
			throw new ServiceException(msg);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".createCase(SessionContext sessionContext):" + e, e);
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED, new String[]{this.getMyName()}, e);
		}
		return sessionContext;
	}
	
	private Message saveOtherCase(CaseManagerFormDTO formDTO) {
		Message msg = null;
		LogonUser logonUser = formDTO.getLogonUser();
		Transformer transformer = new SimpleDtoDmoTransformer();
		SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = formDTO.getSrmCaseHandleInfoDTO();
		// 案件編號
		String caseId = srmCaseHandleInfoDTO.getCaseId();
		try {
			if (StringUtils.hasText(caseId)) {
				// 只改變需求單號的標志位
				boolean isOnlyRequirementNo = false;
				// 結案、立即結案 // Task #2682 進入待結案審查，就只能改 需求單號
				if(IAtomsConstants.CASE_STATUS.IMMEDIATE_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
						|| IAtomsConstants.CASE_STATUS.CLOSED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
						|| IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
					isOnlyRequirementNo = true;
				}
				// 結案、立即結案保存
				if(isOnlyRequirementNo){
					// 更新標志位
					boolean isUpdate = false;
					// 修改歷史
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getIsHistory()) && IAtomsConstants.YES.equals(srmCaseHandleInfoDTO.getIsHistory())){
						SrmHistoryCaseHandleInfo srmHistoryCaseHandleInfo = this.historyCaseHandleInfoDAO.findByPrimaryKey(SrmHistoryCaseHandleInfo.class, caseId);
						if(srmHistoryCaseHandleInfo != null){
							// 當前有需求單號
							if(StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo())){
								// 之前有需求單號
								if(StringUtils.hasText(srmHistoryCaseHandleInfo.getRequirementNo())){
									if(!srmCaseHandleInfoDTO.getRequirementNo().equals(srmHistoryCaseHandleInfo.getRequirementNo())){
										isUpdate = true;
									}
								} else {
									isUpdate = true;
								}
							// 當前無需求單號
							} else {
								// 之前有需求單號
								if(StringUtils.hasText(srmHistoryCaseHandleInfo.getRequirementNo())){
									isUpdate = true;
								}
							}
							String updateItem = null;
							StringBuilder tempBuilder = new StringBuilder();
							// 更新需求單號
							if(isUpdate){
								// 需求單號
								tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
								tempBuilder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO));
								tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
								tempBuilder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, new String[]{srmHistoryCaseHandleInfo.getRequirementNo(), srmCaseHandleInfoDTO.getRequirementNo()}, null));
								tempBuilder.append(IAtomsConstants.MARK_SEMICOLON);
								tempBuilder.append(IAtomsConstants.MARK_WRAP);
							}
							
							updateItem = tempBuilder.toString();
							
							// Task #3227 案件實際完修時間更新
							srmHistoryCaseHandleInfo.setCompleteDate(srmCaseHandleInfoDTO.getCompleteDate());
							// 存歷史案件處理
							srmHistoryCaseHandleInfo.setRequirementNo(srmCaseHandleInfoDTO.getRequirementNo());
							srmHistoryCaseHandleInfo.setUpdatedById(logonUser.getId());
							srmHistoryCaseHandleInfo.setUpdatedByName(logonUser.getName());
							srmHistoryCaseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							//CR #2869 新增三個欄位 2017/11/22
							srmHistoryCaseHandleInfo.setThirdDescription(srmHistoryCaseHandleInfo.getSecondDescription());
							srmHistoryCaseHandleInfo.setSecondDescription(srmHistoryCaseHandleInfo.getFirstDescription());
							srmHistoryCaseHandleInfo.setFirstDescription(updateItem);
							this.historyCaseHandleInfoDAO.update(srmHistoryCaseHandleInfo);
							
							String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_HISTORY_CASE_TRANSACTION);
							// 存歷史案件歷程
							SrmHistoryCaseTransaction srmHistoryCaseTransaction = new SrmHistoryCaseTransaction();
							srmHistoryCaseTransaction.setTransactionId(transactionId);
							srmHistoryCaseTransaction.setCaseId(caseId);
							srmHistoryCaseTransaction.setCreatedById(logonUser.getId());
							srmHistoryCaseTransaction.setCreatedByName(logonUser.getName());
							srmHistoryCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							srmHistoryCaseTransaction.setCaseStatus(srmHistoryCaseHandleInfo.getCaseStatus());
							srmHistoryCaseTransaction.setActionId(IAtomsConstants.ACTION_SAVE);
							srmHistoryCaseTransaction.setDealById(logonUser.getId());
							srmHistoryCaseTransaction.setDealByName(logonUser.getName());
							srmHistoryCaseTransaction.setDealDate(srmHistoryCaseTransaction.getCreatedDate());
							srmHistoryCaseTransaction.setUpdateItem(updateItem);
							this.srmHistoryCaseTransactionDAO.insert(srmHistoryCaseTransaction);
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.SAVE_CASE_SUCCESS, new String[]{caseId});
						} else {
							LOGGER.error("CaseManagerService --> createCase() --> ", "save case error!!!", "srmHistoryCaseHandleInfo is null");
							msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.SAVE_FAILURE, new String[]{this.getMyName()});
						}
					// 改處理中的
					} else {
						SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseId);
						if(srmCaseHandleInfo != null){
							// 當前有需求單號
							if(StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo())){
								// 之前有需求單號
								if(StringUtils.hasText(srmCaseHandleInfo.getRequirementNo())){
									if(!srmCaseHandleInfoDTO.getRequirementNo().equals(srmCaseHandleInfo.getRequirementNo())){
										isUpdate = true;
									}
								} else {
									isUpdate = true;
								}
							// 當前無需求單號
							} else {
								// 之前有需求單號
								if(StringUtils.hasText(srmCaseHandleInfo.getRequirementNo())){
									isUpdate = true;
								}
							}
							String updateItem = null;
							StringBuilder tempBuilder = new StringBuilder();
							// 更新需求單號
							if(isUpdate){
								// 需求單號
								tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
								tempBuilder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO));
								tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
								tempBuilder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, new String[]{srmCaseHandleInfo.getRequirementNo(), srmCaseHandleInfoDTO.getRequirementNo()}, null));
								tempBuilder.append(IAtomsConstants.MARK_SEMICOLON);
								tempBuilder.append(IAtomsConstants.MARK_WRAP);
							}
							updateItem = tempBuilder.toString();
							
							// Task #3227 案件實際完修時間更新
							//srmCaseHandleInfo.setCompleteDate(srmCaseHandleInfoDTO.getCompleteDate());
							// 存案件處理
							srmCaseHandleInfo.setRequirementNo(srmCaseHandleInfoDTO.getRequirementNo());
							srmCaseHandleInfo.setUpdatedById(logonUser.getId());
							srmCaseHandleInfo.setUpdatedByName(logonUser.getName());
							srmCaseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							//CR #2869 新增三個欄位 2017/11/22
							srmCaseHandleInfo.setThirdDescription(srmCaseHandleInfo.getSecondDescription());
							srmCaseHandleInfo.setSecondDescription(srmCaseHandleInfo.getFirstDescription());
							srmCaseHandleInfo.setFirstDescription(updateItem);
							this.srmCaseHandleInfoDAO.update(srmCaseHandleInfo);
							
							String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
							// 存案件歷程
							SrmCaseTransaction srmCaseTransaction = new SrmCaseTransaction();
							srmCaseTransaction.setTransactionId(transactionId);
							srmCaseTransaction.setCaseId(caseId);
							srmCaseTransaction.setCreatedById(logonUser.getId());
							srmCaseTransaction.setCreatedByName(logonUser.getName());
							srmCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							srmCaseTransaction.setCaseStatus(srmCaseHandleInfo.getCaseStatus());
							srmCaseTransaction.setActionId(IAtomsConstants.ACTION_SAVE);
							srmCaseTransaction.setDealById(logonUser.getId());
							srmCaseTransaction.setDealByName(logonUser.getName());
							srmCaseTransaction.setDealDate(srmCaseTransaction.getCreatedDate());
							srmCaseTransaction.setUpdateItem(updateItem);
							this.srmCaseTransactionDAO.insert(srmCaseTransaction);
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.SAVE_CASE_SUCCESS, new String[]{caseId});
						} else {
							LOGGER.error("CaseManagerService --> createCase() --> ", "save case error!!!", "srmCaseHandleInfo is null");
							msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.SAVE_FAILURE, new String[]{this.getMyName()});
						}
					}
				} else {
					SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseId);
					String oldDtid = srmCaseHandleInfo.getDtid();
					//修改其他案件進行過編輯存儲后，標誌位變為N的問題
					srmCaseHandleInfoDTO.setHasRetreat(srmCaseHandleInfo.getHasRetreat());
					srmCaseHandleInfoDTO.setHasDelay(srmCaseHandleInfo.getHasDelay());
					srmCaseHandleInfoDTO.setHasOnlineExclusion(srmCaseHandleInfo.getHasOnlineExclusion());
					//派工，回應，到場，完修，簽收相關資料存儲
					srmCaseHandleInfoDTO.setDispatchProcessUser(srmCaseHandleInfo.getDispatchProcessUser());
					srmCaseHandleInfoDTO.setDispatchProcessUsername(srmCaseHandleInfo.getDispatchProcessUsername());
					srmCaseHandleInfoDTO.setDispatchUser(srmCaseHandleInfo.getDispatchUser());
					srmCaseHandleInfoDTO.setDispatchUserName(srmCaseHandleInfo.getDispatchUserName());
					if (srmCaseHandleInfo.getDispatchDate() != null) {
						srmCaseHandleInfoDTO.setDispatchDate(new Timestamp(srmCaseHandleInfo.getDispatchDate().getTime()));
					}
					if (srmCaseHandleInfo.getResponseDate() != null) {
						srmCaseHandleInfoDTO.setResponseDate(new Timestamp(srmCaseHandleInfo.getResponseDate().getTime()));
					}
					srmCaseHandleInfoDTO.setResponseUser(srmCaseHandleInfo.getResponseUser());
					srmCaseHandleInfoDTO.setResponseUserName(srmCaseHandleInfo.getResponseUserName());
					srmCaseHandleInfoDTO.setArriveUser(srmCaseHandleInfo.getArriveUser());
					srmCaseHandleInfoDTO.setArriveUserName(srmCaseHandleInfo.getArriveUserName());
					if (srmCaseHandleInfo.getArriveDate() != null) {
						srmCaseHandleInfoDTO.setArriveDate(new Timestamp(srmCaseHandleInfo.getArriveDate().getTime()));
					}
					srmCaseHandleInfoDTO.setCompleteUser(srmCaseHandleInfo.getCompleteUser());
					srmCaseHandleInfoDTO.setCompleteUserName(srmCaseHandleInfo.getCompleteUserName());
					if (srmCaseHandleInfo.getCompleteDate() != null) {
						srmCaseHandleInfoDTO.setCompleteDate(new Timestamp(srmCaseHandleInfo.getCompleteDate().getTime()));
					}
					srmCaseHandleInfoDTO.setCompleteDepartmentId(srmCaseHandleInfo.getCompleteDepartmentId());
					srmCaseHandleInfoDTO.setAnalyzeUser(srmCaseHandleInfo.getAnalyzeUser());
					srmCaseHandleInfoDTO.setAnalyzeUserName(srmCaseHandleInfo.getAnalyzeUserName());
					if (srmCaseHandleInfo.getAnalyzeDate() != null) {
						srmCaseHandleInfoDTO.setAnalyzeDate(new Timestamp(srmCaseHandleInfo.getAnalyzeDate().getTime()));
					}
					//記錄異動欄位的信息
					String updateComment = null;
					// 異動信息
					if (StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) && !srmCaseHandleInfoDTO.getDtid().equals(oldDtid)) {
						updateComment = i18NUtil.getName(IAtomsMessageCode.CHANGE_DTID_MSG, new String[]{oldDtid, srmCaseHandleInfoDTO.getDtid()}, null);
					} else {
						updateComment = this.getUpdateContent(srmCaseHandleInfoDTO, false);
					}
					// 連線方式有異動
					if(StringUtils.hasText(srmCaseHandleInfo.getConnectionType()) && (!srmCaseHandleInfo.getConnectionType().equals(srmCaseHandleInfoDTO.getConnectionType()))
							|| StringUtils.hasText(srmCaseHandleInfoDTO.getConnectionType()) && (!srmCaseHandleInfoDTO.getConnectionType().equals(srmCaseHandleInfo.getConnectionType()))){
						// 刪除之前連接方式
						this.srmCaseCommModeDAO.deleteAll(caseId);
						// 案件通訊模式維護檔保存
						if(StringUtils.hasText(srmCaseHandleInfoDTO.getConnectionType())){
							int j = 0;
							SrmCaseCommMode srmCaseCommMode = null;
							String connectionTypeId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_COMM_MODE);
							for(String tempId : StringUtils.toList(srmCaseHandleInfoDTO.getConnectionType(), IAtomsConstants.MARK_SEPARATOR)){
								j++;
								srmCaseCommMode = new SrmCaseCommMode();
								srmCaseCommMode.setCaseId(caseId);
								srmCaseCommMode.setId(connectionTypeId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(j));
								srmCaseCommMode.setCommModeId(tempId);
								this.srmCaseCommModeDAO.insert(srmCaseCommMode);
							}
						}
					}
					String deleteFileId = formDTO.getDeleteFileId();
					// 保存之前案件的附加文檔信息
					List<SrmCaseAttFileDTO> caseAttFileDTOs= this.srmCaseAttFileDAO.listByCaseId(caseId, null, null);
					SrmCaseAttFile tempSrmCaseAttFile = null;
					if(!CollectionUtils.isEmpty(caseAttFileDTOs)){
						File tempFilePath = null;
						// 刪除附加文檔的信息
						for(SrmCaseAttFileDTO srmCaseAttFileDTO : caseAttFileDTOs){
							if(StringUtils.hasText(deleteFileId) && deleteFileId.contains(srmCaseAttFileDTO.getAttFileId())){
								tempSrmCaseAttFile = (SrmCaseAttFile)
										transformer.transform(srmCaseAttFileDTO, new SrmCaseAttFile());
								this.srmCaseAttFileDAO.delete(tempSrmCaseAttFile);
								//刪除服務上的文件
								FileUtils.removeFile(srmCaseAttFileDTO.getFilePath());
								tempFilePath = new File(srmCaseAttFileDTO.getFilePath());
								File[] fa = tempFilePath.listFiles();
								if (fa != null && fa.length == 0) {
									FileUtils.removeFile(srmCaseAttFileDTO.getFilePath());
								}
							} else {
								continue;
							}
						}
					}
					//添加上傳的文件
					saveCaseAttFile(logonUser, formDTO.getFileName(), caseId, Boolean.TRUE);
					// 與之前的ditd不同
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) && !srmCaseHandleInfoDTO.getDtid().equals(oldDtid)){
						this.srmCaseAssetLinkDAO.deleteAll(caseId);
						// 案件處理中設備链接档DTO集合
						List<SrmCaseAssetLinkDTO> tempAssetLinkDTOs = this.getCaseAssetList(srmCaseHandleInfoDTO, logonUser, null);
						// 案件设备链接档保存
						if(!CollectionUtils.isEmpty(tempAssetLinkDTOs)){
							int j = 0;
							String assetLinkId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_LINK);
							for(SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : tempAssetLinkDTOs){
								j++;
								SrmCaseAssetLink saveSrmCaseAssetLink = (SrmCaseAssetLink)transformer.transform(srmCaseAssetLinkDTO, new SrmCaseAssetLink());
								saveSrmCaseAssetLink.setAssetLinkId(assetLinkId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(j));
								saveSrmCaseAssetLink.setCaseId(caseId);
								this.srmCaseAssetLinkDAO.insert(saveSrmCaseAssetLink);
							}
						}
					// 與之前ditd相同
					} else {
						// 異動更新設備信息
						this.saveCaseAssetLink(srmCaseHandleInfoDTO, logonUser);
					}
					
					srmCaseHandleInfoDTO.setCmsCase(srmCaseHandleInfo.getCmsCase());
					srmCaseHandleInfoDTO.setCreatedDate(DateTimeUtils.toTimestamp(srmCaseHandleInfo.getCreatedDate().toString()));
					srmCaseHandleInfoDTO.setCreatedById(srmCaseHandleInfo.getCreatedById());
					srmCaseHandleInfoDTO.setCreatedByName(srmCaseHandleInfo.getCreatedByName());
					srmCaseHandleInfoDTO.setThirdDescription(srmCaseHandleInfo.getThirdDescription());
					srmCaseHandleInfoDTO.setSecondDescription(srmCaseHandleInfo.getSecondDescription());
					srmCaseHandleInfoDTO.setFirstDescription(srmCaseHandleInfo.getFirstDescription());
					srmCaseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, srmCaseHandleInfo);
					srmCaseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
					srmCaseHandleInfo.setUpdatedById(logonUser.getId());
					srmCaseHandleInfo.setUpdatedByName(logonUser.getName());
					//this.srmCaseHandleInfoDAO.update(srmCaseHandleInfo);
					// 刪除之前的設備支援功能資料
					this.srmCaseAssetFunctionDAO.deleteAll(caseId);
					// 處理內建功能
					if(StringUtils.hasText(srmCaseHandleInfo.getBuiltInFeature())){
						this.dealCaseAssetFunction(srmCaseHandleInfo.getBuiltInFeature(), caseId, IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE);
					}
					// 周邊設備功能1
					if(StringUtils.hasText(srmCaseHandleInfo.getPeripheralsFunction())){
						this.dealCaseAssetFunction(srmCaseHandleInfo.getPeripheralsFunction(), caseId, IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS);
					}
					// 周邊設備功能2
					if(StringUtils.hasText(srmCaseHandleInfo.getPeripheralsFunction2())){
						this.dealCaseAssetFunction(srmCaseHandleInfo.getPeripheralsFunction2(), caseId, IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2);
					}
					// 周邊設備功能3
					if(StringUtils.hasText(srmCaseHandleInfo.getPeripheralsFunction3())){
						this.dealCaseAssetFunction(srmCaseHandleInfo.getPeripheralsFunction3(), caseId, IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3);
					}
					// 處理案件處理記錄
					SrmCaseTransaction srmCaseTransaction = new SrmCaseTransaction();
					String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
					srmCaseTransaction.setTransactionId(transactionId);
					srmCaseTransaction.setCaseId(caseId);
					srmCaseTransaction.setCreatedById(logonUser.getId());
					srmCaseTransaction.setCreatedByName(logonUser.getName());
					srmCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
					srmCaseTransaction.setCaseStatus(srmCaseHandleInfo.getCaseStatus());
					srmCaseTransaction.setActionId(IAtomsConstants.ACTION_SAVE);
					srmCaseTransaction.setDealById(logonUser.getId());
					srmCaseTransaction.setDealByName(logonUser.getName());
					srmCaseTransaction.setDealDate(srmCaseTransaction.getCreatedDate());
					String updatedDescription = null;
					if (StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) && srmCaseHandleInfoDTO.getDtid().equals(oldDtid)) {
						updatedDescription = this.createUpdateDescription(formDTO, Boolean.TRUE, Boolean.FALSE);
					}
					if (StringUtils.hasText(updateComment)) {
						srmCaseTransaction.setUpdateItem(updateComment += (updatedDescription==null?"":updatedDescription));
					} else {
						srmCaseTransaction.setUpdateItem(updatedDescription==null?"":updatedDescription );
					}
					if (IAtomsConstants.PARAM_YES.equals(formDTO.getHasCaseIdFlag())) {
						// 
						String description = IAtomsConstants.MARK_EMPTY_STRING;
						BimDepartment department = null;
						BimCompany bimCompany = null;
						// 處理內容為“派工至[維護廠商-維護部門]”
						bimCompany = this.getCompanyDAO().findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
						if (bimCompany != null) {
							//Bug #2305
							if(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDepartmentId())) {
								department = new BimDepartment();
								department.setDeptName(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE));
								description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT;
								description = description + department.getDeptName();
							} else {
								description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT + bimCompany.getShortName();
								if (StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentId())) {
									department = this.departmentDAO.findByPrimaryKey(BimDepartment.class, srmCaseHandleInfoDTO.getDepartmentId());
									description = description + IAtomsConstants.MARK_MIDDLE_LINE + department.getDeptName();
								}
							}
							srmCaseTransaction.setDeptCode(srmCaseHandleInfoDTO.getDepartmentId());
							description = description + IAtomsConstants.MARK_BRACKET_RIGHT;
						}
						srmCaseTransaction.setDescription(description);
						srmCaseTransaction.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
						srmCaseTransaction.setActionId(IAtomsConstants.ACTION_DISPATCH);
						srmCaseTransaction.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));

						// 若關卡不變，則寫入當前關卡
						srmCaseTransaction.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH);
						// 若關卡不變，則寫入當前關卡
						srmCaseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode()));
					
					}
					this.srmCaseTransactionDAO.insert(srmCaseTransaction);
					// bug 2262   待派工案件處理頁面-派工--案件主表存儲
					if (IAtomsConstants.PARAM_YES.equals(formDTO.getHasCaseIdFlag())) {
						// 派工時，如果不是派工給客服，TMS, QA則寫入派工單位
						if (!((IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransaction.getDeptCode())) || (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransaction.getDeptCode())) || (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransaction.getDeptCode())))) {
							srmCaseHandleInfo.setDepartmentId(srmCaseTransaction.getDeptCode());
							// 填入最後一次派工的派工單位（排除客服，TMS，QA）
							srmCaseHandleInfo.setInstalledDeptId(srmCaseTransaction.getDeptCode());
						}
						// 案件狀態更新為已派工
						srmCaseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
						
						// 派工單位，包括TMS，QA，客服
						srmCaseHandleInfo.setDispatchDeptId(srmCaseTransaction.getDeptCode());
						srmCaseHandleInfo.setDispatchDate(DateTimeUtils.getCurrentTimestamp());
						srmCaseHandleInfo.setDispatchUser(logonUser.getId());
						srmCaseHandleInfo.setDispatchUserName(logonUser.getName());
						// 進件完工日
						srmCaseHandleInfo.setCreatedFinishDate(srmCaseTransaction.getDealDate());
						// 處理方式
						srmCaseHandleInfo.setProcessType(null);
						//CR #2869 新增三個欄位 2017/11/22
						srmCaseHandleInfo.setFirstDescription(srmCaseTransaction.getDescription());
						String candidateGroup = null;
						// CR #2951 廠商客服	//Task #3578 客戶廠商客服
						candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.CUS_VENDOR_SERVICE.getCode();
						if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransaction.getDeptCode())) {
						} else if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransaction.getDeptCode())) {
							candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.TMS.getCode();
						} else if (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransaction.getDeptCode())) {
							candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.QA.getCode();
						} else {
							candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.ENGINEER.getCode();
						}
						formDTO.setCandidateGroup(candidateGroup);
					} else {
						//如果不是派工
						//CR #2869 新增三個欄位 2017/11/22
						srmCaseHandleInfo.setThirdDescription(srmCaseHandleInfo.getSecondDescription());
						srmCaseHandleInfo.setSecondDescription(srmCaseHandleInfo.getFirstDescription());
						srmCaseHandleInfo.setFirstDescription(srmCaseTransaction.getUpdateItem());
					}
					srmCaseHandleInfo.setReceiptType(srmCaseHandleInfoDTO.getReceiptType());
					this.srmCaseHandleInfoDAO.update(srmCaseHandleInfo);
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.SAVE_CASE_SUCCESS, new String[]{caseId});
					// bug 2262  待派工案件處理頁面-派工--返回消息
					if (IAtomsConstants.PARAM_YES.equals(formDTO.getHasCaseIdFlag())) {
						msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.DISPATCH_MANY_CASES_SUCCESS, new String[]{caseId});
					}
				}
			} else {
				// 案件類別
				srmCaseHandleInfoDTO.setCaseCategory(formDTO.getCaseCategory());
				// 拿到公司信息
				BimCompany company = (BimCompany) this.companyDAO.findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCustomerId());
				// 設置客戶碼
				srmCaseHandleInfoDTO.setCustomerCode(company.getCustomerCode());
				srmCaseHandleInfoDTO.setCreatedById(logonUser.getId());
				srmCaseHandleInfoDTO.setCreatedByName(logonUser.getName());
				srmCaseHandleInfoDTO.setUpdatedById(srmCaseHandleInfoDTO.getCreatedById());
				srmCaseHandleInfoDTO.setUpdatedByName(logonUser.getName());
				//設置案件狀態
				srmCaseHandleInfoDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode());
				caseId = createCaesId(srmCaseHandleInfoDTO.getCustomerCode(), srmCaseHandleInfoDTO.getCaseCategory());
				srmCaseHandleInfoDTO.setCaseId(caseId);
				// 設置報修次數
				srmCaseHandleInfoDTO.setRepairTimes(1);
				// 案件设备链接档保存
				// 案件處理中設備链接档DTO集合
				List<SrmCaseAssetLinkDTO> tempAssetLinkDTOs = this.getCaseAssetList(srmCaseHandleInfoDTO, logonUser, null);
				srmCaseHandleInfoDTO.setSrmCaseAssetLinkDTOs(tempAssetLinkDTOs);
				// 案件處理中設備支援功能檔DTO集合
				List<SrmCaseAssetFunctionDTO> tempAssetFunctionDTOs = new ArrayList<SrmCaseAssetFunctionDTO>();
				// 處理內建功能
				List<SrmCaseAssetFunctionDTO> builtInFeatureDtos = null;
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getBuiltInFeature())){
					builtInFeatureDtos = this.getCaseAssetFunctionDtoList(srmCaseHandleInfoDTO.getBuiltInFeature(), IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE);
					tempAssetFunctionDTOs.addAll(builtInFeatureDtos);
				}
				// 周邊設備功能1
				List<SrmCaseAssetFunctionDTO> peripheralsFunctionDtos = null;
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsFunction())){
					peripheralsFunctionDtos = this.getCaseAssetFunctionDtoList(srmCaseHandleInfoDTO.getPeripheralsFunction(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS);
					tempAssetFunctionDTOs.addAll(peripheralsFunctionDtos);
				}
				// 周邊設備功能2
				List<SrmCaseAssetFunctionDTO> peripheralsFunction2Dtos = null;
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsFunction2())){
					peripheralsFunction2Dtos = this.getCaseAssetFunctionDtoList(srmCaseHandleInfoDTO.getPeripheralsFunction2(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2);
					tempAssetFunctionDTOs.addAll(peripheralsFunction2Dtos);
				}
				// 周邊設備功能3
				List<SrmCaseAssetFunctionDTO> peripheralsFunction3Dtos = null;
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsFunction3())){
					peripheralsFunction3Dtos = this.getCaseAssetFunctionDtoList(srmCaseHandleInfoDTO.getPeripheralsFunction3(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3);
					tempAssetFunctionDTOs.addAll(peripheralsFunction3Dtos);
				}
				// 設備支援功能檔DTO集合保存至案件處理DTO
				srmCaseHandleInfoDTO.setSrmCaseAssetFunctionDTOs(tempAssetFunctionDTOs);
				// 處理案件處理記錄
				SrmCaseTransactionDTO srmCaseTransactionDTO = new SrmCaseTransactionDTO();
				srmCaseTransactionDTO.setCreatedById(logonUser.getId());
				srmCaseTransactionDTO.setCreatedByName(logonUser.getName());
				srmCaseTransactionDTO.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
				srmCaseTransactionDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode());
				srmCaseTransactionDTO.setActionId(IAtomsConstants.ACTION_SAVE);
				srmCaseTransactionDTO.setDealById(logonUser.getId());
				srmCaseTransactionDTO.setDealByName(logonUser.getName());
				srmCaseTransactionDTO.setDealDate(srmCaseTransactionDTO.getCreatedDate());
				// 案件處理記錄DTO保存至案件處理DTO
				srmCaseHandleInfoDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
				// 處理案件附加資料
				List<SrmCaseAttFileDTO> tempCaseAttFileDTOs = null;
				// 最後一次移除文件
				tempCaseAttFileDTOs = this.getCaseAttFileDTOs(logonUser, formDTO.getFileName(), srmCaseHandleInfoDTO.getCaseId(), true);
				// 案件附加資料DTO集合保存至案件處理DTO
				srmCaseHandleInfoDTO.setCaseAttFileDTOs(tempCaseAttFileDTOs);
				if (IAtomsConstants.ACTION_NEW_DISPATCH.equals(formDTO.getActionId())) {
					String description = IAtomsConstants.MARK_EMPTY_STRING;
					BimDepartment department = null;
					if (IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfoDTO.getIsTms())) {
						// 異動，併機，裝機有TMS//CR #3237
						if ((IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())) 
								|| (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())) 
								|| (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()))
								|| (IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()))) {
							// 處理內容為“派工至[TMS]”
							description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO)
													+ IAtomsConstants.MARK_BRACKET_LEFT
													+ IAtomsConstants.CASE_ROLE.TMS.getCode()
													+ IAtomsConstants.MARK_BRACKET_RIGHT;
							srmCaseTransactionDTO.setDeptCode(IAtomsConstants.CASE_ROLE.TMS.getCode());
						}
						// 若案件之【自動派工】未勾選
					} else {
						BimCompany bimCompany = null;
						// 處理內容為“派工至[維護廠商-維護部門]”
						bimCompany = this.getCompanyDAO().findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
						if (bimCompany != null) {
							description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT + bimCompany.getShortName();
							if (StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentId())) {
								if(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDepartmentId())) {
									department = new BimDepartment();
									department.setDeptName(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE));
									description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT;
									description = description + department.getDeptName();
								} else {
									department = this.departmentDAO.findByPrimaryKey(BimDepartment.class, srmCaseHandleInfoDTO.getDepartmentId());
									description = description + IAtomsConstants.MARK_MIDDLE_LINE + department.getDeptName();
								}
								srmCaseTransactionDTO.setDeptCode(srmCaseHandleInfoDTO.getDepartmentId());
							}
							description = description + IAtomsConstants.MARK_BRACKET_RIGHT;
						}
						//caseTransaction.setDeptCode(caseHandleInfo.getDepartmentId());
					}
					srmCaseTransactionDTO.setDescription(description);
					srmCaseTransactionDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
					srmCaseTransactionDTO.setActionId(IAtomsConstants.ACTION_DISPATCH);
					srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));

					// 若關卡不變，則寫入當前關卡
					srmCaseTransactionDTO.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH);
					// 若關卡不變，則寫入當前關卡
					srmCaseTransactionDTO.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode()));
				// 儲存
				} else {
					srmCaseTransactionDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode());
					srmCaseTransactionDTO.setActionId(IAtomsConstants.ACTION_SAVE);
					srmCaseTransactionDTO.setDealById(logonUser.getId());
					srmCaseTransactionDTO.setDealByName(logonUser.getName());
					srmCaseTransactionDTO.setDealDate(srmCaseTransactionDTO.getCreatedDate());
				}
				// 案件處理記錄DTO保存至案件處理DTO
				srmCaseHandleInfoDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
				// 建案-派工--案件主表更新
				if (IAtomsConstants.ACTION_NEW_DISPATCH.equals(formDTO.getActionId())) {
					// 派工時，如果不是派工給客服，TMS, QA則寫入派工單位
					if (!((IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransactionDTO.getDeptCode())) || (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransactionDTO.getDeptCode())) || (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransactionDTO.getDeptCode())))) {
						srmCaseHandleInfoDTO.setDepartmentId(srmCaseTransactionDTO.getDeptCode());
						// 填入最後一次派工的派工單位（排除客服，TMS，QA）
						srmCaseHandleInfoDTO.setInstalledDeptId(srmCaseTransactionDTO.getDeptCode());
						// 填入最後一次派工的處理人員（排除客服，TMS，QA）
						srmCaseHandleInfoDTO.setInstalledUser(srmCaseTransactionDTO.getDealById());
					}
					// 案件狀態更新為已派工
					srmCaseHandleInfoDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
					
					// 派工單位，包括TMS，QA，客服
					srmCaseHandleInfoDTO.setDispatchDeptId(srmCaseTransactionDTO.getDeptCode());
					srmCaseHandleInfoDTO.setDispatchProcessUser(srmCaseTransactionDTO.getDealById());
					srmCaseHandleInfoDTO.setDispatchProcessUsername(srmCaseTransactionDTO.getDealByName());
					srmCaseHandleInfoDTO.setDispatchDate(DateTimeUtils.getCurrentTimestamp());
					srmCaseHandleInfoDTO.setDispatchUser(logonUser.getId());
					srmCaseHandleInfoDTO.setDispatchUserName(logonUser.getName());
					// 進件完工日
					srmCaseHandleInfoDTO.setCreatedFinishDate(srmCaseTransactionDTO.getDealDate());
					// 處理方式
					srmCaseHandleInfoDTO.setProcessType(null);
					//CR #2869 新增三個欄位 2017/11/22
					srmCaseHandleInfoDTO.setFirstDescription(srmCaseTransactionDTO.getDescription());
					
					String candidateGroup = null;
					// CR #2951 廠商客服	//Task #3578 客戶廠商客服
					candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.CUS_VENDOR_SERVICE.getCode();;
					if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransactionDTO.getDeptCode())) {
					} else if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransactionDTO.getDeptCode())) {
						candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.TMS.getCode();
					} else if (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransactionDTO.getDeptCode())) {
						candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.QA.getCode();
					} else {
						candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.ENGINEER.getCode();
					}
					formDTO.setCandidateGroup(candidateGroup);
					formDTO.setActionId(IAtomsConstants.ACTION_DISPATCH);
				}
				// 起案
				formDTO.setActivitiCaseStatusStage(srmCaseHandleInfoDTO.getCaseStatus());
				SessionContext ctx = this.startCaseSetting(formDTO);
				this.createSingleCase(srmCaseHandleInfoDTO, ctx, formDTO.getIsCmsCreate());
				//如果是建案-派工
				if (IAtomsConstants.ACTION_DISPATCH.equals(formDTO.getActionId())) {
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.DISPATCH_MANY_CASES_SUCCESS, new String[]{caseId});
				} else {
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.SAVE_CASE_SUCCESS, new String[]{caseId});
				}
				formDTO.setCaseId(caseId);
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".createCase() DataAccess Exception:" + e, e);
			msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.SAVE_FAILURE, new String[]{this.getMyName()});
			throw new ServiceException(msg);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".createCase(SessionContext sessionContext):" + e, e);
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED, new String[]{this.getMyName()}, e);
		}
		return msg;
	}
	/**
	 * Purpose:將案件資料先按dtid帶值 修改
	 * @author amamndawang
	 * @throws ServiceException ： 出错时抛出ServiceException
	 * @return void 
	 */
	private void changeCaseInfo(SrmCaseHandleInfo srmCaseHandleInfo, String isCheckDtidFlag,boolean isIgnoreAsset) throws ServiceException{
		// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
		boolean isNewHave = false;
		isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfo.getDtid(), null);
		
		// 查詢案件資料
		SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(srmCaseHandleInfo.getDtid(), isNewHave);
		
		// 裝機+異動修改欄位 
		if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
				|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
			// 專案
			srmCaseHandleInfo.setIsProject(srmCaseHandleInfoDTO.getIsProject());
			// 特店代號
			srmCaseHandleInfo.setMerchantCode(srmCaseHandleInfoDTO.getMerchantCode());
			// 表頭（同對外名稱）
			srmCaseHandleInfo.setMerchantHeaderId(srmCaseHandleInfoDTO.getMerchantHeaderId());
			// 裝機地址 同營業地址
			srmCaseHandleInfo.setIsBussinessAddress(srmCaseHandleInfoDTO.getIsBussinessAddress());
			// 裝機地址 同營業地址(縣市)
			srmCaseHandleInfo.setInstalledAdressLocation(srmCaseHandleInfoDTO.getInstalledAdressLocation());
			// 裝機地址
			srmCaseHandleInfo.setInstalledAdress(srmCaseHandleInfoDTO.getInstalledAdress());
			// 裝機聯絡人 同特店聯絡人
			srmCaseHandleInfo.setIsBussinessContact(srmCaseHandleInfoDTO.getIsBussinessContact());
			// 裝機聯絡人
			srmCaseHandleInfo.setInstalledContact(srmCaseHandleInfoDTO.getInstalledContact());
			// 裝機聯絡人電話 同特店聯絡人電話
			srmCaseHandleInfo.setIsBussinessContactPhone(srmCaseHandleInfoDTO.getIsBussinessContactPhone());
			// 裝機聯絡人電話
			srmCaseHandleInfo.setInstalledContactPhone(srmCaseHandleInfoDTO.getInstalledContactPhone());
			// 待結案審查之後
			if(!isIgnoreAsset){
				if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
					// 刷卡機型
					srmCaseHandleInfo.setEdcType(srmCaseHandleInfoDTO.getEdcType());
				}
				// 週邊設備1
				srmCaseHandleInfo.setPeripherals(srmCaseHandleInfoDTO.getPeripherals());
				// 週邊設備2
				srmCaseHandleInfo.setPeripherals2(srmCaseHandleInfoDTO.getPeripherals2());
				// 週邊設備3
				srmCaseHandleInfo.setPeripherals3(srmCaseHandleInfoDTO.getPeripherals3());
			}
			// 軟體版本
			srmCaseHandleInfo.setSoftwareVersion(srmCaseHandleInfoDTO.getSoftwareVersion());
			// 內建功能
			srmCaseHandleInfo.setBuiltInFeature(srmCaseHandleInfoDTO.getBuiltInFeature());
			// 雙模組模式
			srmCaseHandleInfo.setMultiModule(srmCaseHandleInfoDTO.getMultiModule());
			// 週邊設備功能1
			srmCaseHandleInfo.setPeripheralsFunction(srmCaseHandleInfoDTO.getPeripheralsFunction());
			// ECR連線
			srmCaseHandleInfo.setEcrConnection(srmCaseHandleInfoDTO.getEcrConnection());
			// 週邊設備功能2
			srmCaseHandleInfo.setPeripheralsFunction2(srmCaseHandleInfoDTO.getPeripheralsFunction2());
			// 連接方式
			srmCaseHandleInfo.setConnectionType(srmCaseHandleInfoDTO.getConnectionType());
			// 週邊設備功能3
			srmCaseHandleInfo.setPeripheralsFunction3(srmCaseHandleInfoDTO.getPeripheralsFunction3());
			// 是否開啟加密
			srmCaseHandleInfo.setIsOpenEncrypt(srmCaseHandleInfoDTO.getIsOpenEncrypt());
			// 電子化繳費平台
			srmCaseHandleInfo.setElectronicPayPlatform(srmCaseHandleInfoDTO.getElectronicPayPlatform());
			// LOGO
			srmCaseHandleInfo.setLogoStyle(srmCaseHandleInfoDTO.getLogoStyle());
			// 電子發票載具
			srmCaseHandleInfo.setElectronicInvoice(srmCaseHandleInfoDTO.getElectronicInvoice());
			// 銀聯閃付
			srmCaseHandleInfo.setCupQuickPass(srmCaseHandleInfoDTO.getCupQuickPass());
			// 本機IP
			srmCaseHandleInfo.setLocalhostIp(srmCaseHandleInfoDTO.getLocalhostIp());
			// 寬頻連線
			srmCaseHandleInfo.setNetVendorId(srmCaseHandleInfoDTO.getNetVendorId());
			// Gateway
			srmCaseHandleInfo.setGateway(srmCaseHandleInfoDTO.getGateway());
			// Netmask
			srmCaseHandleInfo.setNetmask(srmCaseHandleInfoDTO.getNetmask());
			// 其他說明
			srmCaseHandleInfo.setDescription(srmCaseHandleInfoDTO.getDescription());
			// TMS參數說明
			srmCaseHandleInfo.setTmsParamDesc(srmCaseHandleInfoDTO.getTmsParamDesc());
			
			// 異動
			if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
				/*// 完修
				if(!IAtomsConstants.CASE_STATUS.COMPLETED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()) || !isIgnoreAsset){
					// DTID
					srmCaseHandleInfo.setDtid(srmCaseHandleInfoDTO.getDtid());
				}*/
				// 是否同裝機作業
				srmCaseHandleInfo.setSameInstalled(srmCaseHandleInfoDTO.getSameInstalled());
				// 舊特店代號
				srmCaseHandleInfo.setOldMerchantCode(srmCaseHandleInfoDTO.getOldMerchantCode());
			// 裝機
			} else {
				// 裝機類型
				srmCaseHandleInfo.setInstallType(srmCaseHandleInfoDTO.getInstallType());
				/*// 待派工 客戶 合約
				if(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
					// 客戶
					srmCaseHandleInfo.setCustomerId(srmCaseHandleInfoDTO.getCustomerId());
					// 合約編號
					srmCaseHandleInfo.setContractId(srmCaseHandleInfoDTO.getContractId());
				}*/
			}
		} else {
			/*// 完修
			if(!IAtomsConstants.CASE_STATUS.COMPLETED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()) || !isIgnoreAsset){
				// DTID
				srmCaseHandleInfo.setDtid(srmCaseHandleInfoDTO.getDtid());
			}*/
			// 聯系地址 同營業地址
			srmCaseHandleInfo.setContactIsBussinessAddress(srmCaseHandleInfoDTO.getContactIsBussinessAddress());
			// 聯系地址 同營業地址(縣市)
			srmCaseHandleInfo.setContactAddressLocation(srmCaseHandleInfoDTO.getContactAddressLocation());
			// 聯系地址
			srmCaseHandleInfo.setContactAddress(srmCaseHandleInfoDTO.getContactAddress());
			// 聯系聯絡人 同特店聯絡人
			srmCaseHandleInfo.setContactIsBussinessContact(srmCaseHandleInfoDTO.getContactIsBussinessContact());
			// 聯系聯絡人
			srmCaseHandleInfo.setContactUser(srmCaseHandleInfoDTO.getContactUser());
			// 聯系聯絡人電話 同特店聯絡人電話
			srmCaseHandleInfo.setContactIsBussinessContactPhone(srmCaseHandleInfoDTO.getContactIsBussinessContactPhone());
			// 聯系聯絡人電話
			srmCaseHandleInfo.setContactUserPhone(srmCaseHandleInfoDTO.getContactUserPhone());
			
			// 其他說明
			srmCaseHandleInfo.setDescription(srmCaseHandleInfoDTO.getDescription());
			
			// 併機
			if(IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
				// 是否同裝機作業
				srmCaseHandleInfo.setSameInstalled(srmCaseHandleInfoDTO.getSameInstalled());
				// 軟體版本
				srmCaseHandleInfo.setSoftwareVersion(srmCaseHandleInfoDTO.getSoftwareVersion());
				// TMS參數說明
				srmCaseHandleInfo.setTmsParamDesc(srmCaseHandleInfoDTO.getTmsParamDesc());
			// 拆機
			} else if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
				// 拆機類型
				srmCaseHandleInfo.setUninstallType(srmCaseHandleInfoDTO.getUninstallType());
			// 查核
			} else if(IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
			// 專案
			} else if(IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
				// 專案代碼
				srmCaseHandleInfo.setProjectCode(srmCaseHandleInfoDTO.getProjectCode());
				// 專案名稱
				srmCaseHandleInfo.setProjectName(srmCaseHandleInfoDTO.getProjectName());
			// 報修
			} else if(IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
				// 報修原因 
				srmCaseHandleInfo.setRepairReason(srmCaseHandleInfoDTO.getRepairReason());
			}
		}
		/*// Task #3092 完修前(回應、到場)，都可以改維護部門
		if(!IAtomsConstants.CASE_STATUS.COMPLETED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
			// 維護部門
			srmCaseHandleInfo.setDepartmentId(srmCaseHandleInfoDTO.getDepartmentId());
		}*/
	}

	/**
	 * Purpose:保存案件信息并返回消息
	 * @author CrissZhang
	 * @param caseManagerFormDTO ： 案件处理formDTO
	 * @throws ServiceException ： 出错时抛出ServiceException
	 * @return Message : 返回一个message
	 */
	private Message saveCaseInfo(CaseManagerFormDTO caseManagerFormDTO) throws ServiceException{
		Message msg = null;
		LogonUser logonUser = caseManagerFormDTO.getLogonUser();
		SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = caseManagerFormDTO.getSrmCaseHandleInfoDTO();
		// 案件編號
		String caseId = null;
		// 案件類型
		String caseType = null;
		//交易參數信息
		List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = caseManagerFormDTO.getSrmCaseTransactionParameterDTOs();
		try{
			// 案件類別
			srmCaseHandleInfoDTO.setCaseCategory(caseManagerFormDTO.getCaseCategory());
			// 拿到公司信息
			BimCompany company = (BimCompany) this.companyDAO.findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCustomerId());
			// 設置客戶碼
			srmCaseHandleInfoDTO.setCustomerCode(company.getCustomerCode());
			// 是否為單筆
			Boolean isSingle = srmCaseHandleInfoDTO.getIsSingle();
			// 複製筆數
			String caseNumberString = srmCaseHandleInfoDTO.getCaseNumber();
			//查找sla信息，計算應完成時間。
			// 因預約件不會設定SLA，若案件類型為“預約”時，在計算警示時以案件類型為“一般”的SLA設定計算
			if(IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(srmCaseHandleInfoDTO.getCaseType())){
				caseType = IAtomsConstants.TICKET_MODE_COMMON;
			} else {
				caseType = srmCaseHandleInfoDTO.getCaseType();
			}
			// 有sla信息
			boolean isHaveSla = false;
			// sla對象
			ContractSlaDTO contractSlaDTO = null;
			// Task #2489 專案與查核案件，無須計算SLA
			if((!IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(caseManagerFormDTO.getCaseCategory()) 
					&& !IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseManagerFormDTO.getCaseCategory()))){
				// Task #3385若為雲端租賃設備(CMS_CASE=Y或裝機件 裝機類型=微型商戶)所有案件類別，合約編號非必填，不用驗證SLA
				// 若為裝機件，故只判斷裝機類型=微型商戶，若不為裝機件，則判斷CMS_CASE=Y
				if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
					if(!IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(srmCaseHandleInfoDTO.getInstallType())){
						// 得到sla信息
						List<ContractSlaDTO> contractSlaDTOList = this.contractSlaDAO.listBy(srmCaseHandleInfoDTO.getCustomerId(), srmCaseHandleInfoDTO.getContractId(), srmCaseHandleInfoDTO.getMerLocation(),
								caseManagerFormDTO.getCaseCategory(), caseType, null, null, null, null, false);
						if(!CollectionUtils.isEmpty(contractSlaDTOList) && contractSlaDTOList.size() == 1){
							isHaveSla = true;
							contractSlaDTO = contractSlaDTOList.get(0);
						// 無sla返回消息
						} else {
							return new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_SLA_FOR_CASE);
						}
					
					}
				}else {
					//頁面傳過來的CMS_CASE都為N，故需重新查詢	
					boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfoDTO.getDtid(), null);
					SrmCaseHandleInfoDTO caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(srmCaseHandleInfoDTO.getDtid(), isNewHave);
					if(caseHandleInfoDTO != null
							&& !IAtomsConstants.PARAM_YES.equals(caseHandleInfoDTO.getCmsCase())){
						// 得到sla信息
						List<ContractSlaDTO> contractSlaDTOList = this.contractSlaDAO.listBy(srmCaseHandleInfoDTO.getCustomerId(), srmCaseHandleInfoDTO.getContractId(), srmCaseHandleInfoDTO.getMerLocation(),
								caseManagerFormDTO.getCaseCategory(), caseType, null, null, null, null, false);
						if(!CollectionUtils.isEmpty(contractSlaDTOList) && contractSlaDTOList.size() == 1){
							isHaveSla = true;
							contractSlaDTO = contractSlaDTOList.get(0);
						// 無sla返回消息
						} else {
							return new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_SLA_FOR_CASE);
						}
					
					}
				}
//				if(!(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
//						&& IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(srmCaseHandleInfoDTO.getInstallType()))
//						){
//					//若不是裝機件，則判斷是否CMS_CASE=Y
//					if(!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
//							&& !IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfoDTO.getCmsCase())){
//						//|| !IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfoDTO.getCmsCase())
//						// 得到sla信息
//						List<ContractSlaDTO> contractSlaDTOList = this.contractSlaDAO.listBy(srmCaseHandleInfoDTO.getCustomerId(), srmCaseHandleInfoDTO.getContractId(), srmCaseHandleInfoDTO.getMerLocation(),
//								caseManagerFormDTO.getCaseCategory(), caseType, null, null, null, null, false);
//						if(!CollectionUtils.isEmpty(contractSlaDTOList) && contractSlaDTOList.size() == 1){
//							isHaveSla = true;
//							contractSlaDTO = contractSlaDTOList.get(0);
//						// 無sla返回消息
//						} else {
//							return new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_SLA_FOR_CASE);
//						}
//					}
//				}
			}
			// 計算sla信息
			if(isHaveSla){
				// 開始計算sla的時間
				Date slaStartDate = DateTimeUtils.getCurrentTimestamp();
				// 計算並設置應回應、到場、完修時間
				srmCaseHandleInfoDTO = this.settingAcceptDate(contractSlaDTO, slaStartDate, srmCaseHandleInfoDTO);
				// 未設定上班時間
				if(CollectionUtils.isEmpty(srmCaseHandleInfoDTO.getDateMap())){
					return new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_WORK_TIME_FOR_CONTRACT);
				}
			}
			//設置新增，修改人員時間信息
			srmCaseHandleInfoDTO.setCreatedById(logonUser.getId());
			srmCaseHandleInfoDTO.setCreatedByName(logonUser.getName());
		//	srmCaseHandleInfoDTO.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
			srmCaseHandleInfoDTO.setUpdatedById(srmCaseHandleInfoDTO.getCreatedById());
			srmCaseHandleInfoDTO.setUpdatedByName(logonUser.getName());
		//	srmCaseHandleInfoDTO.setUpdatedDate(srmCaseHandleInfoDTO.getCreatedDate());
			
			//設置案件狀態
			srmCaseHandleInfoDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode());
			
			// 倂幾、異動案件
			if(IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseManagerFormDTO.getCaseCategory()) 
					|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseManagerFormDTO.getCaseCategory())){
				// 保存異動說明
				String updatedDescription = this.createUpdateDescription(caseManagerFormDTO, Boolean.FALSE, Boolean.TRUE);
				srmCaseHandleInfoDTO.setUpdatedDescription(updatedDescription);
				// 異動
				if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseManagerFormDTO.getCaseCategory())){
					// 生成異動項目
					String updateItem = this.createUpdateItem(caseManagerFormDTO);
					srmCaseHandleInfoDTO.setUpdateItem(updateItem);
				}
			}
			// 得到caseId
			caseId = createCaesId(srmCaseHandleInfoDTO.getCustomerCode(), srmCaseHandleInfoDTO.getCaseCategory());
			srmCaseHandleInfoDTO.setCaseId(caseId);
			// 設置報修次數
			srmCaseHandleInfoDTO.setRepairTimes(1);
			
			// 案件處理中設備支援功能檔DTO集合
			List<SrmCaseAssetFunctionDTO> tempAssetFunctionDTOs = new ArrayList<SrmCaseAssetFunctionDTO>();
			// 處理內建功能
			List<SrmCaseAssetFunctionDTO> builtInFeatureDtos = null;
			if(StringUtils.hasText(srmCaseHandleInfoDTO.getBuiltInFeature())){
				builtInFeatureDtos = this.getCaseAssetFunctionDtoList(srmCaseHandleInfoDTO.getBuiltInFeature(), IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE);
				tempAssetFunctionDTOs.addAll(builtInFeatureDtos);
			}
			// 周邊設備功能1
			List<SrmCaseAssetFunctionDTO> peripheralsFunctionDtos = null;
			if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsFunction())){
				peripheralsFunctionDtos = this.getCaseAssetFunctionDtoList(srmCaseHandleInfoDTO.getPeripheralsFunction(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS);
				tempAssetFunctionDTOs.addAll(peripheralsFunctionDtos);
			}
			// 周邊設備功能2
			List<SrmCaseAssetFunctionDTO> peripheralsFunction2Dtos = null;
			if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsFunction2())){
				peripheralsFunction2Dtos = this.getCaseAssetFunctionDtoList(srmCaseHandleInfoDTO.getPeripheralsFunction2(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2);
				tempAssetFunctionDTOs.addAll(peripheralsFunction2Dtos);
			}
			// 周邊設備功能3
			List<SrmCaseAssetFunctionDTO> peripheralsFunction3Dtos = null;
			if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsFunction3())){
				peripheralsFunction3Dtos = this.getCaseAssetFunctionDtoList(srmCaseHandleInfoDTO.getPeripheralsFunction3(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3);
				tempAssetFunctionDTOs.addAll(peripheralsFunction3Dtos);
			}
			// 設備支援功能檔DTO集合保存至案件處理DTO
			srmCaseHandleInfoDTO.setSrmCaseAssetFunctionDTOs(tempAssetFunctionDTOs);
			
			// 案件處理中設備链接档DTO集合
			List<SrmCaseAssetLinkDTO> tempAssetLinkDTOs = this.getCaseAssetList(srmCaseHandleInfoDTO, logonUser, null);
			// 設備链接档DTO集合保存至案件處理DTO
			srmCaseHandleInfoDTO.setSrmCaseAssetLinkDTOs(tempAssetLinkDTOs);
			
			
			// 處理案件處理記錄
			SrmCaseTransactionDTO srmCaseTransactionDTO = new SrmCaseTransactionDTO();
			srmCaseTransactionDTO.setCreatedById(logonUser.getId());
			srmCaseTransactionDTO.setCreatedByName(logonUser.getName());
			srmCaseTransactionDTO.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
			
			// 建案-派工--案件歷史表存儲
			if (IAtomsConstants.ACTION_NEW_DISPATCH.equals(caseManagerFormDTO.getActionId())) {
				String description = IAtomsConstants.MARK_EMPTY_STRING;
				BimDepartment department = null;
				if (IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfoDTO.getIsTms())) {
					// 異動，併機，裝機有TMS//CR #3237
					if ((IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())) 
							|| (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())) 
							|| (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()))
							|| (IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()))) {
						// 處理內容為“派工至[TMS]”
						description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO)
												+ IAtomsConstants.MARK_BRACKET_LEFT
												+ IAtomsConstants.CASE_ROLE.TMS.getCode()
												+ IAtomsConstants.MARK_BRACKET_RIGHT;
						srmCaseTransactionDTO.setDeptCode(IAtomsConstants.CASE_ROLE.TMS.getCode());
					}
					// 若案件之【自動派工】未勾選
				} else {
					BimCompany bimCompany = null;
					// 處理內容為“派工至[維護廠商-維護部門]”
					bimCompany = this.getCompanyDAO().findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
					if (bimCompany != null) {
						description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT + bimCompany.getShortName();
						if (StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentId())) {
							if(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDepartmentId())) {
								department = new BimDepartment();
								department.setDeptName(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE));
								description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT;
								description = description + department.getDeptName();
							} else {
								department = this.departmentDAO.findByPrimaryKey(BimDepartment.class, srmCaseHandleInfoDTO.getDepartmentId());
								description = description + IAtomsConstants.MARK_MIDDLE_LINE + department.getDeptName();
							}
							srmCaseTransactionDTO.setDeptCode(srmCaseHandleInfoDTO.getDepartmentId());
						}
						description = description + IAtomsConstants.MARK_BRACKET_RIGHT;
					}
					//caseTransaction.setDeptCode(caseHandleInfo.getDepartmentId());
				}
				srmCaseTransactionDTO.setDescription(description);
				srmCaseTransactionDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
				srmCaseTransactionDTO.setActionId(IAtomsConstants.ACTION_DISPATCH);
				srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));

				// 若關卡不變，則寫入當前關卡
				srmCaseTransactionDTO.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH);
				// 若關卡不變，則寫入當前關卡
				srmCaseTransactionDTO.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode()));
			// 儲存
			} else {
				srmCaseTransactionDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode());
				srmCaseTransactionDTO.setActionId(IAtomsConstants.ACTION_SAVE);
				srmCaseTransactionDTO.setDealById(logonUser.getId());
				srmCaseTransactionDTO.setDealByName(logonUser.getName());
				srmCaseTransactionDTO.setDealDate(srmCaseTransactionDTO.getCreatedDate());
			}
			/*if (!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseManagerFormDTO.getCaseCategory())) {
				updateItem = this.getUpdateContent(srmCaseHandleInfoDTO, Boolean.FALSE, Boolean.TRUE);
			}*/
			//srmCaseTransactionDTO.setUpdateItem(updateItem);
			
			//Task #3548 api建案 到場註記 如果為 ‘是’ 存入說明欄位
			if ((IAtomsConstants.PARAM_YES.equals(caseManagerFormDTO.getIsCmsCreate()))
							&& (IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfoDTO.getHasArrive()))
							&& (!IAtomsConstants.ACTION_NEW_DISPATCH.equals(caseManagerFormDTO.getActionId()))) {
				String arriveDesc = i18NUtil.getName(srmCaseHandleInfoDTO.getCaseCategory()) + i18NUtil.getName(SrmCaseHandleInfoDTO.ATTRIBUTE.ARRIVE_CONDITION.getValue());
				if (StringUtils.hasText(srmCaseHandleInfoDTO.getFirstDescription())) {
					srmCaseHandleInfoDTO.setFirstDescription(srmCaseHandleInfoDTO.getFirstDescription() + IAtomsConstants.MARK_WRAP + arriveDesc);
				} else {
					srmCaseHandleInfoDTO.setFirstDescription(arriveDesc);
				}
				if (StringUtils.hasText(srmCaseTransactionDTO.getDescription())) {
					srmCaseTransactionDTO.setDescription(srmCaseTransactionDTO.getDescription() + IAtomsConstants.MARK_WRAP + arriveDesc);
				} else {
					srmCaseTransactionDTO.setDescription(arriveDesc);
				}
			}
			
			// 案件處理記錄DTO保存至案件處理DTO
			srmCaseHandleInfoDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
			// 建案-派工--案件主表更新
			if (IAtomsConstants.ACTION_NEW_DISPATCH.equals(caseManagerFormDTO.getActionId())) {
				// 派工時，如果不是派工給客服，TMS, QA則寫入派工單位
				if (!((IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransactionDTO.getDeptCode())) || (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransactionDTO.getDeptCode())) || (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransactionDTO.getDeptCode())))) {
					srmCaseHandleInfoDTO.setDepartmentId(srmCaseTransactionDTO.getDeptCode());
					// 填入最後一次派工的派工單位（排除客服，TMS，QA）
					srmCaseHandleInfoDTO.setInstalledDeptId(srmCaseTransactionDTO.getDeptCode());
					// 填入最後一次派工的處理人員（排除客服，TMS，QA）
					srmCaseHandleInfoDTO.setInstalledUser(srmCaseTransactionDTO.getDealById());
				}
				// 案件狀態更新為已派工
				srmCaseHandleInfoDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
				
				// 派工單位，包括TMS，QA，客服
				srmCaseHandleInfoDTO.setDispatchDeptId(srmCaseTransactionDTO.getDeptCode());
				srmCaseHandleInfoDTO.setDispatchProcessUser(srmCaseTransactionDTO.getDealById());
				srmCaseHandleInfoDTO.setDispatchProcessUsername(srmCaseTransactionDTO.getDealByName());
				srmCaseHandleInfoDTO.setDispatchDate(DateTimeUtils.getCurrentTimestamp());
				srmCaseHandleInfoDTO.setDispatchUser(logonUser.getId());
				srmCaseHandleInfoDTO.setDispatchUserName(logonUser.getName());
				// 進件完工日
				srmCaseHandleInfoDTO.setCreatedFinishDate(srmCaseTransactionDTO.getDealDate());
				// 處理方式
				srmCaseHandleInfoDTO.setProcessType(null);
				//CR #2869 新增三個欄位 2017/11/22
				srmCaseHandleInfoDTO.setFirstDescription(srmCaseTransactionDTO.getDescription());
				
				String candidateGroup = null;
				/*if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransactionDTO.getDeptCode())) {
					candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode();
				} else if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransactionDTO.getDeptCode())) {
					candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.TMS.getCode();
				} else if (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransactionDTO.getDeptCode())) {
					candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.QA.getCode();
				} else {
					candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.ENGINEER.getCode();
				}*/
				// CR #2951 廠商客服	//Task #3578 客戶廠商客服
				candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.CUS_VENDOR_SERVICE.getCode();;
				if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransactionDTO.getDeptCode())) {
				} else if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransactionDTO.getDeptCode())) {
					candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.TMS.getCode();
				} else if (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransactionDTO.getDeptCode())) {
					candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.QA.getCode();
				} else {
					candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.ENGINEER.getCode();
				}
				caseManagerFormDTO.setCandidateGroup(candidateGroup);
				caseManagerFormDTO.setActionId(IAtomsConstants.ACTION_DISPATCH);
			}
				
			
			// 交易參數DTO集合保存至案件處理DTO
			srmCaseHandleInfoDTO.setCaseTransactionParameterDTOs(srmCaseTransactionParameterDTOs);
			
			// 起案
			caseManagerFormDTO.setActivitiCaseStatusStage(srmCaseHandleInfoDTO.getCaseStatus());
			SessionContext ctx = this.startCaseSetting(caseManagerFormDTO);
			
			// 得到計算的dtid MAP集合 MAP的key為複製筆數value為dtid號碼
			Map<Integer, String> dtidMap = null;
			if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseManagerFormDTO.getCaseCategory())){
				//Task #3349 裝機案件單號 寫入需求單號
				srmCaseHandleInfoDTO.setInstallCaseId(srmCaseHandleInfoDTO.getRequirementNo());
				if(StringUtils.hasText(company.getDtidType()) && IAtomsConstants.PARAM_IATOMS_DTID_TYPE_AUTO.equals(company.getDtidType())){
					dtidMap = getDtidForCopy(srmCaseHandleInfoDTO.getCustomerId(), srmCaseHandleInfoDTO.getEdcType(), caseNumberString);
					srmCaseHandleInfoDTO.setDtidMap(dtidMap);
				} else if(StringUtils.hasText(company.getDtidType()) && IAtomsConstants.PARAM_IATOMS_DTID_TYPE_SAME.equals(company.getDtidType())){
					String dtid = calculateDtid(srmCaseHandleInfoDTO.getCustomerId(), srmCaseHandleInfoDTO.getEdcType(), srmCaseTransactionParameterDTOs);
					srmCaseHandleInfoDTO.setDtid(dtid);
				}
			} else {
				// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
				boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfoDTO.getDtid(), null);
				// 查詢案件資料
				SrmCaseHandleInfoDTO newCaseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(srmCaseHandleInfoDTO.getDtid(), isNewHave);
				srmCaseHandleInfoDTO.setInstallCompleteDate(newCaseHandleInfoDTO.getInstallCompleteDate());
			}
			// Task #2653 複製功能，要包含建案的那一筆
			int caseNum = 0;
			if(isSingle !=null && !isSingle){
				if(StringUtils.hasText(caseNumberString)){
					caseNum = Integer.parseInt(caseNumberString) - 1;
				}
			}
			List<String> caseIds = new ArrayList<String>();
			for (int i = 0; i <= caseNum; i++) {
				if(i != 0){
					//多筆時生成caseId
					srmCaseHandleInfoDTO.setCaseId(createCaesId(srmCaseHandleInfoDTO.getCustomerCode(), srmCaseHandleInfoDTO.getCaseCategory()));
				}
				// 處理案件附加資料
				List<SrmCaseAttFileDTO> tempCaseAttFileDTOs = null;
				// 最後一次移除文件
				if(i == caseNum){
					tempCaseAttFileDTOs = this.getCaseAttFileDTOs(logonUser, caseManagerFormDTO.getFileName(), srmCaseHandleInfoDTO.getCaseId(), true);
				} else {
					tempCaseAttFileDTOs = this.getCaseAttFileDTOs(logonUser, caseManagerFormDTO.getFileName(), srmCaseHandleInfoDTO.getCaseId(), false);
				}
				// 案件附加資料DTO集合保存至案件處理DTO
				srmCaseHandleInfoDTO.setCaseAttFileDTOs(tempCaseAttFileDTOs);
				
				caseIds.add(srmCaseHandleInfoDTO.getCaseId());
				// 設置案件建案時循環的參數
				srmCaseHandleInfoDTO.setCaseLoopPrams(i);
				this.createSingleCase(srmCaseHandleInfoDTO, ctx, caseManagerFormDTO.getIsCmsCreate());
			}
			//如果是建案-派工
			if (IAtomsConstants.ACTION_DISPATCH.equals(caseManagerFormDTO.getActionId())) {
				if(isSingle){
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.DISPATCH_MANY_CASES_SUCCESS, new String[]{caseId});
				} else {
					caseId = this.formatToString(caseIds);
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.DISPATCH_MANY_CASES_SUCCESS, new String[]{caseId});
				}
			} else {
				if(isSingle){
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.SAVE_CASE_SUCCESS, new String[]{caseId});
				} else {
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.COPY_CASE_SUCCESS);
				}
			}
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".saveCaseInfo():" + e, e);
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED, new String[]{this.getMyName()}, e);
		}
		caseManagerFormDTO.setCaseId(caseId);
		return msg;
	}
	
	/**
	 * Purpose:獲取不同類別的設備鏈接檔數據
	 * @author CrissZhang
	 * @param srmCaseHandleInfoDTO ： 案件處理DTO
	 * @param logonUser ： logonUser
	 * @return List<SrmCaseAssetLinkDTO> : 案件鏈接檔集合
	 */
	private List<SrmCaseAssetLinkDTO> getCaseAssetList(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO, LogonUser logonUser, String dtidByCase){
		Transformer transformer = new SimpleDtoDmoTransformer();
		try {
			// 案件處理中設備链接档DTO集合
			List<SrmCaseAssetLinkDTO> tempAssetLinkDTOs = new ArrayList<SrmCaseAssetLinkDTO>();
			String oldCaseId = null;
			boolean isNewHave = true;
			if(StringUtils.hasText(srmCaseHandleInfoDTO.getDtid())){
				// 根據dtid得到最新案件信息
			//	SrmCaseHandleInfoDTO tempcaseNewHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTOById(srmCaseHandleInfoDTO.getDtid());
				// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
				isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfoDTO.getDtid(),null);
				//2018/01/24
				if (StringUtils.hasText(dtidByCase) && dtidByCase.equals(srmCaseHandleInfoDTO.getDtid()) && IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfoDTO.getIsUpdateAsset())) {
					isNewHave = false;
				}
				// 查詢案件資料
				SrmCaseHandleInfoDTO tempcaseNewHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(srmCaseHandleInfoDTO.getDtid(), isNewHave);
				
				if(tempcaseNewHandleInfoDTO != null){
					oldCaseId = tempcaseNewHandleInfoDTO.getCaseId();
				}
			}
			// 裝機時案件設備链接档資料處理
			if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()) 
					|| IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
				// 處理刷卡機型
				SrmCaseAssetLinkDTO edcTypeDTO = null;
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getEdcType())){
					edcTypeDTO = this.getCaseAssetLinkDto(srmCaseHandleInfoDTO.getEdcType(), IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE, logonUser);
					tempAssetLinkDTOs.add(edcTypeDTO);
				}
				// 周邊設備1
				SrmCaseAssetLinkDTO peripheralsDTO = null;
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals())){
					peripheralsDTO = this.getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS, logonUser);
					tempAssetLinkDTOs.add(peripheralsDTO);
				}
				// 周邊設備2
				SrmCaseAssetLinkDTO peripherals2DTO = null;
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals2())){
					peripherals2DTO = this.getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals2(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2, logonUser);
					tempAssetLinkDTOs.add(peripherals2DTO);
				}
				// 周邊設備3
				SrmCaseAssetLinkDTO peripherals3DTO = null;
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals3())){
					peripherals3DTO = this.getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals3(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3, logonUser);
					tempAssetLinkDTOs.add(peripherals3DTO);
				}
			// 異動時案件設備链接档資料處理
			} else if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
						|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
				// 查找之前案件編號下所有設備鏈接檔信息
			//	List<SrmCaseAssetLinkDTO> srmNewCaseAssetLinkDTOs = this.srmCaseNewAssetLinkDAO.listBy(oldCaseId);
				// 根據dtid得到最新案件信息
			//	SrmCaseHandleInfoDTO caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTOById(srmCaseHandleInfoDTO.getDtid());
				// CR #2551 查詢案件資料
				SrmCaseHandleInfoDTO caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(srmCaseHandleInfoDTO.getDtid(), isNewHave);
				// CR #2551  查詢設備鏈接 Bug #3055
				List<SrmCaseAssetLinkDTO> srmNewCaseAssetLinkDTOs = this.srmCaseNewAssetLinkDAO.listBy(oldCaseId, !isNewHave);
				
				SrmCaseAssetLinkDTO tempSrmCaseAssetLinkDTO = null;
				if(caseHandleInfoDTO != null){
					// 周邊設備1
					SrmCaseAssetLinkDTO peripheralsDTO = null;
					boolean isAddPeripherals = false;
					// 周邊設備1
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals())){
						if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals())){
							// 周邊設備1異動
							if(!caseHandleInfoDTO.getPeripherals().equals(srmCaseHandleInfoDTO.getPeripherals())){
								isAddPeripherals = true;
								// 新增設備鏈接檔信息
								peripheralsDTO = this.getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS, logonUser);
								tempAssetLinkDTOs.add(peripheralsDTO);
							} 
						} else {
							// 新增設備鏈接檔信息
							peripheralsDTO = this.getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS, logonUser);
							tempAssetLinkDTOs.add(peripheralsDTO);
						}
					} else {
						if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals())){
							isAddPeripherals = true;
						}
					}
					// 周邊設備2
					SrmCaseAssetLinkDTO peripherals2DTO = null;
					boolean isAddPeripherals2 = false;
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals2())){
						if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals2())){
							// 周邊設備2異動
							if(!caseHandleInfoDTO.getPeripherals2().equals(srmCaseHandleInfoDTO.getPeripherals2())){
								isAddPeripherals2 = true;
								// 新增設備鏈接檔信息
								peripherals2DTO = this.getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals2(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2, logonUser);
								tempAssetLinkDTOs.add(peripherals2DTO);
							}
						} else {
							// 新增設備鏈接檔信息
							peripherals2DTO = this.getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals2(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2, logonUser);
							tempAssetLinkDTOs.add(peripherals2DTO);
						}
					} else {
						if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals2())){
							isAddPeripherals2 = true;
						}
					}
					// 周邊設備3
					SrmCaseAssetLinkDTO peripherals3DTO = null;
					boolean isAddPeripherals3 = false;
					// 周邊設備3
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals3())){
						if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals3())){
							// 周邊設備2異動
							if(!caseHandleInfoDTO.getPeripherals3().equals(srmCaseHandleInfoDTO.getPeripherals3())){
								isAddPeripherals3 = true;
								// 新增設備鏈接檔信息
								peripherals3DTO = this.getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals3(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3, logonUser);
								tempAssetLinkDTOs.add(peripherals3DTO);
							}
						} else {
							// 新增設備鏈接檔信息
							peripherals3DTO = this.getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals3(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3, logonUser);
							tempAssetLinkDTOs.add(peripherals3DTO);
						}
					} else {
						if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals3())){
							isAddPeripherals3 = true;
						}
					}
					SrmCaseAssetLink srmCaseAssetLink = null;
					for(SrmCaseAssetLinkDTO srmNewCaseAssetLinkDTO : srmNewCaseAssetLinkDTOs){
						tempSrmCaseAssetLinkDTO = null;
						srmCaseAssetLink = null;
						// edc以及耗材
						if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmNewCaseAssetLinkDTO.getItemType())){
							tempSrmCaseAssetLinkDTO = (SrmCaseAssetLinkDTO) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLinkDTO());
						// 周邊設備1
						} else if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS.equals(srmNewCaseAssetLinkDTO.getItemType())){
							tempSrmCaseAssetLinkDTO = (SrmCaseAssetLinkDTO) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLinkDTO());
							srmCaseAssetLink = (SrmCaseAssetLink) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLink());
							if(isAddPeripherals){
								if(srmCaseAssetLink != null && IAtomsConstants.YES.equals(srmCaseAssetLink.getIsLink())){
									// 設備鏈接檔設置刪除標誌位
									tempSrmCaseAssetLinkDTO.setIsLink(IAtomsConstants.CASE_REMOVE_ASSET);
								} else if(srmCaseAssetLink != null && IAtomsConstants.NO.equals(srmCaseAssetLink.getIsLink())){
									// 不保存
									tempSrmCaseAssetLinkDTO = null;
								}
							}
						// 周邊設備2	
						} else if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2.equals(srmNewCaseAssetLinkDTO.getItemType())){
							tempSrmCaseAssetLinkDTO = (SrmCaseAssetLinkDTO) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLinkDTO());
							srmCaseAssetLink = (SrmCaseAssetLink) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLink());
							if(isAddPeripherals2){
								if(srmCaseAssetLink != null && IAtomsConstants.YES.equals(srmCaseAssetLink.getIsLink())){
									// 設備鏈接檔設置刪除標誌位
									tempSrmCaseAssetLinkDTO.setIsLink(IAtomsConstants.CASE_REMOVE_ASSET);
								} else if(srmCaseAssetLink != null && IAtomsConstants.NO.equals(srmCaseAssetLink.getIsLink())){
									// 不保存
									tempSrmCaseAssetLinkDTO = null;
								}
							}
						// 周邊設備3	
						} else if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3.equals(srmNewCaseAssetLinkDTO.getItemType())){
							tempSrmCaseAssetLinkDTO = (SrmCaseAssetLinkDTO) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLinkDTO());
							srmCaseAssetLink = (SrmCaseAssetLink) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLink());
							if(isAddPeripherals3){
								if(srmCaseAssetLink != null && IAtomsConstants.YES.equals(srmCaseAssetLink.getIsLink())){
									// 設備鏈接檔設置刪除標誌位
									tempSrmCaseAssetLinkDTO.setIsLink(IAtomsConstants.CASE_REMOVE_ASSET);
								} else if(srmCaseAssetLink != null && IAtomsConstants.NO.equals(srmCaseAssetLink.getIsLink())){
									// 不保存
									tempSrmCaseAssetLinkDTO = null;
								}
							}
						// 耗材不處理
						} else if(IAtomsConstants.PARAM_CASE_LINK_SUPPLIES.equals(srmNewCaseAssetLinkDTO.getItemType())){
							continue;
						}
						// 保存至集合
						if(tempSrmCaseAssetLinkDTO != null){
							tempAssetLinkDTOs.add(tempSrmCaseAssetLinkDTO);
						}
					}
				}
			// 其他案件類別時案件設備链接档處理
			} else {
			//	List<SrmCaseAssetLinkDTO> srmNewCaseAssetLinkDTOs = this.srmCaseNewAssetLinkDAO.listBy(oldCaseId);
				// CR #2551  查詢設備鏈接 Bug #3055
				List<SrmCaseAssetLinkDTO> srmNewCaseAssetLinkDTOs = this.srmCaseNewAssetLinkDAO.listBy(oldCaseId, !isNewHave);
				
				SrmCaseAssetLinkDTO tempSrmCaseAssetLinkDTO = null;
				for(SrmCaseAssetLinkDTO srmNewCaseAssetLinkDTO : srmNewCaseAssetLinkDTOs){
					// 去掉耗材 耗材不保存
					if(IAtomsConstants.PARAM_CASE_LINK_SUPPLIES.equals(srmNewCaseAssetLinkDTO.getItemType())){
						continue;
					}
					tempSrmCaseAssetLinkDTO = (SrmCaseAssetLinkDTO) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLinkDTO());
					tempAssetLinkDTOs.add(tempSrmCaseAssetLinkDTO);
				}
			}
			return tempAssetLinkDTOs;
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".getCaseAssetList():" + e, e);
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED, new String[]{this.getMyName()}, e);
		}
	}
	/**
	 * Purpose:設置應回應、應到場、應完修時效
	 * @author CrissZhang
	 * @param contractSlaDTO ： 合約sla對象
	 * @param slaStartDate ： 計算sla起始時效
	 * @param srmCaseHandleInfoDTO ：案件處理DTO集合的對象
	 * @return SrmCaseHandleInfoDTO : 返回一個案件處理DTO集合的對象
	 */
	private SrmCaseHandleInfoDTO settingAcceptDate(ContractSlaDTO contractSlaDTO, Date slaStartDate, SrmCaseHandleInfoDTO srmCaseHandleInfoDTO){
		// 得到計算時效的map集合
		Map<String, Date> dateMap = this.calAcceptableDate(contractSlaDTO, slaStartDate);
		// 得到計算時效的map集合
		if(!CollectionUtils.isEmpty(dateMap)){
			if(IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(srmCaseHandleInfoDTO.getCaseType())){
				Timestamp tempDate = new Timestamp((setHourForDate(srmCaseHandleInfoDTO.getExpectedCompletionDate(), 23, 59, 59, 0)).getTime());
				// 應回應時間
				srmCaseHandleInfoDTO.setAcceptableResponseDate(tempDate);
				// 應到達時間
				srmCaseHandleInfoDTO.setAcceptableArriveDate(tempDate);
				// 應完修時間
				srmCaseHandleInfoDTO.setAcceptableFinishDate(tempDate);
			} else {
				// 應回應時間
				if(dateMap.get(CaseManagerFormDTO.PARAM_ACCEPTABLE_RESPONSE_DATE) != null){
					srmCaseHandleInfoDTO.setAcceptableResponseDate(new Timestamp((dateMap.get(CaseManagerFormDTO.PARAM_ACCEPTABLE_RESPONSE_DATE)).getTime()));
				}
				// 應到達時間
				if(dateMap.get(CaseManagerFormDTO.PARAM_ACCEPTABLE_ARRIVE_DATE) != null){
					srmCaseHandleInfoDTO.setAcceptableArriveDate(new Timestamp((dateMap.get(CaseManagerFormDTO.PARAM_ACCEPTABLE_ARRIVE_DATE)).getTime()));
				}
				// 應完修時間
				if(dateMap.get(CaseManagerFormDTO.PARAM_ACCEPTABLE_FINISH_DATE) != null){
					srmCaseHandleInfoDTO.setAcceptableFinishDate(new Timestamp((dateMap.get(CaseManagerFormDTO.PARAM_ACCEPTABLE_FINISH_DATE)).getTime()));
				}
			}
			// 放置警示時效
			srmCaseHandleInfoDTO.setResponseWarnning(contractSlaDTO.getResponseWarnning());
			srmCaseHandleInfoDTO.setArriveWarnning(contractSlaDTO.getArriveWarnning());
			srmCaseHandleInfoDTO.setCompleteWarnning(contractSlaDTO.getCompleteWarnning());
		}
		srmCaseHandleInfoDTO.setDateMap(dateMap);
		return srmCaseHandleInfoDTO;
	}

	/**
	 * Purpose:格式化多筆caseId
	 * @author amandawang
	 * @param caseIds
	 * @return String
	 */
	public String formatToString(List<String> caseIds) {
		String moreCaseId= IAtomsConstants.MARK_EMPTY_STRING;
		for (int i = 0; i < caseIds.size(); i++) {
			if (i != caseIds.size() - 1) {
				moreCaseId += caseIds.get(i) + ",<br/>";
			} else if (i == caseIds.size() - 1) {
				moreCaseId += caseIds.get(i);
			}
		}
		LOGGER.debug("formatToString() paramter moreCaseId:" + moreCaseId);
		return moreCaseId;
	}
	/**
	 * 
	 * Purpose:案件起案activiti設置
	 * @author CrissZhang
	 * @param caseManagerFormDTO
	 * @return SessionContext
	 */
	private SessionContext startCaseSetting(CaseManagerFormDTO caseManagerFormDTO){
		// 拿到當前登陸者信息
		LogonUser logonUser = caseManagerFormDTO.getLogonUser();
		// 設置activiti案件處理編號
		caseManagerFormDTO.setProcessId(CaseManagerFormDTO.IATOMS_BP_CASE_PROCESS);
		//派工時--設置群組
		if (IAtomsConstants.ACTION_DISPATCH.equals(caseManagerFormDTO.getActionId())) {
			// 設置群組
		//	caseManagerFormDTO.setCandidateGroup(caseManagerFormDTO.getCandidateGroup());
			caseManagerFormDTO.setOutcome(IAtomsConstants.ACTION_DISPATCH);
		} else {
			// 設置actionId
			caseManagerFormDTO.setActionId(IAtomsConstants.ACTION_CREATE_CASE);	
		}
		// 設置下一關卡
		caseManagerFormDTO.setNextActivityCode(caseManagerFormDTO.getActivitiCaseStatusStage());
		// 設置狀態
		caseManagerFormDTO.setStatus(caseManagerFormDTO.getActivitiCaseStatusStage());
		// Activiti BPM平台認證內容類別對象
		ActivitiWorkflowContext workflowContext = new ActivitiWorkflowContext(logonUser);
		// 設置認證內容類別對象
		caseManagerFormDTO.setWorkflowContext(workflowContext);
		SessionContext ctx = new SessionContext();
		// 放置所需formDTO
		ctx.setRequestParameter(caseManagerFormDTO);
		return ctx;
	}
	/**
	 * Purpose:單筆案件建案
	 * @author CrissZhang
	 * @param srmCaseHandleInfoDTO ： 案件處理DTO對象
	 * @param ctx : activiti建案所需對象
	 * @param isPublicFunction : 是否調用公共的保存方法。
	 * @return void ： 無返回
	 */
	public void createSingleCase(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO, SessionContext ctx, String isCmsCreate){
		Message msg = null;
		// dto轉dmo對象
		Transformer transformer = new SimpleDtoDmoTransformer();
		try {
			if(srmCaseHandleInfoDTO != null){
				//案件处理信息保存
				SrmCaseHandleInfo saveSrmCaseHandleInfo = (SrmCaseHandleInfo)transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
				// 初始化案件建案時循環的參數
				int caseLoopPrams = 0;
				if(srmCaseHandleInfoDTO.getCaseLoopPrams() != null){
					caseLoopPrams = srmCaseHandleInfoDTO.getCaseLoopPrams();
				} 
				//設置dtid，生成dtid
				// 【客戶DTID產生方式】為“自動生成”，則取得【DTID號碼管理】之該客戶該機型之可使用之最小的DTID，若有複製作業，要依複製數量取得不同DTID。
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTO.getDtidMap()) && srmCaseHandleInfoDTO.getDtidMap().containsKey(caseLoopPrams)){
					saveSrmCaseHandleInfo.setDtid(srmCaseHandleInfoDTO.getDtidMap().get(caseLoopPrams).toString());
				}
				// 非裝機建案時 保存上筆結案案件 裝機類型、裝機部門、裝機人員、首裝、裝機日期、CUP啓用日期、CUP移除日期欄位值
				if(!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(saveSrmCaseHandleInfo.getCaseCategory()) 
						&& !IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(saveSrmCaseHandleInfo.getCaseCategory())){
				//	SrmCaseHandleInfoDTO newCaseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTOById(saveSrmCaseHandleInfo.getDtid());
					// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
					boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(saveSrmCaseHandleInfo.getDtid(), null);
					// 查詢案件資料
					SrmCaseHandleInfoDTO newCaseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(saveSrmCaseHandleInfo.getDtid(), isNewHave);
					
					if(newCaseHandleInfoDTO != null){
						//Task #3349 裝機案件單號 寫入需求單號
						saveSrmCaseHandleInfo.setInstallCaseId(newCaseHandleInfoDTO.getInstallCaseId());
						//TASK 3322
						//是否爲CMS案件
						saveSrmCaseHandleInfo.setCmsCase(newCaseHandleInfoDTO.getCmsCase());
						// 裝機類型
						saveSrmCaseHandleInfo.setInstallType(newCaseHandleInfoDTO.getInstallType());
						// 裝機部門
						saveSrmCaseHandleInfo.setInstalledDeptId(newCaseHandleInfoDTO.getInstalledDeptId());
						// 裝機人員
						saveSrmCaseHandleInfo.setInstalledUser(newCaseHandleInfoDTO.getInstalledUser());
						// 首裝
						saveSrmCaseHandleInfo.setIsFirstInstalled(newCaseHandleInfoDTO.getIsFirstInstalled());
						// 裝機日期
						saveSrmCaseHandleInfo.setInstalledDate(newCaseHandleInfoDTO.getInstalledDate());
						// cup啓用
						saveSrmCaseHandleInfo.setCupEnableDate(newCaseHandleInfoDTO.getCupEnableDate());
						// cup移除
						saveSrmCaseHandleInfo.setCupDisableDate(newCaseHandleInfoDTO.getCupDisableDate());
						//報修件/拆機件時，判斷是否爲cms建案
						if ((IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(saveSrmCaseHandleInfo.getCaseCategory())
								|| IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(saveSrmCaseHandleInfo.getCaseCategory())) 
								&& IAtomsConstants.YES.equals(newCaseHandleInfoDTO.getCmsCase())) {
							if (!IAtomsConstants.YES.equals(isCmsCreate)) {
								saveSrmCaseHandleInfo.setIsIatomsCreateCms(IAtomsConstants.YES);
							}
						}
						// 異動保存聯系人等
						if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(saveSrmCaseHandleInfo.getCaseCategory())){
							// 聯繫同營業地址
							saveSrmCaseHandleInfo.setContactIsBussinessAddress(newCaseHandleInfoDTO.getContactIsBussinessAddress());
							// 聯繫同特店聯絡人
							saveSrmCaseHandleInfo.setContactIsBussinessContact(newCaseHandleInfoDTO.getContactIsBussinessContact());
							// 聯繫同特店聯絡電話
							saveSrmCaseHandleInfo.setContactIsBussinessContactPhone(newCaseHandleInfoDTO.getContactIsBussinessContactPhone());
							// 聯絡地址縣市
							saveSrmCaseHandleInfo.setContactAddressLocation(newCaseHandleInfoDTO.getContactAddressLocation());
							saveSrmCaseHandleInfo.setContactPostCode(newCaseHandleInfoDTO.getContactPostCode());
							// 聯絡地址
							saveSrmCaseHandleInfo.setContactAddress(newCaseHandleInfoDTO.getContactAddress());
							// 聯繫聯絡人
							saveSrmCaseHandleInfo.setContactUser(newCaseHandleInfoDTO.getContactUser());
							// 聯絡人電話
							saveSrmCaseHandleInfo.setContactUserPhone(newCaseHandleInfoDTO.getContactUserPhone());
							// 聯系聯絡人手機
							saveSrmCaseHandleInfo.setContactMobilePhone(newCaseHandleInfoDTO.getContactMobilePhone());
							saveSrmCaseHandleInfo.setContactIsBussinessContactMobilePhone(newCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone());
							// 聯系聯絡人Email
							saveSrmCaseHandleInfo.setContactUserEmail(newCaseHandleInfoDTO.getContactUserEmail());
							saveSrmCaseHandleInfo.setContactIsBussinessContactEmail(newCaseHandleInfoDTO.getContactIsBussinessContactEmail());
						} else {
							// 是否同營業地址
							saveSrmCaseHandleInfo.setIsBussinessAddress(newCaseHandleInfoDTO.getIsBussinessAddress());
							// 是否同特店聯絡人
							saveSrmCaseHandleInfo.setIsBussinessContact(newCaseHandleInfoDTO.getIsBussinessContact());
							// 是否同特店聯絡電話
							saveSrmCaseHandleInfo.setIsBussinessContactPhone(newCaseHandleInfoDTO.getIsBussinessContactPhone());
							// 裝機聯絡人
							saveSrmCaseHandleInfo.setInstalledContact(newCaseHandleInfoDTO.getInstalledContact());
							// 裝機人聯絡電話
							saveSrmCaseHandleInfo.setInstalledContactPhone(newCaseHandleInfoDTO.getInstalledContactPhone());
							// 裝機聯絡人手機
							saveSrmCaseHandleInfo.setIsBussinessContactMobilePhone(newCaseHandleInfoDTO.getIsBussinessContactMobilePhone());
							saveSrmCaseHandleInfo.setInstalledContactMobilePhone(newCaseHandleInfoDTO.getInstalledContactMobilePhone());
							// 裝機聯絡人Email
							saveSrmCaseHandleInfo.setInstalledContactEmail(newCaseHandleInfoDTO.getInstalledContactEmail());
							saveSrmCaseHandleInfo.setIsBussinessContactEmail(newCaseHandleInfoDTO.getIsBussinessContactEmail());
							
							// 修改非裝機、異動案件，非同營業地址裝機地址為儲存的問題
							saveSrmCaseHandleInfo.setInstalledAdress(newCaseHandleInfoDTO.getInstalledAdress());
							saveSrmCaseHandleInfo.setInstalledAdressLocation(newCaseHandleInfoDTO.getInstalledAdressLocation());
							saveSrmCaseHandleInfo.setInstalledPostCode(newCaseHandleInfoDTO.getInstalledPostCode());
						}
					}
				} else {
					//Task #3349 裝機案件單號 寫入裝機需求單號
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(saveSrmCaseHandleInfo.getCaseCategory())) {
						saveSrmCaseHandleInfo.setInstallCaseId(saveSrmCaseHandleInfo.getRequirementNo());
					}
					//裝機案件，判斷裝機類型是否爲微型商戶，是則CMS_CASE標記爲Y,否則爲N TASK 3322
					if (IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(saveSrmCaseHandleInfo.getInstallType())) {
						saveSrmCaseHandleInfo.setCmsCase(IAtomsConstants.YES);
					} else {
						saveSrmCaseHandleInfo.setCmsCase(IAtomsConstants.NO);
					}
				}
				
				//Task #3584 reopen 若是裝機件，則此件之需求單號是裝機案件單號(ATOMS) 將其寫入裝機案件編號欄位
				CompanyDTO bccCompanyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_BCC);
				String caseCategory = IAtomsConstants.MARK_EMPTY_STRING;
				//如果是宣揚
				if (bccCompanyDTO != null 
							&& StringUtils.hasText(bccCompanyDTO.getCompanyId()) 
							&& bccCompanyDTO.getCompanyId().equals(saveSrmCaseHandleInfo.getCustomerId())){
					if(StringUtils.hasText(saveSrmCaseHandleInfo.getRequirementNo()) 
								&& saveSrmCaseHandleInfo.getRequirementNo().length() > 1) {
						caseCategory = saveSrmCaseHandleInfo.getRequirementNo().substring(0, 2);
						if (caseCategory.equalsIgnoreCase("EI")) {
							//需求單號 如果是 裝機 ei開頭 寫入InstallCaseId
							saveSrmCaseHandleInfo.setInstallCaseId(saveSrmCaseHandleInfo.getRequirementNo());
						} else if ((!caseCategory.equalsIgnoreCase("EI"))
											&& (!caseCategory.equalsIgnoreCase("EC"))
											&& (!caseCategory.equalsIgnoreCase("EM"))
											&& (!caseCategory.equalsIgnoreCase("EU"))
											&& (!caseCategory.equalsIgnoreCase("EA"))
											&& (!caseCategory.equalsIgnoreCase("ER"))) {
							//需求單號 如果不是 ei ec em eu ea er 開頭
							saveSrmCaseHandleInfo.setInstallCaseId(null);
						} else {
							String installCaseId = this.srmCaseHandleInfoDAO.getInstallCaseId(saveSrmCaseHandleInfo.getDtid());
							if (StringUtils.hasText(installCaseId)) {
								//需求單號 如果 裝機 ei開頭 的案件已存在，將其InstallCaseId寫入 需求單號  ec em eu ea er 開頭的案件
								saveSrmCaseHandleInfo.setInstallCaseId(installCaseId);
							}
						}
					} else {
						//無需求單號，或長度<2
						saveSrmCaseHandleInfo.setInstallCaseId(null);
					}
				}
				// FOMS案件與是否更新設備默認'N'
				saveSrmCaseHandleInfo.setFomsCase(IAtomsConstants.NO);
				saveSrmCaseHandleInfo.setIsUpdateAsset(IAtomsConstants.NO);
				//案件編號
				String caseId = srmCaseHandleInfoDTO.getCaseId();
				//生成案件編號
				saveSrmCaseHandleInfo.setCaseId(caseId);
				// 設置創建時間與異動時間
				saveSrmCaseHandleInfo.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
				saveSrmCaseHandleInfo.setUpdatedDate(saveSrmCaseHandleInfo.getCreatedDate());
				this.srmCaseHandleInfoDAO.save(saveSrmCaseHandleInfo);
				// 案件處理記錄保存
				if(srmCaseHandleInfoDTO.getSrmCaseTransactionDTO() != null){
					SrmCaseTransaction saveSrmCaseTransaction = (SrmCaseTransaction)transformer.transform(srmCaseHandleInfoDTO.getSrmCaseTransactionDTO(), new SrmCaseTransaction());
					String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
					//Task #3519 api建案 log中要記錄transactionId
					if (IAtomsConstants.YES.equals(isCmsCreate)) {
						srmCaseHandleInfoDTO.setApiTransactionId(transactionId);
					}
					// Task #2562 案件審核歷程中，若有關卡是有發送EMAIL的，動作本身要能連結(點開)，看到發送的紀錄
					if(ctx != null){
						CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)ctx.getRequestParameter();
						if(!StringUtils.hasText(caseManagerFormDTO.getCaseTransactionId())) {
							caseManagerFormDTO.setCaseTransactionId(transactionId);
						} else {
							caseManagerFormDTO.setCaseTransactionId(caseManagerFormDTO.getCaseTransactionId() + IAtomsConstants.MARK_SEPARATOR + transactionId);
						}
					}
					// 設置實際執行時間與記錄日期
					saveSrmCaseTransaction.setCreatedDate(saveSrmCaseHandleInfo.getCreatedDate());
					saveSrmCaseTransaction.setDealDate(new Timestamp(setHourForDate(saveSrmCaseTransaction.getCreatedDate(), null, null, 0, 0).getTime()));
					
					saveSrmCaseTransaction.setTransactionId(transactionId);
					saveSrmCaseTransaction.setCaseId(caseId);
					this.srmCaseTransactionDAO.save(saveSrmCaseTransaction);
				}
				// 案件支援功能保存
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTO.getSrmCaseAssetFunctionDTOs())){
					int j = 0;
					String assetFunctionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_FUNCTION);
					for(SrmCaseAssetFunctionDTO srmCaseAssetFunctionDTO : srmCaseHandleInfoDTO.getSrmCaseAssetFunctionDTOs()){
						j++;
						SrmCaseAssetFunction saveSrmCaseAssetFunction = (SrmCaseAssetFunction)transformer.transform(srmCaseAssetFunctionDTO, new SrmCaseAssetFunction());
						saveSrmCaseAssetFunction.setCaseId(caseId);
						saveSrmCaseAssetFunction.setId(assetFunctionId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(j));
						this.srmCaseAssetFunctionDAO.save(saveSrmCaseAssetFunction);
					}
				}
				// 案件设备链接档保存
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTO.getSrmCaseAssetLinkDTOs())){
					int j = 0;
					String assetLinkId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_LINK);
					for(SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : srmCaseHandleInfoDTO.getSrmCaseAssetLinkDTOs()){
						j++;
						SrmCaseAssetLink saveSrmCaseAssetLink = (SrmCaseAssetLink)transformer.transform(srmCaseAssetLinkDTO, new SrmCaseAssetLink());
						saveSrmCaseAssetLink.setAssetLinkId(assetLinkId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(j));
						saveSrmCaseAssetLink.setCaseId(caseId);
						this.srmCaseAssetLinkDAO.save(saveSrmCaseAssetLink);
					}
				}
				// 案件交易参数保存
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTO.getCaseTransactionParameterDTOs())){
					int j = 0;
					// 得到交易參數主鍵
					String paramterValueId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION_PARAMETER);
					for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseHandleInfoDTO.getCaseTransactionParameterDTOs()){
						j++;
						SrmCaseTransactionParameter saveSrmCaseTransactionParameter = (SrmCaseTransactionParameter)transformer.transform(srmCaseTransactionParameterDTO, new SrmCaseTransactionParameter());
						saveSrmCaseTransactionParameter.setCaseId(caseId);
						saveSrmCaseTransactionParameter.setParamterValueId(paramterValueId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(j));
						this.srmCaseTransactionParameterDAO.save(saveSrmCaseTransactionParameter);
					}
				}
				// 案件附加资料保存
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTO.getCaseAttFileDTOs())){
					int j = 0;
					String attFileId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ATT_FILE);
					for(SrmCaseAttFileDTO srmCaseAttFileDTO : srmCaseHandleInfoDTO.getCaseAttFileDTOs()){
						j++;
						SrmCaseAttFile saveSrmCaseAttFile = (SrmCaseAttFile)transformer.transform(srmCaseAttFileDTO, new SrmCaseAttFile());
						saveSrmCaseAttFile.setCaseId(caseId);
						saveSrmCaseAttFile.setAttFileId(attFileId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(j));
						this.srmCaseAttFileDAO.save(saveSrmCaseAttFile);
					}
				}
				// 案件通訊模式維護檔保存
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getConnectionType())){
					int j = 0;
					SrmCaseCommMode srmCaseCommMode = null;
					String connectionTypeId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_COMM_MODE);
					for(String tempId : StringUtils.toList(srmCaseHandleInfoDTO.getConnectionType(), IAtomsConstants.MARK_SEPARATOR)){
						j++;
						srmCaseCommMode = new SrmCaseCommMode();
						srmCaseCommMode.setCaseId(caseId);
						srmCaseCommMode.setId(connectionTypeId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(j));
						srmCaseCommMode.setCommModeId(tempId);
						this.srmCaseCommModeDAO.save(srmCaseCommMode);
					}
				}
				// 起案activiti設置
				if(ctx != null){
					CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)ctx.getRequestParameter();
					// 設置案件編號
					caseManagerFormDTO.setCaseId(caseId);
					//起案
					super.start(ctx);
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".createSingleCase() DataAccess Exception:" + e, e);
			msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.SAVE_FAILURE, new String[]{this.getMyName()});
			throw new ServiceException(msg);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".createSingleCase():" + e, e);
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED, new String[]{this.getMyName()}, e);
		}
	}
	/**
	 * Purpose:得到案件支援功能連接檔DTO集合
	 * @author CrissZhang
	 * @param functionId ：內建功能、周邊設備功能等類型id
	 * @param caseId : 案件編號
	 * @param functionType : 功能類型
	 * @return SrmCaseAssetFunctionDTO ： 案件支援功能連接檔DTO
	 */
	public List<SrmCaseAssetFunctionDTO> getCaseAssetFunctionDtoList(String functionId, String functionType){
		List<SrmCaseAssetFunctionDTO> srmCaseAssetFunctionDTOs = null;
		SrmCaseAssetFunctionDTO srmCaseAssetFunctionDTO = null;
		// 功能存在則保存
		if(StringUtils.hasText(functionId)){
			srmCaseAssetFunctionDTOs = new ArrayList<SrmCaseAssetFunctionDTO>();
			// 解析功能的值
			String[] tempArray = functionId.split(IAtomsConstants.MARK_SEPARATOR);
			if(tempArray != null){
				for(int i = 0; i < tempArray.length; i++){
					srmCaseAssetFunctionDTO = new SrmCaseAssetFunctionDTO();
			//		srmCaseAssetFunctionDTO.setCaseId(caseId);
					srmCaseAssetFunctionDTO.setFunctionId(tempArray[i]);
					srmCaseAssetFunctionDTO.setFunctionCategory(functionType);
					srmCaseAssetFunctionDTOs.add(srmCaseAssetFunctionDTO);
				}
			}
		}
		return srmCaseAssetFunctionDTOs;
	}
	/**
	 * Purpose: 處理內建功能、周邊設備功能等類型存儲
	 * @author CrissZhang
	 * @param functionId ：內建功能、周邊設備功能等類型id
	 * @param caseId : 案件編號
	 * @param functionType : 功能類型
	 * @return void
	 */
	private void dealCaseAssetFunction(String functionId, String caseId, String functionType) {
		// 功能存在則保存
		if(StringUtils.hasText(functionId)){
			SrmCaseAssetFunction srmCaseAssetFunction = null;
			// 案件處理中設備支援功能檔主鍵
			String assetFunctionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_FUNCTION);
			// 解析功能的值
			String[] tempArray = functionId.split(IAtomsConstants.MARK_SEPARATOR);
			if(tempArray != null){
				for(int i = 0; i < tempArray.length; i++){
					srmCaseAssetFunction = new SrmCaseAssetFunction();
					srmCaseAssetFunction.setId(assetFunctionId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(i+1));
					srmCaseAssetFunction.setCaseId(caseId);
					srmCaseAssetFunction.setFunctionId(tempArray[i]);
					srmCaseAssetFunction.setFunctionCategory(functionType);
					this.srmCaseAssetFunctionDAO.insert(srmCaseAssetFunction);
				}
			}
		}
	}

	/**
	 * Purpose: 得到案件設備鏈接檔DTO
	 * @author CrissZhang
	 * @param assetTypeId ： 設備編號
	 * @param caseId ： 案件編號
	 * @param itemType ： 項目類別
	 * @return SrmCaseAssetLinkDTO ： 返回一個案件設備鏈接檔DTO
	 */
	private SrmCaseAssetLinkDTO getCaseAssetLinkDto(String assetTypeId, String itemType, LogonUser logonUser){
		SrmCaseAssetLinkDTO srmCaseAssetLinkDTO = null;
		if(StringUtils.hasText(assetTypeId)){
			srmCaseAssetLinkDTO = new SrmCaseAssetLinkDTO();
			DmmAssetType assetType = assetTypeDAO.findByPrimaryKey(DmmAssetType.class, assetTypeId);
			if(assetType != null){
				// 案件處理中設備連接檔主鍵
				String assetLinkId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_LINK);
				srmCaseAssetLinkDTO.setAssetLinkId(assetLinkId);
		//		srmCaseAssetLinkDTO.setCaseId(caseId);
				srmCaseAssetLinkDTO.setItemId(assetTypeId);
				srmCaseAssetLinkDTO.setItemCategory(assetType.getAssetCategory());
				srmCaseAssetLinkDTO.setItemName(assetType.getName());
				srmCaseAssetLinkDTO.setItemType(itemType);
				srmCaseAssetLinkDTO.setCreatedById(logonUser.getId());
				srmCaseAssetLinkDTO.setCreatedByName(logonUser.getName());
				srmCaseAssetLinkDTO.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
				// 設置鏈接的標誌位
				srmCaseAssetLinkDTO.setIsLink(IAtomsConstants.NO);
			}
		}
		return srmCaseAssetLinkDTO;
	}
	/**
	 * Purpose: 處理刷卡機型、周邊設備等的儲存
	 * @author CrissZhang
	 * @param assetTypeId ：assetTypeId
	 * @param caseId ： 案件編號
	 * @param itemType ： 項目類別
	 * @return void
	 */
	private void dealCaseAssetLink(String assetTypeId, String caseId, String itemType, LogonUser logonUser) {
		// 功能存在則保存
		if(StringUtils.hasText(assetTypeId)){
			DmmAssetType assetType = assetTypeDAO.findByPrimaryKey(DmmAssetType.class, assetTypeId);
			if(assetType != null){
				// 案件處理中設備連接檔主鍵
				String assetLinkId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_LINK);
				SrmCaseAssetLink srmCaseAssetLink = new SrmCaseAssetLink();
				srmCaseAssetLink.setAssetLinkId(assetLinkId);
				srmCaseAssetLink.setCaseId(caseId);
				srmCaseAssetLink.setItemId(assetTypeId);
				srmCaseAssetLink.setItemCategory(assetType.getAssetCategory());
				srmCaseAssetLink.setItemType(itemType);
				// 設置鏈接的標誌位
				srmCaseAssetLink.setIsLink(IAtomsConstants.NO);
				srmCaseAssetLink.setCreatedById(logonUser.getId());
				srmCaseAssetLink.setCreatedByName(logonUser.getName());
				srmCaseAssetLink.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
				this.srmCaseAssetLinkDAO.insert(srmCaseAssetLink);
			}
		}
	}
	
	/**
	 * Purpose:得到案件附加資料DTO集合
	 * @author CrissZhang
	 * @param logonUser ： 登錄這信息
	 * @param fileName : 文件名稱
	 * @return List<SrmCaseAttFileDTO> ： 案件附加資料集合
	 */
	private List<SrmCaseAttFileDTO> getCaseAttFileDTOs(LogonUser logonUser, String fileName, String caseId, boolean isRomove){
		List<SrmCaseAttFileDTO> tempCaseAttFileDTOs = null;
		SrmCaseAttFileDTO tempSrmCaseAttFileDTO = null;
		try {
			String tempPath = getSaveTempFilePath(true, fileName, null);
			File tempFilePath = new File(tempPath);
			File fa[] = tempFilePath.listFiles();
			//如果存在需要上傳的文件，進行上傳
			if (fa != null) {
				tempCaseAttFileDTOs = new ArrayList<SrmCaseAttFileDTO>();
				//獲取保存文件的正式路徑
				String uploadPath = getSaveTempFilePath(false, null, caseId);
				String name = IAtomsConstants.MARK_EMPTY_STRING;
				//循環將文件保存至正式目錄
				for (File file : fa) {
					//獲取文件名稱
					name = file.getName();
					//複製文件至正式路徑
					FileUtils.copyFile(tempPath + name, uploadPath, name);
				}
				// 移除文件
				if(isRomove){
					FileUtils.removeFile(tempPath);
				}
				String fileNewName;
				String tempNewName;
				int lastFlagPosition = -1;
				//保存文件名稱及路徑至數據庫
				for (File file : fa) {
					fileNewName = file.getName();
					lastFlagPosition = fileNewName.lastIndexOf(IAtomsConstants.MARK_UNDER_LINE);
					if (lastFlagPosition > 0) {
						fileNewName = fileNewName.substring(0,lastFlagPosition);
						tempNewName = file.getName();
						lastFlagPosition = tempNewName.lastIndexOf(IAtomsConstants.MARK_NO);
						fileNewName += tempNewName.substring(lastFlagPosition);
					}
					tempSrmCaseAttFileDTO = new SrmCaseAttFileDTO();
					tempSrmCaseAttFileDTO.setFileName(fileNewName);
					tempSrmCaseAttFileDTO.setFilePath(uploadPath + file.getName());
					tempSrmCaseAttFileDTO.setCreatedById(logonUser.getId());
					tempSrmCaseAttFileDTO.setCreatedByName(logonUser.getName());
					tempSrmCaseAttFileDTO.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
					// 添加至集合
					tempCaseAttFileDTOs.add(tempSrmCaseAttFileDTO);
				}
			}
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".getCaseAttFileDTOs() is error in Service:"+e, e);
			throw new ServiceException(e);
		}
		return tempCaseAttFileDTOs;
	}
	/**
	 * Purpose: 保存案件附加檔
	 * @author CrissZhang
	 * @param logonUser ： 登錄者信息
	 * @param fileName ： 文件名稱
	 * @param caseId ：案件編號
	 * @param isRemove: 是否移除文件
	 * @return void
	 */
	private void saveCaseAttFile(LogonUser logonUser, String fileName, String caseId, Boolean isRemove){
		try {
			String tempPath = getSaveTempFilePath(true, fileName, null);
			File tempFilePath = new File(tempPath);
			File fa[] = tempFilePath.listFiles();
			//如果存在需要上傳的文件，進行上傳
			if (fa != null) {
				//獲取保存文件的正式路徑
				String uploadPath = getSaveTempFilePath(false, null, caseId);
				String name = IAtomsConstants.MARK_EMPTY_STRING;
				//循環將文件保存至正式目錄
				for (File file : fa) {
					//獲取文件名稱
					name = file.getName();
					//複製文件至正式路徑
					FileUtils.copyFile(tempPath + name, uploadPath, name);
				}
				if (isRemove) {
					FileUtils.removeFile(tempPath);
				}
				SrmCaseAttFile srmCaseAttFile = null;
				String fileNewName;
				String tempNewName;
				int lastFlagPosition = -1;
				int i = 0;
				String attFileId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ATT_FILE);
				//保存文件名稱及路徑至數據庫
				for (File file : fa) {
					i++;
					fileNewName = file.getName();
					lastFlagPosition = fileNewName.lastIndexOf(IAtomsConstants.MARK_UNDER_LINE);
					if (lastFlagPosition > 0) {
						fileNewName = fileNewName.substring(0,lastFlagPosition);
						tempNewName = file.getName();
						lastFlagPosition = tempNewName.lastIndexOf(IAtomsConstants.MARK_NO);
						fileNewName += tempNewName.substring(lastFlagPosition);
					}
					srmCaseAttFile = new SrmCaseAttFile();
					srmCaseAttFile.setAttFileId(attFileId + IAtomsConstants.MARK_UNDER_LINE + String.valueOf(i));
					srmCaseAttFile.setCaseId(caseId);
					srmCaseAttFile.setFileName(fileNewName);
					srmCaseAttFile.setFilePath(uploadPath + file.getName());
					srmCaseAttFile.setCreatedById(logonUser.getId());
					srmCaseAttFile.setCreatedByName(logonUser.getName());
					srmCaseAttFile.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
					
					this.srmCaseAttFileDAO.insert(srmCaseAttFile);
				}
			}
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".saveCaseAttFile() is error in Service:"+e, e);
			throw new ServiceException(e);
		}
	}
	
	/**
	 * Purpose: 生成案件的異動說明
	 * @author CrissZhang
	 * @param caseManagerFormDTO : 案件處理的formDTO
	 * @param isNewCase:是否为新建案件
	 * @param isUpdate : 是否需要生成异动件的交易参数
	 * @return String ： 返回String的字符串
	 */
	private String createUpdateDescription(CaseManagerFormDTO caseManagerFormDTO, boolean isUpdate, boolean isNewCase){
		String updatedDescription = null;
		if(caseManagerFormDTO != null){
			//交易參數信息
			List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = caseManagerFormDTO.getSrmCaseTransactionParameterDTOs();
			SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = caseManagerFormDTO.getSrmCaseHandleInfoDTO();
			// 處理併機時的異動說明
			if (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseManagerFormDTO.getCaseCategory()) || isUpdate){
				// 之前的交易參數
				List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = null;
				if (isNewCase && !IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseManagerFormDTO.getCaseCategory())) {
				//	caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.listTransactionParameterDTOsByDtid(srmCaseHandleInfoDTO.getDtid());
					// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
					boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfoDTO.getDtid(), null);
					// CR #2551  查詢交易參數 Bug #3055
					caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.getTransactionParameterDTOsByDtid(srmCaseHandleInfoDTO.getDtid(), isNewHave);
					
				} else {
					Transformer transformer = new SimpleDtoDmoTransformer();
					caseNewTransactionParameterDTOs = new ArrayList<SrmCaseNewTransactionParameterDTO>();
					List<SrmCaseTransactionParameterDTO> caseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(srmCaseHandleInfoDTO.getCaseId(), IAtomsConstants.NO);
					try {
						for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : caseTransactionParameterDTOs) {
							caseNewTransactionParameterDTOs.add((SrmCaseNewTransactionParameterDTO)transformer.transform(srmCaseTransactionParameterDTO, new SrmCaseNewTransactionParameterDTO()));
						}
					} catch (ConvertException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				// 交易參數交易類別集合
				// 交易类别
				MultiParameterInquiryContext param = new MultiParameterInquiryContext();
				param.addParameter(BaseParameterManagerFormDTO.PARAMETER_PARENT_BPTD_CODE, IATOMS_PARAM_TYPE.TICKET_TYPE.getCode());
				param.addParameter(BaseParameterManagerFormDTO.PARAMETER_PARENT_ITEM_VALUE, IAtomsConstants.CASE_CATEGORY.INSTALL.getCode());
				param.addParameter(BaseParameterManagerFormDTO.PARAMETER_CHILDREN_BPTD_CODE, IATOMS_PARAM_TYPE.TRANSACTION_CATEGORY.getCode());
				param.addParameter(BaseParameterManagerFormDTO.EDIT_EFFECITVE_DATE, DateTimeUtils.getCurrentTimestamp());
				List<Parameter> transactionCategoryList = this.baseParameterManagerService.getParametersByParent(param);
			//	List<Parameter> transactionCategoryList = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.TRANSACTION_CATEGORY.getCode(), null);
				if(!CollectionUtils.isEmpty(transactionCategoryList)){
					boolean isAdd = false;
					Map<String, String> map = new HashMap<String, String>();
					for(Parameter parameter : transactionCategoryList){
						map.put((String)parameter.getValue(), (String)parameter.getName());
					}
					StringBuilder builder = new StringBuilder();
					// 如果之前的交易參數為空
					if(CollectionUtils.isEmpty(caseNewTransactionParameterDTOs)){
						if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
							isAdd = true;
							for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
								//result.add(map.get(srmCaseTransactionParameterDTO.getTransactionType()));
								builder.append(map.get(srmCaseTransactionParameterDTO.getTransactionType())).append(IAtomsConstants.MARK_SEPARATOR);
							}
						}
					} else {
						boolean flag = false;
						
						// 之前的交易參數不為空
						if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
							for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
								flag = false;
								for (SrmCaseNewTransactionParameterDTO srmCaseNewTransactionParameterDTO : caseNewTransactionParameterDTOs) {
									if(srmCaseNewTransactionParameterDTO.getTransactionType().equals(srmCaseTransactionParameterDTO.getTransactionType())){
										flag = true;
										break;
									}
								}
								// 當前的交易參數與之前的交易參數均不相同
								if(!flag){
									isAdd = true;
									//result.add(map.get(srmCaseTransactionParameterDTO.getTransactionType()));
									builder.append(map.get(srmCaseTransactionParameterDTO.getTransactionType())).append(IAtomsConstants.MARK_SEPARATOR);
								}
							}
							//新增、修改案件時，生成歷程表裏的updateItem,需要記錄已移除的交易參數。
							if (isUpdate) {
								int i = 1;
								for (SrmCaseNewTransactionParameterDTO srmCaseNewTransactionParameterDTO : caseNewTransactionParameterDTOs) {
									flag = false;
									for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
										if(srmCaseNewTransactionParameterDTO.getTransactionType().equals(srmCaseTransactionParameterDTO.getTransactionType())){
											flag = true;
											break;
										}
									}
									// 當前的交易參數與之前的交易參數均不相同
									if(!flag){
										if (i == 1) {
											if (builder.length() > 0) {
												builder.deleteCharAt(builder.length() - 1).append(IAtomsConstants.MARK_WRAP);
											}
											builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_DESCRIPTION_DELETE));
											i++;
										}
										//result.add(map.get(srmCaseNewTransactionParameterDTO.getTransactionType()));
										builder.append(map.get(srmCaseNewTransactionParameterDTO.getTransactionType())).append(IAtomsConstants.MARK_SEPARATOR);
									}
								}
							}
						} else {
							builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_DESCRIPTION_DELETE));
							for (SrmCaseNewTransactionParameterDTO srmCaseNewTransactionParameterDTO : caseNewTransactionParameterDTOs) {
								builder.append(map.get(srmCaseNewTransactionParameterDTO.getTransactionType())).append(IAtomsConstants.MARK_SEPARATOR);
							}
							
						}
					}
					// 如果計算的結果不為空
					/*if(!CollectionUtils.isEmpty(result)){
						//String updateDescription = result.toString();
						updatedDescription = result.toString().substring(result.toString().indexOf(IAtomsConstants.MARK_BRACKET_LEFT) + 1, result.toString().indexOf(IAtomsConstants.MARK_BRACKET_RIGHT));
						// 如果異動說明
						if(StringUtils.hasText(updatedDescription)){
							// 異動說明
							updatedDescription = i18NUtil.getName(IAtomsMessageCode.UPDATE_DESCRIPTION_ADD) + updatedDescription;
						}
					}*/
					if(builder.length() > 0){
						//String updateDescription = result.toString();
						updatedDescription = builder.substring(0, builder.length() - 1);
						// 如果異動說明
						if(StringUtils.hasText(updatedDescription) && isAdd){
							// 異動說明
							updatedDescription = i18NUtil.getName(IAtomsMessageCode.UPDATE_DESCRIPTION_ADD) + updatedDescription;
						}
					}
				}	
			// 處理異動時的異動說明
			} else if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseManagerFormDTO.getCaseCategory())){
				// 得到異動說明
				updatedDescription = this.getUpdateContent(srmCaseHandleInfoDTO, true);
			}
		}
		return updatedDescription;
	}
	/**
	 * Purpose: 生成案件的異動項目
	 * @author CrissZhang
	 * @param caseManagerFormDTO : 案件處理的formDTO
	 * @return String ： 返回String的字符串
	 */
	private String createUpdateItem(CaseManagerFormDTO caseManagerFormDTO){
		String updatedItem = null;
		if(caseManagerFormDTO != null){
			// 處理異動時的異動項目
			if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseManagerFormDTO.getCaseCategory())){
				StringBuilder builder = new StringBuilder();
				String tempString = null;
				//交易參數信息
				List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = caseManagerFormDTO.getSrmCaseTransactionParameterDTOs();
				SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = caseManagerFormDTO.getSrmCaseHandleInfoDTO();
				// 之前的交易參數
			//	List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.listTransactionParameterDTOsByDtid(srmCaseHandleInfoDTO.getDtid());
				// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
				boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfoDTO.getDtid(),null);
				// CR #2551  查詢交易參數 Bug #3055
				List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.getTransactionParameterDTOsByDtid(srmCaseHandleInfoDTO.getDtid(), isNewHave);
				
				// 交易參數交易類別集合
				MultiParameterInquiryContext param = new MultiParameterInquiryContext();
				param.addParameter(BaseParameterManagerFormDTO.PARAMETER_PARENT_BPTD_CODE, IATOMS_PARAM_TYPE.TICKET_TYPE.getCode());
				param.addParameter(BaseParameterManagerFormDTO.PARAMETER_PARENT_ITEM_VALUE, IAtomsConstants.CASE_CATEGORY.INSTALL.getCode());
				param.addParameter(BaseParameterManagerFormDTO.PARAMETER_CHILDREN_BPTD_CODE, IATOMS_PARAM_TYPE.TRANSACTION_CATEGORY.getCode());
				param.addParameter(BaseParameterManagerFormDTO.EDIT_EFFECITVE_DATE, DateTimeUtils.getCurrentTimestamp());
				List<Parameter> transactionCategoryList = this.baseParameterManagerService.getParametersByParent(param);
				// 可編輯字段的map集合
				param = new MultiParameterInquiryContext();
				String versionDate = DateTimeUtils.toString(DateTimeUtils.getCurrentTimestamp(), DateTimeUtils.DT_FMT_YYYYMMDD_DASH);
				param.addParameter(SrmTransactionParameterItemDTO.ATTRIBUTE.EFFECTIVE_DATE.getValue(), versionDate);
//				Map<String,List<String>> editFildsMap = this.getEditFieldsGroupbyTransactionType(param);
				// 交易參數交易項配置檔
				List<SrmTransactionParameterItemDTO> srmTransactionParameterItemDTOs = srmTransactionParameterItemDAO.listby(versionDate);
				if(!CollectionUtils.isEmpty(transactionCategoryList)){
					Map<String, String> map = new HashMap<String, String>();
					for(Parameter parameter : transactionCategoryList){
						map.put((String)parameter.getValue(), (String)parameter.getName());
					}
					Gson gson = new Gson();
					// 存放交易參數轉換後的map對象
					Map<String, Object> currentJsonMap = null;
					Map<String, Object> oldJsonMap = null;
					// 如果之前的交易參數為空
					if(CollectionUtils.isEmpty(caseNewTransactionParameterDTOs)){
						if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
							for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
								if(StringUtils.hasText(srmCaseTransactionParameterDTO.getItemValue())){
									currentJsonMap = new HashMap<String, Object>();
									// 將item_value中交易參數轉爲map集合對象
									currentJsonMap = gson.fromJson(srmCaseTransactionParameterDTO.getItemValue(), currentJsonMap.getClass());
								}
								// xinzeng
								builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_DESCRIPTION_ADD));
								builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
								builder.append(map.get(srmCaseTransactionParameterDTO.getTransactionType()));
								builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
								// 新增交易類別
								for(SrmTransactionParameterItemDTO srmTransactionParameterItemDTO : srmTransactionParameterItemDTOs){
									// 放置特店代號
									if(srmTransactionParameterItemDTO.getParamterItemCode().equals(IAtomsConstants.PARAMTER_ITEM_CODE_MERCHANT_CODE)){
										if(StringUtils.hasText(srmCaseTransactionParameterDTO.getMerchantCode())){
											builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
											builder.append(srmTransactionParameterItemDTO.getParamterItemName());
											builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
											builder.append(IAtomsConstants.MARK_COLON);
											builder.append(srmCaseTransactionParameterDTO.getMerchantCode());
											builder.append(IAtomsConstants.MARK_SEPARATOR);
										}
										// 放置分期特店代號
									} else if(srmTransactionParameterItemDTO.getParamterItemCode().equals(IAtomsConstants.PARAMTER_ITEM_CODE_MERCHANT_CODE_OTHER)){
										if(StringUtils.hasText(srmCaseTransactionParameterDTO.getMerchantCodeOther())){
											builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
											builder.append(srmTransactionParameterItemDTO.getParamterItemName());
											builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
											builder.append(IAtomsConstants.MARK_COLON);
											builder.append(srmCaseTransactionParameterDTO.getMerchantCodeOther());
											builder.append(IAtomsConstants.MARK_SEPARATOR);
										}
										// 放置tid
									} else if(srmTransactionParameterItemDTO.getParamterItemCode().equals(IAtomsConstants.PARAMTER_ITEM_CODE_TID)){
										if(StringUtils.hasText(srmCaseTransactionParameterDTO.getTid())){
											builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
											builder.append(srmTransactionParameterItemDTO.getParamterItemName());
											builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
											builder.append(IAtomsConstants.MARK_COLON);
											builder.append(srmCaseTransactionParameterDTO.getTid());
											builder.append(IAtomsConstants.MARK_SEPARATOR);
										}
									// 放置其他
									} else {
										if(!CollectionUtils.isEmpty(currentJsonMap)){
											if(currentJsonMap.containsKey(srmTransactionParameterItemDTO.getParamterItemCode())
													&& StringUtils.hasText((String)currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode()))){
												builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
												builder.append(srmTransactionParameterItemDTO.getParamterItemName());
												builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
												builder.append(IAtomsConstants.MARK_COLON);
												builder.append((String)currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode()));
												builder.append(IAtomsConstants.MARK_SEPARATOR);
											}
										}
									}
									// 去除末尾逗號
									if(StringUtils.hasText(builder) && builder.indexOf(IAtomsConstants.MARK_SEPARATOR) > 0){
										tempString = builder.substring(0, builder.lastIndexOf(IAtomsConstants.MARK_SEPARATOR));
										builder.delete(0, builder.length());
										builder.append(tempString);
									}
								}
								builder.append(IAtomsConstants.MARK_SEMICOLON);
							//	result.add(map.get(srmCaseTransactionParameterDTO.getTransactionType()));
							}
						}
					} else {
						boolean flag = false;
						boolean isFirst = false;
						StringBuilder tempBuilder = new StringBuilder();
						// 之前的交易參數不為空
						if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
							for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
								flag = false;
								for (SrmCaseNewTransactionParameterDTO srmCaseNewTransactionParameterDTO : caseNewTransactionParameterDTOs) {
									if(srmCaseNewTransactionParameterDTO.getTransactionType().equals(srmCaseTransactionParameterDTO.getTransactionType())){
										if(StringUtils.hasText(srmCaseNewTransactionParameterDTO.getItemValue())){
											oldJsonMap = new HashMap<String, Object>();
											// 將item_value中交易參數轉爲map集合對象
											oldJsonMap = gson.fromJson(srmCaseNewTransactionParameterDTO.getItemValue(), oldJsonMap.getClass());
										}
										flag = true;
										isFirst = false;
										// 修改 TODO
										if(StringUtils.hasText(srmCaseTransactionParameterDTO.getItemValue())){
											currentJsonMap = new HashMap<String, Object>();
											// 將item_value中交易參數轉爲map集合對象
											currentJsonMap = gson.fromJson(srmCaseTransactionParameterDTO.getItemValue(), currentJsonMap.getClass());
										}
										tempBuilder.delete(0, tempBuilder.length());
										// 修改
										tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
										tempBuilder.append(map.get(srmCaseTransactionParameterDTO.getTransactionType()));
										tempBuilder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
										for(SrmTransactionParameterItemDTO srmTransactionParameterItemDTO : srmTransactionParameterItemDTOs){
											// 放置特店代號
											if(srmTransactionParameterItemDTO.getParamterItemCode().equals(IAtomsConstants.PARAMTER_ITEM_CODE_MERCHANT_CODE)){
												/*if(StringUtils.hasText(srmCaseTransactionParameterDTO.getMerchantCode())){
													builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
													builder.append(srmTransactionParameterItemDTO.getParamterItemName());
													builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
													builder.append(IAtomsConstants.MARK_COLON);
													builder.append(srmCaseTransactionParameterDTO.getMerchantCode());
													builder.append(IAtomsConstants.MARK_SEPARATOR);
												}*/
												if(StringUtils.hasText(srmCaseTransactionParameterDTO.getMerchantCode()) || StringUtils.hasText(srmCaseNewTransactionParameterDTO.getMerchantCode())){
													if((StringUtils.hasText(srmCaseTransactionParameterDTO.getMerchantCode()) && !(srmCaseTransactionParameterDTO.getMerchantCode()).equals(srmCaseNewTransactionParameterDTO.getMerchantCode()))
															|| (StringUtils.hasText(srmCaseNewTransactionParameterDTO.getMerchantCode()) && !(srmCaseNewTransactionParameterDTO.getMerchantCode()).equals(srmCaseTransactionParameterDTO.getMerchantCode()))){
														if(!isFirst){
															isFirst = true;
															builder.append(tempBuilder.toString());
														}
														builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
														builder.append(srmTransactionParameterItemDTO.getParamterItemName());
														builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
														builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
																new String[]{srmCaseNewTransactionParameterDTO.getMerchantCode() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseNewTransactionParameterDTO.getMerchantCode(),
																	srmCaseTransactionParameterDTO.getMerchantCode() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseTransactionParameterDTO.getMerchantCode()}, null));
														builder.append(IAtomsConstants.MARK_SEMICOLON);
													}
												}
												// 放置分期特店代號
											} else if(srmTransactionParameterItemDTO.getParamterItemCode().equals(IAtomsConstants.PARAMTER_ITEM_CODE_MERCHANT_CODE_OTHER)){
												/*if(StringUtils.hasText(srmCaseTransactionParameterDTO.getMerchantCodeOther())){
													builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
													builder.append(srmTransactionParameterItemDTO.getParamterItemName());
													builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
													builder.append(IAtomsConstants.MARK_COLON);
													builder.append(srmCaseTransactionParameterDTO.getMerchantCodeOther());
													builder.append(IAtomsConstants.MARK_SEPARATOR);
												}*/
												if(StringUtils.hasText(srmCaseTransactionParameterDTO.getMerchantCodeOther()) || StringUtils.hasText(srmCaseNewTransactionParameterDTO.getMerchantCodeOther())){
													if((StringUtils.hasText(srmCaseTransactionParameterDTO.getMerchantCodeOther()) && !(srmCaseTransactionParameterDTO.getMerchantCodeOther()).equals(srmCaseNewTransactionParameterDTO.getMerchantCodeOther()))
															|| (StringUtils.hasText(srmCaseNewTransactionParameterDTO.getMerchantCodeOther()) && !(srmCaseNewTransactionParameterDTO.getMerchantCodeOther()).equals(srmCaseTransactionParameterDTO.getMerchantCodeOther()))){
														if(!isFirst){
															isFirst = true;
															builder.append(tempBuilder.toString());
														}
														builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
														builder.append(srmTransactionParameterItemDTO.getParamterItemName());
														builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
														builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
																new String[]{srmCaseNewTransactionParameterDTO.getMerchantCodeOther() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseNewTransactionParameterDTO.getMerchantCodeOther(),
																	srmCaseTransactionParameterDTO.getMerchantCodeOther() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseTransactionParameterDTO.getMerchantCodeOther()}, null));
														builder.append(IAtomsConstants.MARK_SEMICOLON);
													}
												}
												// 放置tid
											} else if(srmTransactionParameterItemDTO.getParamterItemCode().equals(IAtomsConstants.PARAMTER_ITEM_CODE_TID)){
												/*if(StringUtils.hasText(srmCaseTransactionParameterDTO.getTid())){
													builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
													builder.append(srmTransactionParameterItemDTO.getParamterItemName());
													builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
													builder.append(IAtomsConstants.MARK_COLON);
													builder.append(srmCaseTransactionParameterDTO.getTid());
													builder.append(IAtomsConstants.MARK_SEPARATOR);
												}*/
												if(StringUtils.hasText(srmCaseTransactionParameterDTO.getTid()) || StringUtils.hasText(srmCaseNewTransactionParameterDTO.getTid())){
													if((StringUtils.hasText(srmCaseTransactionParameterDTO.getTid()) && !(srmCaseTransactionParameterDTO.getTid()).equals(srmCaseNewTransactionParameterDTO.getTid()))
															|| (StringUtils.hasText(srmCaseNewTransactionParameterDTO.getTid()) && !(srmCaseNewTransactionParameterDTO.getTid()).equals(srmCaseTransactionParameterDTO.getTid()))){
														if(!isFirst){
															isFirst = true;
															builder.append(tempBuilder.toString());
														}
														builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
														builder.append(srmTransactionParameterItemDTO.getParamterItemName());
														builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
														builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
																new String[]{srmCaseNewTransactionParameterDTO.getTid() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseNewTransactionParameterDTO.getTid(),
																	srmCaseTransactionParameterDTO.getTid() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseTransactionParameterDTO.getTid()}, null));
														builder.append(IAtomsConstants.MARK_SEMICOLON);
													}
												}
											// 放置其他
											} else {
												/*if(!CollectionUtils.isEmpty(currentJsonMap)){
													if(currentJsonMap.containsKey(srmTransactionParameterItemDTO.getParamterItemCode())
															&& StringUtils.hasText((String)currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode()))){
														builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
														builder.append(srmTransactionParameterItemDTO.getParamterItemName());
														builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
														builder.append(IAtomsConstants.MARK_COLON);
														builder.append((String)currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode()));
														builder.append(IAtomsConstants.MARK_SEPARATOR);
													}
												}*/
												if(!CollectionUtils.isEmpty(currentJsonMap) && !CollectionUtils.isEmpty(oldJsonMap)){
													if((currentJsonMap.containsKey(srmTransactionParameterItemDTO.getParamterItemCode()) 
															&& oldJsonMap.containsKey(srmTransactionParameterItemDTO.getParamterItemCode()))
															|| (currentJsonMap.containsKey(srmTransactionParameterItemDTO.getParamterItemCode())
															&& StringUtils.hasText((String)currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode())))){
														if(oldJsonMap.containsKey(srmTransactionParameterItemDTO.getParamterItemCode())){
															if((StringUtils.hasText((String) currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode())) && !((String) currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode())).equals((String) oldJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode())))
																	|| (StringUtils.hasText((String) oldJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode())) && !((String) oldJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode())).equals((String) currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode())))){
																if(!isFirst){
																	isFirst = true;
																	builder.append(tempBuilder.toString());
																}
																builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
																builder.append(srmTransactionParameterItemDTO.getParamterItemName());
																builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
																builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
																		new String[]{(String) oldJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode()) == null ? IAtomsConstants.MARK_EMPTY_STRING : (String) oldJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode()),
																				(String) currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode()) == null ? IAtomsConstants.MARK_EMPTY_STRING : (String) currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode())}, null));
																builder.append(IAtomsConstants.MARK_SEMICOLON);
															}
														} else {
															if(!isFirst){
																isFirst = true;
																builder.append(tempBuilder.toString());
															}
															builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
															builder.append(srmTransactionParameterItemDTO.getParamterItemName());
															builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
															builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
																	new String[]{IAtomsConstants.MARK_EMPTY_STRING, (String) currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode())}, null));
															builder.append(IAtomsConstants.MARK_SEMICOLON);
														}
													}
												}
											}
										}
										// 去除末尾逗號
										if(StringUtils.hasText(builder) && builder.lastIndexOf(IAtomsConstants.MARK_SEPARATOR) == builder.length()-1){
											tempString = builder.substring(0, builder.lastIndexOf(IAtomsConstants.MARK_SEPARATOR));
											builder.delete(0, builder.length());
											builder.append(tempString);
										}
//										builder.append(IAtomsConstants.MARK_SEMICOLON);
										break;
									}
								}
								// 當前的交易參數與之前的交易參數均不相同
								if(!flag){
									if(StringUtils.hasText(srmCaseTransactionParameterDTO.getItemValue())){
										currentJsonMap = new HashMap<String, Object>();
										// 將item_value中交易參數轉爲map集合對象
										currentJsonMap = gson.fromJson(srmCaseTransactionParameterDTO.getItemValue(), currentJsonMap.getClass());
									}
									// xinzeng
									builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_DESCRIPTION_ADD));
									builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
									builder.append(map.get(srmCaseTransactionParameterDTO.getTransactionType()));
									builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
									// 新增交易類別
									for(SrmTransactionParameterItemDTO srmTransactionParameterItemDTO : srmTransactionParameterItemDTOs){
										// 放置特店代號
										if(srmTransactionParameterItemDTO.getParamterItemCode().equals(IAtomsConstants.PARAMTER_ITEM_CODE_MERCHANT_CODE)){
											if(StringUtils.hasText(srmCaseTransactionParameterDTO.getMerchantCode())){
												builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
												builder.append(srmTransactionParameterItemDTO.getParamterItemName());
												builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
												builder.append(IAtomsConstants.MARK_COLON);
												builder.append(srmCaseTransactionParameterDTO.getMerchantCode());
												builder.append(IAtomsConstants.MARK_SEPARATOR);
											}
											// 放置分期特店代號
										} else if(srmTransactionParameterItemDTO.getParamterItemCode().equals(IAtomsConstants.PARAMTER_ITEM_CODE_MERCHANT_CODE_OTHER)){
											if(StringUtils.hasText(srmCaseTransactionParameterDTO.getMerchantCodeOther())){
												builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
												builder.append(srmTransactionParameterItemDTO.getParamterItemName());
												builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
												builder.append(IAtomsConstants.MARK_COLON);
												builder.append(srmCaseTransactionParameterDTO.getMerchantCodeOther());
												builder.append(IAtomsConstants.MARK_SEPARATOR);
											}
											// 放置tid
										} else if(srmTransactionParameterItemDTO.getParamterItemCode().equals(IAtomsConstants.PARAMTER_ITEM_CODE_TID)){
											if(StringUtils.hasText(srmCaseTransactionParameterDTO.getTid())){
												builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
												builder.append(srmTransactionParameterItemDTO.getParamterItemName());
												builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
												builder.append(IAtomsConstants.MARK_COLON);
												builder.append(srmCaseTransactionParameterDTO.getTid());
												builder.append(IAtomsConstants.MARK_SEPARATOR);
											}
										// 放置其他
										} else {
											if(!CollectionUtils.isEmpty(currentJsonMap)){
												if(currentJsonMap.containsKey(srmTransactionParameterItemDTO.getParamterItemCode())
														&& StringUtils.hasText((String)currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode()))){
													builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
													builder.append(srmTransactionParameterItemDTO.getParamterItemName());
													builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
													builder.append(IAtomsConstants.MARK_COLON);
													builder.append((String)currentJsonMap.get(srmTransactionParameterItemDTO.getParamterItemCode()));
													builder.append(IAtomsConstants.MARK_SEPARATOR);
												}
											}
										}
									}
									// 去除末尾逗號
									if(StringUtils.hasText(builder) && builder.lastIndexOf(IAtomsConstants.MARK_SEPARATOR) == builder.length()-1){
										tempString = builder.substring(0, builder.lastIndexOf(IAtomsConstants.MARK_SEPARATOR));
										builder.delete(0, builder.length());
										builder.append(tempString);
									}
									builder.append(IAtomsConstants.MARK_SEMICOLON);
								}
							}
						}
						// 移除交易項
						for (SrmCaseNewTransactionParameterDTO srmCaseNewTransactionParameterDTO : caseNewTransactionParameterDTOs) {
							if(CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)) {
								flag = false;
							} else {
								for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
									flag = false;
									if(srmCaseNewTransactionParameterDTO.getTransactionType().equals(srmCaseTransactionParameterDTO.getTransactionType())){
										flag = true;
										break;
									}
								}
							}
							// 當前的交易參數與之前的交易參數均不相同
							if(!flag){
								// 移除某項交易參數
								builder.append(i18NUtil.getName(IAtomsMessageCode.REMOVE_TRANSACTION_PARAMETER,
										new String[]{map.get(srmCaseNewTransactionParameterDTO.getTransactionType())}, null));
								builder.append(IAtomsConstants.MARK_SEMICOLON);
							//	result.add(map.get(srmCaseTransactionParameterDTO.getTransactionType()));
							}
						}
					}
					updatedItem = builder.toString();
				}	
			}
		}
		return updatedItem;
	}
	/**
	 * Purpose: 得到一個異動的詳細內容
	 * @author CrissZhang
	 * @param srmCaseHandleInfoDTO : 案件處理主檔DTO
	 * @param isUpdateCaseComment : 異動案件案件異動信息標志
	 * @param isNewCase : 是否为新案件
	 * @return String ： 返回一個字符串
	 */
	private String getUpdateContent(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO, boolean isUpdateCaseComment){
		// 返回結果
		String result = null;
		StringBuilder builder = new StringBuilder();
		//案件處理信息
		SrmCaseHandleInfoDTO oldSrmCaseHandleInfoDTO = null;
		//
		String connectionTypeName = null;
		//舊DTID
		String oldDtid = null;
		// 如果爲異動案件異動說明
		if(isUpdateCaseComment){
			// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
			boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfoDTO.getDtid(), null);
			// 查詢案件資料
			oldSrmCaseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(srmCaseHandleInfoDTO.getDtid(), isNewHave);
		// 非異動件異動說明
		} else {
			// 如果有caseId
			if(StringUtils.hasText(srmCaseHandleInfoDTO.getCaseId())){
				CaseManagerFormDTO caseManagerFormDTO = new CaseManagerFormDTO();
				caseManagerFormDTO.setQueryCaseId(srmCaseHandleInfoDTO.getCaseId());
				caseManagerFormDTO.setIsExport(true);
				caseManagerFormDTO.setIsInstant(true);
				caseManagerFormDTO.setIsTemp(Boolean.TRUE);
				List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(srmCaseHandleInfoDTO.getCaseId(), IAtomsConstants.NO);
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
					oldSrmCaseHandleInfoDTO = srmCaseHandleInfoDTOs.get(0);
					if (StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) && !srmCaseHandleInfoDTO.getDtid().equals(oldSrmCaseHandleInfoDTO.getDtid())) {
						oldDtid = oldSrmCaseHandleInfoDTO.getDtid();
						// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
						boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfoDTO.getDtid(), null);
						// 查詢案件資料
						oldSrmCaseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(srmCaseHandleInfoDTO.getDtid(), isNewHave);
					} else {
						oldSrmCaseHandleInfoDTO.setMerchantCode(oldSrmCaseHandleInfoDTO.getMerMid());
					}
				}
			}
		}
		// 不爲空
		if(oldSrmCaseHandleInfoDTO != null){
			// 欄位異動情況說明
			if(!isUpdateCaseComment){
				// 需求單號
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getRequirementNo())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo()) && !(srmCaseHandleInfoDTO.getRequirementNo()).equals(oldSrmCaseHandleInfoDTO.getRequirementNo()))
							|| ((StringUtils.hasText(oldSrmCaseHandleInfoDTO.getRequirementNo()) && !(oldSrmCaseHandleInfoDTO.getRequirementNo()).equals(srmCaseHandleInfoDTO.getRequirementNo())))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getRequirementNo() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getRequirementNo(), 
										srmCaseHandleInfoDTO.getRequirementNo() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getRequirementNo()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 其他說明
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getDescription()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getDescription())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getDescription()) && !(srmCaseHandleInfoDTO.getDescription()).equals(oldSrmCaseHandleInfoDTO.getDescription()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getDescription()) && !(oldSrmCaseHandleInfoDTO.getDescription()).equals(srmCaseHandleInfoDTO.getDescription()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DESCRIPTION));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getDescription() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getDescription(),
								srmCaseHandleInfoDTO.getDescription() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getDescription()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 處理頁面
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getCaseId())){
					// 案件類型
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getCaseTypeName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getCaseTypeName())){
						if((StringUtils.hasText(srmCaseHandleInfoDTO.getCaseTypeName()) && !(srmCaseHandleInfoDTO.getCaseTypeName()).equals(oldSrmCaseHandleInfoDTO.getCaseTypeName()))
								|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getCaseTypeName()) && !(oldSrmCaseHandleInfoDTO.getCaseTypeName()).equals(srmCaseHandleInfoDTO.getCaseTypeName()))){
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
							builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE));
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
							builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
									new String[]{oldSrmCaseHandleInfoDTO.getCaseTypeName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getCaseTypeName(),
									srmCaseHandleInfoDTO.getCaseTypeName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getCaseTypeName()}, null));
							builder.append(IAtomsConstants.MARK_SEMICOLON);
							builder.append(IAtomsConstants.MARK_WRAP);
						}
					}
					// 預計完成日
					Boolean isTrue = Boolean.TRUE;
					if((srmCaseHandleInfoDTO.getExpectedCompletionDate() != null) || (oldSrmCaseHandleInfoDTO.getExpectedCompletionDate() != null)){
						if (srmCaseHandleInfoDTO.getExpectedCompletionDate() != null && oldSrmCaseHandleInfoDTO.getExpectedCompletionDate() != null) {
							if((srmCaseHandleInfoDTO.getExpectedCompletionDate().getTime() != oldSrmCaseHandleInfoDTO.getExpectedCompletionDate().getTime())){
								isTrue = Boolean.FALSE;
							}
						} else {
							isTrue = Boolean.FALSE;
						}
						if(!isTrue){
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
							builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE));
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
							builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
									new String[]{oldSrmCaseHandleInfoDTO.getExpectedCompletionDate() == null ? 
											IAtomsConstants.MARK_EMPTY_STRING : (DateTimeUtils.toString(oldSrmCaseHandleInfoDTO.getExpectedCompletionDate(), DateTimeUtils.DT_FMT_YYYYMMDD_SLASH)),
											srmCaseHandleInfoDTO.getExpectedCompletionDate() == null ? 
													IAtomsConstants.MARK_EMPTY_STRING : (DateTimeUtils.toString(srmCaseHandleInfoDTO.getExpectedCompletionDate(), DateTimeUtils.DT_FMT_YYYYMMDD_SLASH))}, null));
							builder.append(IAtomsConstants.MARK_SEMICOLON);
							builder.append(IAtomsConstants.MARK_WRAP);
						}
					}
					// 裝機
					if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
							|| IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
						//客戶
						if (StringUtils.hasText(srmCaseHandleInfoDTO.getCustomerName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getCustomerName())) {
							if((StringUtils.hasText(srmCaseHandleInfoDTO.getCustomerName()) && !(srmCaseHandleInfoDTO.getCustomerName()).equals(oldSrmCaseHandleInfoDTO.getCustomerName()))
									|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getCustomerName()) && !(oldSrmCaseHandleInfoDTO.getCustomerName()).equals(srmCaseHandleInfoDTO.getCustomerName()))){
								builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
								builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CUSTOMER_ID));
								builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
								builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
										new String[]{oldSrmCaseHandleInfoDTO.getCustomerName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getCustomerName(),
										srmCaseHandleInfoDTO.getCustomerName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getCustomerName()}, null));
								builder.append(IAtomsConstants.MARK_SEMICOLON);
								builder.append(IAtomsConstants.MARK_WRAP);
							}
						}
						//合約編號
						if (StringUtils.hasText(srmCaseHandleInfoDTO.getContractCode()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContractCode())) {
							if((StringUtils.hasText(srmCaseHandleInfoDTO.getContractCode()) && !(srmCaseHandleInfoDTO.getContractCode()).equals(oldSrmCaseHandleInfoDTO.getContractCode()))
									|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContractCode()) && !(oldSrmCaseHandleInfoDTO.getContractCode()).equals(srmCaseHandleInfoDTO.getContractCode()))){
								builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
								builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTRACT_ID));
								builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
								builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
										new String[]{oldSrmCaseHandleInfoDTO.getContractCode() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getContractCode(),
										srmCaseHandleInfoDTO.getContractCode() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getContractCode()}, null));
								builder.append(IAtomsConstants.MARK_SEMICOLON);
								builder.append(IAtomsConstants.MARK_WRAP);
							}
						}
						// 裝機類型
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())) {
							if(StringUtils.hasText(srmCaseHandleInfoDTO.getInstallTypeName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstallTypeName())){
								if((StringUtils.hasText(srmCaseHandleInfoDTO.getInstallTypeName()) && !(srmCaseHandleInfoDTO.getInstallTypeName()).equals(oldSrmCaseHandleInfoDTO.getInstallTypeName()))
										|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstallTypeName()) && !(oldSrmCaseHandleInfoDTO.getInstallTypeName()).equals(srmCaseHandleInfoDTO.getInstallTypeName()))){
									builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
									builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALL_TYPE));
									builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
									builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
											new String[]{oldSrmCaseHandleInfoDTO.getInstallTypeName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getInstallTypeName(),
											srmCaseHandleInfoDTO.getInstallTypeName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getInstallTypeName()}, null));
									builder.append(IAtomsConstants.MARK_SEMICOLON);
									builder.append(IAtomsConstants.MARK_WRAP);
								}
							}
						}
						
						// Task #2578 已派工狀態可修改維護部門、裝機已派工狀態可修改維護廠商
/*						// 維護廠商
						if(StringUtils.hasText(srmCaseHandleInfoDTO.getCompanyName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getCompanyName())){
							if((StringUtils.hasText(srmCaseHandleInfoDTO.getCompanyName()) && !(srmCaseHandleInfoDTO.getCompanyName()).equals(oldSrmCaseHandleInfoDTO.getCompanyName()))
									|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getCompanyName()) && !(oldSrmCaseHandleInfoDTO.getCompanyName()).equals(srmCaseHandleInfoDTO.getCompanyName()))){
								builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
								builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPANY_ID));
								builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
								builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
										new String[]{oldSrmCaseHandleInfoDTO.getCompanyName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getCompanyName(),
										srmCaseHandleInfoDTO.getCompanyName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getCompanyName()}, null));
								builder.append(IAtomsConstants.MARK_SEMICOLON);
								builder.append(IAtomsConstants.MARK_WRAP);
							}
						}*/
						// 不是待結案審查
						if(!IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
							// 刷卡機型
							if(StringUtils.hasText(srmCaseHandleInfoDTO.getEdcTypeName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getEdcTypeName())){
								if((StringUtils.hasText(srmCaseHandleInfoDTO.getEdcTypeName()) && !(srmCaseHandleInfoDTO.getEdcTypeName()).equals(oldSrmCaseHandleInfoDTO.getEdcTypeName())) 
										|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getEdcTypeName()) && !(oldSrmCaseHandleInfoDTO.getEdcTypeName()).equals(srmCaseHandleInfoDTO.getEdcTypeName()))){
									builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
									builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EDC_TYPE));
									builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
									builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
											new String[]{oldSrmCaseHandleInfoDTO.getEdcTypeName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getEdcTypeName(),
													srmCaseHandleInfoDTO.getEdcTypeName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getEdcTypeName()}, null));
									builder.append(IAtomsConstants.MARK_SEMICOLON);
									builder.append(IAtomsConstants.MARK_WRAP);
								}
							}
						}
					// 異動
					} else {
						if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())) {
							// 舊特店代號
							if(StringUtils.hasText(srmCaseHandleInfoDTO.getOldMerchantCode()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getOldMerchantCode())){
								if((StringUtils.hasText(srmCaseHandleInfoDTO.getOldMerchantCode()) && !(srmCaseHandleInfoDTO.getOldMerchantCode()).equals(oldSrmCaseHandleInfoDTO.getOldMerchantCode()))
										|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getOldMerchantCode()) && !(oldSrmCaseHandleInfoDTO.getOldMerchantCode()).equals(srmCaseHandleInfoDTO.getOldMerchantCode()))){
									builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
									builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_OLD_MERCHANT_CODE));
									builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
									builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
											new String[]{oldSrmCaseHandleInfoDTO.getOldMerchantCode() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getOldMerchantCode(),
											srmCaseHandleInfoDTO.getOldMerchantCode() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getOldMerchantCode()}, null));
									builder.append(IAtomsConstants.MARK_SEMICOLON);
									builder.append(IAtomsConstants.MARK_WRAP);
								}
							}
							// 不是待結案審查
							if(!IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
								// dtid
								if(StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getDtid())){
									if(StringUtils.hasText(oldDtid)){
										StringBuilder tempBuffer = new StringBuilder();
										tempBuffer.append(i18NUtil.getName(IAtomsMessageCode.CHANGE_DTID_MSG, new String[]{oldDtid, srmCaseHandleInfoDTO.getDtid()}, null));
										tempBuffer.append(IAtomsConstants.MARK_SEMICOLON);
										tempBuffer.append(IAtomsConstants.MARK_WRAP);
										tempBuffer.append(builder);
										builder = tempBuffer;
									}
								}
							}
						}
					}
					
				}
			}
			// 維護部門
			if(StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getDepartmentName())){
				if((StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentName()) && !(srmCaseHandleInfoDTO.getDepartmentName()).equals(oldSrmCaseHandleInfoDTO.getDepartmentName()))
						|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getDepartmentName()) && !(oldSrmCaseHandleInfoDTO.getDepartmentName()).equals(srmCaseHandleInfoDTO.getDepartmentName()))){
					builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
					builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID));
					builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
					builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
							new String[]{oldSrmCaseHandleInfoDTO.getDepartmentName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getDepartmentName(),
									srmCaseHandleInfoDTO.getDepartmentName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getDepartmentName()}, null));
					builder.append(IAtomsConstants.MARK_SEMICOLON);
					builder.append(IAtomsConstants.MARK_WRAP);
				}
			}
			// Task #2578 已派工狀態可修改維護部門、裝機已派工狀態可修改維護廠商
			// 維護廠商
			if(StringUtils.hasText(srmCaseHandleInfoDTO.getCompanyName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getCompanyName())){
				if((StringUtils.hasText(srmCaseHandleInfoDTO.getCompanyName()) && !(srmCaseHandleInfoDTO.getCompanyName()).equals(oldSrmCaseHandleInfoDTO.getCompanyName()))
						|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getCompanyName()) && !(oldSrmCaseHandleInfoDTO.getCompanyName()).equals(srmCaseHandleInfoDTO.getCompanyName()))){
					builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
					builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPANY_ID));
					builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
					builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
							new String[]{oldSrmCaseHandleInfoDTO.getCompanyName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getCompanyName(),
							srmCaseHandleInfoDTO.getCompanyName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getCompanyName()}, null));
					builder.append(IAtomsConstants.MARK_SEMICOLON);
					builder.append(IAtomsConstants.MARK_WRAP);
				}
			}
			// 倂幾+異動
			if((IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()) 
					|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()))){
				// 是否同裝機作業
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getSameInstalled()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getSameInstalled())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getSameInstalled()) && !(srmCaseHandleInfoDTO.getSameInstalled()).equals(oldSrmCaseHandleInfoDTO.getSameInstalled()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getSameInstalled()) && !(oldSrmCaseHandleInfoDTO.getSameInstalled()).equals(srmCaseHandleInfoDTO.getSameInstalled()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_SAME_INSTALLED));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getSameInstalled() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getSameInstalled()),
										srmCaseHandleInfoDTO.getSameInstalled() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getSameInstalled())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
			}
			//裝機+異動+其他
			if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()) 
					|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
					|| IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
					|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
				// 特店代號
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getMerMid()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getMerchantCode())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getMerMid()) && !(srmCaseHandleInfoDTO.getMerMid()).equals(oldSrmCaseHandleInfoDTO.getMerchantCode()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getMerchantCode()) && !(oldSrmCaseHandleInfoDTO.getMerchantCode()).equals(srmCaseHandleInfoDTO.getMerMid()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_CODE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getMerchantCode() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getMerchantCode(),
										srmCaseHandleInfoDTO.getMerMid() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getMerMid()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 表頭（同對外名稱）
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getHeaderName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getHeaderName())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getHeaderName()) && !(srmCaseHandleInfoDTO.getHeaderName()).equals(oldSrmCaseHandleInfoDTO.getHeaderName()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getHeaderName()) && !(oldSrmCaseHandleInfoDTO.getHeaderName()).equals(srmCaseHandleInfoDTO.getHeaderName()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_HEADER_ID));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getHeaderName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getHeaderName(),
								srmCaseHandleInfoDTO.getHeaderName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getHeaderName()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 軟體版本
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getSoftwareVersionName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getSoftwareVersionName())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getSoftwareVersionName()) && !(srmCaseHandleInfoDTO.getSoftwareVersionName()).equals(oldSrmCaseHandleInfoDTO.getSoftwareVersionName()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getSoftwareVersionName()) && !(oldSrmCaseHandleInfoDTO.getSoftwareVersionName()).equals(srmCaseHandleInfoDTO.getSoftwareVersionName()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_SOFTWARE_VERSION));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getSoftwareVersionName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getSoftwareVersionName(),
								srmCaseHandleInfoDTO.getSoftwareVersionName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getSoftwareVersionName()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 內建功能
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getBuiltInFeatureName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getBuiltInFeatureName())){
					String tempParamName = compareMultiName(srmCaseHandleInfoDTO.getBuiltInFeatureName(), oldSrmCaseHandleInfoDTO.getBuiltInFeatureName());
					if(StringUtils.hasText(tempParamName)){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_BUILT_IN_FEATURE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(tempParamName);
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 雙模組模式
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getMultiModuleName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getMultiModuleName())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getMultiModuleName()) && !(srmCaseHandleInfoDTO.getMultiModuleName()).equals(oldSrmCaseHandleInfoDTO.getMultiModuleName()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getMultiModuleName()) && !(oldSrmCaseHandleInfoDTO.getMultiModuleName()).equals(srmCaseHandleInfoDTO.getMultiModuleName()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MULTI_MODULE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getMultiModuleName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getMultiModuleName(),
										srmCaseHandleInfoDTO.getMultiModuleName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getMultiModuleName()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 不爲待結案審查
				if(!IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
					// 週邊設備1
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getPeripheralsName())){
						if((StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsName()) && !(srmCaseHandleInfoDTO.getPeripheralsName()).equals(oldSrmCaseHandleInfoDTO.getPeripheralsName()))
								|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getPeripheralsName()) && !(oldSrmCaseHandleInfoDTO.getPeripheralsName()).equals(srmCaseHandleInfoDTO.getPeripheralsName()))){
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
							builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS));
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
							builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
									new String[]{oldSrmCaseHandleInfoDTO.getPeripheralsName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getPeripheralsName(),
											srmCaseHandleInfoDTO.getPeripheralsName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getPeripheralsName()}, null));
							builder.append(IAtomsConstants.MARK_SEMICOLON);
							builder.append(IAtomsConstants.MARK_WRAP);
						}
					}
					// 週邊設備2
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals2Name()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getPeripherals2Name())){
						if((StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals2Name()) && !(srmCaseHandleInfoDTO.getPeripherals2Name()).equals(oldSrmCaseHandleInfoDTO.getPeripherals2Name()))
								|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getPeripherals2Name()) && !(oldSrmCaseHandleInfoDTO.getPeripherals2Name()).equals(srmCaseHandleInfoDTO.getPeripherals2Name()))){
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
							builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS2));
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
							builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
									new String[]{oldSrmCaseHandleInfoDTO.getPeripherals2Name() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getPeripherals2Name(),
									srmCaseHandleInfoDTO.getPeripherals2Name() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getPeripherals2Name()}, null));
							builder.append(IAtomsConstants.MARK_SEMICOLON);
							builder.append(IAtomsConstants.MARK_WRAP);
						}
					}
					// 週邊設備3
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals3Name()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getPeripherals3Name())){
						if((StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals3Name()) && !(srmCaseHandleInfoDTO.getPeripherals3Name()).equals(oldSrmCaseHandleInfoDTO.getPeripherals3Name()))
								|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getPeripherals3Name()) && !(oldSrmCaseHandleInfoDTO.getPeripherals3Name()).equals(srmCaseHandleInfoDTO.getPeripherals3Name()))){
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
							builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS3));
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
							builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
									new String[]{oldSrmCaseHandleInfoDTO.getPeripherals3Name() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getPeripherals3Name(),
											srmCaseHandleInfoDTO.getPeripherals3Name() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getPeripherals3Name()}, null));
							builder.append(IAtomsConstants.MARK_SEMICOLON);
							builder.append(IAtomsConstants.MARK_WRAP);
						}
					}
				}
				
				// 週邊設備功能1
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsFunctionName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getPeripheralsFunctionName())){
					String tempParamName = compareMultiName(srmCaseHandleInfoDTO.getPeripheralsFunctionName(), oldSrmCaseHandleInfoDTO.getPeripheralsFunctionName());
					if(StringUtils.hasText(tempParamName)){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(tempParamName);
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// ECR連線
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getEcrConnectionName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getEcrConnectionName())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getEcrConnectionName()) && !(srmCaseHandleInfoDTO.getEcrConnectionName()).equals(oldSrmCaseHandleInfoDTO.getEcrConnectionName()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getEcrConnectionName()) && !(oldSrmCaseHandleInfoDTO.getEcrConnectionName()).equals(srmCaseHandleInfoDTO.getEcrConnectionName()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ECR_CONNECTION));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getEcrConnectionName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getEcrConnectionName(),
								srmCaseHandleInfoDTO.getEcrConnectionName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getEcrConnectionName()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 週邊設備功能2
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsFunction2Name()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getPeripheralsFunction2Name())){
					String tempParamName = compareMultiName(srmCaseHandleInfoDTO.getPeripheralsFunction2Name(), oldSrmCaseHandleInfoDTO.getPeripheralsFunction2Name());
					if(StringUtils.hasText(tempParamName)){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION2));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(tempParamName);
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 連接方式
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getConnectionTypeName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getConnectionTypeName())){
					if (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getConnectionTypeName())) {
						connectionTypeName = oldSrmCaseHandleInfoDTO.getConnectionTypeName().replace(IAtomsConstants.MARK_CN_SEPARATOR, IAtomsConstants.MARK_SEPARATOR);
					}
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getConnectionTypeName()) && !(srmCaseHandleInfoDTO.getConnectionTypeName()).equals(connectionTypeName))
							|| (StringUtils.hasText(connectionTypeName) && !(connectionTypeName).equals(srmCaseHandleInfoDTO.getConnectionTypeName()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONNECTION_TYPE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getConnectionTypeName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getConnectionTypeName(),
								srmCaseHandleInfoDTO.getConnectionTypeName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getConnectionTypeName()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 週邊設備功能3
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsFunction3Name()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getPeripheralsFunction3Name())){
					String tempParamName = compareMultiName(srmCaseHandleInfoDTO.getPeripheralsFunction3Name(), oldSrmCaseHandleInfoDTO.getPeripheralsFunction3Name());
					if(StringUtils.hasText(tempParamName)){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION3));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(tempParamName);
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 本機IP
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getLocalhostIp()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getLocalhostIp())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getLocalhostIp()) && !(srmCaseHandleInfoDTO.getLocalhostIp()).equals(oldSrmCaseHandleInfoDTO.getLocalhostIp()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getLocalhostIp()) && !(oldSrmCaseHandleInfoDTO.getLocalhostIp()).equals(srmCaseHandleInfoDTO.getLocalhostIp()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_LOCALHOST_IP));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getLocalhostIp() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getLocalhostIp(),
								srmCaseHandleInfoDTO.getLocalhostIp() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getLocalhostIp()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 寬頻連線
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getNetVendorName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getNetVendorName())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getNetVendorName()) && !(srmCaseHandleInfoDTO.getNetVendorName()).equals(oldSrmCaseHandleInfoDTO.getNetVendorName()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getNetVendorName()) && !(oldSrmCaseHandleInfoDTO.getNetVendorName()).equals(srmCaseHandleInfoDTO.getNetVendorName()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_NET_VENDOR_ID));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getNetVendorName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getNetVendorName(),
								srmCaseHandleInfoDTO.getNetVendorName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getNetVendorName()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// Gateway
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getGateway()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getGateway())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getGateway()) && !(srmCaseHandleInfoDTO.getGateway()).equals(oldSrmCaseHandleInfoDTO.getGateway()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getGateway()) && !(oldSrmCaseHandleInfoDTO.getGateway()).equals(srmCaseHandleInfoDTO.getGateway()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_GATEWAY));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getGateway() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getGateway(),
								srmCaseHandleInfoDTO.getGateway() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getGateway()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// Netmask
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getNetmask()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getNetmask())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getNetmask()) && !(srmCaseHandleInfoDTO.getNetmask()).equals(oldSrmCaseHandleInfoDTO.getNetmask()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getNetmask()) && !(oldSrmCaseHandleInfoDTO.getNetmask()).equals(srmCaseHandleInfoDTO.getNetmask()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_NETMASK));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getNetmask() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getNetmask(),
								srmCaseHandleInfoDTO.getNetmask() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getNetmask()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 電子發票載具
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getElectronicInvoice()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getElectronicInvoice())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getElectronicInvoice()) && !(srmCaseHandleInfoDTO.getElectronicInvoice()).equals(oldSrmCaseHandleInfoDTO.getElectronicInvoice()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getElectronicInvoice()) && !(oldSrmCaseHandleInfoDTO.getElectronicInvoice()).equals(srmCaseHandleInfoDTO.getElectronicInvoice()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ELECTRONIC_INVOICE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{(oldSrmCaseHandleInfoDTO.getElectronicInvoice() == null || oldSrmCaseHandleInfoDTO.getElectronicInvoice() == IAtomsConstants.MARK_EMPTY_STRING) ? 
										IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getElectronicInvoice()),
								(srmCaseHandleInfoDTO.getElectronicInvoice() == null || srmCaseHandleInfoDTO.getElectronicInvoice() == IAtomsConstants.MARK_EMPTY_STRING) ? 
										IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getElectronicInvoice())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 銀聯閃付
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getCupQuickPass()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getCupQuickPass())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getCupQuickPass()) && !(srmCaseHandleInfoDTO.getCupQuickPass()).equals(oldSrmCaseHandleInfoDTO.getCupQuickPass()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getCupQuickPass()) && !(oldSrmCaseHandleInfoDTO.getCupQuickPass()).equals(srmCaseHandleInfoDTO.getCupQuickPass()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_CUP_QUICK_PASS));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{(oldSrmCaseHandleInfoDTO.getCupQuickPass() == null || oldSrmCaseHandleInfoDTO.getCupQuickPass() == IAtomsConstants.MARK_EMPTY_STRING) ? 
										IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getCupQuickPass()),
								(srmCaseHandleInfoDTO.getCupQuickPass() == null || srmCaseHandleInfoDTO.getCupQuickPass() == IAtomsConstants.MARK_EMPTY_STRING) ? 
										IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getCupQuickPass())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// LOGO
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getLogoStyle()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getLogoStyle())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getLogoStyle()) && !(srmCaseHandleInfoDTO.getLogoStyle()).equals(oldSrmCaseHandleInfoDTO.getLogoStyle()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getLogoStyle()) && !(oldSrmCaseHandleInfoDTO.getLogoStyle()).equals(srmCaseHandleInfoDTO.getLogoStyle()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_LOGO));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{(oldSrmCaseHandleInfoDTO.getLogoStyle() == null || oldSrmCaseHandleInfoDTO.getLogoStyle() == IAtomsConstants.MARK_EMPTY_STRING) ? 
										IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getLogoStyle()),
								(srmCaseHandleInfoDTO.getLogoStyle() == null || srmCaseHandleInfoDTO.getLogoStyle() == IAtomsConstants.MARK_EMPTY_STRING) ? 
										IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getLogoStyle())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 是否開啟加密
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getIsOpenEncrypt()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsOpenEncrypt())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getIsOpenEncrypt()) && !(srmCaseHandleInfoDTO.getIsOpenEncrypt()).equals(oldSrmCaseHandleInfoDTO.getIsOpenEncrypt()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsOpenEncrypt()) && !(oldSrmCaseHandleInfoDTO.getIsOpenEncrypt()).equals(srmCaseHandleInfoDTO.getIsOpenEncrypt()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_OPEN_ENCRYPT));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{(oldSrmCaseHandleInfoDTO.getIsOpenEncrypt() == null || oldSrmCaseHandleInfoDTO.getIsOpenEncrypt() == IAtomsConstants.MARK_EMPTY_STRING) ? 
										IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getIsOpenEncrypt()),
								(srmCaseHandleInfoDTO.getIsOpenEncrypt() == null || srmCaseHandleInfoDTO.getIsOpenEncrypt() == IAtomsConstants.MARK_EMPTY_STRING) ? 
										IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getIsOpenEncrypt())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 電子化繳費平台
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getElectronicPayPlatform()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getElectronicPayPlatform())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getElectronicPayPlatform()) && !(srmCaseHandleInfoDTO.getElectronicPayPlatform()).equals(oldSrmCaseHandleInfoDTO.getElectronicPayPlatform()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getElectronicPayPlatform()) && !(oldSrmCaseHandleInfoDTO.getElectronicPayPlatform()).equals(srmCaseHandleInfoDTO.getElectronicPayPlatform()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ELECTRONIC_PAY_PLATFORM));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{(oldSrmCaseHandleInfoDTO.getElectronicPayPlatform() == null || oldSrmCaseHandleInfoDTO.getElectronicPayPlatform() == IAtomsConstants.MARK_EMPTY_STRING) ? 
										IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getElectronicPayPlatform()),
								(srmCaseHandleInfoDTO.getElectronicPayPlatform() == null || srmCaseHandleInfoDTO.getElectronicPayPlatform() == IAtomsConstants.MARK_EMPTY_STRING) ? 
										IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getElectronicPayPlatform())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
			}
			// 裝機+異動
			if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()) 
					|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
				// 專案
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getIsProject()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsProject())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getIsProject()) && !(srmCaseHandleInfoDTO.getIsProject()).equals(oldSrmCaseHandleInfoDTO.getIsProject())) 
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsProject()) && !(oldSrmCaseHandleInfoDTO.getIsProject()).equals(srmCaseHandleInfoDTO.getIsProject()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_IS_PROJECT));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getIsProject() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getIsProject()), srmCaseHandleInfoDTO.getIsProject() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getIsProject())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是否同特店地址
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getIsBussinessAddress()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsBussinessAddress())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getIsBussinessAddress()) && !(srmCaseHandleInfoDTO.getIsBussinessAddress()).equals(oldSrmCaseHandleInfoDTO.getIsBussinessAddress()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsBussinessAddress()) && !(oldSrmCaseHandleInfoDTO.getIsBussinessAddress()).equals(srmCaseHandleInfoDTO.getIsBussinessAddress()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_HANDLE_IS_BUSSINESS_ADDRESS));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getIsBussinessAddress() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getIsBussinessAddress()),
								srmCaseHandleInfoDTO.getIsBussinessAddress() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getIsBussinessAddress())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢用特店地址－市縣
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledAdressLocation()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledAdressLocation())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledAdressLocation()) && !(srmCaseHandleInfoDTO.getInstalledAdressLocation()).equals(oldSrmCaseHandleInfoDTO.getInstalledAdressLocation()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledAdressLocation()) && !(oldSrmCaseHandleInfoDTO.getInstalledAdressLocation()).equals(srmCaseHandleInfoDTO.getInstalledAdressLocation()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_LOCATION));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getInstalledAdressLocationName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getInstalledAdressLocationName(),
								srmCaseHandleInfoDTO.getInstalledAdressLocationName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getInstalledAdressLocationName()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢用特店地址－郵遞區號
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledPostCode()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledPostCode())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledPostCode()) && !(srmCaseHandleInfoDTO.getInstalledPostCode()).equals(oldSrmCaseHandleInfoDTO.getInstalledPostCode()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledPostCode()) && !(oldSrmCaseHandleInfoDTO.getInstalledPostCode()).equals(srmCaseHandleInfoDTO.getInstalledPostCode()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_POST_CODE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{!StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledPostCode()) ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getInstalledPostCodeName() == null ? IAtomsConstants.MARK_EMPTY_STRING :oldSrmCaseHandleInfoDTO.getInstalledPostCodeName(),
								!StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledPostCode()) ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getInstalledPostCodeName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getInstalledPostCodeName()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢用特店地址
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledAdress()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledAdress())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledAdress()) && !(srmCaseHandleInfoDTO.getInstalledAdress()).equals(oldSrmCaseHandleInfoDTO.getInstalledAdress()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledAdress()) && !(oldSrmCaseHandleInfoDTO.getInstalledAdress()).equals(srmCaseHandleInfoDTO.getInstalledAdress()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_ADRESS));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getInstalledAdress() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getInstalledAdress(),
								srmCaseHandleInfoDTO.getInstalledAdress() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getInstalledAdress()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是否同特店聯絡人
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getIsBussinessContact()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsBussinessContact())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getIsBussinessContact()) && !(srmCaseHandleInfoDTO.getIsBussinessContact()).equals(oldSrmCaseHandleInfoDTO.getIsBussinessContact()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsBussinessContact()) && !(oldSrmCaseHandleInfoDTO.getIsBussinessContact()).equals(srmCaseHandleInfoDTO.getIsBussinessContact()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_BUSSINESS_CONTACT));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getIsBussinessContact() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getIsBussinessContact()),
								srmCaseHandleInfoDTO.getIsBussinessContact() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getIsBussinessContact())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢用聯絡人
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledContact()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledContact())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledContact()) && !(srmCaseHandleInfoDTO.getInstalledContact()).equals(oldSrmCaseHandleInfoDTO.getInstalledContact()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledContact()) && !(oldSrmCaseHandleInfoDTO.getInstalledContact()).equals(srmCaseHandleInfoDTO.getInstalledContact()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getInstalledContact() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getInstalledContact(),
								srmCaseHandleInfoDTO.getInstalledContact() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getInstalledContact()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是否同特店聯絡人電話
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getIsBussinessContactPhone()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsBussinessContactPhone())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getIsBussinessContactPhone()) && !(srmCaseHandleInfoDTO.getIsBussinessContactPhone()).equals(oldSrmCaseHandleInfoDTO.getIsBussinessContactPhone()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsBussinessContactPhone()) && !(oldSrmCaseHandleInfoDTO.getIsBussinessContactPhone()).equals(srmCaseHandleInfoDTO.getIsBussinessContactPhone()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_BUSSINESS_CONTACT_PHONE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getIsBussinessContactPhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getIsBussinessContactPhone()),
								srmCaseHandleInfoDTO.getIsBussinessContactPhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getIsBussinessContactPhone())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢用聯絡人電話
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledContactPhone()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledContactPhone())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledContactPhone()) && !(srmCaseHandleInfoDTO.getInstalledContactPhone()).equals(oldSrmCaseHandleInfoDTO.getInstalledContactPhone()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledContactPhone()) && !(oldSrmCaseHandleInfoDTO.getInstalledContactPhone()).equals(srmCaseHandleInfoDTO.getInstalledContactPhone()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_PHONE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getInstalledContactPhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getInstalledContactPhone(),
								srmCaseHandleInfoDTO.getInstalledContactPhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getInstalledContactPhone()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是否同特店聯絡人手機
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getIsBussinessContactMobilePhone()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsBussinessContactMobilePhone())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getIsBussinessContactMobilePhone()) && !(srmCaseHandleInfoDTO.getIsBussinessContactMobilePhone()).equals(oldSrmCaseHandleInfoDTO.getIsBussinessContactMobilePhone()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsBussinessContactMobilePhone()) && !(oldSrmCaseHandleInfoDTO.getIsBussinessContactMobilePhone()).equals(srmCaseHandleInfoDTO.getIsBussinessContactMobilePhone()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_BUSSINESS_CONTACT_MOBILE_PHONE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getIsBussinessContactMobilePhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getIsBussinessContactMobilePhone()),
								srmCaseHandleInfoDTO.getIsBussinessContactMobilePhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getIsBussinessContactMobilePhone())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是特店聯絡人手機
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledContactMobilePhone()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledContactMobilePhone())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledContactMobilePhone()) && !(srmCaseHandleInfoDTO.getInstalledContactMobilePhone()).equals(oldSrmCaseHandleInfoDTO.getInstalledContactMobilePhone()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledContactMobilePhone()) && !(oldSrmCaseHandleInfoDTO.getInstalledContactMobilePhone()).equals(srmCaseHandleInfoDTO.getInstalledContactMobilePhone()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_MOBILE_PHONE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getInstalledContactMobilePhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getInstalledContactMobilePhone(),
								srmCaseHandleInfoDTO.getInstalledContactMobilePhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getInstalledContactMobilePhone()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是否同特店聯絡人EMAIL
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getIsBussinessContactEmail()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsBussinessContactEmail())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getIsBussinessContactEmail()) && !(srmCaseHandleInfoDTO.getIsBussinessContactEmail()).equals(oldSrmCaseHandleInfoDTO.getIsBussinessContactEmail()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getIsBussinessContactEmail()) && !(oldSrmCaseHandleInfoDTO.getIsBussinessContactEmail()).equals(srmCaseHandleInfoDTO.getIsBussinessContactEmail()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_BUSSINESS_CONTACT_EMAIL));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getIsBussinessContactEmail() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getIsBussinessContactEmail()),
								srmCaseHandleInfoDTO.getIsBussinessContactEmail() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getIsBussinessContactEmail())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是特店聯絡人EMAIL
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledContactEmail()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledContactEmail())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledContactEmail()) && !(srmCaseHandleInfoDTO.getInstalledContactEmail()).equals(oldSrmCaseHandleInfoDTO.getInstalledContactEmail()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getInstalledContactEmail()) && !(oldSrmCaseHandleInfoDTO.getInstalledContactEmail()).equals(srmCaseHandleInfoDTO.getInstalledContactEmail()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_EMAIL));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getInstalledContactEmail() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getInstalledContactEmail(),
								srmCaseHandleInfoDTO.getInstalledContactEmail() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getInstalledContactEmail()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
			// 其他
			} else {
				//核檢是否同特店地址
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getContactIsBussinessAddress()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactIsBussinessAddress())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getContactIsBussinessAddress()) && !(srmCaseHandleInfoDTO.getContactIsBussinessAddress()).equals(oldSrmCaseHandleInfoDTO.getContactIsBussinessAddress()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactIsBussinessAddress()) && !(oldSrmCaseHandleInfoDTO.getContactIsBussinessAddress()).equals(srmCaseHandleInfoDTO.getContactIsBussinessAddress()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_HANDLE_CONTACT_IS_BUSSINESS_ADDRESS));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getContactIsBussinessAddress() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getContactIsBussinessAddress()),
								srmCaseHandleInfoDTO.getContactIsBussinessAddress() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getContactIsBussinessAddress())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢用特店地址－市縣
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getContactAddressLocation()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactAddressLocation())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getContactAddressLocation()) && !(srmCaseHandleInfoDTO.getContactAddressLocation()).equals(oldSrmCaseHandleInfoDTO.getContactAddressLocation()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactAddressLocation()) && !(oldSrmCaseHandleInfoDTO.getContactAddressLocation()).equals(srmCaseHandleInfoDTO.getContactAddressLocation()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_ADDRESS_LOCATION));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getContactAddressLocationName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getContactAddressLocationName(),
								srmCaseHandleInfoDTO.getContactAddressLocationName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getContactAddressLocationName()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢用特店地址－郵遞區號
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getContactPostCode()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactPostCode())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getContactPostCode()) && !(srmCaseHandleInfoDTO.getContactPostCode()).equals(oldSrmCaseHandleInfoDTO.getContactPostCode()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactPostCode()) && !(oldSrmCaseHandleInfoDTO.getContactPostCode()).equals(srmCaseHandleInfoDTO.getContactPostCode()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_POST_CODE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{!StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactPostCode()) ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getContactPostCodeName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getContactPostCodeName(),
								!StringUtils.hasText(srmCaseHandleInfoDTO.getContactPostCode()) ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getContactPostCodeName() == null ? IAtomsConstants.MARK_EMPTY_STRING :srmCaseHandleInfoDTO.getContactPostCodeName()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢用特店地址
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getContactAddress()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactAddress())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getContactAddress()) && !(srmCaseHandleInfoDTO.getContactAddress()).equals(oldSrmCaseHandleInfoDTO.getContactAddress()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactAddress()) && !(oldSrmCaseHandleInfoDTO.getContactAddress()).equals(srmCaseHandleInfoDTO.getContactAddress()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_ADDRESS));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getContactAddress() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getContactAddress(),
								srmCaseHandleInfoDTO.getContactAddress() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getContactAddress()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是否同特店聯絡人
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getContactIsBussinessContact()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactIsBussinessContact())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getContactIsBussinessContact()) && !(srmCaseHandleInfoDTO.getContactIsBussinessContact()).equals(oldSrmCaseHandleInfoDTO.getContactIsBussinessContact()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactIsBussinessContact()) && !(oldSrmCaseHandleInfoDTO.getContactIsBussinessContact()).equals(srmCaseHandleInfoDTO.getContactIsBussinessContact()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_IS_BUSSINESS_CONTACT));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getContactIsBussinessContact() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getContactIsBussinessContact()),
								srmCaseHandleInfoDTO.getContactIsBussinessContact() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getContactIsBussinessContact())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢用聯絡人
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getContactUser()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactUser())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getContactUser()) && !(srmCaseHandleInfoDTO.getContactUser()).equals(oldSrmCaseHandleInfoDTO.getContactUser()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactUser()) && !(oldSrmCaseHandleInfoDTO.getContactUser()).equals(srmCaseHandleInfoDTO.getContactUser()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_USER));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getContactUser() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getContactUser(),
								srmCaseHandleInfoDTO.getContactUser() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getContactUser()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是否同特店聯絡人電話
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getContactIsBussinessContactPhone()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactPhone())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getContactIsBussinessContactPhone()) && !(srmCaseHandleInfoDTO.getContactIsBussinessContactPhone()).equals(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactPhone()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactPhone()) && !(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactPhone()).equals(srmCaseHandleInfoDTO.getContactIsBussinessContactPhone()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_IS_BUSSINESS_CONTACT_PHONE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getContactIsBussinessContactPhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactPhone()),
								srmCaseHandleInfoDTO.getContactIsBussinessContactPhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getContactIsBussinessContactPhone())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢用聯絡人電話
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getContactUserPhone()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactUserPhone())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getContactUserPhone()) && !(srmCaseHandleInfoDTO.getContactUserPhone()).equals(oldSrmCaseHandleInfoDTO.getContactUserPhone()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactUserPhone()) && !(oldSrmCaseHandleInfoDTO.getContactUserPhone()).equals(srmCaseHandleInfoDTO.getContactUserPhone()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_USER_PHONE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getContactUserPhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getContactUserPhone(),
								srmCaseHandleInfoDTO.getContactUserPhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getContactUserPhone()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是否同特店聯絡人手機
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone()) && !(srmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone()).equals(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone()) && !(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone()).equals(srmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_IS_BUSSINESS_CONTACT_MOBILE_PHONE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone()),
								srmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getContactIsBussinessContactMobilePhone())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是特店聯絡人手機
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getContactMobilePhone()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactMobilePhone())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getContactMobilePhone()) && !(srmCaseHandleInfoDTO.getContactMobilePhone()).equals(oldSrmCaseHandleInfoDTO.getContactMobilePhone()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactMobilePhone()) && !(oldSrmCaseHandleInfoDTO.getContactMobilePhone()).equals(srmCaseHandleInfoDTO.getContactMobilePhone()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_MOBILE_PHONE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getContactMobilePhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getContactMobilePhone(),
								srmCaseHandleInfoDTO.getContactMobilePhone() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getContactMobilePhone()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是否同特店聯絡人EMAIL
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getContactIsBussinessContactEmail()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactEmail())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getContactIsBussinessContactEmail()) && !(srmCaseHandleInfoDTO.getContactIsBussinessContactEmail()).equals(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactEmail()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactEmail()) && !(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactEmail()).equals(srmCaseHandleInfoDTO.getContactIsBussinessContactEmail()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_IS_BUSSINESS_CONTACT_EMAIL));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getContactIsBussinessContactEmail() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(oldSrmCaseHandleInfoDTO.getContactIsBussinessContactEmail()),
								srmCaseHandleInfoDTO.getContactIsBussinessContactEmail() == null ? IAtomsConstants.MARK_EMPTY_STRING : i18NUtil.getName(srmCaseHandleInfoDTO.getContactIsBussinessContactEmail())}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				//核檢是特店聯絡人EMAIL
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getContactUserEmail()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactUserEmail())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getContactUserEmail()) && !(srmCaseHandleInfoDTO.getContactUserEmail()).equals(oldSrmCaseHandleInfoDTO.getContactUserEmail()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getContactUserEmail()) && !(oldSrmCaseHandleInfoDTO.getContactUserEmail()).equals(srmCaseHandleInfoDTO.getContactUserEmail()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_USER_EMAIL));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getContactUserEmail() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getContactUserEmail(),
								srmCaseHandleInfoDTO.getContactUserEmail() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getContactUserEmail()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
				// 不爲待結案審查
				if(!IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
					// dtid
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getDtid())){
						if(StringUtils.hasText(oldDtid)){
							StringBuilder tempBuffer = new StringBuilder();
							tempBuffer.append(i18NUtil.getName(IAtomsMessageCode.CHANGE_DTID_MSG, new String[]{oldDtid, srmCaseHandleInfoDTO.getDtid()}, null));
							tempBuffer.append(IAtomsConstants.MARK_SEMICOLON);
							tempBuffer.append(IAtomsConstants.MARK_WRAP);
							tempBuffer.append(builder);
							builder = tempBuffer;
						}
					}
				}
				// 併機
				if(IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
					// 軟體版本
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getSoftwareVersionName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getSoftwareVersionName())){
						if((StringUtils.hasText(srmCaseHandleInfoDTO.getSoftwareVersionName()) && !(srmCaseHandleInfoDTO.getSoftwareVersionName()).equals(oldSrmCaseHandleInfoDTO.getSoftwareVersionName()))
								|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getSoftwareVersionName()) && !(oldSrmCaseHandleInfoDTO.getSoftwareVersionName()).equals(srmCaseHandleInfoDTO.getSoftwareVersionName()))){
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
							builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_SOFTWARE_VERSION));
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
							builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
									new String[]{oldSrmCaseHandleInfoDTO.getSoftwareVersionName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getSoftwareVersionName(),
									srmCaseHandleInfoDTO.getSoftwareVersionName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getSoftwareVersionName()}, null));
							builder.append(IAtomsConstants.MARK_SEMICOLON);
							builder.append(IAtomsConstants.MARK_WRAP);
						}
					}
				// 拆機
				} else if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
					// 拆機類型
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getUninstallTypeName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getUninstallTypeName())){
						if((StringUtils.hasText(srmCaseHandleInfoDTO.getUninstallTypeName()) && !(srmCaseHandleInfoDTO.getUninstallTypeName()).equals(oldSrmCaseHandleInfoDTO.getUninstallTypeName()))
								|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getUninstallTypeName()) && !(oldSrmCaseHandleInfoDTO.getUninstallTypeName()).equals(srmCaseHandleInfoDTO.getUninstallTypeName()))){
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
							builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_UNINSTALL_TYPE));
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
							builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
									new String[]{oldSrmCaseHandleInfoDTO.getUninstallTypeName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getUninstallTypeName(),
									srmCaseHandleInfoDTO.getUninstallTypeName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getUninstallTypeName()}, null));
							builder.append(IAtomsConstants.MARK_SEMICOLON);
							builder.append(IAtomsConstants.MARK_WRAP);
						}
					}
				// 專案
				} else if(IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
					// 專案代碼
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getProjectCode()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getProjectCode())){
						if((StringUtils.hasText(srmCaseHandleInfoDTO.getProjectCode()) && !(srmCaseHandleInfoDTO.getProjectCode()).equals(oldSrmCaseHandleInfoDTO.getProjectCode()))
								|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getProjectCode()) && !(oldSrmCaseHandleInfoDTO.getProjectCode()).equals(oldSrmCaseHandleInfoDTO.getProjectCode()))){
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
							builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PROJECT_CODE));
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
							builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
									new String[]{oldSrmCaseHandleInfoDTO.getProjectCode() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getProjectCode(),
									srmCaseHandleInfoDTO.getProjectCode() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getProjectCode()}, null));
							builder.append(IAtomsConstants.MARK_SEMICOLON);
							builder.append(IAtomsConstants.MARK_WRAP);
						}
					}
					// 專案名稱
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getProjectName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getProjectName())){
						if((StringUtils.hasText(srmCaseHandleInfoDTO.getProjectName()) && !(srmCaseHandleInfoDTO.getProjectName()).equals(oldSrmCaseHandleInfoDTO.getProjectName()))
								|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getProjectName()) && !(oldSrmCaseHandleInfoDTO.getProjectName()).equals(srmCaseHandleInfoDTO.getProjectName()))){
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
							builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PROJECT_NAME));
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
							builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
									new String[]{oldSrmCaseHandleInfoDTO.getProjectName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getProjectName(),
									srmCaseHandleInfoDTO.getProjectName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getProjectName()}, null));
							builder.append(IAtomsConstants.MARK_SEMICOLON);
							builder.append(IAtomsConstants.MARK_WRAP);
						}
					}
					
				// 報修
				} else if(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
					// 報修原因
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getRepairReasonName()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getRepairReasonName())){
						if((StringUtils.hasText(srmCaseHandleInfoDTO.getRepairReasonName()) && !(srmCaseHandleInfoDTO.getRepairReasonName()).equals(oldSrmCaseHandleInfoDTO.getRepairReasonName()))
								|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getRepairReasonName()) && !(oldSrmCaseHandleInfoDTO.getRepairReasonName()).equals(srmCaseHandleInfoDTO.getRepairReasonName()))){
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
							builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REPAIR_REASON));
							builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
							builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
									new String[]{oldSrmCaseHandleInfoDTO.getRepairReasonName() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getRepairReasonName(),
									srmCaseHandleInfoDTO.getRepairReasonName() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getRepairReasonName()}, null));
							builder.append(IAtomsConstants.MARK_SEMICOLON);
							builder.append(IAtomsConstants.MARK_WRAP);
						}
					}
				}
			}
			// 裝機/異動/併機
			if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()) 
					|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
					|| IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
					|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
				// tms參數說明
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getTmsParamDesc()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getTmsParamDesc())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getTmsParamDesc()) && !(srmCaseHandleInfoDTO.getTmsParamDesc()).equals(oldSrmCaseHandleInfoDTO.getTmsParamDesc()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getTmsParamDesc()) && !(oldSrmCaseHandleInfoDTO.getTmsParamDesc()).equals(srmCaseHandleInfoDTO.getTmsParamDesc()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_TMS_PARAM_DESC));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getTmsParamDesc() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getTmsParamDesc(),
								srmCaseHandleInfoDTO.getTmsParamDesc() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getTmsParamDesc()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
			}
			// 裝機/異動/併機
			if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()) 
					|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
					|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
					|| IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
				// tms參數說明
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getReceiptType()) || StringUtils.hasText(oldSrmCaseHandleInfoDTO.getReceiptType())){
					if((StringUtils.hasText(srmCaseHandleInfoDTO.getReceiptType()) && !(srmCaseHandleInfoDTO.getReceiptType()).equals(oldSrmCaseHandleInfoDTO.getReceiptType()))
							|| (StringUtils.hasText(oldSrmCaseHandleInfoDTO.getReceiptType()) && !(oldSrmCaseHandleInfoDTO.getReceiptType()).equals(srmCaseHandleInfoDTO.getReceiptType()))){
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
						builder.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_RECEIPT_TYPE));
						builder.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
						builder.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
								new String[]{oldSrmCaseHandleInfoDTO.getReceiptType() == null ? IAtomsConstants.MARK_EMPTY_STRING : oldSrmCaseHandleInfoDTO.getReceiptType(),
								srmCaseHandleInfoDTO.getReceiptType() == null ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getReceiptType()}, null));
						builder.append(IAtomsConstants.MARK_SEMICOLON);
						builder.append(IAtomsConstants.MARK_WRAP);
					}
				}
			}
			// 得到異動說明
			if(StringUtils.hasText(builder.toString())){
				result = builder.toString();
			}
		}
		return result;
	}
	/**
	 * Purpose:比較多選下拉框
	 * @author CrissZhang
	 * @param currentParam ： 當前選擇參數
	 * @param oldParam ：之前選擇參數
	 * @return String : 返回字符串
	 */
	private String compareMultiName(String currentParam, String oldParam){
		String result = null;
		// 當前名稱
		String currentParamName = null;
		// 之前名稱
		String oldParamName = null;
		// 當前值分割得到的數組
		String[] currentArray = null;
		// 之前值分割得到的數組
		String[] oldArray = null;
		if(StringUtils.hasText(currentParam) && StringUtils.hasText(oldParam)){
			currentArray = currentParam.split(IAtomsConstants.MARK_SEPARATOR);
			oldArray = oldParam.split(IAtomsConstants.MARK_SEPARATOR);
			// 兩個資料不相等的標志位
			boolean falg = false;
			// 長度相等比較內容
			if(currentArray.length == oldArray.length){
				for(String temp : currentArray){
					if(oldParam.contains(temp)){
					} else {
						falg = true;
						break;
					}
				}
				if(falg){
					currentParamName = currentParam;
					oldParamName = oldParam;
				}
			// 長度不等直接輸出
			} else {
				currentParamName = currentParam;
				oldParamName = oldParam;
			}
		// 某個值沒有直接輸出
		} else {
			currentParamName = currentParam;
			oldParamName = oldParam;
		}
		// 當前名稱與之前名稱有值
		if(StringUtils.hasText(currentParamName) || StringUtils.hasText(oldParamName)){
			result = i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER,
					new String[]{oldParamName == null ? IAtomsConstants.MARK_EMPTY_STRING : oldParamName,
					currentParamName == null ? IAtomsConstants.MARK_EMPTY_STRING : currentParamName}, null);
		}
		return result;
	}
	/**
	 * Purpose: 得到複製案件所用的所有dtid
	 * @author CrissZhang
	 * @param customerId ： 客戶編號
	 * @param edcType ： 刷卡機型
	 * @param caseNumber ： 複製案件筆數
	 * @return Map<Integer, String> ： 返回一個Map集合
	 */
	private Map<Integer, String> getDtidForCopy(String customerId, String edcType, String caseNumber){
		// 拿到該客戶該機型下所有dtid
		List<PvmDtidDefDTO> pvmDtidDefDTOs = this.dtidDefDAO.listBy(customerId, edcType, null, null, null, null, 0, 0, false);
		Transformer transformer = new SimpleDtoDmoTransformer();
		// 存放複製筆數與dtid的集合
		Map<Integer, String> map = new HashMap<Integer, String>();
		try{
			if(!CollectionUtils.isEmpty(pvmDtidDefDTOs)){
				if(!CollectionUtils.isEmpty(pvmDtidDefDTOs)){
					// 複製案件筆數
					int caseNum = 0;
					if(StringUtils.hasText(caseNumber)){
//						caseNum = Integer.parseInt(caseNumber);
						
						// Task #2653 複製功能，要包含建案的那一筆
						caseNum = Integer.parseInt(caseNumber) - 1;
					}
					// dtid號碼DTO對象
					PvmDtidDefDTO tempPvmDtidDefDTO = null;
					// dtid號碼DMO對象
					PvmDtidDef pvmDtidDef = null;
					// dtid起訖值之差
					int subNumber = 0;
					// 計數
					int count = 0;
					// 臨時使用的dtid
					int tempDtid = 0;
					// 起始標記
					boolean isStart = false;
					// 起始標記
					int startNum = 0;
					// 是否有當前dtid號碼
					boolean hasCurrentNum = false;
					for(int i=0; i < pvmDtidDefDTOs.size(); i++){
						if(StringUtils.hasText(pvmDtidDefDTOs.get(i).getCurrentNumber())){
							hasCurrentNum = true;
							if(Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) > Integer.parseInt(pvmDtidDefDTOs.get(i).getCurrentNumber())){
								startNum = i;
								// 該號段可以作爲起始
								isStart = true;
								break;
							} else if(Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) == Integer.parseInt(pvmDtidDefDTOs.get(i).getCurrentNumber())){
								startNum = i;
							}
						}
					}
					// 集合均無當前dtid號碼，認爲所有號段均未啓用
					if(!hasCurrentNum){
						for(int i=0; i < pvmDtidDefDTOs.size(); i++){
							// dtid起訖值之差
							subNumber = Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) - Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidStart()) + 1;
							// 將開始的dtid作為臨時的dtid值
							tempDtid = Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidStart());
							for(int j=0; j < subNumber; j++){
							//	map.put(count, tempDtid);
								map.put(count, String.format(IAtomsConstants.PARAM_SUPPLEMENT_ZERO_FOR_NUMBER_EIGHT, tempDtid));
								if(map.size() == (caseNum + 1)){
									// 因為dtid集合設置了按起始的dtid進行升序排序，所以第一個元素就是最小的起始dtid值
									tempPvmDtidDefDTO = pvmDtidDefDTOs.get(i);
									// 設置當前dtid號碼
								//	tempPvmDtidDefDTO.setCurrentNumber(String.valueOf(tempDtid));
									tempPvmDtidDefDTO.setCurrentNumber(String.format(IAtomsConstants.PARAM_SUPPLEMENT_ZERO_FOR_NUMBER_EIGHT, tempDtid));
									pvmDtidDef = (PvmDtidDef)transformer.transform(tempPvmDtidDefDTO, new PvmDtidDef());
									// 更新DTID號碼管理該客戶、該設備、該DTID號段的目前號碼為當前DTID
									this.dtidDefDAO.update(pvmDtidDef);
									break;
								}
								// 更新該號段最大值
								if(j == (subNumber - 1)){
									// 因為dtid集合設置了按起始的dtid進行升序排序，所以第一個元素就是最小的起始dtid值
									tempPvmDtidDefDTO = pvmDtidDefDTOs.get(i);
									// 設置當前dtid號碼
									tempPvmDtidDefDTO.setCurrentNumber(tempPvmDtidDefDTO.getDtidEnd());
									pvmDtidDef = (PvmDtidDef)transformer.transform(tempPvmDtidDefDTO, new PvmDtidDef());
									// 更新DTID號碼管理該客戶、該設備、該DTID號段的目前號碼為當前DTID
									this.dtidDefDAO.update(pvmDtidDef);
								}
								count ++;
								tempDtid ++;
							}
							// 截至條件
							if(map.size() == (caseNum + 1)){
								break;
							}
						}
					} else {
						for(int i = startNum; i < pvmDtidDefDTOs.size(); i++){
							if(!isStart){
								isStart = true;
								// 從下一號段作爲起始
								continue;
							}
							// dtid起訖值之差
							if(i == startNum){
								// 可用字段爲 截止號段-當前號段
								subNumber = Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) - Integer.parseInt(pvmDtidDefDTOs.get(i).getCurrentNumber());
								tempDtid = Integer.parseInt(pvmDtidDefDTOs.get(i).getCurrentNumber()) + 1;
							} else {
								// 可用字段爲 截止號段-起始號段
								subNumber = Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) - Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidStart()) + 1;
								tempDtid = Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidStart());
							}
							for(int j=0; j < subNumber; j++){
							//	map.put(count, tempDtid);
								map.put(count, String.format(IAtomsConstants.PARAM_SUPPLEMENT_ZERO_FOR_NUMBER_EIGHT, tempDtid));
								if(map.size() == (caseNum + 1)){
									// 因為dtid集合設置了按起始的dtid進行升序排序，所以第一個元素就是最小的起始dtid值
									tempPvmDtidDefDTO = pvmDtidDefDTOs.get(i);
									// 設置當前dtid號碼
								//	tempPvmDtidDefDTO.setCurrentNumber(String.valueOf(tempDtid));
									tempPvmDtidDefDTO.setCurrentNumber(String.format(IAtomsConstants.PARAM_SUPPLEMENT_ZERO_FOR_NUMBER_EIGHT, tempDtid));
									pvmDtidDef = (PvmDtidDef)transformer.transform(tempPvmDtidDefDTO, new PvmDtidDef());
									// 更新DTID號碼管理該客戶、該設備、該DTID號段的目前號碼為當前DTID
									this.dtidDefDAO.update(pvmDtidDef);
									break;
								}
								// 更新該號段最大值
								if(j == (subNumber - 1)){
									// 因為dtid集合設置了按起始的dtid進行升序排序，所以第一個元素就是最小的起始dtid值
									tempPvmDtidDefDTO = pvmDtidDefDTOs.get(i);
									// 設置當前dtid號碼
									tempPvmDtidDefDTO.setCurrentNumber(tempPvmDtidDefDTO.getDtidEnd());
									pvmDtidDef = (PvmDtidDef)transformer.transform(tempPvmDtidDefDTO, new PvmDtidDef());
									// 更新DTID號碼管理該客戶、該設備、該DTID號段的目前號碼為當前DTID
									this.dtidDefDAO.update(pvmDtidDef);
								}
								count ++;
								tempDtid ++;
							}
							// 截至條件
							if(map.size() == (caseNum + 1)){
								break;
							}
						}
					}
				}
			}
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".getDtidForCopy():" + e, e);
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED, new String[]{this.getMyName()}, e);
		}
		return map;
	}
	/**
	 * Purpose:計算Dtid
	 * @author CrissZhang
	 * @param dtidType ： dtid生成方式
	 * @param customerId ： 客戶編號
	 * @param edcType ： 機型
	 * @param srmCaseTransactionParameterDTOs ： 交易參數列表
	 * @return String ： 返回一個字符串
	 */
	private String calculateDtid(String customerId, String edcType, List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs) throws ServiceException{
		String dtid = null;
		Transformer transformer = new SimpleDtoDmoTransformer();
		try{	
			if(StringUtils.hasText(customerId)){
				// 拿到公司信息
				BimCompany company = (BimCompany) this.companyDAO.findByPrimaryKey(BimCompany.class, customerId);
				if(company != null){
					// 得到dtid產生方式
					String dtidType = company.getDtidType();
					// 【客戶DTID產生方式】為“同TID”，則DTID為交易類別為“一般交易”之TID
					if(StringUtils.hasText(dtidType) && IAtomsConstants.PARAM_IATOMS_DTID_TYPE_SAME.equals(dtidType)){
						// 交易類別為“一般交易”之TID
						if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
							for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
								// DTID為交易類別為“一般交易”之TID
								/*if(srmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON.getCode())){
									dtid = srmCaseTransactionParameterDTO.getTid();
									break;
								}*/
								if(srmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VM.getCode())
										|| srmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJ.getCode())
										|| srmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJU.getCode())){
									if(StringUtils.hasText(srmCaseTransactionParameterDTO.getTid())){
										dtid = srmCaseTransactionParameterDTO.getTid();
										break;
									}
								}
							}
						}
					// 【客戶DTID產生方式】為“自動生成”，則取得【DTID號碼管理】之該客戶該機型之可使用之最小的DTID，若有複製作業，要依複製數量取得不同DTID。
					} else if(StringUtils.hasText(dtidType) && IAtomsConstants.PARAM_IATOMS_DTID_TYPE_AUTO.equals(dtidType)){
						// 拿到該客戶該機型下所有dtid
						List<PvmDtidDefDTO> pvmDtidDefDTOs = this.dtidDefDAO.listBy(customerId, edcType, null, null, null, null, 0, 0, false);
						// dtid號碼DTO對象
						PvmDtidDefDTO tempPvmDtidDefDTO = null;
						// dtid號碼DMO對象
						PvmDtidDef pvmDtidDef = null;
						// 存放dtid的list
						if(!CollectionUtils.isEmpty(pvmDtidDefDTOs)){
							// 起始標記
							boolean isStart = false;
							// 起始標記
							int startNum = 0;
							// 是否有當前dtid號碼
							boolean hasCurrentNum = false;
							for(int i=0; i < pvmDtidDefDTOs.size(); i++){
								if(StringUtils.hasText(pvmDtidDefDTOs.get(i).getCurrentNumber())){
									hasCurrentNum = true;
									if(Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) > Integer.parseInt(pvmDtidDefDTOs.get(i).getCurrentNumber())){
										startNum = i;
										// 該號段可以作爲起始
										isStart = true;
										break;
									} else if(Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) == Integer.parseInt(pvmDtidDefDTOs.get(i).getCurrentNumber())){
										startNum = i;
									}
								}
							}
							// 集合均無當前dtid號碼，認爲所有號段均未啓用
							if(!hasCurrentNum){
								// 因為dtid集合設置了按起始的dtid進行升序排序，所以第一個元素就是最小的起始dtid值
								tempPvmDtidDefDTO = pvmDtidDefDTOs.get(0);
								// 設置當前dtid號碼
								tempPvmDtidDefDTO.setCurrentNumber(tempPvmDtidDefDTO.getDtidStart());
							} else {
								// 當前dtid號碼小於號段最大值
								if(isStart){
									tempPvmDtidDefDTO = pvmDtidDefDTOs.get(startNum);
									// 設置當前dtid號碼
									tempPvmDtidDefDTO.setCurrentNumber(String.valueOf(Integer.parseInt(tempPvmDtidDefDTO.getCurrentNumber()) + 1));
								// 等於號段最大值
								} else {
									if(pvmDtidDefDTOs.size() > (startNum + 1)){
										tempPvmDtidDefDTO = pvmDtidDefDTOs.get(startNum + 1);
										// 設置當前dtid號碼
										tempPvmDtidDefDTO.setCurrentNumber(tempPvmDtidDefDTO.getDtidStart());
									}
								}
							}
							// 保存號段
							if(tempPvmDtidDefDTO != null){
								dtid = tempPvmDtidDefDTO.getCurrentNumber();
								pvmDtidDef = (PvmDtidDef)transformer.transform(tempPvmDtidDefDTO, new PvmDtidDef());
								// 更新DTID號碼管理該客戶、該設備、該DTID號段的目前號碼為當前DTID
								this.dtidDefDAO.update(pvmDtidDef);
								this.dtidDefDAO.getDaoSupport().clear();
							}
						}
					}
				}
			}
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".calculateDtid():" + e, e);
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED, new String[]{this.getMyName()}, e);
		}
		return dtid;
	}
	
	/**
	 * Purpose:計算應回應、到場、完修時奧
	 * @author CrissZhang
	 * @param contractSlaDTO ： SLA的對象
	 * @return Map<String,Date> ： 返回一個map集合
	 */
	private Map<String, Date> calAcceptableDate(ContractSlaDTO contractSlaDTO, Date slaStartDate) {
		Map<String, Date> resultMap = null;
		if(contractSlaDTO != null){
			// 上班日
			String isWorkDay = contractSlaDTO.getIsWorkDay();
			// 當天件
			String isThatDay = contractSlaDTO.getIsThatDay();
			// 當天件建檔時間
			String thatDayTime = contractSlaDTO.getThatDayTime();
			// 回應時效
			Double responseHour = contractSlaDTO.getResponseHour();
			// 到場時效
			Double arriveHour = contractSlaDTO.getArriveHour();
			// 完修時效
			Double completeHour = contractSlaDTO.getCompleteHour();
			// 建案時間
			Date createCaseDate = slaStartDate;
			// 查詢合約
			BimContract bimContract = this.contractDAO.findByPrimaryKey(BimContract.class, contractSlaDTO.getContractId());
			if(bimContract != null){
				// 計算時效
				if(IAtomsConstants.NO.equals(isThatDay)){
					// 當天件“否”，上班日“是” 時效計算時依據【行事曆】設定的工作日計算，工作日的上班時間依據【合約維護】設定的【約定上班時間】計算
					if(IAtomsConstants.YES.equals(isWorkDay)){
						// 上班時間
						resultMap = calculateNotThatDayDate(slaStartDate, responseHour, arriveHour, completeHour, bimContract);
					} else {
						// 當天件“否”，上班日“否” 時效計算時按日曆天計算，日曆天的上班時間按00:00~24:00計算
						resultMap = new HashMap<String, Date>();
						// Bug #2417 應回應時間等於建案時間+回應時效
/*						// 應回應時效
						if(responseHour != null){
							resultMap.put(CaseManagerFormDTO.PARAM_ACCEPTABLE_RESPONSE_DATE, getAcceptableDate(slaStartDate, responseHour.intValue(), null, null));
						}*/
						// 應到達時間
						resultMap.put(CaseManagerFormDTO.PARAM_ACCEPTABLE_ARRIVE_DATE, getAcceptableDate(slaStartDate, arriveHour.intValue(), null, null));
						// 應完修時間
						resultMap.put(CaseManagerFormDTO.PARAM_ACCEPTABLE_FINISH_DATE, getAcceptableDate(slaStartDate, completeHour.intValue(), null, null));
					}
				} else {
					// 比較當天件建檔時間與建案時間
					boolean isGreate = compareInstallDate(slaStartDate, thatDayTime);
					// 設置為 00:00:00
					slaStartDate = setHourForDate(slaStartDate, 0, 0, 0, 0);
					if(IAtomsConstants.YES.equals(isWorkDay)){
						resultMap = calculateIsThatDayDate(slaStartDate, isGreate, responseHour, arriveHour, completeHour, false);
					} else {
						resultMap = calculateIsThatDayDate(slaStartDate, isGreate, responseHour, arriveHour, completeHour, true);
					}	
				}
				// 應回應時效  Bug #2417 應回應時間等於建案時間+回應時效（任何情況）
				if(resultMap != null && responseHour != null){
					resultMap.put(CaseManagerFormDTO.PARAM_ACCEPTABLE_RESPONSE_DATE, getAcceptableDate(createCaseDate, responseHour.intValue(), null, null));
				}
			}
		}
		return resultMap;
	}
	/**
	 * Purpose:當天件“是” 計算應回應的時間、應到達的時間以及應完修的時間
	 * @author CrissZhang
	 * @param currentDate ： 當前時間
	 * @param isGreate ： 建案時間大於當天件建檔時間的標誌
	 * @param responseHour ： 回應時效
	 * @param arriveHour ： 到場時效
	 * @param completeHour ：完修時效
	 * @param ingnoreWorkDay ： 忽略工作日
	 * @return Map<String,Date> ： 返回一個日期的map集合
	 */
	private Map<String, Date> calculateIsThatDayDate(Date currentDate, boolean isGreate, 
			Double responseHour, Double arriveHour, Double completeHour, boolean ingnoreWorkDay){
		Map<String, Date> map = new HashMap<String, Date>();
		BimCalendarDay tempCalendarDay = null;
		// 設置當前工作日
		Date workDate = currentDate;
		// 判斷建案當天是不是工作日
		tempCalendarDay = this.calendarDayDAO.findByPrimaryKey(BimCalendarDay.class, workDate);
		// 如果建案時間大於當天件建檔時間 或者 建案當天為休息日 日期需要加一天
		if(isGreate || ((tempCalendarDay != null) && (tempCalendarDay.getIsHoliday().equals(IAtomsConstants.YES)) && !ingnoreWorkDay)){
			int addDays = 1;
			// 計算增加的天數
			if(ingnoreWorkDay){
				// 忽略工作日直接加一天
				workDate = getAcceptableDate(workDate, 24, null, null);
			} else {
				// sql計算日期增加后的一天 工作日
				List<Date> dateList = transObjectResult(this.calendarDayDAO.culculateDate(currentDate, addDays, 0, 0));
				// 拿到加一天后的日期
				if(!CollectionUtils.isEmpty(dateList)){
					workDate = dateList.get(0);
				}
			}
		}
		int responseAddDays = 0;
		int arriveAddDays = 0;
		int completeAddDays = 0;
		int remainderHour = 0;
		// 應回應的時間
		Date responseDate = null;
		// 應到場的時間
		Date arriveDate = null;
		// 應完修的時間
		Date completeDate = null;
		boolean isResponseAdd = false;
		boolean isArriveAdd = false;
		boolean isCompleteAdd = false;
		if(responseHour != null){
			// 商
			responseAddDays = (int) (responseHour/24);
			// 餘數
			remainderHour = (int) (responseHour%24);
			// 有餘數
			if(remainderHour != 0){
				// 截止天數加一
				responseAddDays = responseAddDays + 1;
			}
			if(responseAddDays >= 1){
				isResponseAdd = true;
				responseAddDays = responseAddDays - 1;
			}
		} 
		// 到場時效增加天數
		arriveAddDays = (int) (arriveHour/24);
		if(arriveAddDays >= 1){
			isArriveAdd = true;
			arriveAddDays = arriveAddDays - 1;
		}
		// 完修時效增加天數
		completeAddDays = (int) (completeHour/24);
		if(completeAddDays >= 1){
			isCompleteAdd = true;
			completeAddDays = completeAddDays - 1;
		}
		if(ingnoreWorkDay){
			// 忽略工作日
			// 得到三個時期
			responseDate = getAcceptableDate(workDate, responseAddDays*24, null, null);
			arriveDate = getAcceptableDate(workDate, arriveAddDays*24, null, null);
			completeDate = getAcceptableDate(workDate, completeAddDays*24, null, null);
		} else {
			// 計算三者的時效
			List<Date> dateList = transObjectResult(this.calendarDayDAO.culculateDate(workDate, responseAddDays, arriveAddDays, completeAddDays));
			if(!CollectionUtils.isEmpty(dateList)){
				// 得到三個時期
				if(isResponseAdd && responseAddDays == 0){
					responseDate = workDate;
				} else {
					responseDate = dateList.get(0);
				}
				if(isArriveAdd && arriveAddDays == 0){
					arriveDate = workDate;
				} else {
					arriveDate = dateList.get(1);
				}
				if(isCompleteAdd && completeAddDays == 0){
					completeDate = workDate;
				} else {
					completeDate = dateList.get(2);
				}
			}
		}
		if(responseHour != null){
			// 無多餘小時數 回應時間
			if(remainderHour == 0){
				if(responseDate != null){
					responseDate = setHourForDate(responseDate, 23, 59, 59, 0);
				}
			} else {
				if(responseDate != null){
					responseDate = setHourForDate(responseDate, remainderHour, 0, 0, 0);
				}
			}
		} else {
			responseDate = null;
		}
		// 到場時間
		if(arriveDate != null){
			arriveDate = setHourForDate(arriveDate, 23, 59, 59, 0);
		}
		// 完修時間
		if(completeDate != null){
			completeDate = setHourForDate(completeDate, 23, 59, 59, 0);
		}
		map.put(CaseManagerFormDTO.PARAM_ACCEPTABLE_RESPONSE_DATE, responseDate);
		map.put(CaseManagerFormDTO.PARAM_ACCEPTABLE_ARRIVE_DATE, arriveDate);
		map.put(CaseManagerFormDTO.PARAM_ACCEPTABLE_FINISH_DATE, completeDate);
		return map;
	}
	
	/**
	 * Purpose:當天件“否” 上班日選“是” 計算應回應的時間、應到達的時間以及應完修的時間
	 * @author CrissZhang
	 * @param currentDate ： 當前日期
	 * @param responseHour ： 回應時效
	 * @param arriveHour ： 到場時效
	 * @param completeHour ： 完修時效
	 * @param bimContract ： 合約信息
	 * @return Map<String,Date> ： 返回一個map的集合
	 */
	private Map<String,Date> calculateNotThatDayDate(Date currentDate, Double responseHour, Double arriveHour, Double completeHour, BimContract bimContract){
		Map<String,Date> map = new HashMap<String,Date>();
		// 應回應的時間
		Date responseDate = null;
		// 應到場的時間
		Date arriveDate = null;
		// 應完修的時間
		Date completeDate = null;
		Date newDate = null;
		if(bimContract != null){
			if(StringUtils.hasText(bimContract.getWorkHourEnd1())){
				if(IAtomsConstants.PARAM_WORK_TIME_START_HOUR.equals(bimContract.getWorkHourEnd1())){
					bimContract.setWorkHourEnd1(IAtomsConstants.PARAM_WORK_TIME_END_HOUR);
				}
			}
			if(StringUtils.hasText(bimContract.getWorkHourEnd2())){
				if(IAtomsConstants.PARAM_WORK_TIME_START_HOUR.equals(bimContract.getWorkHourEnd2())){
					bimContract.setWorkHourEnd2(IAtomsConstants.PARAM_WORK_TIME_END_HOUR);
				}
			}
			// 工作日上班時間
			Double workDayTime = null;
			Double workTime1 = getWorkTime(bimContract.getWorkHourStart1(), bimContract.getWorkHourEnd1());
			Double workTime2 = getWorkTime(bimContract.getWorkHourStart2(), bimContract.getWorkHourEnd2());
			boolean haveWorkTime1 = false;
			boolean haveWorkTime2 = false;
			// 上班時間計算
			if((workTime1 != null) || (workTime2 != null)){
				if((workTime1 != null) && (workTime2 == null)){
					haveWorkTime1 = true;
					workDayTime = workTime1;
				} else if((workTime1 == null) && (workTime2 != null)){
					haveWorkTime2 = true;
					workDayTime = workTime2;
				} else {
					haveWorkTime1 = true;
					haveWorkTime2 = true;
					workDayTime = workTime1 + workTime2;
				}
				
				// 計算回應需要幾個工作日
				int responseDays = 0;
				// 計算回應多餘幾個小時
				double responseHours = 0;
				if(responseHour != null){
					responseDays = (int)(responseHour/workDayTime);
					responseHours = responseHour%workDayTime;
				}
				// 計算到場需要幾個工作日
				int arriveDays = (int)(arriveHour/workDayTime);
				// 計算到場多餘幾個小時
				double arriveHours = arriveHour%workDayTime;
				// 計算完修需要幾個工作日
				int completeDays = (int)(completeHour/workDayTime);
				// 計算完修多餘幾個小時
				double completeHours = completeHour%workDayTime;
				// 得到約定上班日1起始時間
				String workHourStart1 = bimContract.getWorkHourStart1();
				// 得到約定上班日1終止時間
				String workHourEnd1 = bimContract.getWorkHourEnd1();
				// 得到約定上班日2起始時間
				String workHourStart2 = bimContract.getWorkHourStart2();
				// 得到約定上班日2終止時間
				String workHourEnd2 = bimContract.getWorkHourEnd2();
				
				int currentHour = getHourForDate(currentDate, Calendar.HOUR_OF_DAY);
				// 拿到當前分鐘數
				int currentMinute = getHourForDate(currentDate, Calendar.MINUTE);
				// 判斷當前是不是工作日
				boolean isWork = false;
				// 得到當天日期
				newDate = setHourForDate(currentDate, 0, 0, 0, 0);
				BimCalendarDay tempCalendarDay = null;
				// 判斷當天是否為工作日
				tempCalendarDay = this.calendarDayDAO.findByPrimaryKey(BimCalendarDay.class, newDate);
				if((tempCalendarDay == null) || (tempCalendarDay.getIsHoliday().equals(IAtomsConstants.NO))){
					isWork = true;
				}
				Integer startHour1 = null;
				Integer startMinute1 = null;
				Integer endHour1 = null;
				Integer endMinute1 = null;
				// 有約定上班時間1
				if(haveWorkTime1){
					// 分離約定上班日1 起始時間
					String[] startArray1 = workHourStart1.split(IAtomsConstants.MARK_COLON);
					startHour1 = Integer.parseInt(startArray1[0]);
					startMinute1 = Integer.parseInt(startArray1[1]);
					// 分離約定上班日1 終止時間
					String[] endArray1 = workHourEnd1.split(IAtomsConstants.MARK_COLON);
					endHour1 = Integer.parseInt(endArray1[0]);
					endMinute1 = Integer.parseInt(endArray1[1]);
				}
				Integer startHour2 = null;
				Integer startMinute2 = null;
				Integer endHour2 = null;
				Integer endMinute2 = null;
				// 有約定上班時間2
				if(haveWorkTime2){
					// 分離約定上班日2 起始時間
					String[] startArray2 = workHourStart2.split(IAtomsConstants.MARK_COLON);
					startHour2 = Integer.parseInt(startArray2[0]);
					startMinute2 = Integer.parseInt(startArray2[1]);
					// 分離約定上班日2 終止時間
					String[] endArray2 = workHourEnd2.split(IAtomsConstants.MARK_COLON);
					endHour2 = Integer.parseInt(endArray2[0]);
					endMinute2 = Integer.parseInt(endArray2[1]);
				}
				boolean isAddDay = false;
				// 是工作日
				if(isWork){
					// 有設定約定上班時間1 沒有設定約定上班時間2
					if(haveWorkTime1 && !haveWorkTime2){
						// 建案時間在約定上班時間1之前
						if((currentHour < startHour1) || ((currentHour == startHour1) && (currentMinute <= startMinute1))){
							newDate = setHourForDate(newDate, startHour1, startMinute1, 0, 0);
							// 建案時間在約定上班時間1之間
						} else if(currentHour >= startHour1 && currentMinute >= startMinute1 && ((currentHour < endHour1) || ((currentHour == endHour1) && (currentMinute <= endMinute1)))){
							newDate = setHourForDate(newDate, currentHour, currentMinute, 0, 0);
							// 建案時間在約定上班時間1時間之後
						} else {
							isAddDay = true;
						}
					// 沒有設定約定上班時間1 有設定約定上班時間2
					} else if(!haveWorkTime1 && haveWorkTime2){
						// 建案時間在約定上班時間2之前
						if((currentHour < startHour2) || ((currentHour == startHour2) && (currentMinute <= startMinute2))){
							newDate = setHourForDate(newDate, startHour2, startMinute2, 0, 0);
							// 建案時間在約定上班時間2之間
						} else if(currentHour >= startHour2 && currentMinute >= startMinute2 && ((currentHour < endHour2) || ((currentHour == endHour2) && (currentMinute <= endMinute2)))){
							newDate = setHourForDate(newDate, currentHour, currentMinute, 0, 0);
							// 建案時間在約定上班時間2時間之後
						} else {
							isAddDay = true;
						}
					// 有設定約定上班時間1 與約定上班時間2
					} else {
						// 建案時間在約定上班時間1之前
						if((currentHour < startHour1) || ((currentHour == startHour1) && (currentMinute <= startMinute1))){
							newDate = setHourForDate(newDate, startHour1, startMinute1, 0, 0);
							// 建案時間在約定上班時間1之間
						} else if(currentHour >= startHour1 && currentMinute >= startMinute1 && ((currentHour < endHour1) || ((currentHour == endHour1) && (currentMinute <= endMinute1)))){
							newDate = setHourForDate(newDate, currentHour, currentMinute, 0, 0);
							// 建案時間在約定上班時間1到約定上班時間2之間
						} else if(currentHour >= endHour1 && currentMinute >= endMinute1 && ((currentHour < startHour2) || (currentHour == startHour2 && currentMinute <= startMinute2) )){
							newDate = setHourForDate(newDate, startHour2, startMinute2, 0, 0);
							// 建案時間在約定上班時間2之間
						} else if(currentHour >= startHour2 && currentMinute >= startMinute2 && ((currentHour < endHour2) || ((currentHour == endHour2) && (currentMinute <= endMinute2)))){
							newDate = setHourForDate(newDate, currentHour, currentMinute, 0, 0);
						} else {
							isAddDay = true;
						}
					}
				}
				// 非上班日或者需要加一天
				if(!isWork || isAddDay){
					// 建案時間在約定上班時間2之後
					int addDays = 1;
					// sql計算日期增加后的一天 工作日
					List<Date> dateList = transObjectResult(this.calendarDayDAO.culculateDate(newDate, addDays, 0, 0));
					// 拿到加一天后的日期
					if(!CollectionUtils.isEmpty(dateList)){
						newDate = dateList.get(0);
					}
					if(haveWorkTime1){
						newDate = setHourForDate(newDate, startHour1, startMinute1, 0, 0);
					} else {
						newDate = setHourForDate(newDate, startHour2, startMinute2, 0, 0);
					}
				}
				Map tempMap = null;
				// 暫存newDate的時和分
				int tempResponseDateHour = 0;
				int tempResponseDateMin = 0;
				int tempArriveDateHour = 0;
				int tempArriveDateMin = 0;
				int tempCompleteDateHour = 0;
				int tempCompleteDateMin = 0;
				if(responseHour != null){
					// 得到回應時間以及回應的日期增加
					tempMap = getAddHourDate(newDate, responseDate, responseHours, workTime1, workTime2,startHour1, startMinute1,endHour1, endMinute1,
							startHour2, startMinute2, endHour2, endMinute2, haveWorkTime1, haveWorkTime2, responseDays);
					if(!CollectionUtils.isEmpty(tempMap)){
						if(tempMap.get(CaseManagerFormDTO.CASE_PARAM_CALCULATE_DATE) != null){
							responseDate = (Date) tempMap.get(CaseManagerFormDTO.CASE_PARAM_CALCULATE_DATE);
							responseDays = (Integer) tempMap.get(CaseManagerFormDTO.CASE_PARAM_TOTAL_ADD_DAYS);
							tempResponseDateHour = getHourForDate(responseDate, Calendar.HOUR_OF_DAY);
							tempResponseDateMin = getHourForDate(responseDate, Calendar.MINUTE);
						}
					}
				} else {
					responseDate = null;
				}
				// 得到到場時間以及到場的日期增加
				tempMap = getAddHourDate(newDate, arriveDate, arriveHours, workTime1, workTime2,startHour1, startMinute1,endHour1, endMinute1,
						startHour2, startMinute2, endHour2, endMinute2, haveWorkTime1, haveWorkTime2, arriveDays);
				if(!CollectionUtils.isEmpty(tempMap)){
					if(tempMap.get(CaseManagerFormDTO.CASE_PARAM_CALCULATE_DATE) != null){
						arriveDate = (Date) tempMap.get(CaseManagerFormDTO.CASE_PARAM_CALCULATE_DATE);
						arriveDays = (Integer) tempMap.get(CaseManagerFormDTO.CASE_PARAM_TOTAL_ADD_DAYS);
						tempArriveDateHour = getHourForDate(arriveDate, Calendar.HOUR_OF_DAY);
						tempArriveDateMin = getHourForDate(arriveDate, Calendar.MINUTE);
					}
				}
				// 得到完修時間以及完修的日期增加
				tempMap = getAddHourDate(newDate, completeDate, completeHours, workTime1, workTime2,startHour1, startMinute1,endHour1, endMinute1,
						startHour2, startMinute2, endHour2, endMinute2, haveWorkTime1, haveWorkTime2, completeDays);
				if(!CollectionUtils.isEmpty(tempMap)){
					if(tempMap.get(CaseManagerFormDTO.CASE_PARAM_CALCULATE_DATE) != null){
						completeDate = (Date) tempMap.get(CaseManagerFormDTO.CASE_PARAM_CALCULATE_DATE);
						completeDays = (Integer) tempMap.get(CaseManagerFormDTO.CASE_PARAM_TOTAL_ADD_DAYS);
						tempCompleteDateHour = getHourForDate(completeDate, Calendar.HOUR_OF_DAY);
						tempCompleteDateMin = getHourForDate(completeDate, Calendar.MINUTE);
					}
				}
				// 天數不等於0
				if(responseDays != 0 || arriveDays != 0 || completeDays != 0){
					// 處理加的天數
					newDate = setHourForDate(newDate, 0, 0, 0, 0);
					// 計算三者的時效
					List<Date> dateList = transObjectResult(this.calendarDayDAO.culculateDate(newDate, responseDays, arriveDays, completeDays));
					if(!CollectionUtils.isEmpty(dateList)){
						// 得到三個時期
						if(dateList.get(0) != null){
							responseDate = dateList.get(0);
						}
						if(dateList.get(1) != null){
							arriveDate = dateList.get(1);
						}
						if(dateList.get(2) != null){
							completeDate = dateList.get(2);
						}
					}
					// 重新放置時和分
					if(responseDate != null){
						responseDate = setHourForDate(responseDate, tempResponseDateHour, tempResponseDateMin, 0, 0);
					}
					if(arriveDate != null){
						arriveDate = setHourForDate(arriveDate, tempArriveDateHour, tempArriveDateMin, 0, 0);
					}
					if(completeDate != null){
						completeDate = setHourForDate(completeDate, tempCompleteDateHour, tempCompleteDateMin, 0, 0);
					}
				}
			} else {
				return map;
			}
		}
		map.put(CaseManagerFormDTO.PARAM_ACCEPTABLE_RESPONSE_DATE, responseDate);
		map.put(CaseManagerFormDTO.PARAM_ACCEPTABLE_ARRIVE_DATE, arriveDate);
		map.put(CaseManagerFormDTO.PARAM_ACCEPTABLE_FINISH_DATE, completeDate);
		return map;
	}
	
	/**
	 * Purpose:計算增加小時后天數
	 * @author CrissZhang
	 * @param newDate ： 得到的一個新日期
	 * @param calculateDate ： 要計算的日期
	 * @param calculateHour ： 時效比上工作小時后多餘的天數
	 * @param workTime1 ： 約定上班時間1的小時數
	 * @param workTime2 ： 約定上班時間2的小時數
	 * @param startHour1 ： 約定上班時間1起始小時
	 * @param startMinute1 ： 約定上班時間1起始分鐘
	 * @param endHour1 ： 約定上班時間1終止小時
	 * @param endMinute1 ： 約定上班時間1終止分鐘
	 * @param startHour2 ： 約定上班時間2起始小時
	 * @param startMinute2 ： 約定上班時間2起始分鐘
	 * @param endHour2 ： 約定上班時間2終止小時
	 * @param endMinute2 ： 約定上班時間2終止分鐘
	 * @return Date ： 返回一個Date類型
	 */
	private Map getAddHourDate(Date newDate, Date calculateDate, double calculateHour, Double workTime1, Double workTime2,
			Integer startHour1, Integer startMinute1, Integer endHour1, Integer endMinute1,
			Integer startHour2, Integer startMinute2, Integer endHour2, Integer endMinute2,
			boolean haveWorkTime1, boolean haveWorkTime2, int totalAddDays){
		Map map = new HashMap();
		// 如果要計算日期為空將當前日期給它
		if(calculateDate == null){
			calculateDate = newDate;
		}
		if(calculateHour != 0){
			// 得到newDate的時和分
			int tempDateHour = getHourForDate(newDate, Calendar.HOUR_OF_DAY);
			int tempDateMin = getHourForDate(newDate, Calendar.MINUTE);
			// 約定上班1轉為分鐘
			int transWorkTime1 = 0;
			if(haveWorkTime1){
				transWorkTime1 = (int)(workTime1 * 60);
			}
			// 約定上班2轉為分鐘
			int transWorkTime2 = 0;
			if(haveWorkTime2){
				transWorkTime2 = (int)(workTime2 * 60);
			}
			// 是否增加一天的標誌
			Boolean isAddDay = false;
			// 分解多餘的小時數
			int subHour = (int)calculateHour;
			int subMin = (int)((calculateHour - subHour)*60);
			// 只設置約定時間1 
			if(haveWorkTime1 && !haveWorkTime2){
				if(tempDateHour >= startHour1 && tempDateMin >= startMinute1 && ((tempDateHour < endHour1) || ((tempDateHour == endHour1) && (tempDateMin <= endMinute1)))){
					// 剩餘小時數大於當天剩餘的工作時數
					if((subHour*60 + subMin) > ((endHour1- tempDateHour)*60 + endMinute1 - tempDateMin)){
						subHour = subHour - (endHour1- tempDateHour);
						subMin = subMin -(endMinute1- tempDateMin);
						isAddDay = true;
					} else {
						// 剩餘小時數小於當天剩餘的工作時數
						calculateDate = getAcceptableDate(calculateDate, subHour, subMin, null);
					}
				}
			// 只設置約定時間2
			} else if(!haveWorkTime1 && haveWorkTime2){
				if(tempDateHour >= startHour2 && tempDateMin >= startMinute2 && ((tempDateHour < endHour2) || ((tempDateHour == endHour2) && (tempDateMin <= endMinute2)))){
					// 剩餘小時數大於當天剩餘的工作時數
					if((subHour*60 + subMin) > ((endHour2- tempDateHour)*60 + endMinute2 - tempDateMin)){
						subHour = subHour - (endHour2- tempDateHour);
						subMin = subMin -(endMinute2- tempDateMin);
						isAddDay = true;
					} else {
						// 剩餘小時數小於當天剩餘的工作時數
						calculateDate = getAcceptableDate(calculateDate, subHour, subMin, null);
					}
				}
			// 約定時間1與約定時間2都設置
			} else {
				// 約定上班時間1區間
				if(tempDateHour >= startHour1 && tempDateMin >= startMinute1 && ((tempDateHour < endHour1) || ((tempDateHour == endHour1) && (tempDateMin <= endMinute1)))){
					// 剩餘小時數大於當天剩餘的工作時數
					if((subHour*60 + subMin) > ((endHour1- tempDateHour)*60 + endMinute1 - tempDateMin + transWorkTime2)){
						subHour = subHour - (endHour1- tempDateHour) - (endHour2- startHour2);
						subMin = subMin -(endMinute1- tempDateMin) - (endMinute2- startMinute2);
						isAddDay = true;
					} else {
						// 剩餘小時數小於當前時間到約定上班日1的截止時間
						if((subHour*60 + subMin) <= ((endHour1- tempDateHour)*60 + endMinute1- tempDateMin)){
							calculateDate = getAcceptableDate(calculateDate, subHour, subMin, null);
						} else {
							// 剩餘小時數大於當前時間到約定上班日1的截止時間 小於當天剩餘的工作時數
							subHour = subHour - (endHour1- tempDateHour);
							subMin = subMin -(endMinute1- tempDateMin);
							calculateDate = setHourForDate(calculateDate, startHour2, startMinute2, 0, 0);
							calculateDate = getAcceptableDate(calculateDate, subHour, subMin, null);
						}
					}
					// 約定上班時間2區間
				} else if(tempDateHour >= startHour2 && tempDateMin >= startMinute2 && ((tempDateHour < endHour2) || ((tempDateHour == endHour2) && (tempDateMin <= endMinute2)))){
					// 剩餘小時數大於當天剩餘的工作時數
					if((subHour*60 + subMin) > ((endHour2- tempDateHour)*60 + endMinute2 - tempDateMin)){
						subHour = subHour - (endHour2- tempDateHour);
						subMin = subMin -(endMinute2- tempDateMin);
						isAddDay = true;
					} else {
						// 剩餘小時數小於當天剩餘的工作時數
						calculateDate = getAcceptableDate(calculateDate, subHour, subMin, null);
					}
				} 
			}
			// 增加一天
			if(isAddDay){
				// 增加一天日期
				totalAddDays ++;
				// 只設置約定時間1 
				if(haveWorkTime1 && !haveWorkTime2){
					calculateDate = setHourForDate(calculateDate, startHour1, startMinute1, 0, 0);
					// 剩餘小時數小於約定上班時間1
					int transMins = subHour*60 + subMin;
					calculateDate = setHourForDate(calculateDate, startHour1, startMinute1, 0, 0);
					calculateDate = getAcceptableDate(calculateDate, null, transMins, null);
				// 只設置約定時間2
				} else if(!haveWorkTime1 && haveWorkTime2){
					// 剩餘小時數小於約定上班時間2
					int transMins = subHour*60 + subMin;
					calculateDate = setHourForDate(calculateDate, startHour2, startMinute2, 0, 0);
					calculateDate = getAcceptableDate(calculateDate, null, transMins, null);
				// 約定時間1與約定時間2都設置
				} else {
					calculateDate = setHourForDate(calculateDate, startHour1, startMinute1, 0, 0);
					// 剩餘小時數大於等於約定上班時間1
					if((subHour*60 + subMin) > transWorkTime1){
						int transMins = subHour*60 + subMin - transWorkTime1;
						calculateDate = setHourForDate(calculateDate, startHour2, startMinute2, 0, 0);
						calculateDate = getAcceptableDate(calculateDate, null, transMins, null);
					} else {
						// 剩餘小時數小於約定上班時間1
						int transMins = subHour*60 + subMin;
						calculateDate = setHourForDate(calculateDate, startHour1, startMinute1, 0, 0);
						calculateDate = getAcceptableDate(calculateDate, null, transMins, null);
					}
				}
			}
		}
		
		// 暫存newDate的時和分
		int currentDateHour = getHourForDate(calculateDate, Calendar.HOUR_OF_DAY);
		int currentDateMin = getHourForDate(calculateDate, Calendar.MINUTE);
		// 只設置約定時間1 
		if(haveWorkTime1 && !haveWorkTime2){
			if(currentDateHour == startHour1 && currentDateMin == startMinute1){
				if(totalAddDays > 0){
					totalAddDays --;
					calculateDate = setHourForDate(calculateDate, endHour1, endMinute1, 0, 0);
				}
			}
		// 只設置約定時間2
		} else if(!haveWorkTime1 && haveWorkTime2){
			if(currentDateHour == startHour2 && currentDateMin == startMinute2){
				if(totalAddDays > 0){
					totalAddDays --;
					calculateDate = setHourForDate(calculateDate, endHour2, endMinute2, 0, 0);
				}
			}
		// 約定時間1與約定時間2都設置
		} else {
			if(currentDateHour == startHour1 && currentDateMin == startMinute1){
				if(totalAddDays > 0){
					totalAddDays --;
					calculateDate = setHourForDate(calculateDate, endHour2, endMinute2, 0, 0);
				}
			} else if(currentDateHour == startHour2 && currentDateMin == startMinute2){
				calculateDate = setHourForDate(calculateDate, endHour1, endMinute1, 0, 0);
			}
		}
		map.put(CaseManagerFormDTO.CASE_PARAM_CALCULATE_DATE, calculateDate);
		map.put(CaseManagerFormDTO.CASE_PARAM_TOTAL_ADD_DAYS, totalAddDays);
		return map;
	}
	
	/**
	 * Purpose:將Object[]轉成日期集合
	 * @author CrissZhang
	 * @param objects ： Object[]對象
	 * @return List<Date> : 返回日期集合
	 */
	private List<Date> transObjectResult(Object[] objects){
		List<Date> dateList = new ArrayList<Date>();
		if(objects.length != 0){
			for(int i = 0; i<objects.length; i++){
				try {
					if(objects[i] != null){
					//	dateList.add(sdf.parse(objects[i].toString()));
						dateList.add(DateTimeUtils.toDate(objects[i].toString()));
					} else {
						dateList.add(null);
					}
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
		}
		return dateList;
	}
	
	/**
	 * Purpose:計算增加時分秒后的實際日期
	 * @author CrissZhang
	 * @return Date ：返回Date類型
	 */
	private Date getAcceptableDate(Date currentDate, Integer hour, Integer minute, Integer second){
		Calendar now=Calendar.getInstance();
		now.setTime(currentDate);
		// 如果小時數不為空，則增加小時數
		if(hour != null){
			now.add(Calendar.HOUR_OF_DAY, hour);
		}
		// 如果分鐘數不為空，則增加分鐘數
		if(minute != null){
			now.add(Calendar.MINUTE, minute);
		}
		// 如果秒不為空，則增加秒
		if(second != null){
			now.add(Calendar.SECOND, second);
		}
		return now.getTime();
	}
	
	/**
	 * Purpose:計算增加時分秒后的實際日期
	 * @author CrissZhang
	 * @return Date ：返回Date類型
	 */
	private Date setHourForDate(Date currentDate, Integer hour, Integer minute, Integer second, Integer millis){
		Calendar now = Calendar.getInstance();
		now.setTime(currentDate);
		// 如果小時數不為空，則放置小時數
		if(hour != null){
			now.set(Calendar.HOUR_OF_DAY, hour);
		}
		// 如果分鐘數不為空，則放置分鐘數
		if(minute != null){
			now.set(Calendar.MINUTE, minute);
		}
		// 如果秒不為空，則放置秒
		if(second != null){
			now.set(Calendar.SECOND, second);
		}
		// 
		if(millis != null){
			now.set(Calendar.MILLISECOND, second);
		}
		return now.getTime();
	}
	/**
	 * Purpose:根據字段返回傳入時間的時、分、秒
	 * @author CrissZhang
	 * @param currentDate ： 當前日期
	 * @param filed ： Calendar定義好的字段
	 * @return Integer ： 返回一個Integer類型
	 */
	private Integer getHourForDate(Date currentDate, int filed){
		Calendar now=Calendar.getInstance();
		now.setTime(currentDate);
		// 放置的字段為小時
		if(Calendar.HOUR_OF_DAY == filed){
			return now.get(Calendar.HOUR_OF_DAY);
			// 放置字段為分鐘
		} else if(Calendar.MINUTE == filed){
			return now.get(Calendar.MINUTE);
			// 放置字段為秒
		} else if(Calendar.SECOND == filed){
			return now.get(Calendar.SECOND);
		} else if(Calendar.DATE == filed){
			return now.get(Calendar.DATE);
		} else {
			return null;
		}
	}
	/**
	 * Purpose:判斷建案時間與建檔時間
	 * @author CrissZhang
	 * @param currentDate ： 當前日期
	 * @param thatday ： 當天件建檔時間
	 * @return boolean ： 返回一個boolean類型
	 */
	private boolean compareInstallDate(Date currentDate, String thatDayTime){
		boolean isGreate = false;
		// 拿到當前小時數
		int curHour = getHourForDate(currentDate, Calendar.HOUR_OF_DAY);
		// 拿到當前分鐘數
		int curMinute = getHourForDate(currentDate, Calendar.MINUTE);
		// 大於
		// 判斷建案時間時候打與當天件建檔時間
		if(StringUtils.hasText(thatDayTime) && (thatDayTime.indexOf(IAtomsConstants.MARK_COLON) > 0)){
			String[] strArray = thatDayTime.split(IAtomsConstants.MARK_COLON);
			// 拿到當天件建檔小時數
			Integer thatDayHour = Integer.parseInt(strArray[0]);
			// 拿到當天件建檔分鐘
			Integer thatDayMin = Integer.parseInt(strArray[1]);
			// 小時數大於
			if(curHour > thatDayHour){
				isGreate = true;
			} else if(curHour == thatDayHour){
				if(curMinute > thatDayMin){
					isGreate = true;
				}
			}
		}
		return isGreate;
	}
	
	/**
	 * Purpose:拿到工作時間
	 * @author CrissZhang
	 * @param workHourStart ： 約定上班的起始時間
	 * @param workHourEnd ： 約定上班的終止時間
	 * @return double ： 返回一個double類型
	 */
	private Double getWorkTime(String workHourStart, String workHourEnd){
		Double workTime = null;
		if(StringUtils.hasText(workHourStart) && StringUtils.hasText(workHourEnd)){
			if((workHourStart.indexOf(IAtomsConstants.MARK_COLON) > 0) && (workHourEnd.indexOf(IAtomsConstants.MARK_COLON) > 0)){
				String[] startArray = workHourStart.split(IAtomsConstants.MARK_COLON);
				Integer startHour = Integer.parseInt(startArray[0]);
				Integer startMinute = Integer.parseInt(startArray[1]);
				String[] endArray = workHourEnd.split(IAtomsConstants.MARK_COLON);
				Integer endHour = Integer.parseInt(endArray[0]);
				Integer endMinute = Integer.parseInt(endArray[1]);
				double subHour = 0;
				if(startMinute == endMinute){
					subHour = 0;
				} else {
					subHour = (endMinute - startMinute)/60;
				}
				workTime = endHour - startHour + subHour;
			}
		}
		return workTime;
	} 
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#saveFile(cafe.core.context.SessionContext)
	 */
	public SessionContext saveFile(SessionContext sessionContext) throws ServiceException {
		try {
			CaseManagerFormDTO formDTO =  (CaseManagerFormDTO) sessionContext.getRequestParameter();
			Map<String, MultipartFile> fileMap = formDTO.getFileMap();// (Map<String, MultipartFile>) inquiryContext.getParameter(ContractManageDTO.ATTRIBUTE.FILE_MAP.getValue());
			String fileName = formDTO.getFileName();//(String) inquiryContext.getParameter(ContractManageDTO.ATTRIBUTE.FILE_NAME.getValue());
			String path = getSaveTempFilePath(true, fileName, null);
			if(fileMap.size()> 0){
				MultipartFile uploadFiled = null;
				File filePath = new File(path);
				if (!filePath.exists() || !filePath.isDirectory()) {
					filePath.mkdirs();
				}
				uploadFiled = fileMap.entrySet().iterator().next().getValue();
				String originalFilename = uploadFiled.getOriginalFilename();
				int lastPoint = originalFilename.lastIndexOf(IAtomsConstants.MARK_NO);
				String fileNewName;
				if (lastPoint > 0) {
					String currentTime = DateTimeUtils.toString(DateTimeUtils.getCurrentTimestamp(),  DateTimeUtils.DT_FMT_YYYYMMDDHHMMSSSSS);
					fileNewName = originalFilename.substring(0, lastPoint) + IAtomsConstants.MARK_UNDER_LINE + currentTime + originalFilename.substring(lastPoint);
				} else {
					fileNewName = originalFilename;
				}
				FileUtils.upload(path, uploadFiled, fileNewName);
				Map map = new HashMap();
				map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS,true);
				map.put(CaseManagerFormDTO.PARAM_CASE_FILE_UUID, fileNewName);
				sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
			}
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".saveFile():" + e, e);
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED);
		}
		return sessionContext;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#deleteTempFile(cafe.core.context.SessionContext)
	 */
	public SessionContext deleteTempFile(SessionContext sessionContext) throws ServiceException {
		Message msg = null;
		try {
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			String fileName = formDTO.getFileName();//(String) inquiryContext.getParameter(ContractManageDTO.ATTRIBUTE.FILE_NAME.getValue());
			String path = getSaveTempFilePath(true, fileName, null);
			FileUtils.removeFile(path + formDTO.getQquuid());
			sessionContext.setResponseResult(formDTO);
			msg = new Message(Message.STATUS.SUCCESS,IAtomsMessageCode.DELETE_SUCCESS);
			sessionContext.setReturnMessage(msg);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".init(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.INIT_PAGE_FAILURE);
		}
		return sessionContext;
	}
	/**
	 * Purpose: 創建文件路徑
	 * @author CarrieDuan
	 * @param isTemp ：是否為臨時路徑
	 * @return String ：返回路徑
	 */
	public String getSaveTempFilePath(boolean isTemp, String fileName, String caseId) {
		String path = IAtomsConstants.MARK_EMPTY_STRING;
		try {
			String yearMonthDay = DateTimeUtils.toString(DateTimeUtils.getCurrentDate(),  DateTimeUtils.DT_FMT_YYYYMMDD);
			if (!StringUtils.hasText(fileName)) {
				fileName = UUID.randomUUID().toString();
			}
			StringBuilder builder = new StringBuilder();
			if (isTemp) {
				builder.append(SystemConfigManager.getProperty(IAtomsConstants.FILE_PATH, IAtomsConstants.FILE_TEMP_PATH));
				builder.append(File.separator).append(yearMonthDay).append(File.separator).append(IAtomsConstants.UC_NO_SRM_05020);
				builder.append(File.separator).append(fileName).append(File.separator);
			} else {
				builder.append(SystemConfigManager.getProperty(IAtomsConstants.FILE_PATH, IAtomsConstants.FILE_UPLOAD_PATH));
				builder.append(File.separator).append(IAtomsConstants.UC_NO_SRM_05020);
				builder.append(File.separator).append(caseId).append(File.separator);
			}
			path = builder.toString();
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".getSaveTempFilePath():" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return path;
	}
	/**
	 * Purpose: 生成案件編號 由公司基本訊息維護之客戶碼+案件類型+YYYYMMDD+5位流水碼組成
	 * @author evanliu
	 * @param companyCode ：  由公司基本訊息維護之客戶碼
	 * @param caseCategory：案件類型
	 * @return String
	 */
	private String createCaesId (String companyCode, String caseCategory) {
		//生成caseID
		String yearMonthDay = DateTimeUtils.toString(DateTimeUtils.getCurrentDate(), DateTimeUtils.DT_FMT_YYYYMMDD);
		//流水號
		long id = this.getSequenceNumberControlDAO().getSeqNo(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_HANDLE_INFO, yearMonthDay);
		if (id == 0) {
			id++;
		}
		String swiftNumber = StringUtils.toFixString(5, id);
		// 裝機：I
		if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)){
			caseCategory = IAtomsConstants.TICKET_TYPE_INSTALLED_ABBREVIATE;
			// 併機：C
		} else if(IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseCategory)){
			caseCategory = IAtomsConstants.TICKET_TYPE_MACHINE_ABBREVIATE;
			// 異動：M
		} else if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)){
			caseCategory = IAtomsConstants.TICKET_TYPE_UPDATE_ABBREVIATE;
			// 查核：A
		} else if(IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(caseCategory)){
			caseCategory = IAtomsConstants.TICKET_TYPE_CHECK_ABBREVIATE;
			// 拆機：U
		} else if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseCategory)){
			caseCategory = IAtomsConstants.TICKET_TYPE_UNINSTALL_ABBREVIATE;
			// 報修：R
		} else if(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(caseCategory)){
			caseCategory = IAtomsConstants.TICKET_TYPE_REPAIR_ABBREVIATE;
			// 專案：P
		} else if(IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseCategory)){
			caseCategory = IAtomsConstants.TICKET_TYPE_PROJECT_ABBREVIATE;
			// 其他：O
		} else if(IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(caseCategory)){
			caseCategory = IAtomsConstants.TICKET_TYPE_OTHER_ABBREVIATE;
		}
		StringBuffer caseIdBuffer = new StringBuffer();
		//生成CaseId
		caseIdBuffer.append(companyCode).append(caseCategory).append(yearMonthDay).append(swiftNumber);
		return caseIdBuffer.toString();
	}
	
	/**
	 * Purpose: 根據案件類別，獲得默認的處理類型編號
	 * @author evanliu
	 * @param caseCategory：案件類別
	 * @return String：默認的處理類型編號
	 */
	private String getDefaultProcessType(String caseCategory){
		if (!CollectionUtils.isEmpty(handleTypeDefaultValueMap)) {
			return handleTypeDefaultValueMap.get(caseCategory);
		} else {
			return null;
		}
	}
	
	/**
	 * Purpose:設置當前登陸者角色屬性(客戶角色與廠商角色)
	 * @author CrissZhang
	 * @return void
	 */
	private void setUserRoleAttribute(CaseManagerFormDTO formDTO){
		// 得到當前登陸者信息
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		//當前登入者對應之公司
		String logonUserCompanyId = logonUser.getAdmUserDTO().getCompanyId();
		//當前登入者角色屬性
		String userAttribute = null;
		//得到用戶角色列表
		List<AdmRoleDTO> userRoleList = logonUser.getUserFunctions();
		// 是客戶角色
		Boolean isCustomerAttribute = false;
		// 是廠商角色
		Boolean isVendorAttribute = false;
		// Task #3583  是客戶廠商角色
		Boolean isCustomerVendorAttribute = false;
		if(StringUtils.hasText(logonUserCompanyId)){
			// 得到公司信息
			BimCompany bimCompany = (BimCompany) this.companyDAO.findByPrimaryKey(BimCompany.class, logonUserCompanyId);
			if(bimCompany != null){
				// 公司是否刪除
				if(IAtomsConstants.NO.equals(bimCompany.getDeleted())){
					// 處理得到的角色屬性集合
					if(!CollectionUtils.isEmpty(userRoleList)){
						for (AdmRoleDTO admRoleDTO : userRoleList) {
							userAttribute = admRoleDTO.getAttribute();
							// 是廠商角色
							if (IAtomsConstants.VECTOR_ROLE_ATTRIBUTE.equals(userAttribute)) {
								// 如果即是客戶角色又是廠商角色則設置為廠商角色
								isVendorAttribute = true;
								//Task #3583  客戶廠商      如果即是客戶廠商角色又是廠商角色則設置為廠商角色
							} else if (IAtomsConstants.CUSTOMER_VECTOR_ROLE_ATTRIBUTE.equals(userAttribute)) {
								isCustomerVendorAttribute = true;
								// 是客戶角色
							} else if(IAtomsConstants.CUSTOMER_ROLE_ATTRIBUTE.equals(userAttribute)){
								isCustomerAttribute = true;
							}
						}
						if (isVendorAttribute) {
							isVendorAttribute = true;
							isCustomerVendorAttribute = false;
							isCustomerAttribute = false;
						} else if (isCustomerVendorAttribute) {
							isVendorAttribute = false;
							isCustomerVendorAttribute = true;
							isCustomerAttribute = false;
						} else if (isCustomerAttribute) {
							isVendorAttribute = false;
							isCustomerVendorAttribute = false;
							isCustomerAttribute = true;
						}
					}
				}
			}
		}
		// 放置客戶角色與廠商角色標志
		formDTO.setIsCustomerAttribute(isCustomerAttribute);
		formDTO.setIsVendorAttribute(isVendorAttribute);
		formDTO.setIsCustomerVendorAttribute(isCustomerVendorAttribute);
	}
	/**
	 * Purpose: 設置角色狀態標記，是客戶還是客服
	 * @author evanliu
	 * @param formDTO：CaseManagerFormDTO
	 * @return void
	 */
	private void setUserRoleFlag(CaseManagerFormDTO formDTO) {
		LogonUser logonUser = formDTO.getLogonUser();
		if (logonUser != null) {
			IAtomsLogonUser iAtomsLogonUser = (IAtomsLogonUser)logonUser;
			List<AdmRoleDTO> admRoleDTOs = iAtomsLogonUser.getUserFunctions();
			if (!CollectionUtils.isEmpty(admRoleDTOs)) {
				for (AdmRoleDTO admRoleDTO : admRoleDTOs) {	
					if (IAtomsConstants.VECTOR_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute()) &&
							IAtomsConstants.WORK_FLOW_ROLE_CYBER_AGENT.equals(admRoleDTO.getWorkFlowRole()) &&
							IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(admRoleDTO.getRoleCode())) {
						//廠商角色 + cyberAgent + 角色代碼為CUSTOMER_SERVICE == 客服
						formDTO.setIsCustomerService(true);
					} else if (IAtomsConstants.VECTOR_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute()) &&
							IAtomsConstants.WORK_FLOW_ROLE_CYBER_AGENT.equals(admRoleDTO.getWorkFlowRole()) &&
							IAtomsConstants.CASE_ROLE.VENDOR_SERVICE.getCode().equals(admRoleDTO.getRoleCode())) {
						// CR #2951 廠商客服
						formDTO.setIsVendorService(true);
					} else if (IAtomsConstants.CUSTOMER_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute()) &&
							IAtomsConstants.WORK_FLOW_ROLE_BANK_AGENT.equals(admRoleDTO.getWorkFlowRole())) {
						//客服角色 + bankAgent == 客戶窗口
						formDTO.setIsCustomer(true);
					} else if (IAtomsConstants.VECTOR_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute()) &&
							IAtomsConstants.WORK_FLOW_ROLE_CYBER_AGENT.equals(admRoleDTO.getWorkFlowRole()) &&
							IAtomsConstants.ROLE_NAME_QA.equals(admRoleDTO.getRoleCode())) {
						//廠商角色 + CyberAgent + 角色代碼為QA == QA窗口
						formDTO.setIsQA(true);
					} else if (IAtomsConstants.VECTOR_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute()) &&
							IAtomsConstants.WORK_FLOW_ROLE_CYBER_AGENT.equals(admRoleDTO.getWorkFlowRole()) &&
							IAtomsConstants.ROLE_NAME_TMS.equals(admRoleDTO.getRoleCode())) {
						//廠商角色 + CyberAgent + 角色代碼為TMS == TMS窗口
						formDTO.setIsTMS(true);
						//Task #3583 角色屬性-新增 客戶廠商
					} else if ((IAtomsConstants.VECTOR_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute()) || IAtomsConstants.CUSTOMER_VECTOR_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute())) &&
							(IAtomsConstants.WORK_FLOW_ROLE_DEPT_AGENT.equals(admRoleDTO.getWorkFlowRole()) || IAtomsConstants.WORK_FLOW_ROLE_CUS_DEPT_AGENT.equals(admRoleDTO.getWorkFlowRole()))) {
						//廠商角色 + 部門Agent == 部門AGENT窗口
						formDTO.setIsAgent(true);
						//Task #3583 角色屬性-新增 客戶廠商
					} else if ((IAtomsConstants.VECTOR_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute()) || IAtomsConstants.CUSTOMER_VECTOR_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute())) &&
							(IAtomsConstants.WORK_FLOW_ROLE_VENDOR_AGENT.equals(admRoleDTO.getWorkFlowRole()) || IAtomsConstants.WORK_FLOW_ROLE_VENDOR_CUS_AGENT.equals(admRoleDTO.getWorkFlowRole()))) {
						//廠商角色 + 廠商Agent == 廠商AGENT窗口
						formDTO.setIsVendorAgent(true);
						//Task #3583 角色屬性-新增 客戶廠商
					} else if ((IAtomsConstants.VECTOR_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute()) || IAtomsConstants.CUSTOMER_VECTOR_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute())) &&
							(IAtomsConstants.WORK_FLOW_ROLE_ENGINEER.equals(admRoleDTO.getWorkFlowRole()) || IAtomsConstants.WORK_FLOW_ROLE_CUS_ENGINEER.equals(admRoleDTO.getWorkFlowRole()))) {
						//廠商角色 + 工程師 == 工程師窗口
						formDTO.setIsEngineer(true);
					} else if (IAtomsConstants.VECTOR_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute()) &&
							IAtomsConstants.WORK_FLOW_ROLE_CYBER_AGENT.equals(admRoleDTO.getWorkFlowRole()) &&
							IAtomsConstants.WORK_FLOW_ROLE_CYBER_AGENT.equals(admRoleDTO.getRoleCode())) {
						//廠商角色 + CyberAgent + 角色代碼為CYBER_AGENT == CYBER_AGENT
						formDTO.setIsCyberAgent(true);
					} else if (IAtomsConstants.CUSTOMER_VECTOR_ROLE_ATTRIBUTE.equals(admRoleDTO.getAttribute()) &&
							IAtomsConstants.WORK_FLOW_ROLE_CUS_VENDOR_AGENT.equals(admRoleDTO.getWorkFlowRole()) &&
							IAtomsConstants.CASE_ROLE.CUS_VENDOR_SERVICE.getCode().equals(admRoleDTO.getRoleCode())) {
						//Task #3578 客戶廠商客服
						//客戶廠商角色 + 客戶廠商Agent + 角色代碼為CUS_VENDOR_SERVICE == CUS_VENDOR_SERVICE
						formDTO.setIsCusVendorService(true);
					} 
				}
			}
		}
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#checkCaseAttFile(cafe.core.context.MultiParameterInquiryContext)
	 */
	public String checkCaseAttFile(MultiParameterInquiryContext param) throws ServiceException {
		String filePath = IAtomsConstants.MARK_EMPTY_STRING;
		try {
			String attFileId = (String) param.getParameter(SrmCaseAttFileDTO.ATTRIBUTE.ATT_FILE_ID.getValue());
			String isHistory = (String) param.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.IS_HISTORY.getValue());
			List<SrmCaseAttFileDTO> caseAttFileDTOs = null;
			caseAttFileDTOs= this.srmCaseAttFileDAO.listByCaseId(null, attFileId, isHistory);
			if (!CollectionUtils.isEmpty(caseAttFileDTOs)) {
				filePath = caseAttFileDTOs.get(0).getFilePath();
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".checkCaseAttFile() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".checkCaseAttFile():" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, new String[]{this.getMyName()}, e);
		}
		return filePath;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#checkCaseAttFile(com.cybersoft4u.xian.iatoms.common.bean.formDTO.CaseManagerFormDTO)
	 */
	public SessionContext checkCaseAttFile(CaseManagerFormDTO command) throws ServiceException {
		SessionContext sessionContext = new SessionContext();
		try {
			String attFileId = command.getAttFileId();
			String isHistory = command.getIsHistory();
			List<SrmCaseAttFileDTO> caseAttFileDTOs = null;
			caseAttFileDTOs= this.srmCaseAttFileDAO.listByCaseId(null, attFileId, isHistory);
			if (!CollectionUtils.isEmpty(caseAttFileDTOs)) {
				command.setFilePath(caseAttFileDTOs.get(0).getFilePath());
				command.setFileName(caseAttFileDTOs.get(0).getFileName());
			}
			sessionContext.setResponseResult(command);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".checkCaseAttFile() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".checkCaseAttFile():" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, new String[]{this.getMyName()}, e);
		}
		return sessionContext;
	}
	
	/**
	 * 
	 * Purpose:發送郵件
	 * @author HermanWang
	 * @param sessionContext
	 * @return
	 * @throws ServiceException
	 * @return SessionContext
	 */	
	public void send(final CaseManagerFormDTO caseManagerFormDTO) {
	//public SessionContext send(SessionContext sessionContext) {
		try{
			LOGGER.debug(this.getClass().getName(), ".send() --> is start... ");
			//CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			//SrmCaseHandleInfoDTO srmCaseHandleInfoDTO  = new SrmCaseHandleInfoDTO();
			//List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOList = new ArrayList<SrmCaseHandleInfoDTO>();
			//当前登录用户
			LogonUser logonUser= (LogonUser) caseManagerFormDTO.getLogonUser();
			//mail發送群組的list
			List<Parameter> mailGroupList = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.MAIL_GROUP.getCode(), null);
			//收件人
			String[] toMails = null;
			LOGGER.debug(this.getClass().getName(), ".send()--->", " toMail ="+caseManagerFormDTO.getSrmCaseTransactionDTO().getToMail());
			if(StringUtils.hasText(caseManagerFormDTO.getSrmCaseTransactionDTO().getToMail())) {
				toMails = caseManagerFormDTO.getSrmCaseTransactionDTO().getToMail().split(IAtomsConstants.MARK_SEMICOLON);
			}
			String toMialString = IAtomsConstants.MARK_EMPTY_STRING;
			String mailGroupString = IAtomsConstants.MARK_EMPTY_STRING;
			for(Parameter mailGroup : mailGroupList) {
				mailGroupString += mailGroup;
			}
			if(toMails != null) {
				for (String toMail : toMails) {
					if(mailGroupString.indexOf(toMail) > 0) {
						//替換tomail裡面的郵件群組名稱為具體的email
						String toMailValue = this.getValueByName(mailGroupList, toMail);
						List<MailListDTO> MailListDTOList = this.mailListDAO.listBy(toMailValue, null, -1, -1, null, null);
						for (MailListDTO mailListDTO : MailListDTOList) {
							toMialString += mailListDTO.getEmail() + IAtomsConstants.MARK_SEMICOLON;
						} 
					}  else {
						//替換tomail裡面的該特店的ao為具體的email
						if(IAtomsConstants.MERCHANT_AO.equals(toMail)) {
							List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(caseManagerFormDTO.getCaseId(), null);
							if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
								toMialString += srmCaseHandleInfoDTOs.get(0).getAoemail() + IAtomsConstants.MARK_SEMICOLON;
							}
						} else {
							if(toMail.indexOf("(") >0) {
								int count = toMail.indexOf("(");
								String emailName = toMail.substring(count, toMail.length());
								toMail = toMail.replace(emailName, "");
							}
							toMialString += toMail + IAtomsConstants.MARK_SEMICOLON;
						}
					}
				}			
			}
			//收件人mail
			caseManagerFormDTO.setToMail(toMialString);
			LOGGER.debug(this.getClass().getName(), ".send()--->", " toMail ="+toMialString);
			//srmCaseHandleInfoDTO.setToName(toName);
			//Task #2450 fromMail改為從配置文件獲取 2017-09-18
			String fromMail =  WfSystemConfigManager.getProperty(IAtomsConstants.MAIL, IAtomsConstants.MAIL_FROM_MAIL);
			if (StringUtils.hasText(fromMail)) {
				//發件人mail
				caseManagerFormDTO.setFromMail(fromMail);
			} else {
				return;
			}
			LOGGER.debug(this.getClass().getName(), ".send()--->", " fromMail ="+caseManagerFormDTO.getFromMail());
			//發件人名
			caseManagerFormDTO.setFromName(logonUser.getName());
			//邮件主题
			caseManagerFormDTO.setMailSubject(i18NUtil.getName(CaseManagerFormDTO.CASE_MANAGER_MAIL_SUBKECT));
			//邮件内容
			String[] mailContext = {IAtomsConstants.MARK_EMPTY_STRING}; 
			//還差好多屬性，可以根據文檔更新進行添加
			caseManagerFormDTO.setMailContext1(i18NUtil.getName(CaseManagerFormDTO.CASE_MANAGER_MAIL_SUBKECT, mailContext, Locale.CHINA));
			//srmCaseHandleInfoDTOList.add(srmCaseHandleInfoDTO);
			//caseManagerFormDTO.setSrmCaseHandleInfoDTOs(srmCaseHandleInfoDTOList);
			//sessionContext.setRequestParameter(caseManagerFormDTO);
			//如果選擇的email就發送郵件，else發送通知
			LOGGER.debug(this.getClass().getName(), ".send()--->", " noticeType ="+caseManagerFormDTO.getNoticeType());
			//Task #2989 將通知類型改為複選 可以既發送mail又發送會議通知  2017/12/25
			if (StringUtils.hasText(caseManagerFormDTO.getNoticeType()) && caseManagerFormDTO.getNoticeType().indexOf(IAtomsConstants.PARAM_REMIND) >= 0) {
				try {
					sendMetting(caseManagerFormDTO);
				} catch (Exception e) {
					LOGGER.error(this.getClass().getName()+"send.sendMetting() is error in Service : " + e, e);
				}
			}
			//Task #2989 mail通知人 有可能多與會議通知人員，所以后保存mail案件歷程 2017/12/25
			if (!IAtomsConstants.PARAM_REMIND.equals(caseManagerFormDTO.getNoticeType())) {
				try {
					sendEmail(caseManagerFormDTO);
				} catch (Exception e) {
					LOGGER.error(this.getClass().getName()+"send.sendEmail() is error in Service : " + e, e);
				}
			}
			//if(!IAtomsConstants.PARAM_REMIND.equals(caseManagerFormDTO.getNoticeType())){
				/*new Thread(
					new Runnable() {
						public void run() {
							sendEmail(sessionContext);
						}
					}
				).start();*/
				//sendEmail(caseManagerFormDTO);
			//} else {
				/*new Thread(
					new Runnable() {
						public void run() {
							sendMetting(sessionContext);
						}
					}
				).start();*/
				//sendMetting(caseManagerFormDTO);
			//}
			//Message msg = new Message(Message.STATUS.SUCCESS,IAtomsMessageCode.SENDEMAIL_SUCCESS);
			//sessionContext.setReturnMessage(msg);
			//return sessionContext;
		}catch(Exception e){
			LOGGER.error(this.getClass().getName()+".send() is error in Service:"+e, e);
			//throw new ServiceException(e);
		}
		return;
	}

	/**
	 * 
	 * Purpose: 发送邮件
	 * @author HermanWang
	 * @param sessionContext：下上文sessionContext
	 * @return SessionContext:上下文sessionContext
	 */
	private void sendEmail(CaseManagerFormDTO caseManagerFormDTO) throws ServiceException {
		try {
			LOGGER.debug(this.getClass().getName(), ".sendEmail() --> is start... ");
			//CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			if (caseManagerFormDTO == null){
				LOGGER.debug("Error is in CaseManagerService.sendEmail,Error——>caseManagerFormDTO is null");
				throw new ServiceException("formDTO is null");
			}else{
				if (caseManagerFormDTO.getSrmCaseTransactionDTO() != null){
					SrmCaseTransactionDTO srmCaseTransactionDTO = caseManagerFormDTO.getSrmCaseTransactionDTO();
					if(StringUtils.hasText(srmCaseTransactionDTO.getCaseId())){
						BimCompany company = null;
						List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(srmCaseTransactionDTO.getCaseId(), null);
						if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
							int count = 0;
							for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
								//发送人Mail地址
								String fromMailAddress = caseManagerFormDTO.getFromMail();
								//接收人Mail地址
								String toMailAddress = caseManagerFormDTO.getToMail();
								//抄送人員地址
								StringBuffer ccMailAddress = null;
								//派工（被指派的廠商；被指派的廠商部門；被指派的工程師；被指派的角色）
								//修改自動派工發mail地址錯誤的問題 2017/11/23
								if(IAtomsConstants.CASE_ACTION.DISPATCHING.getCode().equals(caseManagerFormDTO.getCaseActionId()) || IAtomsConstants.CASE_ACTION.AUTO_DISPATCHING.getCode().equals(caseManagerFormDTO.getCaseActionId())) {
									List<Parameter> admUserDTOList = null;
									//待派工到已派工
									if(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(caseManagerFormDTO.getCaseStatus())) {
										//istms有值，派給tms所有人
										if(IAtomsConstants.YES.equals(srmCaseHandleInfoDTO.getIsTms())) {
											admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(null, IAtomsConstants.ROLE_NAME_TMS, true, false);
										//派工部門有值，派給部門所有的部門agent
										} else if(StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentId())) {
											//Bug #2373 update by 2017/09/14
											if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDepartmentId())) {
												admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(null, IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode(), true, false);
											} else {
												admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(srmCaseHandleInfoDTO.getDepartmentId(), null, true, true);
											}
										} else {
											//Bug #2434 如果該廠商為cyber code=CYB 則mail發送給cyberAgent 2017/09/15
											company = this.companyDAO.findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
											if (company != null) {
												//如果維護廠商是cyber 則mail發送給cyberagent
												if (IAtomsConstants.PARAM_CYB.equals(company.getCompanyCode())) {
													admUserDTOList = this.admUserDAO.getDeptAgentByCompanyId(srmCaseHandleInfoDTO.getCompanyId(), true);
												} else {
													admUserDTOList = this.admUserDAO.getDeptAgentByCompanyId(srmCaseHandleInfoDTO.getCompanyId(), false);
												}
											}
										}
										for (Parameter admUserDTO : admUserDTOList) {
											toMailAddress += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
										}
										//去除漢字
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)) >= 0) {
											toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)
													+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
										}
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE)) >= 0) {
											toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE) 
													+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
										}
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT)) >= 0) {
											toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT) 
													+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
										}
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CONPANY)) >= 0) {
											toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CONPANY) 
													+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
										}
									} else {
										//被指派的工程師有值
										if(StringUtils.hasText(srmCaseHandleInfoDTO.getDispatchProcessUser())) {
											//前台通知頁面沒有刪除  “被指派的工程師”
											if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)) >= 0) {
												AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, srmCaseHandleInfoDTO.getDispatchProcessUser());
												toMailAddress += admUser.getEmail() + IAtomsConstants.MARK_SEMICOLON;
											}
										} else {
											//指派給qa/tms/客服
											if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptId()) 
													|| IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptId()) 
													|| IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptId())) {
												//前台通知頁面沒有刪除  “被指派的角色”
												if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE)) >= 0) {
													admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(null, srmCaseHandleInfoDTO.getDispatchDeptId(), true, false);
													for (Parameter admUserDTO : admUserDTOList) {
														toMailAddress += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
													}
												}
											//指派給部門 派給部門所有的部門agent
											} else if(StringUtils.hasText(srmCaseHandleInfoDTO.getDispatchDeptId())){
												if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT)) >= 0) {
													admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(srmCaseHandleInfoDTO.getDispatchDeptId(), null, true, true);
													for (Parameter admUserDTO : admUserDTOList) {
														toMailAddress += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
													}
												}
												//Bug #2373 update by 2017/09/14
											} else if(StringUtils.hasText(srmCaseHandleInfoDTO.getCompanyId())){
												/*if(IAtomsConstants.YES.equals(srmCaseHandleInfoDTO.getIsTms())) {
													admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(null, srmCaseHandleInfoDTO.getDispatchDeptId(), true, false);
												} else {*/
												if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CONPANY)) >= 0) {
													//Bug #2434 如果該廠商為cyber code=CYB 則mail發送給cyberAgent 2017/09/15
													company = this.companyDAO.findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
													if (company != null) {
														//如果維護廠商是cyber 則mail發送給cyberagent
														if (IAtomsConstants.PARAM_CYB.equals(company.getCompanyCode())) {
															admUserDTOList = this.admUserDAO.getDeptAgentByCompanyId(srmCaseHandleInfoDTO.getCompanyId(), true);
														} else {
															admUserDTOList = this.admUserDAO.getDeptAgentByCompanyId(srmCaseHandleInfoDTO.getCompanyId(), false);
														}
													}
													//派工廠商有值，派給廠商agent
													//admUserDTOList = this.admUserDAO.getDeptAgentByCompanyId(srmCaseHandleInfoDTO.getCompanyId(), false);
													//}
													for (Parameter admUserDTO : admUserDTOList) {
														toMailAddress += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
													}
												}
											}
										}
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)) >= 0) {
											toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)
													+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
										}
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE)) >= 0) {
											toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE) 
													+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
										}
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT)) >= 0) {
											toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT) 
													+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
										}
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CONPANY)) >= 0) {
											toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CONPANY) 
													+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
										}
									}
									//bug(2374)改為在完修時后發送（簽收 建案之客服；建案AO人員）
									//Task #2512 完修：建案之客服；建案AO人員 補上 線上排除、立即結案 也要，文件一併調整 update by 2017/09/28
								} else if(IAtomsConstants.CASE_ACTION.COMPLETE.getCode().equals(caseManagerFormDTO.getCaseActionId())
										|| IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode().equals(caseManagerFormDTO.getCaseActionId())
										|| IAtomsConstants.CASE_ACTION.IMMEDIATELY_CLOSING.getCode().equals(caseManagerFormDTO.getCaseActionId())) {
/*									AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, srmCaseHandleInfoDTO.getCreatedById());
									if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CREATE_USER)) >= 0) {
										toMailAddress += admUser.getEmail() + IAtomsConstants.MARK_SEMICOLON;
										toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CREATE_USER) 
												+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
									}*/
									// CR #2519 若通知AO 則通知案件特店表頭AOemail 若否則通知建案客服
									BimCompany tempCompany = this.companyDAO.findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCustomerId());
									AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, srmCaseHandleInfoDTO.getCreatedById());
									boolean isOk = false;
									if(tempCompany != null && IAtomsConstants.YES.equals(tempCompany.getIsNotifyAo())){
										// 判斷特店表頭是否有值
										if(StringUtils.hasText(srmCaseHandleInfoDTO.getMerchantHeaderId())){
											BimMerchantHeader merchantHeader = this.merchantHeaderDAO.findByPrimaryKey(BimMerchantHeader.class, srmCaseHandleInfoDTO.getMerchantHeaderId());
											if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CREATE_USER)) >= 0) {
												isOk = true;
//												toMailAddress += admUser.getEmail() + IAtomsConstants.MARK_SEMICOLON;
												// 增加判斷email是否為空
												if(merchantHeader != null && StringUtils.hasText(merchantHeader.getAoemail())){
													toMailAddress += merchantHeader.getAoemail() + IAtomsConstants.MARK_SEMICOLON;
												}
												toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CREATE_USER) 
														+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
											}
										}
										// CR #2519 通知AO 通知建案客服，CC通知AO報表設定之人
										//	BimCompany tempCompany = this.companyDAO.findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCustomerId());
										//	if(tempCompany != null && IAtomsConstants.YES.equals(tempCompany.getIsNotifyAo())){
												//Bug #2859 20 21 互換  2017/11/20
												List<ReportSettingDTO> reportSettingList = this.reportSettingDAO.getDetailList(srmCaseHandleInfoDTO.getCustomerId(), IAtomsConstants.REPORT_COMPLETE_TWENTY_ONE);
												if (!CollectionUtils.isEmpty(reportSettingList)) {
													ccMailAddress = new StringBuffer();
													for (ReportSettingDTO reportSettingDTO : reportSettingList) {
														if (StringUtils.hasText(reportSettingDTO.getRecipient())) {
															ccMailAddress.append(reportSettingDTO.getRecipient()).append(IAtomsConstants.MARK_SEMICOLON);
														}
														if (StringUtils.hasText(reportSettingDTO.getCopy())) {
															ccMailAddress.append(reportSettingDTO.getCopy()).append(IAtomsConstants.MARK_SEMICOLON);
														}
													}
												}
										//	}
									} 
									// 通知客服
									if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CREATE_USER)) >= 0 || isOk) {
										// 增加判斷email是否為空
										if(StringUtils.hasText(admUser.getEmail())){
											toMailAddress += admUser.getEmail() + IAtomsConstants.MARK_SEMICOLON;
										}
										toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CREATE_USER) 
												+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
									}
									//Task #2514 建案AO人員 不要了
									/*if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AO_NAME)) >= 0) {
										toMailAddress +=  srmCaseHandleInfoDTO.getAoemail() + IAtomsConstants.MARK_SEMICOLON;
										toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AO_NAME) 
												+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
									}*/
									//退回 ---催修----新增記錄   被指派的廠商部門；被指派的工程師
								} else if(IAtomsConstants.CASE_ACTION.RETREAT.getCode().equals(caseManagerFormDTO.getCaseActionId())
										|| IAtomsConstants.CASE_ACTION.RUSH_REPAIR.getCode().equals(caseManagerFormDTO.getCaseActionId())
										|| IAtomsConstants.CASE_ACTION.ADD_RECORD.getCode().equals(caseManagerFormDTO.getCaseActionId())) {
									//被指派的工程師有值
									if(StringUtils.hasText(srmCaseHandleInfoDTO.getDispatchProcessUser())) {
										//前台通知頁面沒有刪除  “被指派的工程師”
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)) >= 0) {
											AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, srmCaseHandleInfoDTO.getDispatchProcessUser());
											toMailAddress += admUser.getEmail() + IAtomsConstants.MARK_SEMICOLON;
										}
									} else {
										List<Parameter> admUserDTOList = null;
										//查出來部門agent
										//指派給qa/tms/客服
										if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptId()) 
												|| IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptId()) 
												|| IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptId())) {
											//前台通知頁面沒有刪除  “被指派的客服”
											if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE_CUSTOMER_SERVICE)) >= 0) {
												admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(null, srmCaseHandleInfoDTO.getDispatchDeptId(), true, false);
											}
										//指派給部門 派給部門所有的部門agent
										} else if(StringUtils.hasText(srmCaseHandleInfoDTO.getDispatchDeptId())){
											//前台通知頁面沒有刪除  “被指派的廠商部門”
											if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT)) >= 0) {
												admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(srmCaseHandleInfoDTO.getDispatchDeptId(), null, true, true);
											}
										} 
										//admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(srmCaseHandleInfoDTO.getDispatchDeptId(), null, true, true);
										if(!CollectionUtils.isEmpty(admUserDTOList)) {
											for (Parameter admUserDTO : admUserDTOList) {
												//user = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, admUserDTO.getValue().toString());
												toMailAddress += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
											}
										}
									}
									//前台通知頁面沒有刪除  “被指派的工程師”
									if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)) >= 0) {
										toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)
												+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
									}
									//前台通知頁面沒有刪除  “被指派的廠商部門”
									if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT)) >= 0) {
										toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT)
												+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
									}
									//前台通知頁面沒有刪除  “被指派的客服”
									if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE_CUSTOMER_SERVICE)) >= 0) {
										toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE_CUSTOMER_SERVICE)
												+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
									}
								}
								String tid = null;
								// 當前交易參數
								List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(srmCaseHandleInfoDTO.getCaseId(), null);
								tid = null;
								if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
									for(SrmCaseTransactionParameterDTO tempSrmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
										// 判斷有沒有CUP類別
										/*if(IAtomsConstants.TRANSACTION_CATEGORY.COMMON.getCode().equals(tempSrmCaseTransactionParameterDTO.getTransactionType())){
											tid = tempSrmCaseTransactionParameterDTO.getTid();
											break;
										}*/
										if(tempSrmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VM.getCode())
												|| tempSrmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJ.getCode())
												|| tempSrmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJU.getCode())){
											if(StringUtils.hasText(tempSrmCaseTransactionParameterDTO.getTid())){
												tid = tempSrmCaseTransactionParameterDTO.getTid();
												break;
											}
										}
									}
								}
								LOGGER.debug(this.getClass().getName(), ".sendEmail()--->", " toMailAddress ="+toMailAddress);
								LOGGER.debug(this.getClass().getName(), ".sendEmail()--->", " fromMailAddress ="+fromMailAddress);
								//toMailAddress = "hermanwang@cybersoft4u.com";
								if (StringUtils.hasText(fromMailAddress) && StringUtils.hasText(toMailAddress)){
									//SimpleDateFormat sf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
									//邮件主题模板
									String subjectTemplate = MailComponent.MAIL_TEMPLATE_ADD + CaseManagerFormDTO.SUBJECT_TEMPLATE;
									//邮件内容模板
									String textTemplate = MailComponent.MAIL_TEMPLATE_ADD + CaseManagerFormDTO.TEXT_TEMPLATE;
									Map<String, Object> variables = new HashMap<String, Object>();
									//接收人名称 
									//variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.TO_NAME.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getToName())?srmCaseHandleInfoDTO.getToName():"XX");
									//接收人Maill地址
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.TO_MAIL.getValue(), StringUtils.hasText(toMailAddress) ? toMailAddress : IAtomsConstants.MARK_EMPTY_STRING);
									//发件人Maill地址
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.FROM_MAIL.getValue(), StringUtils.hasText(caseManagerFormDTO.getFromMail()) ? caseManagerFormDTO.getFromMail() : IAtomsConstants.MARK_EMPTY_STRING);
									//发件人名称 
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.FROM_NAME.getValue(), StringUtils.hasText(caseManagerFormDTO.getFromName()) ? caseManagerFormDTO.getFromName() : IAtomsConstants.MARK_EMPTY_STRING);
									//抄送人mail地址
									if (ccMailAddress != null && ccMailAddress.length() != 0) {
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CC_MAIL.getValue(), ccMailAddress.substring(0, ccMailAddress.length()-1).toString());
									}
									//邮件主题 
									//variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MAIL_SUBJECT.getValue(), StringUtils.hasText(caseManagerFormDTO.getMailSubject())?caseManagerFormDTO.getMailSubject():IAtomsConstants.MARK_EMPTY_STRING);
									//邮件内容
									//variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MAIL_CONTEXT1.getValue(), StringUtils.hasText(caseManagerFormDTO.getMailContext1())?caseManagerFormDTO.getMailContext1():IAtomsConstants.MARK_EMPTY_STRING);
									//案件動作
									String actionName = "";
									List<Parameter> caseActionList = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.CASE_ACTION.getCode(), null);
									// 自動派工 actionName 改為 自動派工 --update by 2017/09/08
									if (StringUtils.hasText(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_AUTO_DISPATCHING)) && i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_AUTO_DISPATCHING).equals(caseManagerFormDTO.getCaseActionIdEmail())) {
										actionName = i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_AUTO_DISPATCHING);
									} else {
										for (Parameter parameter : caseActionList) {
											if(parameter.getValue().equals(caseManagerFormDTO.getCaseActionId())) {
												actionName = parameter.getName();
												break;
											}
										}
									}
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_STATUS.getValue(), actionName);
									//案件類別
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_CATEGORY.getValue(), i18NUtil.getName(srmCaseHandleInfoDTO.getCaseCategory()));
									//案件編號
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getCaseId()) ? srmCaseHandleInfoDTO.getCaseId() : IAtomsConstants.MARK_EMPTY_STRING);
									//Task #3089  主题所用 需求单号 当需求单号为空时，不要斜杠
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MAIN_REQUIREMENT_NO.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo()) ? IAtomsConstants.MARK_BACKSLASH + srmCaseHandleInfoDTO.getRequirementNo() : IAtomsConstants.MARK_EMPTY_STRING);
									if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
											|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())) {
										//裝機地址
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.INSTALLED_ADRESS.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledAdress()) ? srmCaseHandleInfoDTO.getInstalledAdress() : IAtomsConstants.MARK_EMPTY_STRING);
										variables.put(IAtomsConstants.ADDRESS, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_ADRESS));
									
										//聯絡人姓名
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_USER.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledContact()) ? srmCaseHandleInfoDTO.getInstalledContact() : IAtomsConstants.MARK_EMPTY_STRING);
										//聯絡人電話
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_USER_PHONE.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledContactPhone()) ? srmCaseHandleInfoDTO.getInstalledContactPhone() : IAtomsConstants.MARK_EMPTY_STRING);
									} else {
										//聯繫地址
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.INSTALLED_ADRESS.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getContactAddress()) ? srmCaseHandleInfoDTO.getContactAddress() : IAtomsConstants.MARK_EMPTY_STRING);
										variables.put(IAtomsConstants.ADDRESS, i18NUtil.getName(IAtomsConstants.PARAM_CONTACT_ADDRESS));
										
										//聯絡人姓名
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_USER.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getContactUser()) ? srmCaseHandleInfoDTO.getContactUser() : IAtomsConstants.MARK_EMPTY_STRING);
										//聯絡人電話
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_USER_PHONE.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getContactUserPhone()) ? srmCaseHandleInfoDTO.getContactUserPhone() : IAtomsConstants.MARK_EMPTY_STRING);
									}
									//需求單號
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.REQUIREMENT_NO.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo()) ? srmCaseHandleInfoDTO.getRequirementNo() : IAtomsConstants.MARK_EMPTY_STRING);
									//客戶名稱
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CUSTOMER_NAME.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getCustomerName()) ? srmCaseHandleInfoDTO.getCustomerName() : IAtomsConstants.MARK_EMPTY_STRING);
									//進見時間
									LOGGER.debug(this.getClass().getName(), ".sendEmail()--->", " 進見時間 ="+srmCaseHandleInfoDTO.getCreatedDate());
									if(srmCaseHandleInfoDTO.getCreatedDate() != null) {
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CREATED_DATE.getValue(), DateTimeUtils.toString( srmCaseHandleInfoDTO.getCreatedDate(),  DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH));
									} else {
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CREATED_DATE.getValue(), IAtomsConstants.MARK_EMPTY_STRING);
									}
									//行動電話
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PHONE.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getPhone()) ? srmCaseHandleInfoDTO.getPhone() : IAtomsConstants.MARK_EMPTY_STRING);
									//dtid
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.DTID.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) ? srmCaseHandleInfoDTO.getDtid() : IAtomsConstants.MARK_EMPTY_STRING);
									variables.put("subjectDtid", StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) ? IAtomsConstants.MARK_BACKSLASH + srmCaseHandleInfoDTO.getDtid() : IAtomsConstants.MARK_EMPTY_STRING);
									//tid
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.TID.getValue(), StringUtils.hasText(tid) ? tid: IAtomsConstants.MARK_EMPTY_STRING);
									if(StringUtils.hasText(srmCaseHandleInfoDTO.getMerchantCode())) {
										BimMerchant Merchant = this.merchantDAO.findByPrimaryKey(BimMerchant.class, srmCaseHandleInfoDTO.getMerchantCode());
										srmCaseHandleInfoDTO.setMerchantCode(Merchant.getMerchantCode());
									}
									//特店代號
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MERCHANT_CODE.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getMerchantCode()) ? srmCaseHandleInfoDTO.getMerchantCode() : IAtomsConstants.MARK_EMPTY_STRING);
									//特店名稱
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MERCHANT_NAME.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getMerchantName()) ? srmCaseHandleInfoDTO.getMerchantName() : IAtomsConstants.MARK_EMPTY_STRING);
									//表頭
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MERCHANT_HEADER_NAME.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getMerchantHeaderName()) ? srmCaseHandleInfoDTO.getMerchantHeaderName() : IAtomsConstants.MARK_EMPTY_STRING);
									//設備名稱
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.EDC_TYPE.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getEdcTypeName()) ? srmCaseHandleInfoDTO.getEdcTypeName() : IAtomsConstants.MARK_EMPTY_STRING);
									//預計完成日
									LOGGER.debug(this.getClass().getName(), ".sendEmail()--->", " srmCaseHandleInfoDTO.getAcceptableFinishDate() ="+srmCaseHandleInfoDTO.getAcceptableFinishDate());
									if(srmCaseHandleInfoDTO.getAcceptableFinishDate() != null) {
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.ACCEPTABLE_FINISH_DATE.getValue(), DateTimeUtils.toString( srmCaseHandleInfoDTO.getAcceptableFinishDate(),  DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH));
									} else {
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.ACCEPTABLE_FINISH_DATE.getValue(), IAtomsConstants.MARK_EMPTY_STRING);
									}
									LOGGER.debug(this.getClass().getName(), ".sendEmail()--->", " srmCaseHandleInfoDTO.getCompleteDate() ="+srmCaseHandleInfoDTO.getCompleteDate());
									if(srmCaseHandleInfoDTO.getCompleteDate() != null) {
										//實際完成日
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPLETE_DATE.getValue(), DateTimeUtils.toString( srmCaseHandleInfoDTO.getCompleteDate(),  DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH));
									} else {
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPLETE_DATE.getValue(), IAtomsConstants.MARK_EMPTY_STRING);
									}
									//需求描述
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.DESCRIPTION.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getDescription()) ? srmCaseHandleInfoDTO.getDescription().replaceAll(IAtomsConstants.RETURN_LINE_FEED, "<br>" + 
									IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP).replaceAll(IAtomsConstants.MARK_SPACE, IAtomsConstants.MARK_NBSP)  : IAtomsConstants.MARK_EMPTY_STRING);
									//處理人員
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.UPDATED_BY_NAME.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getUpdatedByName()) ? srmCaseHandleInfoDTO.getUpdatedByName() : IAtomsConstants.MARK_EMPTY_STRING);
									//處理說明
									//Task #3269 結案匯入 說明可以不同
									if (IAtomsConstants.CASE_ACTION.IMMEDIATELY_CLOSING.getCode().equals(caseManagerFormDTO.getCaseActionId())
													&& IAtomsConstants.PARAM_YES.equals(caseManagerFormDTO.getUploadCoordinatedCompletionFlag())) {
										List<SrmCaseTransactionDTO> srmCaseTransactionDTOList = caseManagerFormDTO.getSrmCaseTransactionDTOList();
										for (SrmCaseTransactionDTO caseTransactionDTO : srmCaseTransactionDTOList) {
											if (srmCaseHandleInfoDTO.getCaseId().equals(caseTransactionDTO.getCaseId())) {
												srmCaseTransactionDTO.setDescription(caseTransactionDTO.getDescription());
												break;
											}
										}
									}
									//Task #3321 物流編號添加超鏈接
									String description = srmCaseTransactionDTO.getDescription();
									if(description != null){
										if(description.indexOf(IAtomsConstants.MARK_DISTRIBUTION) != -1 ){
											String vendorEmail = null;
											SrmCaseTransactionDTO caseTransactionDTO = this.srmCaseTransactionDAO.getLogisticsVendor(srmCaseTransactionDTO.getTransactionId());
											if(caseTransactionDTO != null) {
												vendorEmail = caseTransactionDTO.getLogisticsVendorEmail();
											}
											//String logisticsVendor = srmCaseTransactionDTO.getLogisticsVendor();
											String[] arr = description.split(IAtomsConstants.MARK_DISTRIBUTION);
											description = arr[0] + IAtomsConstants.MARK_DISTRIBUTION + IAtomsConstants.MARK_A_LEFT_ONE
													+ vendorEmail + IAtomsConstants.MARK_A_LEFT_TWO + arr[1] + IAtomsConstants.MARK_A_RIGHT;
											description = description.replaceAll(IAtomsConstants.MARK_WRAP, "<br>" +
													IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP).replaceAll(IAtomsConstants.MARK_SPACE, IAtomsConstants.MARK_NBSP).replaceAll(IAtomsConstants.MARK_SPACE_STR, IAtomsConstants.MARK_SPACE);
										}else{
											description = description.replaceAll(IAtomsConstants.MARK_WRAP, "<br>" +
													IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP).replaceAll(IAtomsConstants.MARK_SPACE, IAtomsConstants.MARK_NBSP);
										}
									}else{
										description = IAtomsConstants.MARK_NBSP;
									}
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.TRANSACTION_DESCRIPTION.getValue(), description);
//									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.TRANSACTION_DESCRIPTION.getValue(), StringUtils.hasText(description) ? description.replaceAll(IAtomsConstants.MARK_WRAP, "<br>" +
//											IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP + IAtomsConstants.MARK_NBSP).replaceAll(IAtomsConstants.MARK_SPACE, IAtomsConstants.MARK_NBSP) : IAtomsConstants.MARK_EMPTY_STRING);
									//去除重複mail地址 2017/10/24
									try {
										toMailAddress = IAtomsUtils.removeDuplicate(toMailAddress, IAtomsConstants.MARK_SEMICOLON);
									} catch (Exception e) {
										LOGGER.debug("Error is in CaseManagerService.removeDuplicate,Error——>toMailAddress ", toMailAddress);
									}
									LOGGER.debug(this.getClass().getName(), "mailComponent.mailTo() --> is start... ");
									this.mailComponent.mailTo(fromMailAddress, toMailAddress, subjectTemplate, textTemplate, variables);
									if(count == 0) {
										String[] toEmails = toMailAddress.split(IAtomsConstants.MARK_SEMICOLON);
										String tempEmail = IAtomsConstants.MARK_EMPTY_STRING;
										for (String toEmail : toEmails) {
											if(StringUtils.hasText(toEmail)) {
												if(!StringUtils.hasText(tempEmail)) {
													tempEmail = toEmail + IAtomsConstants.MARK_SEMICOLON;
												} else {
													tempEmail = tempEmail + IAtomsConstants.RETURN_LINE_FEED + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + 
															IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + 
															IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE +toEmail + IAtomsConstants.MARK_SEMICOLON;
												}
											}
										}
										toMailAddress = tempEmail;
										count ++;
										String caseTransactionId = caseManagerFormDTO.getCaseTransactionId();
										String[] caseTransactionIds = null;
										if(StringUtils.hasText(caseTransactionId)) {
											caseTransactionIds = caseTransactionId.split(IAtomsConstants.MARK_SEPARATOR);
											if(caseTransactionIds != null) {
												for (String transactionId : caseTransactionIds) {
													SrmCaseTransaction caseTransaction = this.srmCaseTransactionDAO.findByPrimaryKey(SrmCaseTransaction.class, transactionId);
													//抄送人mail地址
													String ccMail = IAtomsConstants.MARK_EMPTY_STRING;
													if (variables.get("ccMail") != null) {
														String ccMails = (String)variables.get("ccMail");
														String[] ccEmails = ccMails.split(IAtomsConstants.MARK_SEMICOLON);
														String tempCcMail = IAtomsConstants.MARK_EMPTY_STRING;
														for (String string : ccEmails) {
															if(StringUtils.hasText(string)) {
																if(!StringUtils.hasText(tempCcMail)) {
																	tempCcMail = string + IAtomsConstants.MARK_SEMICOLON;
																} else {
																	tempCcMail = tempCcMail + IAtomsConstants.RETURN_LINE_FEED + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + 
																			IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE +string + IAtomsConstants.MARK_SEMICOLON;
																}
															}
														}
													
														ccMail = IAtomsConstants.RETURN_LINE_FEED + "Cc:" + tempCcMail;
													}
													caseTransaction.setMailInfo(i18NUtil.getName(IAtomsConstants.EMAIL_TIME)+ DateTimeUtils.toString(DateTimeUtils.getCurrentTimestamp(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH) 
															+ IAtomsConstants.RETURN_LINE_FEED + "收件人:" + toMailAddress + ccMail);
													this.srmCaseTransactionDAO.getDaoSupport().saveOrUpdate(caseTransaction);
													this.srmCaseTransactionDAO.getDaoSupport().flush();
												}
											}
										}
									}
								}
							}
						}
					}
				}else{
					LOGGER.debug("Error is in CaseManagerService.sendEmail,Error——>toMail or FromMail is null");
					throw new ServiceException("SrmCaseHandleInfoDTO is null");
				}
			}
		} catch (ServiceException e) {
			LOGGER.error(this.getClass().getSimpleName() + ".send()" + e, e);
			//sessionContext.setReturnMessage(new Message(Message.STATUS.FAILURE));
			throw new ServiceException(e);
		}
		return;
	}
	/**
	 * Purpose:發送會議通知
	 * @author HermanWang
	 * @param sessionContext ：上下文sessionContext
	 * @return SessionContext ：上下文sessionContext
	 */
	private void sendMetting(CaseManagerFormDTO caseManagerFormDTO) {
		try{
			LOGGER.debug(this.getClass().getName(), "sendMetting() --> is start... ");
			//CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			if (caseManagerFormDTO == null){
				LOGGER.debug("Error is in CaseManagerService.sendEmail,Error——>caseManagerFormDTO is null");
				throw new ServiceException("formDTO is null");
			} else {
				if (caseManagerFormDTO.getSrmCaseTransactionDTO() != null){
					SrmCaseTransactionDTO srmCaseTransactionDTO = caseManagerFormDTO.getSrmCaseTransactionDTO();
					if(StringUtils.hasText(srmCaseTransactionDTO.getCaseId())){
						BimCompany company = null;
						//查詢案件的list(每筆案件發送一次)
						List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(srmCaseTransactionDTO.getCaseId(), null);
						if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
							int count = 0;
							for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
								//from mail
								String fromMailAddress = caseManagerFormDTO.getFromMail();
								LOGGER.debug(this.getClass().getName(), ".sendMetting()--->", " fromMailAddress ="+fromMailAddress);
								//接收人Mail地址
								String toMailAddress = IAtomsConstants.MARK_EMPTY_STRING;
								toMailAddress = caseManagerFormDTO.getToMail();
								//派工（被指派的廠商；被指派的廠商部門；被指派的工程師；被指派的角色）
								//修改自動派工發mail地址錯誤的問題 2017/11/23
								if(IAtomsConstants.CASE_ACTION.DISPATCHING.getCode().equals(caseManagerFormDTO.getCaseActionId()) || IAtomsConstants.CASE_ACTION.AUTO_DISPATCHING.getCode().equals(caseManagerFormDTO.getCaseActionId())) {
									List<Parameter> admUserDTOList = null;
									//待派工到已派工
									if(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(caseManagerFormDTO.getCaseStatus())) {
										//istms有值，派給tms所有人
										if(IAtomsConstants.YES.equals(srmCaseHandleInfoDTO.getIsTms())) {
											admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(null, IAtomsConstants.ROLE_NAME_TMS, true, false);
										//派工部門有值，派給部門所有的部門agent
										} else if(StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentId())) {
											admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(srmCaseHandleInfoDTO.getDepartmentId(), null, true, true);
										} else {
											//Bug #2434 如果該廠商為cyber code=CYB 則mail發送給cyberAgent 2017/09/15
											company = this.companyDAO.findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
											if (company != null) {
												//如果維護廠商是cyber 則mail發送給cyberagent
												if (IAtomsConstants.PARAM_CYB.equals(company.getCompanyCode())) {
													admUserDTOList = this.admUserDAO.getDeptAgentByCompanyId(srmCaseHandleInfoDTO.getCompanyId(), true);
												} else {
													admUserDTOList = this.admUserDAO.getDeptAgentByCompanyId(srmCaseHandleInfoDTO.getCompanyId(), false);
												}
											}
											//admUserDTOList = this.admUserDAO.getDeptAgentByCompanyId(srmCaseHandleInfoDTO.getCompanyId(), false);
										}
										for (Parameter admUserDTO : admUserDTOList) {
											toMailAddress += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
										}
									} else {
										//被指派的工程師有值
										if(StringUtils.hasText(srmCaseHandleInfoDTO.getDispatchProcessUser())) {
											//前台通知頁面沒有刪除  “被指派的工程師”
											if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)) >= 0) {
												AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, srmCaseHandleInfoDTO.getDispatchProcessUser());
												toMailAddress += admUser.getEmail() + IAtomsConstants.MARK_SEMICOLON;
											}
										} else {
											//指派給qa/tms/客服
											if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptId()) 
													|| IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptId()) 
													|| IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptId())) {
												//前台通知頁面沒有刪除  “被指派的角色”
												if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE)) >= 0) {
													admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(null, srmCaseHandleInfoDTO.getDispatchDeptId(), true, false);
													for (Parameter admUserDTO : admUserDTOList) {
														toMailAddress += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
													}
												}
											//指派給部門 派給部門所有的部門agent
											} else if(StringUtils.hasText(srmCaseHandleInfoDTO.getDispatchDeptId())){
												if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT)) >= 0) {
													admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(srmCaseHandleInfoDTO.getDispatchDeptId(), null, true, true);
													for (Parameter admUserDTO : admUserDTOList) {
														toMailAddress += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
													}
												}
												//Bug #2373 update by 2017/09/14
											} else if(StringUtils.hasText(srmCaseHandleInfoDTO.getCompanyId())){
												/*if(IAtomsConstants.YES.equals(srmCaseHandleInfoDTO.getIsTms())) {
													admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(null, srmCaseHandleInfoDTO.getDispatchDeptId(), true, false);
												} else {*/
												//Bug #2434 如果該廠商為cyber code=CYB 則mail發送給cyberAgent 2017/09/15
												company = this.companyDAO.findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
												if (company != null) {
													//如果維護廠商是cyber 則mail發送給cyberagent
													if (IAtomsConstants.PARAM_CYB.equals(company.getCompanyCode())) {
														admUserDTOList = this.admUserDAO.getDeptAgentByCompanyId(srmCaseHandleInfoDTO.getCompanyId(), true);
													} else {
														admUserDTOList = this.admUserDAO.getDeptAgentByCompanyId(srmCaseHandleInfoDTO.getCompanyId(), false);
													}
												}
												//派工廠商有值，派給廠商agent
												//admUserDTOList = this.admUserDAO.getDeptAgentByCompanyId(srmCaseHandleInfoDTO.getCompanyId(), false);
												//}
												for (Parameter admUserDTO : admUserDTOList) {
													toMailAddress += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
												}
											}
										}
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)) >= 0) {
											toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)
													+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
										}
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE)) >= 0) {
											toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE) 
													+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
										}
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT)) >= 0) {
											toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT) 
													+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
										}
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CONPANY)) >= 0) {
											toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CONPANY) 
													+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
										}
									}
									//bug(2387)改為完修 建案之客服；建案AO人員(簽收 建案之客服；建案AO人員)
									//Task #2512 完修：建案之客服；建案AO人員 補上 線上排除、立即結案 也要，文件一併調整 update by 2017/09/28
								} else if(IAtomsConstants.CASE_ACTION.COMPLETE.getCode().equals(caseManagerFormDTO.getCaseActionId())
										|| IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode().equals(caseManagerFormDTO.getCaseActionId())
										|| IAtomsConstants.CASE_ACTION.IMMEDIATELY_CLOSING.getCode().equals(caseManagerFormDTO.getCaseActionId())) {
									AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, srmCaseHandleInfoDTO.getCreatedById());
									if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CREATE_USER)) >= 0) {
										//toMailAddress += admUser.getEmail() + IAtomsConstants.MARK_SEMICOLON + srmCaseHandleInfoDTO.getAoemail();
										toMailAddress += admUser.getEmail();
										toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CREATE_USER) 
												+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
									}
									//Bug #2859 20 21 互換  2017/11/20
									List<ReportSettingDTO> reportSettingList = this.reportSettingDAO.getDetailList(srmCaseHandleInfoDTO.getCustomerId(), IAtomsConstants.REPORT_COMPLETE_TWENTY_ONE);
									if (!CollectionUtils.isEmpty(reportSettingList)) {
										for (ReportSettingDTO reportSettingDTO : reportSettingList) {
											if (!toMailAddress.substring(toMailAddress.length() - 1, toMailAddress.length()).equals(IAtomsConstants.MARK_SEMICOLON) ){
												toMailAddress += IAtomsConstants.MARK_SEMICOLON;
											}
											if (StringUtils.hasText(reportSettingDTO.getRecipient())) {
												toMailAddress = toMailAddress + reportSettingDTO.getRecipient() + IAtomsConstants.MARK_SEMICOLON;
												//ccMailAddress.append(reportSettingDTO.getRecipient()).append(IAtomsConstants.MARK_SEMICOLON);
											}
											if (StringUtils.hasText(reportSettingDTO.getCopy())) {
												toMailAddress = toMailAddress + reportSettingDTO.getCopy() + IAtomsConstants.MARK_SEMICOLON;
												//ccMailAddress.append(reportSettingDTO.getCopy()).append(IAtomsConstants.MARK_SEMICOLON);
											}
										}
										if (!toMailAddress.substring(toMailAddress.length() - 1, toMailAddress.length()).equals(IAtomsConstants.MARK_SEMICOLON) ){
											toMailAddress += IAtomsConstants.MARK_SEMICOLON;
										}
									}
									//Task #2514 建案AO人員 不要了
									/*if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AO_NAME)) >= 0) {
										toMailAddress +=  srmCaseHandleInfoDTO.getAoemail() + IAtomsConstants.MARK_SEMICOLON;
										toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AO_NAME) 
												+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
									}*/
									//退回 ---催修----新增記錄   被指派的廠商部門；被指派的工程師
								} else if(IAtomsConstants.CASE_ACTION.RETREAT.getCode().equals(caseManagerFormDTO.getCaseActionId())
										|| IAtomsConstants.CASE_ACTION.RUSH_REPAIR.getCode().equals(caseManagerFormDTO.getCaseActionId())
										|| IAtomsConstants.CASE_ACTION.ADD_RECORD.getCode().equals(caseManagerFormDTO.getCaseActionId())) {
									//被指派的工程師有值
									if(StringUtils.hasText(srmCaseHandleInfoDTO.getDispatchProcessUser())) {
										//前台通知頁面沒有刪除  “被指派的工程師”
										if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)) >= 0) {
											AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, srmCaseHandleInfoDTO.getDispatchProcessUser());
											toMailAddress += admUser.getEmail() + IAtomsConstants.MARK_SEMICOLON;
										}
									} else {
										List<Parameter> admUserDTOList = null;
										//查出來部門agent
										//指派給qa/tms/客服
										if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptId()) 
												|| IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptId()) 
												|| IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptId())) {
											//前台通知頁面沒有刪除  “被指派的客服”
											if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE_CUSTOMER_SERVICE)) >= 0) {
												admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(null, srmCaseHandleInfoDTO.getDispatchDeptId(), true, false);
											}
										//指派給部門 派給部門所有的部門agent
										} else if(StringUtils.hasText(srmCaseHandleInfoDTO.getDispatchDeptId())){
											//前台通知頁面沒有刪除  “被指派的廠商部門”
											if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT)) >= 0) {
												admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(srmCaseHandleInfoDTO.getDispatchDeptId(), null, true, true);
											}
										} 
										//admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(srmCaseHandleInfoDTO.getDispatchDeptId(), null, true, true);
										if(!CollectionUtils.isEmpty(admUserDTOList)) {
											for (Parameter admUserDTO : admUserDTOList) {
												//user = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, admUserDTO.getValue().toString());
												toMailAddress += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
											}
										}
									}
									//前台通知頁面沒有刪除  “被指派的工程師”
									if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)) >= 0) {
										toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_AGENT)
												+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
									}
									//前台通知頁面沒有刪除  “被指派的廠商部門”
									if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT)) >= 0) {
										toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_DEPT)
												+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
									}
									//前台通知頁面沒有刪除  “被指派的客服”
									if(toMailAddress.indexOf(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE_CUSTOMER_SERVICE)) >= 0) {
										toMailAddress = toMailAddress.replace(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_ROLE_CUSTOMER_SERVICE)
												+ IAtomsConstants.MARK_SEMICOLON, IAtomsConstants.MARK_EMPTY_STRING);
									}
								}
								String tid = null;
								// 當前交易參數
								List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(srmCaseHandleInfoDTO.getCaseId(), null);
								tid = null;
								if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
									for(SrmCaseTransactionParameterDTO tempSrmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
										// 判斷有沒有CUP類別
										/*if(IAtomsConstants.TRANSACTION_CATEGORY.COMMON.getCode().equals(tempSrmCaseTransactionParameterDTO.getTransactionType())){
											tid = tempSrmCaseTransactionParameterDTO.getTid();
											break;
										}*/
										if(tempSrmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VM.getCode())
												|| tempSrmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJ.getCode())
												|| tempSrmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJU.getCode())){
											if(StringUtils.hasText(tempSrmCaseTransactionParameterDTO.getTid())){
												tid = tempSrmCaseTransactionParameterDTO.getTid();
												break;
											}
										}
									}
								}
								//toMailAddress = "hermanwang@cybersoft4u.com";
								//會議開始時間
								String meetingStartTime = caseManagerFormDTO.getRemindStart();
								//會議結束時間
								String meetingEndTime = caseManagerFormDTO.getRemindEnd();
								//拼接成會議通知需要的格式 20170306T125000
								//通知開始時間
								String meetingStartTimeDate = meetingStartTime.replace(IAtomsConstants.MARK_BACKSLASH, IAtomsConstants.MARK_EMPTY_STRING).replace(IAtomsConstants.MARK_SPACE, IAtomsConstants.COLUMN_T).replace(IAtomsConstants.MARK_COLON, IAtomsConstants.MARK_EMPTY_STRING).concat(IAtomsConstants.LEAVE_CASE_STATUS_ZERO).concat(IAtomsConstants.LEAVE_CASE_STATUS_ZERO);
								LOGGER.debug(this.getClass().getName(), ".sendMetting()--->", " meetingStartTimeDate ="+meetingStartTimeDate);
								//通知結束時間
								String meetingEndTimeDate = meetingEndTime.replace(IAtomsConstants.MARK_BACKSLASH, IAtomsConstants.MARK_EMPTY_STRING).replace(IAtomsConstants.MARK_SPACE, IAtomsConstants.COLUMN_T).replace(IAtomsConstants.MARK_COLON, IAtomsConstants.MARK_EMPTY_STRING).concat(IAtomsConstants.LEAVE_CASE_STATUS_ZERO).concat(IAtomsConstants.LEAVE_CASE_STATUS_ZERO);
								LOGGER.debug(this.getClass().getName(), ".sendMetting()--->", " meetingEndTimeDate ="+meetingEndTimeDate);
								LOGGER.debug(this.getClass().getName(), ".sendMetting()--->", " toMailAddress ="+toMailAddress);
								LOGGER.debug(this.getClass().getName(), ".sendMetting()--->", " fromMailAddress ="+fromMailAddress);
								if (StringUtils.hasText(fromMailAddress) && StringUtils.hasText(toMailAddress)){
									//SimpleDateFormat sf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
									//邮件主题模板
									String subjectTemplate = MailComponent.MAIL_TEMPLATE_ADD + CaseManagerFormDTO.MEETING_NOTICE_SUBJECT_TEMPLATE;
									//邮件内容模板
									String textTemplate = MailComponent.MAIL_TEMPLATE_ADD + CaseManagerFormDTO.MEETING_NOTICE_TEXT_TEMPLATE;
									Map<String, Object> variables = new HashMap<String, Object>();
									//接收人Maill地址
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.TO_MAIL.getValue(), StringUtils.hasText(caseManagerFormDTO.getToMail()) ? caseManagerFormDTO.getToMail() : IAtomsConstants.MARK_EMPTY_STRING);
									//发件人Maill地址
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.FROM_MAIL.getValue(), StringUtils.hasText(caseManagerFormDTO.getFromMail()) ? caseManagerFormDTO.getFromMail() : IAtomsConstants.MARK_EMPTY_STRING);
									//发件人名称 
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.FROM_NAME.getValue(), StringUtils.hasText(caseManagerFormDTO.getFromName()) ? caseManagerFormDTO.getFromName() : IAtomsConstants.MARK_EMPTY_STRING);
									//抄送人mail地址
									/*if (ccMailAddress != null && ccMailAddress.length() != 0) {
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CC_MAIL.getValue(), ccMailAddress.substring(0, ccMailAddress.length()-1).toString());
									}*/
									//案件動作
									String actionName = "";
									List<Parameter> caseActionList = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.CASE_ACTION.getCode(), null);
									//Task #2542
									if (StringUtils.hasText(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_AUTO_DISPATCHING)) && i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_AUTO_DISPATCHING).equals(caseManagerFormDTO.getCaseActionIdEmail())) {
										actionName = i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_AUTO_DISPATCHING);
									} else {
										for (Parameter parameter : caseActionList) {
											if(parameter.getValue().equals(caseManagerFormDTO.getCaseActionId())) {
												actionName = parameter.getName();
												break;
											}
										}
									}
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_STATUS.getValue(), actionName);
									//案件類別
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_CATEGORY.getValue(), i18NUtil.getName(srmCaseHandleInfoDTO.getCaseCategory()));
									//案件編號
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getCaseId()) ? srmCaseHandleInfoDTO.getCaseId() : IAtomsConstants.MARK_EMPTY_STRING);
									//Task #3089  主题所用 需求单号 当需求单号为空时，不要斜杠
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MAIN_REQUIREMENT_NO.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo()) ? IAtomsConstants.MARK_BACKSLASH + srmCaseHandleInfoDTO.getRequirementNo() : IAtomsConstants.MARK_EMPTY_STRING);
									variables.put("mailDtid", StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) ? IAtomsConstants.MARK_BACKSLASH + srmCaseHandleInfoDTO.getDtid() : IAtomsConstants.MARK_EMPTY_STRING);
									if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
											|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())) {
										//裝機地址
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.INSTALLED_ADRESS.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledAdress()) ? srmCaseHandleInfoDTO.getInstalledAdress() : IAtomsConstants.MARK_EMPTY_STRING);
										variables.put(IAtomsConstants.ADDRESS, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_ADRESS));
										
										//聯絡人姓名
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_USER.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledContact()) ? srmCaseHandleInfoDTO.getInstalledContact() : IAtomsConstants.MARK_EMPTY_STRING);
										//聯絡人電話
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_USER_PHONE.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledContactPhone()) ? srmCaseHandleInfoDTO.getInstalledContactPhone() : IAtomsConstants.MARK_EMPTY_STRING);
									} else {
										//聯繫地址
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.INSTALLED_ADRESS.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getContactAddress()) ? srmCaseHandleInfoDTO.getContactAddress() : IAtomsConstants.MARK_EMPTY_STRING);
										variables.put(IAtomsConstants.ADDRESS, i18NUtil.getName(IAtomsConstants.PARAM_CONTACT_ADDRESS));
										
										//聯絡人姓名
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_USER.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getContactUser()) ? srmCaseHandleInfoDTO.getContactUser() : IAtomsConstants.MARK_EMPTY_STRING);
										//聯絡人電話
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_USER_PHONE.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getContactUserPhone()) ? srmCaseHandleInfoDTO.getContactUserPhone() : IAtomsConstants.MARK_EMPTY_STRING);
									}
									//需求單號
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.REQUIREMENT_NO.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo()) ? srmCaseHandleInfoDTO.getRequirementNo() : IAtomsConstants.MARK_EMPTY_STRING);
									//客戶名稱
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CUSTOMER_NAME.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getCustomerName()) ? srmCaseHandleInfoDTO.getCustomerName() : IAtomsConstants.MARK_EMPTY_STRING);
									//進見時間
									if(srmCaseHandleInfoDTO.getCreatedDate() != null) {
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CREATED_DATE.getValue(), DateTimeUtils.toString( srmCaseHandleInfoDTO.getCreatedDate(),  DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH));
									} else {
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CREATED_DATE.getValue(), IAtomsConstants.MARK_EMPTY_STRING);
									}
									//行動電話
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PHONE.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getPhone()) ? srmCaseHandleInfoDTO.getPhone() : IAtomsConstants.MARK_EMPTY_STRING);
									//dtid
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.DTID.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) ? srmCaseHandleInfoDTO.getDtid() : IAtomsConstants.MARK_EMPTY_STRING);
									//tid
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.TID.getValue(), StringUtils.hasText(tid) ? tid : IAtomsConstants.MARK_EMPTY_STRING);
									if(StringUtils.hasText(srmCaseHandleInfoDTO.getMerchantCode())) {
										BimMerchant Merchant = this.merchantDAO.findByPrimaryKey(BimMerchant.class, srmCaseHandleInfoDTO.getMerchantCode());
										srmCaseHandleInfoDTO.setMerchantCode(Merchant.getMerchantCode());
									}
									//特店代號
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MERCHANT_CODE.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getMerchantCode()) ? srmCaseHandleInfoDTO.getMerchantCode() : IAtomsConstants.MARK_EMPTY_STRING);
									//特店名稱
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MERCHANT_NAME.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getMerchantName()) ? srmCaseHandleInfoDTO.getMerchantName() : IAtomsConstants.MARK_EMPTY_STRING);
									//表頭
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MERCHANT_HEADER_NAME.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getMerchantHeaderName()) ? srmCaseHandleInfoDTO.getMerchantHeaderName() : IAtomsConstants.MARK_EMPTY_STRING);
									//設備名稱
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.EDC_TYPE.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getEdcTypeName()) ? srmCaseHandleInfoDTO.getEdcTypeName() : IAtomsConstants.MARK_EMPTY_STRING);
									//預計完成日
									if(srmCaseHandleInfoDTO.getAcceptableFinishDate() != null) {
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.ACCEPTABLE_FINISH_DATE.getValue(), DateTimeUtils.toString( srmCaseHandleInfoDTO.getAcceptableFinishDate(),  DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH));
									} else {
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.ACCEPTABLE_FINISH_DATE.getValue(), IAtomsConstants.MARK_EMPTY_STRING);
									}
									if(srmCaseHandleInfoDTO.getCompleteDate() != null) {
										//實際完成日
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPLETE_DATE.getValue(), DateTimeUtils.toString( srmCaseHandleInfoDTO.getCompleteDate(),  DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH));
									} else {
										variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPLETE_DATE.getValue(), IAtomsConstants.MARK_EMPTY_STRING);
									}
									//需求描述
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.DESCRIPTION.getValue(),
												StringUtils.hasText(srmCaseHandleInfoDTO.getDescription()) ? srmCaseHandleInfoDTO.getDescription().replaceAll(IAtomsConstants.RETURN_LINE_FEED, "<caseMeetingBr>"): IAtomsConstants.MARK_EMPTY_STRING);
									//處理人員
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.UPDATED_BY_NAME.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getUpdatedByName()) ? srmCaseHandleInfoDTO.getUpdatedByName() : IAtomsConstants.MARK_EMPTY_STRING);
									//處理說明
									variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.TRANSACTION_DESCRIPTION.getValue(),
												StringUtils.hasText(srmCaseTransactionDTO.getDescription()) ? srmCaseTransactionDTO.getDescription().replaceAll(IAtomsConstants.MARK_WRAP, "<caseMeetingBr>") : IAtomsConstants.MARK_EMPTY_STRING);
									//variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.TO_NAME.getValue(),"XX");
									//去除重複mail地址 2017/10/24
									try {
										toMailAddress = IAtomsUtils.removeDuplicate(toMailAddress, IAtomsConstants.MARK_SEMICOLON);
									} catch (Exception e) {
										LOGGER.debug(this.getClass().getName(), "Error is in CaseManagerService.sendMetting.removeDuplicate,Error——>toMailAddress ", toMailAddress);
									}
									LOGGER.debug(this.getClass().getName(), "mailComponent.meetingNoticeTo() --> is start... ");
									LOGGER.debug(this.getClass().getName(), "mailComponent.meetingNoticeTo() --> " + variables.get(SrmCaseHandleInfoDTO.ATTRIBUTE.INSTALLED_ADRESS.getValue()).toString());
									this.mailComponent.meetingNoticeTo(fromMailAddress, toMailAddress, subjectTemplate, textTemplate, variables, variables.get(SrmCaseHandleInfoDTO.ATTRIBUTE.INSTALLED_ADRESS.getValue()).toString(), meetingStartTimeDate, meetingEndTimeDate);
									if(count == 0) {
										String[] toEmails = toMailAddress.split(IAtomsConstants.MARK_SEMICOLON);
										String tempEmail = IAtomsConstants.MARK_EMPTY_STRING;
										for (String toEmail : toEmails) {
											if(StringUtils.hasText(toEmail)) {
												if(!StringUtils.hasText(tempEmail)) {
													tempEmail = toEmail + IAtomsConstants.MARK_SEMICOLON;
												} else {
													tempEmail = tempEmail + IAtomsConstants.RETURN_LINE_FEED + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + 
															IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + 
															IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + toEmail + IAtomsConstants.MARK_SEMICOLON;
												}
											}
										}
										toMailAddress = tempEmail;
										count ++;
										String caseTransactionId = caseManagerFormDTO.getCaseTransactionId();
										String[] caseTransactionIds = null;
										if(StringUtils.hasText(caseTransactionId)) {
											caseTransactionIds = caseTransactionId.split(IAtomsConstants.MARK_SEPARATOR);
											if(caseTransactionIds != null) {
												for (String transactionId : caseTransactionIds) {
													SrmCaseTransaction caseTransaction = this.srmCaseTransactionDAO.findByPrimaryKey(SrmCaseTransaction.class, transactionId);
													//抄送人mail地址
													String ccMail = IAtomsConstants.MARK_EMPTY_STRING;
													if (variables.get("ccMail") != null) {
														String ccMails = (String)variables.get("ccMail");
														String[] ccEmails = ccMails.split(IAtomsConstants.MARK_SEMICOLON);
														String tempCcMail = IAtomsConstants.MARK_EMPTY_STRING;
														for (String string : ccEmails) {
															if(StringUtils.hasText(string)) {
																if(!StringUtils.hasText(tempCcMail)) {
																	tempCcMail = string + IAtomsConstants.MARK_SEMICOLON;
																} else {
																	tempCcMail = tempCcMail + IAtomsConstants.RETURN_LINE_FEED 
																			+ IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + 
																			IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + string + IAtomsConstants.MARK_SEMICOLON;
																}
															}
														}
													
														ccMail = IAtomsConstants.RETURN_LINE_FEED + "Cc:" + tempCcMail;
													}
													caseTransaction.setMailInfo(i18NUtil.getName(IAtomsConstants.EMAIL_TIME)+ DateTimeUtils.toString(DateTimeUtils.getCurrentTimestamp(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH)
															+ IAtomsConstants.RETURN_LINE_FEED + "收件人:" + toMailAddress + ccMail);
													this.srmCaseTransactionDAO.getDaoSupport().saveOrUpdate(caseTransaction);
													this.srmCaseTransactionDAO.getDaoSupport().flush();
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}catch(Exception ex){
			LOGGER.error(this.getClass().getName()+".send() is error in Service:"+ex, ex);
			throw new ServiceException(ex);
		}
		return;
	}
	
	/** (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#changeCaseType(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext changeCaseType(SessionContext sessionContext) throws ServiceException {
		Message msg = null;
		// 主鍵id
		String transactionId = null;
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		LogonUser logonUser = formDTO.getLogonUser();
		try {
			//動作
			SrmCaseHandleInfo caseHandleInfo = null;
			SrmCaseTransaction caseTransaction = null;
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			String[] caseIds = null;
			Transformer transformer = new SimpleDtoDmoTransformer();
			List<ContractSlaDTO> contractSlaDTOs = null;
			BimMerchantHeader merchantHeader = null;
			String caseType = null;
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				if(StringUtils.hasText(srmCaseTransactionDTO.getCaseId())){
					caseIds = srmCaseTransactionDTO.getCaseId().split(IAtomsConstants.MARK_SEPARATOR);
					if(caseIds != null){
						// 得到案件處理集合
						List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = (List<SrmCaseHandleInfoDTO>) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT);

						//List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId(), null);
						if (!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)) {
							Boolean isIgnoreSla = false;
							Map<String, List<ContractSlaDTO>> slaMap = new HashMap<String, List<ContractSlaDTO>>();
							//存放sla集合
							//if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(formDTO.getCaseCategory())) {
								// Task #2489 專案與查核案件，無須計算SLA
								// Task #3385若為雲端租賃設備(CMS_CASE=Y或裝機件 裝機類型=微型商戶)所有案件類別，合約編號非必填，不用驗證SLA
								// 該處判斷CMS_CASE=Y
								SrmCaseHandleInfoDTO tempSrmCaseHandleInfoDTO = srmCaseHandleInfoDTOs.get(0);
								if(IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(tempSrmCaseHandleInfoDTO.getCaseCategory()) 
										|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(tempSrmCaseHandleInfoDTO.getCaseCategory())
										|| IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(tempSrmCaseHandleInfoDTO.getCaseCategory())
										|| IAtomsConstants.PARAM_YES.equals(tempSrmCaseHandleInfoDTO.getCmsCase())){
									isIgnoreSla = true;
								}
								// 無sla
								if(!isIgnoreSla){
									for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
										// 得到sla信息 
										merchantHeader = this.merchantHeaderDAO.findByPrimaryKey(BimMerchantHeader.class, srmCaseHandleInfoDTO.getMerchantHeaderId());
										// 預約
										if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(srmCaseTransactionDTO.getCaseType())) {
											// 因預約件不會設定SLA，若案件類型為“預約”時，在計算警示時以案件類型為“一般”的SLA設定計算
											caseType = IAtomsConstants.TICKET_MODE_COMMON;
										} else {
											caseType = srmCaseTransactionDTO.getCaseType();
										}
										contractSlaDTOs = this.contractSlaDAO.listBy(srmCaseHandleInfoDTO.getCustomerId(), srmCaseHandleInfoDTO.getContractId(), merchantHeader.getArea(),
												srmCaseTransactionDTO.getCaseCategory(), caseType, null, null, null, null, false);
										if (CollectionUtils.isEmpty(contractSlaDTOs)) {
											// 無對應SLA，請到【合約SLA設定】設定
											msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_SLA_FOR_CASE);
											sessionContext.setReturnMessage(msg);
											slaMap = null;
											return sessionContext;
										}
										slaMap.put(srmCaseHandleInfoDTO.getCaseId(), contractSlaDTOs);
									}
								}
							//}
							
							//int i = 0;
							String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
							for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
								// 保存案件記錄信息
								//i++;
								if (srmCaseHandleInfoDTO != null) {
									caseHandleInfo = new SrmCaseHandleInfo();
									//生成id
									transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
									if(!StringUtils.hasText(caseTransactionId)) {
										caseTransactionId = transactionId;
									} else {
										caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + transactionId;
									}
									formDTO.setCaseTransactionId(caseTransactionId);
									caseTransaction = new SrmCaseTransaction();
									transformer.transform(srmCaseTransactionDTO, caseTransaction);
									// 放置案件動作
									caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
									// 放置案件狀態
									caseTransaction.setCaseStatus(srmCaseHandleInfoDTO.getCaseStatus());
									caseTransaction.setDealById(srmCaseTransactionDTO.getDealById());
									caseTransaction.setDealByName(srmCaseTransactionDTO.getDealByName());
									
									// 實際執行時間處理
									if(srmCaseTransactionDTO.getDealDate() == null){
										caseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
									} else {
										caseTransaction.setDealDate(srmCaseTransactionDTO.getDealDate());
									}
									// 描述說明
									String description = null;
									
									description = srmCaseTransactionDTO.getDescription();
									//預計完成日
									if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(srmCaseTransactionDTO.getCaseType())) {
										caseTransaction.setExpectedCompletionDate(srmCaseTransactionDTO.getExpectedCompleteDate());
									}
									// 描述處理
									caseTransaction.setDescription(description);
									caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
									caseTransaction.setTransactionId(transactionId);
									caseTransaction.setCreatedById(logonUser.getId());
									caseTransaction.setCreatedByName(logonUser.getName());
									caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
									this.srmCaseTransactionDAO.insert(caseTransaction);
									
									// 更改案件信息 
									if (IAtomsConstants.CASE_ACTION.CHANGE_CASE_TYPE.getCode().equals(srmCaseTransactionDTO.getCaseActionId())) {
										srmCaseHandleInfoDTO.setCaseType(srmCaseTransactionDTO.getCaseType());
										// 預約
										if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(srmCaseTransactionDTO.getCaseType())) {
											srmCaseHandleInfoDTO.setExpectedCompletionDate(srmCaseTransactionDTO.getExpectedCompleteDate());
										}
										if(!isIgnoreSla && !IAtomsConstants.CASE_CATEGORY.OTHER.equals(formDTO.getCaseCategory())){
											ContractSlaDTO contractSlaDTO = null;
											if (!CollectionUtils.isEmpty(slaMap.get(srmCaseHandleInfoDTO.getCaseId()))) {
												// TODO
												contractSlaDTO = contractSlaDTOs.get(0);
												// 開始計算sla的時間--建案時間
												Date slaStartDate = srmCaseHandleInfoDTO.getCreatedDate();
												srmCaseHandleInfoDTO = settingAcceptDate(contractSlaDTO, slaStartDate, srmCaseHandleInfoDTO);
											} 
										}
									} 
									// 處理方式
//									srmCaseHandleInfoDTO.setProcessType(null);
									srmCaseHandleInfoDTO.setUpdatedById(logonUser.getId());
									srmCaseHandleInfoDTO.setUpdatedByName(logonUser.getName());
									srmCaseHandleInfoDTO.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
									caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
									//CR #2869 新增三個欄位 2017/11/22
									caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
									caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
									caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
									this.srmCaseHandleInfoDAO.update(caseHandleInfo);
								}
							}
						}
						if(msg == null){
							/*try {
								this.send(formDTO);
							} catch (Exception e) {
								LOGGER.debug("CaseManagerService.changeCaseType() --> send() is error... ");
							}*/
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CHANGE_CASE_TYPE)});
							
						}
					} else {
						LOGGER.error("CaseManagerService --> changeCaseType() --> ", "save error!!!", "caseIds is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CHANGE_CASE_TYPE)});
					}
				} else {
					LOGGER.error("CaseManagerService --> changeCaseType() --> ", "save error!!!", "srmCaseTransactionDTO.getCaseId() is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CHANGE_CASE_TYPE)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> changeCaseType() --> ", "save error!!!", "srmCaseTransactionDTO.getCaseId() is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CHANGE_CASE_TYPE)});
				}
			}			
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".changeCaseType(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".changeCaseType(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#sign(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext sign(SessionContext sessionContext)
			throws ServiceException {
		try {
			saveSignAndOnlineExclusion(sessionContext);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".saveCaseTransaction(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".saveCaseTransaction(SessionContext sessionContext):" + e, e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	/**
	 * Purpose:存儲案件對應的設備和耗材鏈接檔
	 * @author HermanWang
	 * @param sessionContext：上下文sessionContext
	 * @throws ServiceException：出錯時拋出ServiceException
	 * @return SessionContext：上下文sessionContext
	 */
	public SessionContext saveAssetLinkAndSupplies(SessionContext sessionContext,SrmCaseHandleInfo caseHandleInfo) throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		LogonUser logonUser = formDTO.getLogonUser();
		List<SrmCaseAssetLinkDTO> srmCaseAssetLinkDTOList = null; 
		SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
		String assetLinkId = "";
		try {
			//拿到caseid對應的設備鏈接dtoList的map
			Map<String, List<SrmCaseAssetLinkDTO>> srmCaseAssetLinkDTOListMap =  formDTO.getSrmCaseAssetLinkDTOListMap();
			srmCaseAssetLinkDTOList = srmCaseAssetLinkDTOListMap.get(caseHandleInfo.getCaseId());
			SrmCaseAssetLink srmCaseAssetLink = null;
			//所有要刪除的設備鏈接和耗材的id.
			String deleteCaseSuppliesLinkIds= formDTO.getDeleteCaseSuppliesLinkIds();
			if(StringUtils.hasText(deleteCaseSuppliesLinkIds)) {
				//所有刪除了的耗材鏈接當的刪除id數組
				String[] caseSuppliesDeleteIdStrings = deleteCaseSuppliesLinkIds.split(IAtomsConstants.MARK_SEPARATOR);
				for (String caseSuppliesLinkId : caseSuppliesDeleteIdStrings) {
					srmCaseAssetLink = this.srmCaseAssetLinkDAO.findByPrimaryKey(SrmCaseAssetLink.class, caseSuppliesLinkId);
					if(srmCaseAssetLink != null) {
						//刪除耗材
						this.srmCaseAssetLinkDAO.getDaoSupport().delete(srmCaseAssetLink);
					}
				}
			}
			//所有刪除了的設備鏈接的id			
			String caseAssetLinkId= formDTO.getDeleteCaseAssetLinkIds();
			if(StringUtils.hasText(caseAssetLinkId)) {
				Gson gsonss = new GsonBuilder().create();
				List<SrmCaseAssetLinkDTO> srmCaseAssetLinkDTOs = (List<SrmCaseAssetLinkDTO>) gsonss.fromJson(
						caseAssetLinkId, new TypeToken<List<SrmCaseAssetLinkDTO>>(){}.getType());
				for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO1 : srmCaseAssetLinkDTOs) {
					srmCaseAssetLink = this.srmCaseAssetLinkDAO.findByPrimaryKey(SrmCaseAssetLink.class, srmCaseAssetLinkDTO1.getAssetLinkId());
					//caseAssetLinkId = caseAssetLinkId.substring(indexOfCaseAssetLinkId+1);
					
					if(srmCaseAssetLink != null) {
						//如果不是耗材，需要額外修改設備庫存檔和設備歷史檔
						if(!IAtomsConstants.PARAM_CASE_LINK_SUPPLIES.equals(srmCaseAssetLink.getItemType())) {
							SrmCaseAssetLinkDTO srmCaseAssetLinkDTO = new SrmCaseAssetLinkDTO();
							srmCaseAssetLinkDTO.setSerialNumber(srmCaseAssetLink.getSerialNumber());
							//int indexOfCaseAssetLinkAction = caseAssetLinkId.indexOf(IAtomsConstants.MARK_SEMICOLON);
							srmCaseAssetLinkDTO.setAction(srmCaseAssetLinkDTO1.getAction());
							srmCaseAssetLinkDTO.setCaseId(srmCaseAssetLink.getCaseId());
							srmCaseAssetLinkDTO.setIsUninstallAndLoss(IAtomsConstants.NO);
							srmCaseAssetLinkDTO.setAssetLinkId(srmCaseAssetLink.getAssetLinkId());
							DmmRepositoryDTO dmmRepositoryDTO = this.dmmRepositoryDAO.getRepositoryBySerialNumber(srmCaseAssetLinkDTO.getSerialNumber(), null, null);
							//庫存歷史檔id
							String historyId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_DMM_REPOSITORY_HISTORY);
							if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseAssetLinkDTO1.getAction())) {
								srmCaseAssetLinkDTO.setIsLink(IAtomsConstants.CASE_DELETE_ASSET);
							} else {
								srmCaseAssetLinkDTO.setIsLink(IAtomsConstants.CASE_REMOVE_ASSET);
								//動作，已拆回或者已遺失
								srmCaseAssetLink.setAction(srmCaseAssetLinkDTO1.getAction());
							}
							String content = srmCaseAssetLinkDTO1.getContent();
							dmmRepositoryDTO.setUninstallOrRepairReason(content);
							srmCaseAssetLinkDTO.setRemoveContent(content);
							//存儲設備主當和設備歷史檔
							saveRepository(sessionContext, dmmRepositoryDTO, srmCaseAssetLinkDTO, caseHandleInfo, historyId, true, false);
							//存為D
							srmCaseAssetLink.setIsLink(IAtomsConstants.CASE_DELETE_ASSET);
							srmCaseAssetLink.setContent(content);
							srmCaseAssetLink.setCreatedById(logonUser.getId());
							srmCaseAssetLink.setCreatedByName(logonUser.getName());
							srmCaseAssetLink.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							this.srmCaseAssetLinkDAO.getDaoSupport().saveOrUpdate(srmCaseAssetLink);
						}
					}
				}
				//所有刪除了的設備鏈接當的刪除id數組
				//String[] caseAssetDeleteIdStrings = deleteCaseAssetLinkIds.split(IAtomsConstants.MARK_SEPARATOR);
					//R 傳過來通過;解開。 分別為刪除的id和選擇的動作 拆回或者遺失
					/*if(caseAssetLinkId.indexOf(IAtomsConstants.MARK_SEMICOLON) > 0) {
						int indexOfCaseAssetLinkId = caseAssetLinkId.indexOf(IAtomsConstants.MARK_SEMICOLON);
						srmCaseAssetLink = this.srmCaseAssetLinkDAO.findByPrimaryKey(SrmCaseAssetLink.class, caseAssetLinkId.substring(0, indexOfCaseAssetLinkId));
						caseAssetLinkId = caseAssetLinkId.substring(indexOfCaseAssetLinkId+1);
					}
					if(srmCaseAssetLink != null) {
						//如果不是耗材，需要額外修改設備庫存檔和設備歷史檔
						if(!IAtomsConstants.PARAM_CASE_LINK_SUPPLIES.equals(srmCaseAssetLink.getItemType())) {
							SrmCaseAssetLinkDTO srmCaseAssetLinkDTO = new SrmCaseAssetLinkDTO();
							srmCaseAssetLinkDTO.setSerialNumber(srmCaseAssetLink.getSerialNumber());
							int indexOfCaseAssetLinkAction = caseAssetLinkId.indexOf(IAtomsConstants.MARK_SEMICOLON);
							srmCaseAssetLinkDTO.setAction(caseAssetLinkId.substring(0, indexOfCaseAssetLinkAction));
							srmCaseAssetLinkDTO.setCaseId(srmCaseAssetLink.getCaseId());
							srmCaseAssetLinkDTO.setIsUninstallAndLoss(IAtomsConstants.NO);
							srmCaseAssetLinkDTO.setAssetLinkId(srmCaseAssetLink.getAssetLinkId());
							DmmRepositoryDTO dmmRepositoryDTO = this.dmmRepositoryDAO.getRepositoryBySerialNumber(srmCaseAssetLinkDTO.getSerialNumber(), null, null);
							//庫存歷史檔id
							String historyId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_DMM_REPOSITORY_HISTORY);
							if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseAssetLinkId.substring(0, indexOfCaseAssetLinkAction))) {
								srmCaseAssetLinkDTO.setIsLink(IAtomsConstants.CASE_DELETE_ASSET);
							} else {
								srmCaseAssetLinkDTO.setIsLink(IAtomsConstants.CASE_REMOVE_ASSET);
								//動作，已拆回或者已遺失
								srmCaseAssetLink.setAction(caseAssetLinkId.substring(0, indexOfCaseAssetLinkAction));
							}
							String content = caseAssetLinkId.substring(indexOfCaseAssetLinkAction+1);
							dmmRepositoryDTO.setUninstallOrRepairReason(content);
							srmCaseAssetLinkDTO.setRemoveContent(content);
							//存儲設備主當和設備歷史檔
							saveRepository(sessionContext, dmmRepositoryDTO, srmCaseAssetLinkDTO, caseHandleInfo, historyId, true, false);
							//存為D
							srmCaseAssetLink.setIsLink(IAtomsConstants.CASE_DELETE_ASSET);
							srmCaseAssetLink.setContent(content);
							srmCaseAssetLink.setCreatedById(logonUser.getId());
							srmCaseAssetLink.setCreatedByName(logonUser.getName());
							srmCaseAssetLink.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							this.srmCaseAssetLinkDAO.getDaoSupport().saveOrUpdate(srmCaseAssetLink);
						}
					}*/
				
			}
			if(!CollectionUtils.isEmpty(srmCaseAssetLinkDTOList)) {
				for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : srmCaseAssetLinkDTOList) {
					//耗材鏈接
					if(IAtomsConstants.PARAM_CASE_LINK_SUPPLIES.equals(srmCaseAssetLinkDTO.getItemType())) {
						assetLinkId = srmCaseAssetLinkDTO.getAssetLinkId();
						//數量和說明為空
						if(srmCaseAssetLinkDTO.getNumber() == null && !StringUtils.hasText(srmCaseAssetLinkDTO.getContent())) {
							if(StringUtils.hasText(assetLinkId)) {
								//有id，以前鏈接過，被退回重新鏈接但是數量和說明為空
								srmCaseAssetLink = this.srmCaseAssetLinkDAO.findByPrimaryKey(SrmCaseAssetLink.class, assetLinkId);
								if(srmCaseAssetLink != null) {
									this.srmCaseAssetLinkDAO.getDaoSupport().delete(srmCaseAssetLink);
								}
							}
							continue;
						}
						//耗材鏈接新增
						Transformer transformer = new SimpleDtoDmoTransformer();
						srmCaseAssetLink = (SrmCaseAssetLink) transformer.transform(srmCaseAssetLinkDTO, new SrmCaseAssetLink());
						//耗材鏈接修改
						if(StringUtils.hasText(assetLinkId)) {
							srmCaseAssetLink = this.srmCaseAssetLinkDAO.findByPrimaryKey(SrmCaseAssetLink.class, assetLinkId);
							if(srmCaseAssetLink != null) {
								if(srmCaseAssetLink.getNumber() != null) {
									//根據耗材id查詢耗材.
									DmmSupplies supplies = this.suppliesDAO.findByPrimaryKey(DmmSupplies.class, srmCaseAssetLink.getItemId());
									//耗材的單價
									BigDecimal price = supplies.getPrice();
									//耗材的總價格。（單價 * 數量）
									srmCaseAssetLink.setPrice(price);
								}
								//設備類別/耗材分類
								srmCaseAssetLink.setItemCategory(srmCaseAssetLinkDTO.getItemCategory());
								//設備編號/耗材編號
								srmCaseAssetLink.setItemId(srmCaseAssetLinkDTO.getItemId());
								//數量
								srmCaseAssetLink.setNumber(srmCaseAssetLinkDTO.getNumber());
								//說明
								srmCaseAssetLink.setContent(srmCaseAssetLinkDTO.getContent());
								this.srmCaseAssetLinkDAO.getDaoSupport().saveOrUpdate(srmCaseAssetLink);
							} 
						} else {
							assetLinkId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_LINK);
							//主鍵
							srmCaseAssetLink.setAssetLinkId(assetLinkId);
							srmCaseAssetLink.setCaseId(caseHandleInfo.getCaseId());
							//項目類別
							srmCaseAssetLink.setItemType(IAtomsConstants.PARAM_CASE_LINK_SUPPLIES);
							if(srmCaseAssetLink.getNumber() != null) {
								//根據耗材id查詢耗材.
								DmmSupplies supplies = this.suppliesDAO.findByPrimaryKey(DmmSupplies.class, srmCaseAssetLink.getItemId());
								//耗材的單價
								BigDecimal price = supplies.getPrice();
								//耗材的數量
								//BigDecimal number = new BigDecimal(srmCaseAssetLink.getNumber());
								//耗材的總價格。（單價 * 數量）
								srmCaseAssetLink.setPrice(price);
							}
							srmCaseAssetLink.setCreatedById(logonUser.getId());
							srmCaseAssetLink.setCreatedByName(logonUser.getName());
							srmCaseAssetLink.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							this.srmCaseAssetLinkDAO.getDaoSupport().saveOrUpdate(srmCaseAssetLink);
						}
						
					}else {
						srmCaseAssetLinkDTO.setIsUninstallAndLoss(IAtomsConstants.NO);
						boolean isDeleteLink = false;
						boolean isinstallChangeEDC = false;
						//鏈接主鍵
						assetLinkId = srmCaseAssetLinkDTO.getAssetLinkId();
						//鏈接檔dmo
						srmCaseAssetLink = this.srmCaseAssetLinkDAO.findByPrimaryKey(SrmCaseAssetLink.class, assetLinkId);
						String serialnumber = null;
						String hisAssetId = null;
						//以前鏈接過設備srmCaseAssetLinkDTO.getSerialNumber()
						if(StringUtils.hasText(srmCaseAssetLink.getSerialNumber())) {
							//連接了新設備或者 拆機取消了鏈接的設備
							if(!srmCaseAssetLinkDTO.getSerialNumber().equals(srmCaseAssetLink.getSerialNumber())) {
								if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLinkDTO.getItemType())) {
									isinstallChangeEDC = true;
								}
								serialnumber = srmCaseAssetLink.getSerialNumber();
								//拆機
								if(!StringUtils.hasText(srmCaseAssetLinkDTO.getSerialNumber())) {
									srmCaseAssetLinkDTO.setSerialNumber(serialnumber);
								//更換設備鏈接新設備
								} else {
									isDeleteLink = true;
									hisAssetId = srmCaseAssetLink.getHistoryAssetId();
								}
							}
						} else {
							isinstallChangeEDC = true;
						}
						//如果是裝機建連接的設備 被更換，需要新增一條記錄。
						if(isDeleteLink) {
							if(StringUtils.hasText(srmCaseAssetLinkDTO.getActionValue())) {
								SrmCaseAssetLink deletesrmCaseAssetLink = new SrmCaseAssetLink();
								String deleteAssetLinkId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_LINK);
								deletesrmCaseAssetLink.setAssetLinkId(deleteAssetLinkId);
								deletesrmCaseAssetLink.setIsLink(IAtomsConstants.CASE_DELETE_ASSET);
								deletesrmCaseAssetLink.setAction(srmCaseAssetLinkDTO.getActionValue());
								deletesrmCaseAssetLink.setItemType(srmCaseAssetLink.getItemType());
								deletesrmCaseAssetLink.setCaseId(srmCaseAssetLink.getCaseId());
								deletesrmCaseAssetLink.setItemCategory(srmCaseAssetLink.getItemCategory());
								deletesrmCaseAssetLink.setItemId(srmCaseAssetLink.getItemId());
								deletesrmCaseAssetLink.setHistoryAssetId(srmCaseAssetLink.getHistoryAssetId());
								deletesrmCaseAssetLink.setSerialNumber(srmCaseAssetLink.getSerialNumber());
								deletesrmCaseAssetLink.setWarehouseId(srmCaseAssetLink.getWarehouseId());
								deletesrmCaseAssetLink.setEnableDate(srmCaseAssetLink.getEnableDate());
								deletesrmCaseAssetLink.setContent(srmCaseAssetLinkDTO.getRemoveContent());
								deletesrmCaseAssetLink.setContractId(srmCaseAssetLink.getContractId());
								deletesrmCaseAssetLink.setPropertyId(srmCaseAssetLink.getPropertyId());
								deletesrmCaseAssetLink.setCreatedById(srmCaseAssetLink.getCreatedById());
								deletesrmCaseAssetLink.setCreatedByName(srmCaseAssetLink.getCreatedByName());
								deletesrmCaseAssetLink.setCreatedDate(srmCaseAssetLink.getCreatedDate());
								this.srmCaseAssetLinkDAO.getDaoSupport().saveOrUpdate(deletesrmCaseAssetLink);
							}
						}
						//2018/01/05 裝機無設備 協調完成 拆機件簽收 無設備時
						if(!StringUtils.hasText(srmCaseAssetLinkDTO.getSerialNumber())){
							//等於D或者 拆機N，即為從R取消鏈接過來的,刪掉
							if(srmCaseAssetLink != null) {
								//this.srmCaseAssetLinkDAO.getDaoSupport().delete(srmCaseAssetLink);
								//D.
								srmCaseAssetLink.setIsLink(IAtomsConstants.CASE_DELETE_ASSET);
								//動作，拆回或者遺失
								srmCaseAssetLink.setAction(srmCaseAssetLinkDTO.getActionValue());
								this.srmCaseAssetLinkDAO.getDaoSupport().saveOrUpdate(srmCaseAssetLink);
							}
							continue;
						}
						//設備鏈接
						DmmRepositoryDTO dmmRepositoryDTO = this.dmmRepositoryDAO.getRepositoryBySerialNumber(srmCaseAssetLinkDTO.getSerialNumber(), null, null);
						//庫存歷史檔id
						String historyId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_DMM_REPOSITORY_HISTORY);
						//boolean isUninstallAndLoss = false;
						if(dmmRepositoryDTO != null) {
							//連接設備
							if(IAtomsConstants.YES.equals(srmCaseAssetLinkDTO.getIsLink())) {
								srmCaseAssetLink.setIsLink(IAtomsConstants.YES);
								//設備啟用日和設備租賃日都為空，寫入設備啟用日
								if(dmmRepositoryDTO.getEnableDate() == null ) {
									if(caseHandleInfo.getCompleteDate() != null){
										srmCaseAssetLink.setEnableDate(caseHandleInfo.getCompleteDate());
									} else {
										//啟用日期 實際執行時間不為空，寫入實際執行時間。反之，寫入當前時間
										if(srmCaseTransactionDTO.getDealDate() == null) {
											srmCaseAssetLink.setEnableDate(DateTimeUtils.getCurrentTimestamp());
										} else {
											srmCaseAssetLink.setEnableDate(srmCaseTransactionDTO.getDealDate());
										}
									}
								} else {
									srmCaseAssetLink.setEnableDate(dmmRepositoryDTO.getEnableDate());
								}
								//合約編號
							//	srmCaseAssetLink.setContractId(srmCaseAssetLinkDTO.getContractId());
								//倉庫
							//	srmCaseAssetLink.setWarehouseId(srmCaseAssetLinkDTO.getWarehouseId());
								srmCaseAssetLink.setSerialNumber(srmCaseAssetLinkDTO.getSerialNumber());
								srmCaseAssetLink.setCreatedById(logonUser.getId());
								srmCaseAssetLink.setCreatedByName(logonUser.getName());
								srmCaseAssetLink.setHistoryAssetId(historyId);
								srmCaseAssetLink.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
								srmCaseAssetLink.setAction(srmCaseAssetLinkDTO.getAction());
								srmCaseAssetLink.setContent(srmCaseAssetLinkDTO.getContent());
							//	srmCaseAssetLink.setPropertyId(srmCaseAssetLinkDTO.getPropertyId());
								
								// Bug #3231 簽收時更新設備信息至案件鏈接檔
								// 合約編號
								srmCaseAssetLink.setContractId(dmmRepositoryDTO.getContractId());
								// 倉庫
								srmCaseAssetLink.setWarehouseId(dmmRepositoryDTO.getWarehouseId());
								// 財產編號
								srmCaseAssetLink.setPropertyId(dmmRepositoryDTO.getPropertyId());
								
								this.srmCaseAssetLinkDAO.getDaoSupport().saveOrUpdate(srmCaseAssetLink);
							} else {
								//等於D或者 拆機N，即為從R取消鏈接過來的,刪掉
								if(srmCaseAssetLink != null) {
									//this.srmCaseAssetLinkDAO.getDaoSupport().delete(srmCaseAssetLink);
									//D.
									srmCaseAssetLink.setIsLink(IAtomsConstants.CASE_DELETE_ASSET);
									//動作，拆回或者遺失
									srmCaseAssetLink.setAction(srmCaseAssetLinkDTO.getActionValue());
									this.srmCaseAssetLinkDAO.getDaoSupport().saveOrUpdate(srmCaseAssetLink);
								}
							}
							//存儲設備主當和設備歷史檔
							saveRepository(sessionContext, dmmRepositoryDTO, srmCaseAssetLinkDTO, caseHandleInfo, historyId, false, isinstallChangeEDC);
							if(isDeleteLink) {
								historyId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_DMM_REPOSITORY_HISTORY);
								dmmRepositoryDTO = this.dmmRepositoryDAO.getRepositoryBySerialNumber(serialnumber, null, null);
								//不是裝機案件，更換非本案件關聯的設備，就必須選擇動作下拉框.
								if(StringUtils.hasText(srmCaseAssetLinkDTO.getActionValue())) {
									srmCaseAssetLinkDTO.setIsLink(IAtomsConstants.CASE_REMOVE_ASSET);
									srmCaseAssetLinkDTO.setAction(srmCaseAssetLinkDTO.getActionValue());
								} else {
									srmCaseAssetLinkDTO.setIsLink(IAtomsConstants.NO);
								}
								srmCaseAssetLinkDTO.setHistoryAssetId(hisAssetId);
								dmmRepositoryDTO.setUninstallOrRepairReason(srmCaseAssetLinkDTO.getRemoveContent());
								//更換設備鏈接 
								saveRepository(sessionContext, dmmRepositoryDTO, srmCaseAssetLinkDTO, caseHandleInfo, historyId, true, false);
							}
						}
					}	
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".saveAssetLinkAndSupplies(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".saveAssetLinkAndSupplies(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	/**
	 * Purpose:簽收存儲設備庫存檔和設備歷史表
	 * @author HermanWang
	 * @param sessionContext：SessionContext
	 * @param dmmRepositoryDTO：設備庫存檔
	 * @param srmCaseAssetLinkDTO：設備鏈接dto
	 * @param caseHandleInfo：案件主檔DTO
	 * @param historyId：庫存歷史檔id
	 * @throws ServiceException
	 * @return SessionContext：SessionContext
	 */
	public SessionContext saveRepository(SessionContext sessionContext, DmmRepositoryDTO dmmRepositoryDTO, 
			SrmCaseAssetLinkDTO srmCaseAssetLinkDTO, SrmCaseHandleInfo caseHandleInfo, 
			String historyId, boolean isRetreat, boolean isInstallChangeEDC) throws ServiceException {
		try {
			//庫存表和庫存歷史表
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			String tid = (String) sessionContext.getAttribute(SrmCaseHandleInfoDTO.ATTRIBUTE.TID.getValue());
			LogonUser logonUser = formDTO.getLogonUser();
			Transformer transformer = new SimpleDtoDmoTransformer();
			//1.如果是拆機案件，action是remove-拆回，則案件狀態為已拆回
			if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(srmCaseTransactionDTO.getCaseCategory())) {
				//周邊設備 可以 不移除
				if(StringUtils.hasText(srmCaseAssetLinkDTO.getActionValue()) 
						&& !IAtomsConstants.YES.equals(srmCaseAssetLinkDTO.getIsLink())) {
					dmmRepositoryDTO.setInstalledDeptId(null);
					// 拆機案件或取消連接操作，寫入空。TID
					dmmRepositoryDTO.setTid(null);
					// 拆機案件或取消連接操作，寫入空。 dtid
					dmmRepositoryDTO.setDtid(null);
					//拆機案件或取消連接操作，寫入空。
					dmmRepositoryDTO.setMerchantId(null);
					dmmRepositoryDTO.setMerchantHeaderId(null);
					dmmRepositoryDTO.setInstalledAdress(null);
					dmmRepositoryDTO.setInstallType(null);
					//軟體版本 
					dmmRepositoryDTO.setApplicationId(null);
					//裝機地址市縣
					dmmRepositoryDTO.setInstalledAdressLocation(null);
					//bug 2272 當設備被移除時，拆機/報修原因=動作，說明/排除方式=說明
					//拆機/報修原因
					if(IAtomsConstants.ACTION_REMOVE.equals(srmCaseAssetLinkDTO.getActionValue())) {
						dmmRepositoryDTO.setUninstallOrRepairReason(i18NUtil.getName(IAtomsConstants.ACTION_REMOVE));
					} else {
						dmmRepositoryDTO.setUninstallOrRepairReason(i18NUtil.getName(IAtomsConstants.ACTION_LOSS));
					}
					dmmRepositoryDTO.setDescription(srmCaseAssetLinkDTO.getContent());
					//Bug #2303
					dmmRepositoryDTO.setCustomerWarrantyDate(null);
				} else {
					// 非拆機案件，且連接設備，寫入當前案件  TID
					dmmRepositoryDTO.setTid(tid);
					// 非拆機案件，且連接設備，寫入當前案件 DTID
					dmmRepositoryDTO.setDtid(caseHandleInfo.getDtid());
					//非拆機案件，且連接設備，寫入當前案件特店主鍵
					dmmRepositoryDTO.setMerchantId(caseHandleInfo.getMerchantCode());
					dmmRepositoryDTO.setInstalledAdress(caseHandleInfo.getInstalledAdress());
					dmmRepositoryDTO.setInstallType(caseHandleInfo.getInstallType());
					dmmRepositoryDTO.setMerchantHeaderId(caseHandleInfo.getMerchantHeaderId());
					//還差軟體版本 裝機地址市縣 維護部門
					dmmRepositoryDTO.setApplicationId(caseHandleInfo.getSoftwareVersion());
					dmmRepositoryDTO.setInstalledAdressLocation(caseHandleInfo.getInstalledAdressLocation());
				}
				dmmRepositoryDTO.setCaseId(srmCaseAssetLinkDTO.getCaseId());
				dmmRepositoryDTO.setCaseCompletionDate(new Timestamp(caseHandleInfo.getCompleteDate().getTime()));
				//維護部門 ----> 派工部門 
				dmmRepositoryDTO.setDepartmentId(caseHandleInfo.getDispatchDeptId());
				//維護廠商
				dmmRepositoryDTO.setMaintainCompany(caseHandleInfo.getCompanyId());
				//維護工程師 -----> 派工工程師，紀錄最新的派工單位與人員(USER選擇的)
				dmmRepositoryDTO.setMaintainUser(caseHandleInfo.getDispatchProcessUser());
				//簽收日期
				dmmRepositoryDTO.setAnalyzeDate(caseHandleInfo.getAnalyzeDate());
				//拆回，則案件狀態為已拆回
				if(IAtomsConstants.ACTION_REMOVE.equals(srmCaseAssetLinkDTO.getActionValue())) {
					dmmRepositoryDTO.setStatus(IAtomsConstants.PARAM_ASSET_STATUS_RETURNED);
					//拆回
					dmmRepositoryDTO.setAction(srmCaseTransactionDTO.getCaseCategory() + IAtomsConstants.MARK_MIDDLE_LINE + IAtomsConstants.PARAM_ASSET_STATUS_REMOVE_BACK);
				} else if (IAtomsConstants.ACTION_LOSS.equals(srmCaseAssetLinkDTO.getActionValue())) {
					//action是遺失，案件狀態為待報廢
					srmCaseAssetLinkDTO.setIsUninstallAndLoss(IAtomsConstants.YES);
					dmmRepositoryDTO.setStatus(IAtomsConstants.PARAM_ASSET_STATUS_PENDING_DISABLED);
					//報廢
					dmmRepositoryDTO.setAction(srmCaseTransactionDTO.getCaseCategory() + IAtomsConstants.MARK_MIDDLE_LINE + IAtomsConstants.ACTION_LOSS);
				//當該設備未拆除時，將 action的值由 XX-連接 改為 當前案件類別-連接   2018/01/29
				} else if (!StringUtils.hasText(srmCaseAssetLinkDTO.getActionValue())) {
					if (StringUtils.hasText(dmmRepositoryDTO.getAction())) {
						int line = dmmRepositoryDTO.getAction().indexOf(IAtomsConstants.MARK_MIDDLE_LINE);
						if (line != -1) {
							dmmRepositoryDTO.setAction(srmCaseTransactionDTO.getCaseCategory() + dmmRepositoryDTO.getAction().substring(line));
						}
					}
				}
			} else {
				//如果是R，狀態恢復為拆回或者遺失， 如果是取消鏈接 設備狀態復原到之前
				if(isRetreat) {
					if(IAtomsConstants.COLUMN_R.equals(srmCaseAssetLinkDTO.getIsLink())) {
						dmmRepositoryDTO.setInstalledDeptId(null);
						//拆回，則案件狀態為已拆回
						if(IAtomsConstants.ACTION_REMOVE.equals(srmCaseAssetLinkDTO.getAction())) {
							dmmRepositoryDTO.setStatus(IAtomsConstants.PARAM_ASSET_STATUS_RETURNED);
							//拆回
							dmmRepositoryDTO.setAction(srmCaseTransactionDTO.getCaseCategory() + IAtomsConstants.MARK_MIDDLE_LINE + IAtomsConstants.PARAM_ASSET_STATUS_REMOVE_BACK);
						} else if (IAtomsConstants.ACTION_LOSS.equals(srmCaseAssetLinkDTO.getAction())) {
							//action是遺失，案件狀態為待報廢
							//isUninstallAndLoss = true;
							srmCaseAssetLinkDTO.setIsUninstallAndLoss(IAtomsConstants.YES);
							dmmRepositoryDTO.setStatus(IAtomsConstants.PARAM_ASSET_STATUS_PENDING_DISABLED);
							//報廢
							dmmRepositoryDTO.setAction(srmCaseTransactionDTO.getCaseCategory() + IAtomsConstants.MARK_MIDDLE_LINE + IAtomsConstants.ACTION_LOSS);
						}
					} else {
						//本案鍵關聯的設備的取消。
						//裝機簽收退回后，將設備不關聯，再次簽收時 移除設備后 dto中沒有historyassetid，所以改為：當沒有HistoryAssetId 時 從db中查詢出來
						DmmRepositoryHistoryDTO dmmRepositoryHistoryDTO = new DmmRepositoryHistoryDTO();
						if (!StringUtils.hasText(srmCaseAssetLinkDTO.getHistoryAssetId())) {
							SrmCaseAssetLink srmCaseAssetLink= this.srmCaseAssetLinkDAO.findByPrimaryKey(SrmCaseAssetLink.class, srmCaseAssetLinkDTO.getAssetLinkId());
							//根據案件取消關聯設備之前的設備庫存歷史當id查詢關聯設備之前的設備狀態
							dmmRepositoryHistoryDTO = this.dmmRepositoryHistoryDAO.getStatusByHistoryId(srmCaseAssetLink.getHistoryAssetId());
						} else {
							//根據案件取消關聯設備之前的設備庫存歷史當id查詢關聯設備之前的設備狀態
							dmmRepositoryHistoryDTO = this.dmmRepositoryHistoryDAO.getStatusByHistoryId(srmCaseAssetLinkDTO.getHistoryAssetId());
						}
						dmmRepositoryDTO.setStatus(dmmRepositoryHistoryDTO.getStatus());
						//"取消連結"
						dmmRepositoryDTO.setAction(srmCaseTransactionDTO.getCaseCategory() + IAtomsConstants.MARK_MIDDLE_LINE + IAtomsConstants.PARAM_ASSET_STATUS_REMOVE_LINK);
						//設備啟用日恢復之前
						dmmRepositoryDTO.setIsEnabled(dmmRepositoryHistoryDTO.getIsEnabled());
						dmmRepositoryDTO.setEnableDate(dmmRepositoryHistoryDTO.getEnableDate());
						//客戶保固日期
						dmmRepositoryDTO.setCustomerWarrantyDate(dmmRepositoryHistoryDTO.getCustomerWarrantyDate());
						//設備租賃日恢復之前
						//dmmRepositoryDTO.setIsSimEnable(dmmRepositoryHistoryDTO.getIsSimEnable());
						//dmmRepositoryDTO.setSimEnableDate(dmmRepositoryHistoryDTO.getSimEnableDate());
					}
				} else {
					//1.案件不是拆機。如果是連接設備，狀態改為使用中
					dmmRepositoryDTO.setStatus(IAtomsConstants.PARAM_ASSET_STATUS_IN_USE);
					//"連結"
					dmmRepositoryDTO.setAction(srmCaseTransactionDTO.getCaseCategory() + IAtomsConstants.MARK_MIDDLE_LINE + IAtomsConstants.PARAM_ASSET_STATUS_LINK);
				}
				//是否首裝
				if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseTransactionDTO.getCaseCategory())) {
					if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLinkDTO.getItemType())) {
						if(IAtomsConstants.YES.equals(srmCaseAssetLinkDTO.getIsLink())) {
							//給報表新增欄位存儲值 2017 09 /14
							dmmRepositoryDTO.setInstalledDeptId(caseHandleInfo.getInstalledDeptId());
						} else {
							dmmRepositoryDTO.setInstalledDeptId(null);
						}
						if(isInstallChangeEDC) {
							if(dmmRepositoryDTO.getEnableDate() == null ) {
								caseHandleInfo.setIsFirstInstalled(IAtomsConstants.YES);
								this.srmCaseHandleInfoDAO.update(caseHandleInfo);
							} else {
								caseHandleInfo.setIsFirstInstalled(IAtomsConstants.NO);
								this.srmCaseHandleInfoDAO.update(caseHandleInfo);
							}
						}
					}
					//Bug #2303
					if(IAtomsConstants.YES.equals(srmCaseAssetLinkDTO.getIsLink())) {
						if(IAtomsConstants.MA_TYPE_LEASE.equals(dmmRepositoryDTO.getMaType())
								|| IAtomsConstants.MA_TYPE_LEASE_TO_BUYOUT.equals(dmmRepositoryDTO.getMaType())) {
							BimContract contract = this.contractDAO.findByPrimaryKey(BimContract.class, dmmRepositoryDTO.getContractId());
							Integer customerWarranty = 0;
							Date customerWarrantyDate = new Date();
							customerWarrantyDate = caseHandleInfo.getCompleteDate();
							if(contract != null) {
								//客戶保固期限(月)
								customerWarranty = contract.getCustomerWarranty();
								if (customerWarranty == null) {
									customerWarranty = 0;
								}
								customerWarrantyDate = DateTimeUtils.addCalendar(customerWarrantyDate, 0, customerWarranty, 0);
//								customerWarrantyDate.setMonth(customerWarrantyDate.getMonth() + customerWarranty);
							}
							dmmRepositoryDTO.setCustomerWarrantyDate(customerWarrantyDate);
						}
					}
				} else {
					//除了裝機 拆機 的其他案件 如果 edc被改變 就修改是否首裝為N 為了給 是否首拆 服務。update by 2017/09/06
					if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLinkDTO.getItemType())) {
						if(isInstallChangeEDC) {
							caseHandleInfo.setIsFirstInstalled(IAtomsConstants.NO);
							this.srmCaseHandleInfoDAO.update(caseHandleInfo);
						}
					}
				}
				if(IAtomsConstants.YES.equals(srmCaseAssetLinkDTO.getIsLink())) {
					//僅第一次裝機時更新，其他案件不需異動
					//設備啟用日不等於Y
					if(!IAtomsConstants.YES.equals(dmmRepositoryDTO.getIsEnabled())) {
							//設備租賃日不等於Y
							//&& !IAtomsConstants.YES.equals(dmmRepositoryDTO.getIsSimEnable())) {
						//是否啟用
						dmmRepositoryDTO.setIsEnabled(IAtomsConstants.YES);
					}
					//設備啟用日和設備租賃日都為空，寫入設備啟用日
					if(dmmRepositoryDTO.getEnableDate() == null ) {
						if(caseHandleInfo.getCompleteDate() != null){
							//String value = DateTimeUtils.toString(caseHandleInfo.getCompleteDate(),  DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH);
							dmmRepositoryDTO.setEnableDate(new Timestamp((caseHandleInfo.getCompleteDate()).getTime()));
						} else {
							//啟用日期 實際執行時間不為空，寫入實際執行時間。反之，寫入當前時間
							if(srmCaseTransactionDTO.getDealDate() == null) {
								dmmRepositoryDTO.setEnableDate(DateTimeUtils.getCurrentTimestamp());
							} else {
								dmmRepositoryDTO.setEnableDate(srmCaseTransactionDTO.getDealDate());
							}
						}
					}
				}
				//edc在異動建的時候的 iscup欄位
				if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseTransactionDTO.getCaseCategory())){
					if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLinkDTO.getItemType())) {
						if(IAtomsConstants.YES.equals(srmCaseAssetLinkDTO.getIsLink())) {
							List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseHandleInfo.getCaseId(), null);
							if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
								boolean newCUP = false;
								for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
									// 判斷有沒有CUP類別
									if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
										newCUP = true;
										break;
									}
								}
								//如果此筆案件交易參數有cup
								if(newCUP) {
									dmmRepositoryDTO.setIsCup(IAtomsConstants.YES);
								} else {
									dmmRepositoryDTO.setIsCup(IAtomsConstants.NO);
								}
							}
						} else {
							dmmRepositoryDTO.setIsCup(IAtomsConstants.NO);
						}
					}
				//保修案件
				//Bug #2274
				}
				if(IAtomsConstants.YES.equals(srmCaseAssetLinkDTO.getIsLink())) {
					// CASE_ID 非拆機案件，且連接設備，寫入當前案件編號
					dmmRepositoryDTO.setCaseId(srmCaseAssetLinkDTO.getCaseId());
					//案件完修日(簽收，或線上排除，儲存時，寫入案件完修日期)
					dmmRepositoryDTO.setCaseCompletionDate(new Timestamp(caseHandleInfo.getCompleteDate().getTime()));
					// 非拆機案件，且連接設備，寫入當前案件  TID
					dmmRepositoryDTO.setTid(tid);
					// 非拆機案件，且連接設備，寫入當前案件 DTID
					dmmRepositoryDTO.setDtid(caseHandleInfo.getDtid());
					//非拆機案件，且連接設備，寫入當前案件特店主鍵
					dmmRepositoryDTO.setMerchantId(caseHandleInfo.getMerchantCode());
					dmmRepositoryDTO.setInstalledAdress(caseHandleInfo.getInstalledAdress());
					dmmRepositoryDTO.setInstallType(caseHandleInfo.getInstallType());
					dmmRepositoryDTO.setMerchantHeaderId(caseHandleInfo.getMerchantHeaderId());
					//還差軟體版本 裝機地址市縣 維護部門
					dmmRepositoryDTO.setApplicationId(caseHandleInfo.getSoftwareVersion());
					dmmRepositoryDTO.setInstalledAdressLocation(caseHandleInfo.getInstalledAdressLocation());
					//update by 2017/07/26   Bug #2040
					//維護部門 ----> 派工部門 
					dmmRepositoryDTO.setDepartmentId(caseHandleInfo.getDispatchDeptId());
					//維護廠商
					dmmRepositoryDTO.setMaintainCompany(caseHandleInfo.getCompanyId());
					//維護工程師 -----> 派工工程師，紀錄最新的派工單位與人員(USER選擇的)
					dmmRepositoryDTO.setMaintainUser(caseHandleInfo.getDispatchProcessUser());
					//簽收日期
					dmmRepositoryDTO.setAnalyzeDate(caseHandleInfo.getAnalyzeDate());
				} else {
					//update by 2017/08/28 hermanwang Bug #2272
					if(isRetreat && StringUtils.hasText(srmCaseAssetLinkDTO.getAction())) {
						dmmRepositoryDTO.setCaseId(srmCaseAssetLinkDTO.getCaseId());
						dmmRepositoryDTO.setCaseCompletionDate(new Timestamp(caseHandleInfo.getCompleteDate().getTime()));
						//維護部門 ----> 派工部門 
						dmmRepositoryDTO.setDepartmentId(caseHandleInfo.getDispatchDeptId());
						//維護廠商
						dmmRepositoryDTO.setMaintainCompany(caseHandleInfo.getCompanyId());
						//維護工程師 -----> 派工工程師，紀錄最新的派工單位與人員(USER選擇的)
						dmmRepositoryDTO.setMaintainUser(caseHandleInfo.getDispatchProcessUser());
						//簽收日期
						dmmRepositoryDTO.setAnalyzeDate(caseHandleInfo.getAnalyzeDate());
						//Bug #2272
						//拆機/報修原因
						if(IAtomsConstants.ACTION_REMOVE.equals(srmCaseAssetLinkDTO.getAction())) {
							dmmRepositoryDTO.setUninstallOrRepairReason(i18NUtil.getName(IAtomsConstants.ACTION_REMOVE));
						} else {
							dmmRepositoryDTO.setUninstallOrRepairReason(i18NUtil.getName(IAtomsConstants.ACTION_LOSS));
						}
						dmmRepositoryDTO.setDescription(srmCaseAssetLinkDTO.getRemoveContent());
					} else {
						dmmRepositoryDTO.setCaseId(null);
						//案件完修日 拆機或者 取消鏈接 寫為空
						dmmRepositoryDTO.setCaseCompletionDate(null);
						dmmRepositoryDTO.setDepartmentId(null);
						//維護廠商
						dmmRepositoryDTO.setMaintainCompany(null);
						//維護工程師
						dmmRepositoryDTO.setMaintainUser(null);
						//簽收日期
						dmmRepositoryDTO.setAnalyzeDate(null);
						dmmRepositoryDTO.setUninstallOrRepairReason(null);
						dmmRepositoryDTO.setDescription(null);
					}
					// 拆機案件或取消連接操作，寫入空。TID
					dmmRepositoryDTO.setTid(null);
					// 拆機案件或取消連接操作，寫入空。 dtid
					dmmRepositoryDTO.setDtid(null);
					//拆機案件或取消連接操作，寫入空。
					dmmRepositoryDTO.setMerchantId(null);
					dmmRepositoryDTO.setInstalledAdress(null);
					dmmRepositoryDTO.setInstallType(null);
					dmmRepositoryDTO.setMerchantHeaderId(null);
					//軟體版本 裝機地址市縣 維護部門
					dmmRepositoryDTO.setApplicationId(null);
					dmmRepositoryDTO.setInstalledAdressLocation(null);
					//Bug #2303
					dmmRepositoryDTO.setCustomerWarrantyDate(null);
				}
			}
			//存儲庫存表
			dmmRepositoryDTO.setUpdateUser(logonUser.getId());
			dmmRepositoryDTO.setUpdateUserName(logonUser.getName());
			dmmRepositoryDTO.setUpdateDate(DateTimeUtils.getCurrentTimestamp());
			DmmRepository dmmRepository = (DmmRepository) transformer.transform(dmmRepositoryDTO, new DmmRepository());
			//存儲庫存歷史表
			/*this.dmmRepositoryDAO.getDaoSupport().saveOrUpdate(dmmRepository);
			this.dmmRepositoryDAO.getDaoSupport().flush();*/
			this.dmmRepositoryDAO.update(dmmRepository);
			this.dmmRepositoryDAO.getDaoSupport().flush();
			String assetId = dmmRepositoryDTO.getAssetId();
			if(IAtomsConstants.YES.equals(srmCaseAssetLinkDTO.getIsUninstallAndLoss())) {
				//拆機和遺失。庫存歷史檔存儲兩筆數據
				String historyIdUninstallAndLoss = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_DMM_REPOSITORY_HISTORY);
				//action是遺失，案件狀態為待報廢，並新增兩筆案件歷史信息（案件狀態分別為“遺失，待報廢”） 此處儲存 遺失
				this.dmmRepositoryDAO.saveRepositoryHist(assetId, historyIdUninstallAndLoss, IAtomsConstants.PARAM_ASSET_STATUS_LOST);
			} else {
				//調用存儲過程，存儲庫存歷史檔資料
				this.dmmRepositoryDAO.saveRepositoryHist(assetId, historyId, dmmRepositoryDTO.getStatus());
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".saveRepository(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".saveRepository(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	/**
	 * Purpose:存儲案件對應的設備和耗材鏈接檔
	 * @author HermanWang
	 * @param sessionContext：上下文sessionContext
	 * @throws ServiceException：出錯時拋出ServiceException
	 * @return SessionContext：上下文sessionContext
	 */
	public SessionContext saveSignAndOnlineExclusion(SessionContext sessionContext) throws ServiceException {
		Message msg = null;
		// 主鍵id
		String transactionId = null;
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		Map<String, Object> resultMap = this.validateCaseAction(formDTO);
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();// (IAtomsLogonUser) sessionContext.getLogonUser();
		String oldCaseStatus = IAtomsConstants.MARK_EMPTY_STRING;
		StringBuffer cmsErrorMsg = new StringBuffer();
		try {
			if(!(Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					if(IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode().equals(formDTO.getActionId())) {
						LOGGER.error("CaseManagerService --> saveSignAndOnlineExclusion() --> ", "onlineExclusion validate error!!!", "resultMap msg is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ONLINE_EXCLUSION)});
					} else {
						LOGGER.error("CaseManagerService --> saveSignAndOnlineExclusion() --> ", "sign validate error!!!", "resultMap msg is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_SIGN)});
					}
				}
				sessionContext.setReturnMessage(msg);
				return sessionContext;
			}
			//動作
			SrmCaseHandleInfo caseHandleInfo = null;
			SrmCaseTransaction caseTransaction = null;
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
			String[] caseIds = null;
			Transformer transformer = new SimpleDtoDmoTransformer();
			// 當前交易參數信息
			List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = null;
			// 之前有CUP的標記
			//boolean oldCUP = false;
			// 當前有CUP標記
			boolean newCUP = false;
			// 問題原因code
			String problemReasonCode = null;
			String problemReason = null;
			// 問題解決方式code
			String problemSolutionCode = null;
			String problemSolution = null;
			String tid = null;
			//Task #3519 存儲call cms 成功的案件 key 為 caseid， value 為 下行電文
	    	Map<String, String> callCmsMap = new HashMap<String, String>();
			//所選擇行所有的設備鏈接和耗材list
			List<SrmCaseAssetLinkDTO> srmCaseAssetLinkDTOAllList = formDTO.getSrmCaseAssetLinkDTO();
			//每一行的設備鏈接和耗材list (同一個caseid)
			List<SrmCaseAssetLinkDTO> srmCaseAssetLinkDTOList = null;
			//存放所選擇行所有的設備鏈接和耗材list的map key 是 caseid value 是 此caseid下的 耗材設備鏈接list
			Map<String, List<SrmCaseAssetLinkDTO>> srmCaseAssetLinkDTOListMap = new HashMap<String, List<SrmCaseAssetLinkDTO>>();
			for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : srmCaseAssetLinkDTOAllList) {
				if(CollectionUtils.isEmpty(srmCaseAssetLinkDTOListMap.get(srmCaseAssetLinkDTO.getCaseId()))) {
					srmCaseAssetLinkDTOList = new ArrayList<SrmCaseAssetLinkDTO>();
				} 
				srmCaseAssetLinkDTOList.add(srmCaseAssetLinkDTO);
				srmCaseAssetLinkDTOListMap.put(srmCaseAssetLinkDTO.getCaseId(), srmCaseAssetLinkDTOList);
			}
			formDTO.setSrmCaseAssetLinkDTOListMap(srmCaseAssetLinkDTOListMap);
			if(StringUtils.hasText(srmCaseTransactionDTO.getCaseId())){
				caseIds = srmCaseTransactionDTO.getCaseId().split(IAtomsConstants.MARK_SEPARATOR);
				if(caseIds != null){
					String newCaseId = IAtomsConstants.MARK_EMPTY_STRING;
					String deleteCaseId = IAtomsConstants.MARK_EMPTY_STRING;
					List<SrmCaseHandleInfoDTO> caseHandleInfoDTOs = null;
					String api = null;
					ReceiveJobNoticeDTO receiveJobNoticeDTO = null;
					Gson gson = new Gson();
					String jsonString = null;
					
					String apiLogResult = null;	
					String message = null;
					ReceiveJobNoticeDTO resultMsg = null;
					List<SrmCaseAssetLinkDTO> assetLinkDTOs = null;
					Boolean isEqualEdc = false;
					Boolean isEqualPeripherals = false;
					for (int i = 0; i < caseIds.length; i++) {
						//獲取案件主檔
						caseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseIds[i]);
						if (caseHandleInfo != null) {
							isEqualEdc = false;
							isEqualPeripherals = false;
							if (IAtomsConstants.CASE_ACTION.SIGN.getCode().equals(formDTO.getCaseActionId())) {
								//Task #3390 核檢租賃預載輸入之SN是否與簽收相符
								if ((StringUtils.hasText(caseHandleInfo.getPreloadSerialNumber())
										|| StringUtils.hasText(caseHandleInfo.getSimSerialNumber()))
										&& !IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory())) {
									assetLinkDTOs = srmCaseAssetLinkDTOListMap.get(caseIds[i]);
									if (!CollectionUtils.isEmpty(assetLinkDTOs)) {
										for (SrmCaseAssetLinkDTO dto : assetLinkDTOs) {
											if (StringUtils.hasText(caseHandleInfo.getPreloadSerialNumber()) && caseHandleInfo.getPreloadSerialNumber().equals(dto.getSerialNumber())) {
												isEqualEdc = true;
											}
											if (StringUtils.hasText(caseHandleInfo.getSimSerialNumber()) && caseHandleInfo.getSimSerialNumber().equals(dto.getSerialNumber())) {
												isEqualPeripherals = true;
											}
										}
									}
								}
								if (StringUtils.hasText(caseHandleInfo.getPreloadSerialNumber()) && !isEqualEdc) {
									cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{caseHandleInfo.getCaseId(), i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_SERIAL_NUMBER_COMPARE_ERROR)}, null)).append("</br>");
									continue;
								}
								if (StringUtils.hasText(caseHandleInfo.getSimSerialNumber()) && !isEqualPeripherals) {
									cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{caseHandleInfo.getCaseId(), i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_SIM_ERIAL_NUMBER_COMPARE_ERROR)}, null)).append("</br>");
									continue;
								}
							}
							if(formDTO.getCaseActionId().equals("onlineExclusion") 
									&& caseHandleInfo.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode())
									&& caseHandleInfo.getCmsCase().equals(IAtomsConstants.PARAM_YES)){
								Boolean isCallCms = true;
								if(caseHandleInfo.getIsIatomsCreateCms().equals(IAtomsConstants.PARAM_YES)
										&& caseHandleInfo.getDispatchDate() == null){
									isCallCms = false;
									// #3359 發送作業狀態為【01：受理中（派工）】的請求，若返回結果為true,則發送線上排除的請求
									String json = null;
									ReceiveJobNoticeDTO jobNoticeDTO = null;
									SrmCaseHandleInfoDTO caseHandleInfoDTO = null;
									Map<String, String> map = null;
									caseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(caseIds[i]);
									if (caseHandleInfoDTOs != null) {
										caseHandleInfoDTO = caseHandleInfoDTOs.get(0);
									}
									jobNoticeDTO = new ReceiveJobNoticeDTO("01", caseHandleInfoDTO.getMerMid(), caseIds[i], caseHandleInfoDTO.getDtid(), 
											caseHandleInfoDTO.getContactUser(), caseHandleInfoDTO.getContactUserPhone(), caseHandleInfoDTO.getContactMobilePhone(), 
											caseHandleInfoDTO.getContactUserEmail(), caseHandleInfoDTO.getContactAddressLocationName(), 
											caseHandleInfoDTO.getContactAddress(), caseHandleInfoDTO.getRepairReasonName(), caseHandleInfoDTO.getContactAreaCode(), 
											caseHandleInfoDTO.getContactPostArea());
									json = gson.toJson(jobNoticeDTO);
									LOGGER.debug("CaseManagerService --> onlineExclusion() --> ", "json=" + json);
									map =  NetUtil.sendHtppsNew("APIOP004", json);
									if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
										message = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
									}
									if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
										apiLogResult = "true";
									} else {
										apiLogResult = "false";
									}
									LOGGER.debug("CaseManagerService --> onlineExclusion() --> ", "message=" + message);
									//上行(RQ)
									this.insertApiLog(IAtomsConstants.API_RQ, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, null, json);
									if (StringUtils.hasText(message)) {
										Object responseJson = (Object) gson.fromJson(message, Object.class);
										resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
										if (!(resultMsg.getRESULT().equals("True"))) {
											cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{caseIds[i], resultMsg.getRESULT_MSG()}, null)).append("</br>");
											apiLogResult = "false";
											//下行(RS)
											this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), message);
											continue;
										} else {
											isCallCms = true;
											apiLogResult = "true";
											//下行(RS)
											this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, null, message);
										}
									} else {
										cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{caseIds[i], "cms請求失敗"}, null)).append("</br>");
										apiLogResult = "false";
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, null, "");
										continue;
									}
								}
								if(isCallCms){
									//處理參數
									BimMerchant bimMerchant = this.merchantDAO.findByPrimaryKey(BimMerchant.class, caseHandleInfo.getMerchantCode());
									receiveJobNoticeDTO = new ReceiveJobNoticeDTO("05", caseHandleInfo.getCaseId(),
											bimMerchant.getMerchantCode(),caseHandleInfo.getDtid());
									jsonString = gson.toJson(receiveJobNoticeDTO);
									LOGGER.debug("CaseManagerService --> onlineExclusion() --> ", "json=" + jsonString);
									//call CMS API
									Map<String, String> map = null;
									String resultString = null;	
									map = NetUtil.sendHtppsNew("APIOP004", jsonString);
									if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
										resultString = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
									}
									if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
										apiLogResult = "true";
									} else {
										apiLogResult = "false";
									}
									//上行(RQ)
									this.insertApiLog(IAtomsConstants.API_RQ, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, null, jsonString);
									LOGGER.debug("CaseManagerService --> onlineExclusion() --> ", "message=" + resultString);
									if (StringUtils.hasText(resultString)) {
										Object responseJson = (Object) gson.fromJson(resultString, Object.class);
										LOGGER.debug("CaseManagerService --> onlineExclusion() --> ", "responseJson=" + responseJson);
										resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
										if (!(resultMsg.getRESULT().equals("True"))) {
											cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{caseHandleInfo.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
											apiLogResult = "false";
											//下行(RS)
											this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), resultString);
											continue;
										} else {
											callCmsMap.put(caseHandleInfo.getCaseId(), resultString);
										}
									} else {
										LOGGER.debug("CaseManagerService --> onlineExclusion() --> ", "save error!!!", "message is null");
										apiLogResult = "false";
										cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{caseHandleInfo.getCaseId(), "cms請求失敗"}, null)).append("</br>");
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, null, "");
										continue;
									}
								}
								//Task #3552 (CMS)_案件管理_簽收)
							} else if (IAtomsConstants.CASE_ACTION.SIGN.getCode().equals(formDTO.getCaseActionId())
									&& caseHandleInfo.getCmsCase().equals(IAtomsConstants.PARAM_YES)){
								String newSerialNumber = null;
								String oldSerialNumber = null;
								Map<String, String> map = null;
								if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())
										|| IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(caseHandleInfo.getCaseCategory())) {
									if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())) {
										api = "APIOP002";
									} else {
										api = "APIOP004";
									}
									SrmCaseHandleInfoDTO caseHandleInfoDTO = null;
									caseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(caseIds[i]);
									if (caseHandleInfoDTOs != null) {
										caseHandleInfoDTO = caseHandleInfoDTOs.get(0);
									}
									assetLinkDTOs = srmCaseAssetLinkDTOListMap.get(caseIds[i]);
									for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : assetLinkDTOs) {
										if (IAtomsConstants.LEAVE_CASE_STATUS_TEN.equals(srmCaseAssetLinkDTO.getItemType())) {
											newSerialNumber = srmCaseAssetLinkDTO.getSerialNumber();
											break;
										}
									}
									if (IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(caseHandleInfo.getCaseCategory()) && 
											StringUtils.hasText(newSerialNumber) && !newSerialNumber.equals(caseHandleInfoDTO.getSerialNumber())) {
										oldSerialNumber = caseHandleInfoDTO.getSerialNumber();
									}
									receiveJobNoticeDTO = new ReceiveJobNoticeDTO("16", caseHandleInfoDTO.getMerMid(), caseHandleInfoDTO.getCaseId(), caseHandleInfoDTO.getDtid(), newSerialNumber, oldSerialNumber);
									jsonString = gson.toJson(receiveJobNoticeDTO);
									LOGGER.debug("CaseManagerService --> sign() --> ", "json=" + jsonString);
									map =  NetUtil.sendHtppsNew(api, jsonString);
									if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
										message = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
									}
									if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
										apiLogResult = "true";
									} else {
										apiLogResult = "false";
									}
									LOGGER.debug("CaseManagerService --> sign() --> ", "message=" + message);
									//上行(RQ)
									this.insertApiLog(IAtomsConstants.API_RQ, caseHandleInfoDTO.getCaseId(), null, logonUser, apiLogResult, null, jsonString);
									if (StringUtils.hasText(message)) {
										Object responseJson = (Object) gson.fromJson(message, Object.class);
										LOGGER.debug("CaseManagerService --> sign() --> ", "responseJson=" + responseJson);
										resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
										LOGGER.debug("CaseManagerService --> sign() --> ", "resultMsg=" + resultMsg.getRESULT_MSG());
										if (resultMsg.getRESULT().equals("True")) {
											callCmsMap.put(caseHandleInfoDTO.getCaseId(), message);
										} else {
											cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{caseHandleInfoDTO.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
											apiLogResult = "false";
											//下行(RS)
											this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfoDTO.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), message);
											continue;
										}
									} else {
										apiLogResult = "false";
										cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{caseHandleInfo.getCaseId(), "cms請求失敗"}, null)).append("</br>");
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfoDTO.getCaseId(), null, logonUser, apiLogResult, null, "");
										continue;
									}
								}
							}
							//拼接新的caseId
							newCaseId = newCaseId + caseHandleInfo.getCaseId() + IAtomsConstants.MARK_SEPARATOR;
							deleteCaseId += IAtomsConstants.SINGLE_QUOTATION_MARKS + caseHandleInfo.getCaseId()
									+ IAtomsConstants.SINGLE_QUOTATION_MARKS + IAtomsConstants.MARK_SEPARATOR;
							//查詢該案件 是否有簽收 和 線上排除的 記錄
							//Boolean isWaitClose = false;
							//if(caseHandleInfo.getAnalyzeDate() != null) {
							//	isWaitClose = true;
							//}
							// 打印log
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : caseId =" + caseHandleInfo.getCaseId());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : dtid =" + caseHandleInfo.getDtid());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : customerId =" + caseHandleInfo.getCustomerId());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : contractId =" + caseHandleInfo.getContractId());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : companyId =" + caseHandleInfo.getCompanyId());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : departmentId =" + caseHandleInfo.getDepartmentId());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : caseType =" + caseHandleInfo.getCaseType());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : merchantCode =" + caseHandleInfo.getMerchantCode());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : merchantHeaderId =" + caseHandleInfo.getMerchantHeaderId());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : edcType =" + caseHandleInfo.getEdcType());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : peripherals =" + caseHandleInfo.getPeripherals());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : peripherals2 =" + caseHandleInfo.getPeripherals2());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : peripherals3 =" + caseHandleInfo.getPeripherals3());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : ecrConnection =" + caseHandleInfo.getEcrConnection());
							LOGGER.debug("saveSignAndOnlineExclusion() dmo-->", "parameters : softwareVersion =" + caseHandleInfo.getSoftwareVersion());
							if(!StringUtils.hasText(oldCaseStatus)){
								oldCaseStatus = caseHandleInfo.getCaseStatus();
							}
							problemReasonCode = null;
							problemSolutionCode = null;
							problemReason = null;
							problemSolution = null;
							// 問題原因code
							if(StringUtils.hasText(srmCaseTransactionDTO.getProblemReason())){
								if(srmCaseTransactionDTO.getProblemReason().indexOf(IAtomsConstants.MARK_MIDDLE_LINE) > 0){
									problemReasonCode = srmCaseTransactionDTO.getProblemReason().substring(0, srmCaseTransactionDTO.getProblemReason().indexOf(IAtomsConstants.MARK_MIDDLE_LINE));
								//	problemReason = srmCaseTransactionDTO.getProblemReason().substring(srmCaseTransactionDTO.getProblemReason().indexOf(IAtomsConstants.MARK_MIDDLE_LINE) + 1, srmCaseTransactionDTO.getProblemReason().length());
									problemReason = srmCaseTransactionDTO.getProblemReason().replace(problemReasonCode + IAtomsConstants.MARK_MIDDLE_LINE, IAtomsConstants.MARK_EMPTY_STRING);
								}
							}
							// 問題解決方式code
							if(StringUtils.hasText(srmCaseTransactionDTO.getProblemSolution())){
								if(srmCaseTransactionDTO.getProblemSolution().indexOf(IAtomsConstants.MARK_MIDDLE_LINE) > 0){
									problemSolutionCode = srmCaseTransactionDTO.getProblemSolution().substring(0, srmCaseTransactionDTO.getProblemSolution().indexOf(IAtomsConstants.MARK_MIDDLE_LINE));
								//	problemSolution = srmCaseTransactionDTO.getProblemSolution().substring(srmCaseTransactionDTO.getProblemSolution().indexOf(IAtomsConstants.MARK_MIDDLE_LINE) + 1, srmCaseTransactionDTO.getProblemReason().length());
									problemSolution = srmCaseTransactionDTO.getProblemSolution().replace(problemSolutionCode + IAtomsConstants.MARK_MIDDLE_LINE, IAtomsConstants.MARK_EMPTY_STRING);
								}
							}
							//生成id
							transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
							if(!StringUtils.hasText(caseTransactionId)) {
								caseTransactionId = transactionId;
							} else {
								caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + transactionId;
							}
							formDTO.setCaseTransactionId(caseTransactionId);
							caseTransaction = new SrmCaseTransaction();
							transformer.transform(srmCaseTransactionDTO, caseTransaction);
							// 放置執行動作
							caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
							// 放置案件狀態
							caseTransaction.setCaseStatus(srmCaseTransactionDTO.getCaseStatus());
							//若案件狀態為“待結案審查”，則案件狀態更新為完修，將案件退回給工程師
							//caseTransaction.setDealById(srmCaseTransactionDTO.getDealById());
							//caseTransaction.setDealByName(srmCaseTransactionDTO.getDealByName());
							// 實際執行時間處理
							if(srmCaseTransactionDTO.getDealDate() == null){
								caseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
							} else {
								caseTransaction.setDealDate(srmCaseTransactionDTO.getDealDate());
							}
							// 描述說明
							caseTransaction.setCheckResult(srmCaseTransactionDTO.getCheckResult());
							caseTransaction.setProblemReason(problemReason);
							caseTransaction.setProblemSolution(problemSolution);
							caseTransaction.setResponsibity(srmCaseTransactionDTO.getResponsibity());
							//問題原因code
							caseTransaction.setProblemReasonCode(problemReasonCode);
							//問題解決方式code
							caseTransaction.setProblemSolutionCode(problemSolutionCode);
							List<SrmCaseAssetLinkDTO> SrmCaseAssetLinkDTOList = srmCaseAssetLinkDTOListMap.get(caseHandleInfo.getCaseId());
							StringBuilder builder = new StringBuilder();
							builder.append(srmCaseTransactionDTO.getDescription());
							// 設備異動資訊描述
							if(!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(caseHandleInfo.getCaseCategory())){
								//Bug #2342 加換行符 --update by 2017/09/04
								if (StringUtils.hasText(srmCaseTransactionDTO.getDescription())) {
									builder.append(IAtomsConstants.MARK_WRAP);
								}
								builder.append(i18NUtil.getName(IAtomsMessageCode.ASSET_CHANGE_INFORMATION)).append(IAtomsConstants.MARK_COLON).append(IAtomsConstants.MARK_WRAP);
								//專案件 設備異動資訊: 原設備-EDC: XX, 序號:XX 原設備-週邊設備: XX, 序號:XX
								if(IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(srmCaseTransactionDTO.getCaseCategory())) {
									builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_CHECK_RESULT)).append(srmCaseTransactionDTO.getCheckResultName()).append(IAtomsConstants.MARK_WRAP);
								//報修件 問題原因: XX 解決方式: XX  責任歸屬: XX  設備異動資訊: 原設備-EDC: XX, 序號:XX  原設備-週邊設備: XX, 序號:XX
								} else if(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(srmCaseTransactionDTO.getCaseCategory())) {
									builder.append(i18NUtil.getName(IAtomsMessageCode.CASE_PROBLEM_REASON)).append(srmCaseTransactionDTO.getProblemReasonName()).append(IAtomsConstants.MARK_WRAP);
									builder.append(i18NUtil.getName(IAtomsMessageCode.CASE_PROBLEM_SOLUTION)).append(srmCaseTransactionDTO.getProblemSolutionName()).append(IAtomsConstants.MARK_WRAP);
									builder.append(i18NUtil.getName(IAtomsMessageCode.CASE_RESPONSIBITY)).append(srmCaseTransactionDTO.getResponsibityName()).append(IAtomsConstants.MARK_WRAP);
								}
								// 其他案件類別處理說明
								if(!CollectionUtils.isEmpty(SrmCaseAssetLinkDTOList)) {
									int count = 0;
									for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : SrmCaseAssetLinkDTOList) {
										if(!IAtomsConstants.PARAM_CASE_LINK_SUPPLIES.equals(srmCaseAssetLinkDTO.getItemType())) {
											//裝機件: 設備異動資訊:新增-EDC: XX, 序號: XX  新增-週邊設備: XX, 序號: XX
											if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseTransactionDTO.getCaseCategory())) {
												// 新增EDC
												if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLinkDTO.getItemType())) {
													builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ADD_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
												}
												// 新增周邊
												if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS.equals(srmCaseAssetLinkDTO.getItemType()) || IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2.equals(srmCaseAssetLinkDTO.getItemType()) || IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3.equals(srmCaseAssetLinkDTO.getItemType())) {
													builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ADD_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
												}
												//異動/併機件/專案件/報修件(部分): 設備異動資訊: 原設備-EDC: XX, 序號: XX  原設備-週邊設備: XX, 序號: XX	
											} else if(IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(srmCaseTransactionDTO.getCaseCategory())
													|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseTransactionDTO.getCaseCategory())
													|| IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(srmCaseTransactionDTO.getCaseCategory())
													|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseTransactionDTO.getCaseCategory())) {
												SrmCaseAssetLink srmCaseAssetLink = this.srmCaseAssetLinkDAO.findByPrimaryKey(SrmCaseAssetLink.class, srmCaseAssetLinkDTO.getAssetLinkId());
												// 原設備EDC
												if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLinkDTO.getItemType())) {
													if(srmCaseAssetLink != null) {
														// 新增EDC
														if(StringUtils.hasText(srmCaseAssetLink.getSerialNumber())) {
															if(!srmCaseAssetLink.getSerialNumber().equals(srmCaseAssetLinkDTO.getSerialNumber())){
																//移除原EDC
																if(StringUtils.hasText(srmCaseAssetLinkDTO.getActionValue())) {
																	builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_ORIGINALLY_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
																} else {
																	//移除edc
																	builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
																}
																builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ADD_ORIGINALLY_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
															} else {
																//EDC未異動
																if(StringUtils.hasText(srmCaseAssetLinkDTO.getIsRepeatLink())) {
																	//原EDC
																	builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ORIGINALLY_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
																} else {
																	//非 原EDC
																	builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
																}
															}
														} else {
															//新增EDC
															builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ADD_ORIGINALLY_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
														}
													}
												}
												// 周邊
												if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS.equals(srmCaseAssetLinkDTO.getItemType()) 
														|| IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2.equals(srmCaseAssetLinkDTO.getItemType()) 
														|| IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3.equals(srmCaseAssetLinkDTO.getItemType())) {
													if(srmCaseAssetLink != null) {
														if(StringUtils.hasText(srmCaseAssetLink.getSerialNumber())) {
															// 新增周邊
															if(!srmCaseAssetLink.getSerialNumber().equals(srmCaseAssetLinkDTO.getSerialNumber())){
																// 移除原周邊
																if(StringUtils.hasText(srmCaseAssetLinkDTO.getActionValue())) {
																	builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_ORIGINALLY_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
																} else {
																	//移除 非 原周邊
																	builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
																}
																//新增周邊
																builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ADD_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
															} else {
																//周邊不異動
																if(StringUtils.hasText(srmCaseAssetLinkDTO.getIsRepeatLink())) {
																	//原 周邊
																	builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ORIGINALLY_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
																} else {
																	//周邊
																	builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
																}
															}
														} else {
															//新增周邊
															builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ADD_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
														}
													}
												}
												count ++;
												if(count == 1) {
													//所有要刪除的設備鏈接和耗材的id.
													String deleteCaseSuppliesLinkIds= formDTO.getDeleteCaseAssetLinkIds();
													if(StringUtils.hasText(deleteCaseSuppliesLinkIds)) {
														Gson gsonss = new GsonBuilder().create();
														List<SrmCaseAssetLinkDTO> srmCaseAssetLinkDTOs = (List<SrmCaseAssetLinkDTO>) gsonss.fromJson(
																deleteCaseSuppliesLinkIds, new TypeToken<List<SrmCaseAssetLinkDTO>>(){}.getType());
														for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO1 : srmCaseAssetLinkDTOs) {
															//R 傳過來通過;解開。 分別為刪除的id和選擇的動作 拆回或者遺失
															srmCaseAssetLink = this.srmCaseAssetLinkDAO.findByPrimaryKey(SrmCaseAssetLink.class, srmCaseAssetLinkDTO1.getAssetLinkId());
															if(srmCaseAssetLink != null) {
																DmmAssetType assetType = this.assetTypeDAO.findByPrimaryKey(DmmAssetType.class, srmCaseAssetLink.getItemId());
																if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLink.getItemType())) {
																	//移除原EDC
																	builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_ORIGINALLY_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
																} else {
																	// 移除原周邊R
																	builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_ORIGINALLY_PERIPHERALS, new String[]{assetType.getName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
																}
															}														
														}
													}
													/*String deleteCaseSuppliesLinkIds= formDTO.getDeleteCaseAssetLinkIds();
													if(StringUtils.hasText(deleteCaseSuppliesLinkIds)) {
														//所有刪除了的設備鏈接當的刪除id數組
														String[] caseSuppliesDeleteIdStrings = deleteCaseSuppliesLinkIds.split(IAtomsConstants.MARK_SEPARATOR);
														for (String caseSuppliesLinkId : caseSuppliesDeleteIdStrings) {
															//R 傳過來通過;解開。 分別為刪除的id和選擇的動作 拆回或者遺失
															if(caseSuppliesLinkId.indexOf(IAtomsConstants.MARK_SEMICOLON) > 0) {
																String[] caseLinkIds = caseSuppliesLinkId.split(IAtomsConstants.MARK_SEMICOLON);
																srmCaseAssetLink = this.srmCaseAssetLinkDAO.findByPrimaryKey(SrmCaseAssetLink.class, caseLinkIds[0]);
															}
															if(srmCaseAssetLink != null) {
																DmmAssetType assetType = this.assetTypeDAO.findByPrimaryKey(DmmAssetType.class, srmCaseAssetLink.getItemId());
																if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLink.getItemType())) {
																	//移除原EDC
																	builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_ORIGINALLY_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
																} else {
																	// 移除原周邊R
																	builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_ORIGINALLY_PERIPHERALS, new String[]{assetType.getName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
																}
															}
														}
													}*/
												}
												//拆機件 設備異動資訊:移除-EDC: XX, 序號: XX  移除-週邊設備: XX, 序號: XX
											} else if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(srmCaseTransactionDTO.getCaseCategory())) {
												// 移除EDC
												if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLinkDTO.getItemType())) {
													//設備序號為空的時候改為分號 2017/12/11
													builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), !StringUtils.hasText(srmCaseAssetLinkDTO.getUninstallSerialNumber()) ? IAtomsConstants.MARK_SEMICOLON : srmCaseAssetLinkDTO.getUninstallSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
												}
												// 移除周邊
												if((IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS.equals(srmCaseAssetLinkDTO.getItemType()) 
														|| IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2.equals(srmCaseAssetLinkDTO.getItemType()) 
														|| IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3.equals(srmCaseAssetLinkDTO.getItemType()))
														&& IAtomsConstants.NO.equals(srmCaseAssetLinkDTO.getIsLink())) {
													builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), !StringUtils.hasText(srmCaseAssetLinkDTO.getUninstallSerialNumber()) ? IAtomsConstants.MARK_SEMICOLON : srmCaseAssetLinkDTO.getUninstallSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
												}
											}
										}
									}
								}
							}
							
							// 描述處理
							caseTransaction.setDescription(builder.toString());
							caseTransaction.setCaseId(caseIds[i]);
							// 主鍵
							caseTransaction.setTransactionId(transactionId);
							caseTransaction.setCreatedById(logonUser.getId());
							caseTransaction.setCreatedByName(logonUser.getName());
							caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							//當前關卡
							caseTransaction.setCaseStage(oldCaseStatus.toUpperCase());
							//當前關卡名稱
							caseTransaction.setCaseStageName(i18NUtil.getName(oldCaseStatus));
							//下一關關卡代碼
							caseTransaction.setNextCaseStage(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().toUpperCase());
							//下一關關卡名稱
							caseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode()));
							this.srmCaseTransactionDAO.insert(caseTransaction);
							//Task #3519 存儲下行電文 要有案件歷程id
							if(callCmsMap.containsKey(caseHandleInfo.getCaseId())){
								apiLogResult = "true";
								this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfo.getCaseId(), caseTransaction.getTransactionId(), logonUser, apiLogResult, null, callCmsMap.get(caseHandleInfo.getCaseId()));
							}
							//srmCaseTransactionDTO.setDescription(builder.toString());
							
							caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode());
							// 簽收日期 畫面上輸入之實際執行時間,如果為空,則填入當前時間
							if(srmCaseTransactionDTO.getDealDate() == null){
								caseHandleInfo.setAnalyzeDate(DateTimeUtils.getCurrentTimestamp());
							} else {
								caseHandleInfo.setAnalyzeDate(srmCaseTransactionDTO.getDealDate());
							}
							// 填入最後一次派工的派工單位（排除客服，TMS，QA）
							//caseHandleInfo.setInstalledDeptId(IAtomsConstants.MARK_EMPTY_STRING);
							//caseHandleInfo.setInstalledUser(IAtomsConstants.MARK_EMPTY_STRING);
							//問題原因
							caseHandleInfo.setProblemReason(problemReason);
							//問題原因code
							caseHandleInfo.setProblemReasonCode(problemReasonCode);
							//問題解決方式
							caseHandleInfo.setProblemSolution(problemSolution);
							//問題解決方式code
							caseHandleInfo.setProblemSolutionCode(problemSolutionCode);
							//責任歸屬
							caseHandleInfo.setResponsibity(srmCaseTransactionDTO.getResponsibity());
							caseHandleInfo.setUpdatedById(logonUser.getId());
							caseHandleInfo.setUpdatedByName(logonUser.getName());
							caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							// 當前交易參數
							srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseHandleInfo.getCaseId(), null);
							tid = null;
							if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
								for(SrmCaseTransactionParameterDTO tempSrmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
									// 判斷有沒有CUP類別
									/*if(IAtomsConstants.TRANSACTION_CATEGORY.COMMON.getCode().equals(tempSrmCaseTransactionParameterDTO.getTransactionType())){
										tid = tempSrmCaseTransactionParameterDTO.getTid();
										break;
									}*/
									if(tempSrmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VM.getCode())
											|| tempSrmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJ.getCode())
											|| tempSrmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJU.getCode())){
										if(StringUtils.hasText(tempSrmCaseTransactionParameterDTO.getTid())){
											tid = tempSrmCaseTransactionParameterDTO.getTid();
											break;
										}
									}
								}
								sessionContext.setAttribute(SrmCaseHandleInfoDTO.ATTRIBUTE.TID.getValue(), tid);
							}
							setUserRoleFlag(formDTO);
							// 線上排除
							if(IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode().equals(formDTO.getActionId())) {
								// 線上排除：軟派
								List<SrmCaseTransactionDTO> caseTransactionDTOs = this.srmCaseTransactionDAO.listAfterQAs(caseHandleInfo.getCaseId());
								if (CollectionUtils.isEmpty(caseTransactionDTOs)) {
									caseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_NO_DISPATCH);
								} else {
									caseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_SOFT_DISPATCH);
								}
								//caseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_SOFT_DISPATCH);
								//Task #3349
								boolean isInstallComplete = false;
								if(caseHandleInfo.getCompleteDate()==null && IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
									isInstallComplete = true;
								}
								// 實際執行時間記錄為該案件的完修時間
								if(srmCaseTransactionDTO.getDealDate() == null){
									caseHandleInfo.setCompleteDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
								} else {
									caseHandleInfo.setCompleteDate(srmCaseTransactionDTO.getDealDate());
								}
								if (isInstallComplete) {
									// 端末機代號啟用日: 實際完修日(裝機)，換機會繼承至新機
									caseHandleInfo.setInstallCompleteDate(caseHandleInfo.getCompleteDate());
								}
								// 完修人員信息
								caseHandleInfo.setCompleteUser(logonUser.getId());
								caseHandleInfo.setCompleteUserName(logonUser.getName());
								// Task #2547  新增，執行完修部門 欄位
								AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, logonUser.getId());
							//	caseHandleInfo.setCompleteDepartmentId(admUser.getDeptCode());
								// Task #2547 協調完成：若為客服執行，部門是客服  // CR #2951 廠商客服 //Task #3578 客戶廠商客服
								if(formDTO.getIsCustomerService() || formDTO.getIsVendorService() || formDTO.getIsCusVendorService()){
									caseHandleInfo.setCompleteDepartmentId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
								} else {
									caseHandleInfo.setCompleteDepartmentId(admUser.getDeptCode());
								}
								
								//setUserRoleFlag(formDTO);
								//如果當前登入着 是 客服
								//Bug #2305
//								if(formDTO.getIsCustomerService()) {
//									caseHandleInfo.setDispatchDeptId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
//									caseHandleInfo.setDispatchProcessUser(logonUser.getId());
//									caseHandleInfo.setDispatchProcessUsername(logonUser.getName());
//									//update by 2017/07/26 Bug #2040
//									//紀錄最新的派工單位與人員(USER選擇的)，若USER沒選人員，做線上排除時，更新派工處理人員=作業人員
//								} else if(!StringUtils.hasText(caseHandleInfo.getDispatchProcessUser())) {
//									caseHandleInfo.setDispatchProcessUser(logonUser.getId());
//									caseHandleInfo.setDispatchProcessUsername(logonUser.getName());
//									AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, logonUser.getId());
//									caseHandleInfo.setDispatchDeptId(admUser.getDeptCode());
//								}
								// Task #2606 線上排除設定標記
								caseHandleInfo.setHasOnlineExclusion(IAtomsConstants.PARAM_YES);
								// 進件完工日  當脫離待派工狀態時，需寫入進件完工日 2018/01/08
								if(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(oldCaseStatus)) {
									caseHandleInfo.setCreatedFinishDate(caseTransaction.getDealDate());
								}
								
							} else {
							//	caseHandleInfo.setProcessType(null);
							}
							newCUP = false;
							// 依據案件類別判斷CUP類別存取情況
							// 裝機只判斷當前是否有CUP
							if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
								// 當前交易參數
								//	srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseHandleInfo.getCaseId(), null);
								if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
									for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
										// 判斷有沒有CUP類別
										if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
											newCUP = true;
											break;
										}
									}
									//如果此筆案件交易參數有cup
									if(newCUP) {
										//判斷案件信息裡面的cup啟用日是否有值 無值 存儲完修日期 如果有值，不管
										if(caseHandleInfo.getCupEnableDate() == null) {
											caseHandleInfo.setCupEnableDate(caseHandleInfo.getCompleteDate());
										}
									} else {
										caseHandleInfo.setCupEnableDate(null);
									}
								}
								// 併機與異動可操作交易參數
							} else if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseHandleInfo.getCaseCategory())
										|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseHandleInfo.getCaseCategory())){
								if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
									for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
										// 判斷有沒有CUP類別
										if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
											newCUP = true;
											break;
										}
									}
									//有cup交易
									if(newCUP) {
										//案件資料檔cup啟用日有值
										if(caseHandleInfo.getCupEnableDate() != null) {
											//案件資料檔cup移除日有值
											if(caseHandleInfo.getCupDisableDate() != null) {
												//清空cup移除日
												caseHandleInfo.setCupDisableDate(null);
												//cup啟用日設置當前案件完修日期
												caseHandleInfo.setCupEnableDate(caseHandleInfo.getCompleteDate());
											}
										} else {
											//cup啟用日設置當前案件完修日期
											caseHandleInfo.setCupEnableDate(caseHandleInfo.getCompleteDate());
										}
										//沒有cup交易
									} else {
										if(caseHandleInfo.getCupEnableDate() != null) {
											//案件資料檔cup移除日無值
											if(caseHandleInfo.getCupDisableDate() == null) {
												//cup移除日設置當前案件完修日期
												caseHandleInfo.setCupDisableDate(caseHandleInfo.getCompleteDate());
											}
										}
									}
								}
								//update by 2017/08/30 Bug #2308
							} else if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
								if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
									for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
										// 判斷有沒有CUP類別
										if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
											newCUP = true;
											break;
										}
									}
									//如果此筆案件交易參數有cup
									if(newCUP) {
										//判斷案件信息裡面的cup移除日是否有值 無值 存儲完修日期 如果有值，說明其她案件已經移除過
										if(caseHandleInfo.getCupDisableDate() == null) {
											//cup移除日設置當前案件完修日期
											caseHandleInfo.setCupDisableDate(caseHandleInfo.getCompleteDate());
										}
									}
								}
							}
							//update by 2017/09/30  hermanwang Task #2544
							if(IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode().equals(formDTO.getActionId())) {
								// 簽收人員id
								caseHandleInfo.setAnalyzeUser(srmCaseTransactionDTO.getAgentsId());
								// 簽收人員name
								caseHandleInfo.setAnalyzeUserName(srmCaseTransactionDTO.getAgentsName());
								
								caseHandleInfo.setDispatchProcessUser(srmCaseTransactionDTO.getAgentsId());
								caseHandleInfo.setDispatchProcessUsername(srmCaseTransactionDTO.getAgentsName());
								if(StringUtils.hasText(srmCaseTransactionDTO.getAgentsId())) {
									AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, srmCaseTransactionDTO.getAgentsId());
									caseHandleInfo.setDispatchDeptId(admUser.getDeptCode());
									// Task #2544 寫入維護廠商+維護部門 crisszhang edit
									caseHandleInfo.setCompanyId(admUser.getCompanyId());
									caseHandleInfo.setDepartmentId(caseHandleInfo.getDispatchDeptId());
								}
							} else {
								// 簽收人員id
								caseHandleInfo.setAnalyzeUser(logonUser.getId());
								// 簽收人員name
								caseHandleInfo.setAnalyzeUserName(logonUser.getName());
								
								caseHandleInfo.setDispatchProcessUser(logonUser.getId());
								caseHandleInfo.setDispatchProcessUsername(logonUser.getName());
								AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, logonUser.getId());
								caseHandleInfo.setDispatchDeptId(admUser.getDeptCode());
								// Task #2544 寫入維護廠商+維護部門 crisszhang edit
								caseHandleInfo.setCompanyId(admUser.getCompanyId());
								caseHandleInfo.setDepartmentId(caseHandleInfo.getDispatchDeptId());
							}
							//Task #2725 案件管理 2017/10/31
							if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())
									&& StringUtils.hasText(caseHandleInfo.getDispatchDeptId())) {
								// 裝機時 填入派工單位
								caseHandleInfo.setInstalledDeptId(caseHandleInfo.getDispatchDeptId());
							}
							//Task #3349 實際完修日(裝機) 換機會繼承至新機，拆機後此欄位值為null
							if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
								caseHandleInfo.setInstallCompleteDate(null);
							}
							
							// Task #3359若為報修件且為CMS案件，若執行線上排除按鈕 執行完畢，自動結案
							if((formDTO.getCaseActionId().equals("onlineExclusion"))
									&& (caseHandleInfo.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode()))
									&& (caseHandleInfo.getCmsCase().equals(IAtomsConstants.PARAM_YES))){
								//案件狀態更新為結案
								caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.CLOSED.getCode());
								
								
								SrmCaseTransaction srmCaseTransaction = new SrmCaseTransaction();
								// 主鍵
								srmCaseTransaction.setTransactionId(transactionId+"-1");
								srmCaseTransaction.setCaseId(caseHandleInfo.getCaseId());
								// 放置執行動作
								srmCaseTransaction.setActionId(IAtomsConstants.CASE_ACTION.CLOSED.getCode());
								// 放置案件狀態
								srmCaseTransaction.setCaseStatus(IAtomsConstants.CASE_STATUS.CLOSED.getCode());
								// 實際執行時間處理
								if(srmCaseTransactionDTO.getDealDate() == null){
									srmCaseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
								} else {
									srmCaseTransaction.setDealDate(srmCaseTransactionDTO.getDealDate());
								}
								//問題原因
								srmCaseTransaction.setProblemReason(problemReason);
								//解決方式
								srmCaseTransaction.setProblemSolution(problemSolution);
								//責任歸屬
								srmCaseTransaction.setResponsibity(srmCaseTransactionDTO.getResponsibity());
								
//								if (IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(caseHandleInfo.getCaseCategory())){
								//拼接沒有輸入處理說明的描述
								StringBuffer stringBuffer = new StringBuffer();
								//Task #2401 update by 2017/09/13
								stringBuffer.append(i18NUtil.getName(IAtomsMessageCode.CASE_PROBLEM_REASON)).append(srmCaseTransactionDTO.getProblemReasonName()).append(IAtomsConstants.MARK_SEMICOLON).append(IAtomsConstants.MARK_WRAP);
								stringBuffer.append(i18NUtil.getName(IAtomsMessageCode.CASE_PROBLEM_SOLUTION)).append(srmCaseTransactionDTO.getProblemSolutionName()).append(IAtomsConstants.MARK_SEMICOLON).append(IAtomsConstants.MARK_WRAP)
									.append(i18NUtil.getName(IAtomsMessageCode.CASE_RESPONSIBITY)).append(srmCaseTransactionDTO.getResponsibityName());
								//沒有輸入的處理說明的描述
								String hasDescription = stringBuffer.toString();
								
								// 描述處理
								srmCaseTransaction.setDescription(hasDescription);	
//								}
								//當前關卡
								srmCaseTransaction.setCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_CLOSE);
								//當前關卡名稱
								srmCaseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode()));
								//下一關關卡代碼
								srmCaseTransaction.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_CASE_PROCESS_END);
								//下一關關卡名稱
								srmCaseTransaction.setNextCaseStageName(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_NAME_END);
								caseHandleInfo.setCloseUser(logonUser.getId());
								caseHandleInfo.setCloseUserName(logonUser.getName());
								if(srmCaseTransactionDTO.getDealDate() == null){
									caseHandleInfo.setCloseDate(DateTimeUtils.getCurrentTimestamp());
								} else {
									caseHandleInfo.setCloseDate(srmCaseTransactionDTO.getDealDate());
								}
								srmCaseTransaction.setCreatedById(logonUser.getId());
								srmCaseTransaction.setCreatedByName(logonUser.getName());
								srmCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
//								//Task #3349 實際完修日(裝機) 換機會繼承至新機，拆機後此欄位值為null
//								if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
//									caseHandleInfo.setInstallCompleteDate(null);
//								}
//								//CR #2869 新增三個欄位 2017/11/22
//								caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
//								caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
//								caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
//								this.srmCaseHandleInfoDAO.update(caseHandleInfo);
								//CR #2869 新增三個欄位 2017/11/22
								caseHandleInfo.setThirdDescription(caseHandleInfo.getFirstDescription());
								caseHandleInfo.setSecondDescription(caseTransaction.getDescription());
								caseHandleInfo.setFirstDescription(srmCaseTransaction.getDescription());
								this.srmCaseTransactionDAO.insert(srmCaseTransaction);
								this.srmCaseHandleInfoDAO.update(caseHandleInfo);
								//CR #3236 其他案件無設備，無需更新設備資料檔
								if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(caseHandleInfo.getCaseCategory())) {
									//不是 查核
									if(!IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(caseHandleInfo.getCaseCategory())) {
										//查詢該案件 是否有簽收 和 線上排除的 記錄
										//if(!isWaitClose && !IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())) {
										//	saveNewAssetLinkAndSupplies(sessionContext,caseHandleInfo);
										//} else {
										//CR #3239 
										if (IAtomsConstants.PARAM_YES.equals(srmCaseTransactionDTO.getMobileFlag())) {
											updateAssetInfoInCheckCase(caseHandleInfo, logonUser, Boolean.FALSE);
										} else {
											// 線上排除存儲其他表
											saveAssetLinkAndSupplies(sessionContext,caseHandleInfo);
										}
										//}
									} else {
										updateAssetInfoInCheckCase(caseHandleInfo, logonUser, Boolean.FALSE);
									}
									// 線上排除--複製數據到歷史和最新模塊,刪除處理中的所有信息
									this.srmCaseHandleInfoDAO.copyToHis(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), IAtomsConstants.YES, IAtomsConstants.NO);
									
									//結案--複製數據到歷史和最新模塊,刪除處理中的所有信息 // Task #2682 結案時不複製最新資料當因線上排除與簽收已複製
									this.srmCaseHandleInfoDAO.copyToHis(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), IAtomsConstants.YES, IAtomsConstants.YES);
								}
							}else{
								//CR #2869 新增三個欄位 2017/11/22
								caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
								caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
								caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
								this.srmCaseHandleInfoDAO.update(caseHandleInfo);
								if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())
										&& caseHandleInfo.getInstallCompleteDate()!=null) {
									//'S' save 同dtid下InstallCompleteDate
									this.srmCaseHandleInfoDAO.changeInstallCaseId(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), null, caseHandleInfo.getInstallCompleteDate(), "S");
								} else if (IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory())
												&& caseHandleInfo.getInstallCompleteDate()==null) {
									//'D' delete 同dtid下InstallCompleteDate
									this.srmCaseHandleInfoDAO.changeInstallCaseId(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), null, null, "D");
								}
								//CR #3236 其他案件無設備，無需更新設備資料檔
								if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(caseHandleInfo.getCaseCategory())) {
									//不是 查核
									if(!IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(caseHandleInfo.getCaseCategory())) {
										//查詢該案件 是否有簽收 和 線上排除的 記錄
										//if(!isWaitClose && !IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())) {
										//	saveNewAssetLinkAndSupplies(sessionContext,caseHandleInfo);
										//} else {
										//CR #3239 
										if (IAtomsConstants.PARAM_YES.equals(srmCaseTransactionDTO.getMobileFlag())) {
											updateAssetInfoInCheckCase(caseHandleInfo, logonUser, Boolean.FALSE);
										} else {
											// 線上排除存儲其他表
											saveAssetLinkAndSupplies(sessionContext,caseHandleInfo);
										}
										//}
									} else {
										updateAssetInfoInCheckCase(caseHandleInfo, logonUser, Boolean.FALSE);
									}
									// 線上排除--複製數據到歷史和最新模塊,刪除處理中的所有信息
									this.srmCaseHandleInfoDAO.copyToHis(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), IAtomsConstants.YES, IAtomsConstants.NO);
								}
							}
						}
					}
//					存入新的caseId
					newCaseId = newCaseId.trim();
					//循環结束后，將deleteCaseId最後的一位逗號截取
					if(deleteCaseId.length() > 0){
						deleteCaseId = deleteCaseId.substring(0, deleteCaseId.length() - 1);
					}
					if(StringUtils.hasText(newCaseId) && newCaseId.substring(newCaseId.length()-1, newCaseId.length()).equals(IAtomsConstants.MARK_SEPARATOR)){
						srmCaseTransactionDTO.setCaseId(newCaseId.substring(0, newCaseId.length()-1));
					}else{
						srmCaseTransactionDTO.setCaseId(newCaseId);
					}	
					/*if(formDTO.getCaseActionId().equals("onlineExclusion")){
						//线上排除时，处理cmsErrorMsg
						if (cmsErrorMsg.length() > 0) {
						       Map map = new HashMap();
						       map.put(IAtomsConstants.FIELD_CMS_RESULT, false);
						       sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
						       String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{cmsErrorMsg.substring(0, cmsErrorMsg.length() - 5)}, null);
						       msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
						       //
						       formDTO.setCaseIds(StringUtils.toList(srmCaseTransactionDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR));
						       if (!CollectionUtils.isEmpty(StringUtils.toList(srmCaseTransactionDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR))) {
						    	   if(StringUtils.hasText(oldCaseStatus)){
										//送至下一關
										this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
									}
									// Task #3359若為報修件且為CMS案件，若執行線上排除按鈕 執行完畢，自動結案
									if((formDTO.getCaseActionId().equals("onlineExclusion"))
											&& (caseHandleInfo.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode()))
											&& (caseHandleInfo.getCmsCase().equals(IAtomsConstants.PARAM_YES))){
										if(deleteCaseId.length() > 0){
											//#3359 案件詳情頁面判斷是否顯示派工和結案按鈕
											Map closedmap = new HashMap();
											closedmap.put(IAtomsConstants.FIELD_CLOSED_BY_ONLINE_EXCLUSION, true);
										    sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, closedmap);
											formDTO.setActionId(IAtomsConstants.CASE_ACTION.CLOSED.getCode());
											//送至下一關
											this.sendNextActiviti(logonUser, formDTO, IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_CLOSE, null);
											//調用CaseDetailDao的放法刪除CAFE_CASE_DETAIL和CAFE_CASE_TRANSACTION表的相關數據
											this.caseDetailDAO.deleteCaseInfos(deleteCaseId);
										}
									}
						       }
						   }
					}*/
					if (cmsErrorMsg.length() > 0) {
					       Map map = new HashMap();
					       map.put(IAtomsConstants.FIELD_CMS_RESULT, false);
					       sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
					       String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{cmsErrorMsg.substring(0, cmsErrorMsg.length() - 5)}, null);
					       msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
					       //
					       formDTO.setCaseIds(StringUtils.toList(srmCaseTransactionDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR));
					       if (!CollectionUtils.isEmpty(StringUtils.toList(srmCaseTransactionDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR))) {
					    	   if(StringUtils.hasText(oldCaseStatus)){
									//送至下一關
									this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
								}
								// Task #3359若為報修件且為CMS案件，若執行線上排除按鈕 執行完畢，自動結案
								if((formDTO.getCaseActionId().equals("onlineExclusion"))
										&& (caseHandleInfo.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode()))
										&& (caseHandleInfo.getCmsCase().equals(IAtomsConstants.PARAM_YES))){
									if(deleteCaseId.length() > 0){
										//#3359 案件詳情頁面判斷是否顯示派工和結案按鈕
										Map closedmap = new HashMap();
										closedmap.put(IAtomsConstants.FIELD_CLOSED_BY_ONLINE_EXCLUSION, true);
									    sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, closedmap);
										formDTO.setActionId(IAtomsConstants.CASE_ACTION.CLOSED.getCode());
										//送至下一關
										this.sendNextActiviti(logonUser, formDTO, IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_CLOSE, null);
										//調用CaseDetailDao的放法刪除CAFE_CASE_DETAIL和CAFE_CASE_TRANSACTION表的相關數據
										this.caseDetailDAO.deleteCaseInfos(deleteCaseId);
									}
								}
					       }
					   }
					if(msg == null && cmsErrorMsg.length() == 0){
					//	msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.IATOMS_SUCCESS);
						if(IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode().equals(formDTO.getActionId())){
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ONLINE_EXCLUSION)});
						} else {
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_SIGN)});
						}
						formDTO.setCaseIds(StringUtils.toList(srmCaseTransactionDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR));
						if (!CollectionUtils.isEmpty(StringUtils.toList(srmCaseTransactionDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR))) {
							if(StringUtils.hasText(oldCaseStatus)){
								//送至下一關
								this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
							}
							// Task #3359若為報修件且為CMS案件，若執行線上排除按鈕 執行完畢，自動結案
							if((formDTO.getCaseActionId().equals("onlineExclusion"))
									&& (caseHandleInfo.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode()))
									&& (caseHandleInfo.getCmsCase().equals(IAtomsConstants.PARAM_YES))){
								if(deleteCaseId.length() > 0){
									//#3359 案件詳情頁面判斷是否顯示派工和結案按鈕
									Map closedmap = new HashMap();
									closedmap.put(IAtomsConstants.FIELD_CLOSED_BY_ONLINE_EXCLUSION, true);
								    sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, closedmap);
									formDTO.setActionId(IAtomsConstants.CASE_ACTION.CLOSED.getCode());
									//送至下一關
									this.sendNextActiviti(logonUser, formDTO, IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_CLOSE, null);
									//調用CaseDetailDao的放法刪除CAFE_CASE_DETAIL和CAFE_CASE_TRANSACTION表的相關數據
									this.caseDetailDAO.deleteCaseInfos(deleteCaseId);
								}
							}
						}
					}
					/*try {
						this.send(sessionContext);
					} catch (Exception e) {
						LOGGER.debug(".saveSignAndOnlineExclusion() --> send() is error... ");
					}*/
				} else {
				//	msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.IATOMS_FAILURE);
					if(IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode().equals(formDTO.getActionId())){
						LOGGER.error("CaseManagerService --> saveSignAndOnlineExclusion() --> ", "onlineExclusion save error!!!", "caseIds msg is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ONLINE_EXCLUSION)});
					} else {
						LOGGER.error("CaseManagerService --> saveSignAndOnlineExclusion() --> ", "sign save error!!!", "caseIds msg is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_SIGN)});
					}
				}
			} else {
			//	msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.IATOMS_FAILURE);
				if(IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode().equals(formDTO.getActionId())){
					LOGGER.error("CaseManagerService --> saveSignAndOnlineExclusion() --> ", "onlineExclusion save error!!!", "srmCaseTransactionDTO.getCaseId() is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ONLINE_EXCLUSION)});
				} else {
					LOGGER.error("CaseManagerService --> saveSignAndOnlineExclusion() --> ", "sign save error!!!", "srmCaseTransactionDTO.getCaseId() is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_SIGN)});
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".saveSignAndOnlineExclusion(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".saveSignAndOnlineExclusion(SessionContext sessionContext):" + e, e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#queryTransaction(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext queryTransaction(SessionContext sessionContext) throws ServiceException {
		try {
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			// 得到案件編號
			String caseId = formDTO.getCaseId();
			// 是否查歷史
			String isHistory = formDTO.getIsHistory();
			if(StringUtils.hasText(caseId)){
				String sort = formDTO.getSort();
				String order = formDTO.getOrder();
				// 得到案件處理資料的集合
				List<SrmCaseTransactionDTO> srmCaseTransactionDTOs = this.srmCaseTransactionDAO.listByCaseId(caseId, isHistory, sort, order);
				Map map = new HashMap();
				if (!CollectionUtils.isEmpty(srmCaseTransactionDTOs)) {
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, true);
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, srmCaseTransactionDTOs.size());
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_ROWS, srmCaseTransactionDTOs);
				} else {
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, false);
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, 0);
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_ROWS, IAtomsConstants.MARK_EMPTY_STRING);
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_MSG, i18NUtil.getName(IAtomsMessageCode.DATA_NOT_FOUND));
				}
				sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
			}
			return sessionContext;
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".queryTransaction() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".queryTransaction() Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getCaseRepeatList(cafe.core.context.MultiParameterInquiryContext)
	 */
	@Override
	public Map<String, String> getCaseRepeatList( MultiParameterInquiryContext inquiryContext)
			throws ServiceException {
		List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOList = null;
		//key 是 重複進建的caseid。value 是 重複進建的 caseid List
		Map<String, String> caseIdMap = new HashMap<String, String>();
		String repeatCaseIdListString = null;
		try{
			String caseId = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue());
			//重複進建的dtoList
			//dtid 傳進去 無用 改為傳null CR #2551
			srmCaseHandleInfoDTOList = this.srmCaseHandleInfoDAO.getCaseRepeatList(null, caseId, caseStatusList);
			if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOList)) {
				for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOList) {
					if(caseIdMap.get(srmCaseHandleInfoDTO.getCaseId()) == null){
						caseIdMap.put(srmCaseHandleInfoDTO.getCaseId(), srmCaseHandleInfoDTO.getRepeatCaseId());	
					} else {
						String emptyString = IAtomsConstants.MARK_EMPTY_STRING;
						repeatCaseIdListString = caseIdMap.get(srmCaseHandleInfoDTO.getCaseId()) + "," + "<br/>" + emptyString + srmCaseHandleInfoDTO.getRepeatCaseId();
						caseIdMap.put(srmCaseHandleInfoDTO.getCaseId(), repeatCaseIdListString);
					}
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(".getCaseRepeatList() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(".getCaseRepeatList() Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		}
		return caseIdMap;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#queryCaseAssetLink(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext queryCaseAssetLink(SessionContext sessionContext)
			throws ServiceException {
		try {
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			// 得到案件編號
			String caseId = formDTO.getCaseId();
			String dtid = formDTO.getDtid();
			String flag = Integer.toString(20);
			if(StringUtils.hasText(caseId)){
				SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseId);
				List<SrmCaseAssetLinkDTO> srmCaseAssetLinkDTOs = null;
				if(srmCaseHandleInfo != null) {
					// 得到案件處理中設備連接檔
					srmCaseAssetLinkDTOs = this.srmCaseAssetLinkDAO.listByCaseId(caseId, flag, true,true);
				}
				//案件最新資料表
			    String caseInfoTableName = IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_NEW_HANDLE_INFO;
			    //案件最新設備鏈接表
			    String caseLinkTableName = IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_NEW_ASSET_LINK;
			    List<SrmCaseAssetLinkDTO> srmHistoryCaseAssetLinkDTOs = new ArrayList<SrmCaseAssetLinkDTO>();
			    //如果退回 簽收日期可能為空 2018/01/30
			    if (srmCaseHandleInfo != null && IAtomsConstants.YES.equals(srmCaseHandleInfo.getHasRetreat())) {
			    	srmHistoryCaseAssetLinkDTOs = this.srmCaseAssetLinkDAO.listByCaseId(caseId);
				} else {
					srmHistoryCaseAssetLinkDTOs = this.srmCaseAssetLinkDAO.listByDtid(dtid, caseInfoTableName, caseLinkTableName);
				}
				/*if(CollectionUtils.isEmpty(srmHistoryCaseAssetLinkDTOs)) {
					caseInfoTableName = IAtomsConstants.IATOMS_TB_NAME_SRM_HISTORY_CASE_HANDLE_INFO;
					caseLinkTableName = IAtomsConstants.IATOMS_TB_NAME_SRM_HISTORY_CASE_ASSET_LINK;
					srmHistoryCaseAssetLinkDTOs = this.srmCaseAssetLinkDAO.listByDtid(dtid, caseInfoTableName, caseLinkTableName);
				}*/
				Map map = new HashMap();
				
				if (!CollectionUtils.isEmpty(srmCaseAssetLinkDTOs) && !IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())) {
					if(!CollectionUtils.isEmpty(srmHistoryCaseAssetLinkDTOs)) {
						//循環當前鏈接檔
						for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : srmCaseAssetLinkDTOs) {
							//循環歷史鏈接檔
							for (SrmCaseAssetLinkDTO srmHistoryCaseAssetLinkDTO : srmHistoryCaseAssetLinkDTOs) {
								//同為一種設備的時候
								//if(srmHistoryCaseAssetLinkDTO.getItemType().equals(srmCaseAssetLinkDTO.getItemType())) {
									//設備序號有值
									if(StringUtils.hasText(srmCaseAssetLinkDTO.getSerialNumber())) {
										if(srmCaseAssetLinkDTO.getSerialNumber().equals(srmHistoryCaseAssetLinkDTO.getSerialNumber())) {
											srmCaseAssetLinkDTO.setIsAction(IAtomsConstants.YES);
											srmCaseAssetLinkDTO.setIsRepeatLink(IAtomsConstants.YES);
											break;
										}
									}
								//	
								//}
							}
						}
					}
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, true);
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, srmCaseAssetLinkDTOs.size());
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_ROWS, srmCaseAssetLinkDTOs);
				} else {
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, false);
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, 0);
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_ROWS, srmCaseAssetLinkDTOs);
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_MSG, i18NUtil.getName(IAtomsMessageCode.DATA_NOT_FOUND));
				}
				sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
			}
			return sessionContext;
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".queryCaseAssetLink() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".queryCaseAssetLink() Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#queryCaseSuppliesLink(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext queryCaseSuppliesLink(SessionContext sessionContext)
			throws ServiceException {
		try {
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			// 得到案件編號
			String caseId = formDTO.getCaseId();
			//客戶id
			String customerId = formDTO.getCustomerId();
			//案件類別
			String caseCategory = formDTO.getCaseCategory();
			String flag = Integer.toString(20);
			if(StringUtils.hasText(caseId)){
				// 得到案件處理中設備連接檔
				List<SrmCaseAssetLinkDTO> srmCaseAssetLinkDTOList = this.srmCaseAssetLinkDAO.listByCaseId(caseId, flag, false,false);
				List<String> itemCategoryList = new ArrayList<String>();
				for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : srmCaseAssetLinkDTOList) {
					itemCategoryList.add(srmCaseAssetLinkDTO.getItemCategory());
				}
				Map map = new HashMap();
				if(StringUtils.hasText(customerId)) {
					//該客戶下耗材分類list
					List<Parameter> suppliesTypeList = this.suppliesDAO.getSuppliesTypeList(customerId);
					//該客戶下耗材名稱list
					List<DmmSuppliesDTO> suppliesNameList = this.suppliesDAO.listBy(customerId, null, null, -1, -1, null, null);
					BimCompany company = (BimCompany) this.companyDAO.findByPrimaryKey(BimCompany.class, customerId);
					//彰銀且為裝機案件
					for (Parameter parameter : suppliesTypeList) {
						//for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : srmCaseAssetLinkDTOList) {
							//設備鏈接當耗材資料是否存在預設的map裡面
						if (!CollectionUtils.isEmpty(caseSuppliesTypeMap)) {
							if((!itemCategoryList.contains(parameter.getValue())) && caseSuppliesTypeMap.containsKey(parameter.getValue())) {
									//耗材分類名稱
									String suppliesName = caseSuppliesTypeMap.get(parameter.getValue());
									//如果公司 是彰銀 如果是裝機
									if(IAtomsConstants.PARAM_CHB_EDC.equals(company.getCompanyCode()) && IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
										if(StringUtils.hasText(suppliesName)) {
											SrmCaseAssetLinkDTO srmCaseAssetLinkDTOS = new SrmCaseAssetLinkDTO();
											srmCaseAssetLinkDTOS.setItemCategory(parameter.getValue().toString());
											srmCaseAssetLinkDTOS.setItemCategoryName(parameter.getName().toString());
											srmCaseAssetLinkDTOS.setItemType(flag);
											//預設第一個耗材名稱
											for(DmmSuppliesDTO dmmSuppliesDTO : suppliesNameList) {
												if(dmmSuppliesDTO.getSuppliesType().equals(parameter.getValue().toString())) {
													srmCaseAssetLinkDTOS.setItemId(dmmSuppliesDTO.getSuppliesId());
													srmCaseAssetLinkDTOS.setItemName(dmmSuppliesDTO.getSuppliesName());
													srmCaseAssetLinkDTOS.setItemType(flag);
													break;
												}
											}
											srmCaseAssetLinkDTOList.add(srmCaseAssetLinkDTOS);
										}
									} else {
										if(StringUtils.hasText(suppliesName)) {
											//其他情況不可與設口窗貼
											if(!IAtomsConstants.WINDOWS_TICKER.equals(parameter.getValue())) {
												SrmCaseAssetLinkDTO srmCaseAssetLinkDTOS = new SrmCaseAssetLinkDTO();
												srmCaseAssetLinkDTOS.setItemCategory(parameter.getValue().toString());
												srmCaseAssetLinkDTOS.setItemCategoryName(parameter.getName().toString());
												srmCaseAssetLinkDTOS.setItemType(flag);
												//預設第一個耗材名稱
												for(DmmSuppliesDTO dmmSuppliesDTO : suppliesNameList) {
													if(dmmSuppliesDTO.getSuppliesType().equals(parameter.getValue().toString())) {
														srmCaseAssetLinkDTOS.setItemId(dmmSuppliesDTO.getSuppliesId());
														srmCaseAssetLinkDTOS.setItemName(dmmSuppliesDTO.getSuppliesName());
														srmCaseAssetLinkDTOS.setItemType(flag);
														break;
													}
												}
												srmCaseAssetLinkDTOList.add(srmCaseAssetLinkDTOS);
											}
										}
									}
								}
							}
						//}
					}
				}
				if (!CollectionUtils.isEmpty(srmCaseAssetLinkDTOList)) {
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, true);
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, srmCaseAssetLinkDTOList.size());
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_ROWS, srmCaseAssetLinkDTOList);
				} else {
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, false);
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, 0);
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_ROWS, srmCaseAssetLinkDTOList);
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_MSG, i18NUtil.getName(IAtomsMessageCode.DATA_NOT_FOUND));
				}
				sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
			}
			return sessionContext;
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".queryCaseSuppliesLink() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".queryCaseSuppliesLink() Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#linkCaseAsset(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext initChooseEDC(SessionContext sessionContext)
			throws ServiceException {
		try{
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)sessionContext.getRequestParameter();			
			Message msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.INIT_PAGE_SUCCESS);
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(caseManagerFormDTO);
			return sessionContext;
		}catch(Exception e){
			LOGGER.error(this.getClass().getName()+".initChooseEDC() is error in Service:"+e,e);
			throw new ServiceException(IAtomsMessageCode.INIT_PAGE_FAILURE,e);
		}
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#queryCaseAsset(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext queryCaseAsset(SessionContext sessionContext)
			throws ServiceException {
		List<DmmRepositoryDTO> dmmRepositoryDTOs = null;
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		try{
			//設備名稱
			String chooseEdcAssetId = formDTO.getChooseEdcAssetId();
			//設備類別
			String chooseEdcAssetCategory = formDTO.getChooseEdcAssetCategory();
			//設備序號
			String chooseEdcSerialNumber = formDTO.getChooseEdcSerialNumber();
			//領用人/借用人
			String chooseEdcCarrierOrBorrower = formDTO.getChooseEdcCarrierOrBorrower();
			//領用/借用說明
			String chooseEdcCarrierOrBorrowerComment = formDTO.getChooseEdcCarrierOrBorrowerComment();
			//倉庫名稱
			String chooseEdcWarehouseId = formDTO.getChooseEdcWarehouseId();
			//caseId
			String caseId = URLDecoder.decode(formDTO.getCaseId(), IAtomsConstants.ENCODE_UTF_8); 
			SrmCaseHandleInfo caseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseId);
			LogonUser logonUser = formDTO.getLogonUser();
			//派工人員id
			//update by hermanwang in 2017/09/29 Task #2544
			String chooseEdcDispatchProcessUser = logonUser.getId();
			//案件的客戶
			String chooseEdcCustomerId = IAtomsConstants.MARK_EMPTY_STRING;
			String selectSn = formDTO.getSelectSn();
			String[] selectSns = selectSn.split(",");
			List<String> selectSnsList = new ArrayList<String>();
			for (String sn : selectSns) {
				selectSnsList.add(sn);
			}
			if(caseHandleInfo != null) {
				//chooseEdcDispatchProcessUser = caseHandleInfo.getDispatchProcessUser();
				chooseEdcCustomerId = caseHandleInfo.getCustomerId();
			}
			Map map = new HashMap();
			//設備鏈接DTO LIST
			if(StringUtils.hasText(chooseEdcDispatchProcessUser)) {
				dmmRepositoryDTOs = this.dmmRepositoryDAO.listByAsset(chooseEdcAssetId, chooseEdcAssetCategory, chooseEdcSerialNumber, 
						chooseEdcCarrierOrBorrower, chooseEdcCarrierOrBorrowerComment, chooseEdcWarehouseId, 
						chooseEdcDispatchProcessUser, chooseEdcCustomerId, formDTO.getRows(),  formDTO.getPage(), 
						formDTO.getOrder(), formDTO.getSort(), selectSnsList);
				if(!CollectionUtils.isEmpty(dmmRepositoryDTOs)) {
					List<DmmRepositoryDTO> dmmRepositoryDTOList = this.dmmRepositoryDAO.listByAsset(chooseEdcAssetId, 
							chooseEdcAssetCategory, chooseEdcSerialNumber, chooseEdcCarrierOrBorrower, 
							chooseEdcCarrierOrBorrowerComment, chooseEdcWarehouseId, chooseEdcDispatchProcessUser, 
							chooseEdcCustomerId, -1, -1, formDTO.getOrder(), formDTO.getSort(), selectSnsList);
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, true);
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, dmmRepositoryDTOList.size());
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_ROWS, dmmRepositoryDTOs);
				} else {
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, false);
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, 0);
					map.put(IAtomsConstants.PARAM_QUERY_RESULT_ROWS, dmmRepositoryDTOs);
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_MSG, i18NUtil.getName(IAtomsMessageCode.DATA_NOT_FOUND));
				}
			} else {
				map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, false);
				map.put(IAtomsConstants.PARAM_QUERY_RESULT_TOTAL, 0);
				map.put(IAtomsConstants.PARAM_QUERY_RESULT_ROWS, new ArrayList<DmmRepositoryDTO>());
				map.put(IAtomsConstants.PARAM_ACTION_RESULT_MSG, i18NUtil.getName(IAtomsMessageCode.DATA_NOT_FOUND));
			}
			sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
			return sessionContext;
		}catch(Exception e){
			LOGGER.error(this.getClass().getName()+".queryCaseAsset() is error in Service:"+e,e);
			throw new ServiceException(IAtomsMessageCode.INIT_PAGE_FAILURE,e);
		}
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getProblemReasonList(cafe.core.context.SessionContext)
	 */
	@Override
	public List<Parameter> getProblemReasonList(MultiParameterInquiryContext inquiryContext) throws ServiceException {
		try {
			boolean isTsbEdc = (Boolean) inquiryContext.getParameter(CaseManagerFormDTO.CUSTOMER_IS_TSB_EDC);
			return this.srmCaseHandleInfoDAO.getProblemReasonList(isTsbEdc);
		} catch (DataAccessException e) {
			LOGGER.error("getProblemReasonList()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("getProblemReasonList()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#addRecord(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext addRecord(SessionContext sessionContext)throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		LogonUser logonUser = formDTO.getLogonUser();
		Message msg = null;
		try {
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				// 案件處理記錄主鍵id
				String transactionId = null;
				// 案件處理處理中資料DMO對象
				SrmCaseHandleInfo caseHandleInfo = null;
				// 案件處理記錄DMO對象
				SrmCaseTransaction caseTransaction = null;
				// 案件處理記錄DTO對象
				SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
				// dto/dmo轉換對象
				Transformer transformer = new SimpleDtoDmoTransformer();
				String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
				// 實際執行時間處理
				if(srmCaseTransactionDTO.getDealDate() == null){
					srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
				}
				// 案件處理記錄主鍵id
				transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
				// 得到案件處理集合
				List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = (List<SrmCaseHandleInfoDTO>) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT);
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
					int i = 0;
					for(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs){
						// 更新案件處理消息
						caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
						// 處理方式
					//	caseHandleInfo.setProcessType(null);
						//CR #2869 新增三個欄位 2017/11/22
						caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
						caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
						caseHandleInfo.setFirstDescription(srmCaseTransactionDTO.getDescription());
						caseHandleInfo.setUpdatedById(logonUser.getId());
						caseHandleInfo.setUpdatedByName(logonUser.getName());
						caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
						this.srmCaseHandleInfoDAO.update(caseHandleInfo);
						
						// 保存案件記錄信息
						i++;
						caseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
						caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
						//Bug #2634
						String tempTransactionId = transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i);
						if(!StringUtils.hasText(caseTransactionId)) {
							caseTransactionId = tempTransactionId;
						} else {
							caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + tempTransactionId;
						}
						formDTO.setCaseTransactionId(caseTransactionId);
						caseTransaction.setTransactionId(transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i));
						caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
						// 當前關卡
						caseTransaction.setCaseStage(srmCaseHandleInfoDTO.getCaseStatus());
						caseTransaction.setCaseStageName(i18NUtil.getName(srmCaseHandleInfoDTO.getCaseStatus()));
						// 下一關關卡代碼
						caseTransaction.setNextCaseStage(caseTransaction.getCaseStatus());
						caseTransaction.setNextCaseStageName(i18NUtil.getName(caseTransaction.getCaseStatus()));
						caseTransaction.setCreatedById(logonUser.getId());
						caseTransaction.setCreatedByName(logonUser.getName());
						caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
						this.srmCaseTransactionDAO.insert(caseTransaction);
					}
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ADD_RECORD)});
					//bug2374，新增記錄時不發送mail
					/*try {
						this.send(formDTO);
					} catch (Exception e) {
						LOGGER.debug(".addRecord() --> send() is error... ");
					}*/
				} else {
					LOGGER.error("CaseManagerService --> addRecord() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ADD_RECORD)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> addRecord() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ADD_RECORD)});
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".addRecord(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".addRecord(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#addRecord(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext distribution(SessionContext sessionContext)throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		Message msg = null;
		StringBuffer cmsErrorMsg = new StringBuffer();
		//Task #3519 存儲call cms 成功的案件 key 為 caseid， value 為 下行電文
    	Map<String, String> callCmsMap = new HashMap<String, String>();
		try {
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				// 案件處理記錄主鍵id
				String transactionId = null;
				// 案件處理處理中資料DMO對象
				SrmCaseHandleInfo caseHandleInfo = null;
				// 案件處理記錄DMO對象
				SrmCaseTransaction caseTransaction = null;
				// 案件處理記錄DTO對象
				SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
				//將物流編號暫時放在處理說明後面
				String logistics = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_LOGISTICS_VENDOR) + 
						srmCaseTransactionDTO.getLogisticsVendorName() + 
						IAtomsConstants.MARK_WRAP + i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_LOGISTICS_NUMBER) + 
						srmCaseTransactionDTO.getLogisticsNumber();
				if(StringUtils.hasText(srmCaseTransactionDTO.getDescription())){
					srmCaseTransactionDTO.setDescription(srmCaseTransactionDTO.getDescription() + 
							IAtomsConstants.MARK_WRAP + logistics);
				}else{
					srmCaseTransactionDTO.setDescription(logistics);
				}
				// dto/dmo轉換對象
				Transformer transformer = new SimpleDtoDmoTransformer();
				String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
				// 實際執行時間處理
				if(srmCaseTransactionDTO.getDealDate() == null){
					srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
				}
				// 案件處理記錄主鍵id
				transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
				// 得到案件處理集合
				List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = (List<SrmCaseHandleInfoDTO>) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT);
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
					//Task #3321
					//若為報修件且為CMS案件,透過CMS API通知CMS(已退回)，通知失敗，儲存失敗，通知成功，才能儲存成功。通知失敗，顯示錯誤訊息
					Gson gson = new Gson();
					ReceiveJobNoticeDTO resultMsg = null;
					List<SrmCaseHandleInfoDTO> failDto = new ArrayList<SrmCaseHandleInfoDTO>();
					for(SrmCaseHandleInfoDTO dto : srmCaseHandleInfoDTOs){
						if((dto.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode()) ||
								dto.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode()))
								&& dto.getCmsCase().equals(IAtomsConstants.PARAM_YES)
								&& (!(dto.getIsIatomsCreateCms().equals(IAtomsConstants.PARAM_YES)
										&& dto.getDispatchDate() == null))){
							//獲取請求頭
							String apiNo = IAtomsConstants.MARK_EMPTY_STRING;
							String jobStatus = IAtomsConstants.MARK_EMPTY_STRING;
							if(dto.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode())){
								//裝機
								apiNo = "APIOP002";
								jobStatus = "02";
							}else if(dto.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode())){
								//報修
								apiNo = "APIOP004";
								jobStatus = "02";
							}
							//物流時間YYYY/MM/DD HH:MM:SS
							String trackDate = DateTimeUtils.toString(srmCaseTransactionDTO.getDealDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH);
							//處理參數
							ReceiveJobNoticeDTO receiveJobNoticeDTO = new ReceiveJobNoticeDTO(jobStatus, dto.getMerMid(), dto.getCaseId(), dto.getDtid(), 
							         srmCaseTransactionDTO.getLogisticsNumber(), trackDate, "", srmCaseTransactionDTO.getLogisticsVendorName());
							String jsonString = gson.toJson(receiveJobNoticeDTO);
							LOGGER.debug("CaseManagerService --> distribution() --> ", "json=" + jsonString);
							//call CMS API
							Map<String, String> map = null;
							String apiLogResult = null;	
							String resultString = null;	
							map = NetUtil.sendHtppsNew(apiNo, jsonString);
							if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
								resultString = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
							}
							if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
								apiLogResult = "true";
							} else {
								apiLogResult = "false";
							}
							LOGGER.debug("CaseManagerService --> distribution() --> ", "message=" + resultString);
							//上行(RQ)
							this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, jsonString);
							if (StringUtils.hasText(resultString)) {
								Object responseJson = (Object) gson.fromJson(resultString, Object.class);
								LOGGER.debug("CaseManagerService --> distribution() --> ", "responseJson=" + responseJson);
								resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
								if (!(resultMsg.getRESULT().equals("True"))) {
									failDto.add(dto);
									cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
									apiLogResult = "false";
									//下行(RS)
									this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), resultString);
								} else {
									callCmsMap.put(dto.getCaseId(), resultString);
								}
							} else {
								LOGGER.debug("CaseManagerService --> distribution() --> ", "save error!!!", "message is null");
								apiLogResult = "false";
								cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), "cms請求失敗"}, null)).append("</br>");
								//下行(RS)
								this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
								failDto.add(dto);
							}
						}
					}
					if (!CollectionUtils.isEmpty(failDto)) {
						for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : failDto) {
							srmCaseHandleInfoDTOs.remove(srmCaseHandleInfoDTO);
						}
						if (srmCaseHandleInfoDTOs.size() == 0) {
							Map map = new HashMap();
						    map.put(IAtomsConstants.FIELD_CMS_RESULT, false);
						    String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{cmsErrorMsg.substring(0, cmsErrorMsg.length() - 5)}, null);
						    msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
						    sessionContext.setReturnMessage(msg);
						    srmCaseTransactionDTO.setCaseId("");
						    sessionContext.setResponseResult(formDTO);
						    sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
							return sessionContext;
						}
					}
					int i = 0;
					String newCaseId = "";
					for(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs){
						//拼接新的caseId
						newCaseId = newCaseId + srmCaseHandleInfoDTO.getCaseId() + IAtomsConstants.MARK_SEPARATOR;
						// 更新案件處理消息
						caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
						// 處理方式
					//	caseHandleInfo.setProcessType(null);
						//CR #2869 新增三個欄位 2017/11/22
						caseHandleInfo.setLogisticsNumber(srmCaseTransactionDTO.getLogisticsNumber());
						caseHandleInfo.setLogisticsVendor(srmCaseTransactionDTO.getLogisticsVendor());
						caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
						caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
						caseHandleInfo.setFirstDescription(srmCaseTransactionDTO.getDescription());
						caseHandleInfo.setUpdatedById(logonUser.getId());
						caseHandleInfo.setUpdatedByName(logonUser.getName());
						caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
						this.srmCaseHandleInfoDAO.update(caseHandleInfo);
						
						// 保存案件記錄信息
						i++;
						caseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
						caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
						//Bug #2634
						String tempTransactionId = transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i);
						if(!StringUtils.hasText(caseTransactionId)) {
							caseTransactionId = tempTransactionId;
						} else {
							caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + tempTransactionId;
						}
						formDTO.setCaseTransactionId(caseTransactionId);
						caseTransaction.setTransactionId(transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i));
						caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
						// 當前關卡
						caseTransaction.setCaseStage(srmCaseHandleInfoDTO.getCaseStatus());
						caseTransaction.setCaseStageName(i18NUtil.getName(srmCaseHandleInfoDTO.getCaseStatus()));
						// 下一關關卡代碼
						caseTransaction.setNextCaseStage(caseTransaction.getCaseStatus());
						caseTransaction.setNextCaseStageName(i18NUtil.getName(caseTransaction.getCaseStatus()));
						caseTransaction.setCreatedById(logonUser.getId());
						caseTransaction.setCreatedByName(logonUser.getName());
						caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
						caseTransaction.setLogisticsVendor(srmCaseTransactionDTO.getLogisticsVendor());
						this.srmCaseTransactionDAO.insert(caseTransaction);
						srmCaseTransactionDTO.setTransactionId(caseTransaction.getTransactionId());
						//Task #3519 存儲下行電文 要有案件歷程id
						if(callCmsMap.containsKey(srmCaseHandleInfoDTO.getCaseId())){
							String apiLogResult = "true";
							this.insertApiLog(IAtomsConstants.API_RS, srmCaseHandleInfoDTO.getCaseId(), caseTransaction.getTransactionId(), logonUser, apiLogResult, null, callCmsMap.get(srmCaseHandleInfoDTO.getCaseId()));
						}
					}
					if(newCaseId.length() > 0){
						newCaseId = newCaseId.trim();
						if(newCaseId.substring(newCaseId.length()-1, newCaseId.length()).equals(IAtomsConstants.MARK_SEPARATOR)){
							srmCaseTransactionDTO.setCaseId(newCaseId.substring(0, newCaseId.length()-1));
						}else{
							srmCaseTransactionDTO.setCaseId(newCaseId);
						}
					}
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.DELIVERY)});
					//bug2374，新增記錄時不發送mail
					/*try {
						this.send(formDTO);
					} catch (Exception e) {
						LOGGER.debug(".addRecord() --> send() is error... ");
					}*/
					if (cmsErrorMsg.length() > 0) {
					       Map map = new HashMap();
					       map.put(IAtomsConstants.FIELD_CMS_RESULT, false);
					       sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
					       String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{cmsErrorMsg.substring(0, cmsErrorMsg.length() - 5)}, null);
					       msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
					      } else {
					       msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.DELIVERY)});
					      }
				} else {
					LOGGER.error("CaseManagerService --> addRecord() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ADD_RECORD)});
				}
				formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> addRecord() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ADD_RECORD)});
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".addRecord(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".addRecord(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}

	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#complete(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext complete(SessionContext sessionContext)throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		String oldCaseStatus = IAtomsConstants.MARK_EMPTY_STRING;
		Message msg = null;
		
		try {
			Map tempMap = new HashMap();
			StringBuffer errorMsg = new StringBuffer();
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				// 案件處理記錄主鍵id
				String transactionId = null;
				// 案件處理處理中資料DMO對象
				SrmCaseHandleInfo caseHandleInfo = null;
				// 案件處理記錄DMO對象
				SrmCaseTransaction caseTransaction = null;
				// 案件處理記錄DTO對象
				SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
				// 當前交易參數信息
				List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = null;
				// dto/dmo轉換對象
				Transformer transformer = new SimpleDtoDmoTransformer();
				String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
				// 實際執行時間處理
				if(srmCaseTransactionDTO.getDealDate() == null){
					srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
				}
				// 案件處理記錄主鍵id
				transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
				// 得到案件處理集合
				List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = (List<SrmCaseHandleInfoDTO>) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT);
				// 之前有CUP的標記
				boolean oldCUP = false;
				// 當前有CUP標記
				boolean newCUP = false;
				
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
					// Task #2547 得到登陸者角色
					this.setUserRoleFlag(formDTO);
					//Task #3551
					Map<String, String> map = null;
					String api = null;
					String json = null;
					ReceiveJobNoticeDTO jobNoticeDTO = null;
					Gson gson = new GsonBuilder().create();
					ReceiveJobNoticeDTO resultMsg = null;
					String tempMsg = null;
					String apiLogResult = null;
					List<SrmCaseHandleInfoDTO> errorDto = new ArrayList<SrmCaseHandleInfoDTO>();
					Map<String, String> callCmsMap = new HashMap<String, String>();
					String message = null;
					
					String caseCategory = srmCaseHandleInfoDTOs.get(0).getCaseCategory();
					StringBuffer successCaseId = new StringBuffer();
					
					if (IAtomsConstants.YES.equals(srmCaseHandleInfoDTOs.get(0).getCmsCase()) && 
							(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)
							|| IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(caseCategory))) {
						for(SrmCaseHandleInfoDTO dto : srmCaseHandleInfoDTOs){
							if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
								api = "APIOP002";
							} else {
								api = "APIOP004";
							}
							jobNoticeDTO = new ReceiveJobNoticeDTO("15", dto.getCaseId(), dto.getMerMid(), dto.getDtid());
							json = gson.toJson(jobNoticeDTO);
							LOGGER.debug("CaseManagerService --> complete() --> ", "json=" + json);
							map =  NetUtil.sendHtppsNew(api, json);
							if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
								message = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
							}
							if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
								apiLogResult = "true";
							} else {
								apiLogResult = "false";
							}
							LOGGER.debug("CaseManagerService --> complete() --> ", "message=" + message);
							//上行(RQ)
							this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, json);
							if (StringUtils.hasText(message)) {
								Object responseJson = (Object) gson.fromJson(message, Object.class);
								LOGGER.debug("CaseManagerService --> complete() --> ", "responseJson=" + responseJson);
								resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
								LOGGER.debug("CaseManagerService --> complete() --> ", "resultMsg=" + resultMsg.getRESULT_MSG());
								if (resultMsg.getRESULT().equals("True")) {
									callCmsMap.put(dto.getCaseId(), message);
									successCaseId.append(dto.getCaseId()).append(IAtomsConstants.MARK_SEPARATOR);
								} else {
									errorDto.add(dto);
									errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
									apiLogResult = "false";
									//下行(RS)
									this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), message);
								}
							} else {
								errorDto.add(dto);
								LOGGER.debug("CaseManagerService --> complete() --> ", "save error!!!", "message is null");
								tempMsg = i18NUtil.getName(IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_COMPLETE)}, null);
								errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), tempMsg}, null)).append("</br>");
								apiLogResult = "false";
								//下行(RS)
								this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
							}
						}
						if (errorDto.size() != 0) {
							for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : errorDto) {
								srmCaseHandleInfoDTOs.remove(srmCaseHandleInfoDTO);
							}
							if (srmCaseHandleInfoDTOs.size() == 0) {
								msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{errorMsg.toString()});
								sessionContext.setReturnMessage(msg);
								srmCaseTransactionDTO.setCaseId(null);
								formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
								formDTO.setCaseId(null);
								sessionContext.setResponseResult(formDTO);
								tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
								sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
								return sessionContext;
							} else {
								String caseId = StringUtils.toList(successCaseId.substring(0, successCaseId.length() - 1), IAtomsConstants.MARK_SEPARATOR).get(0);
								srmCaseTransactionDTO.setCaseId(caseId);
								formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
								formDTO.setCaseId(caseId);
							}
						}
					}
					int i = 0;
					AdmUser admUser = null;
					for(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs){
						admUser = null;
						// 打印log
						LOGGER.debug("complete() dto-->", "parameters : caseId =" + srmCaseHandleInfoDTO.getCaseId());
						LOGGER.debug("complete() dto-->", "parameters : dtid =" + srmCaseHandleInfoDTO.getDtid());
						LOGGER.debug("complete() dto-->", "parameters : customerId =" + srmCaseHandleInfoDTO.getCustomerId());
						LOGGER.debug("complete() dto-->", "parameters : contractId =" + srmCaseHandleInfoDTO.getContractId());
						LOGGER.debug("complete() dto-->", "parameters : companyId =" + srmCaseHandleInfoDTO.getCompanyId());
						LOGGER.debug("complete() dto-->", "parameters : departmentId =" + srmCaseHandleInfoDTO.getDepartmentId());
						LOGGER.debug("complete() dto-->", "parameters : caseType =" + srmCaseHandleInfoDTO.getCaseType());
						LOGGER.debug("complete() dto-->", "parameters : merchantCode =" + srmCaseHandleInfoDTO.getMerchantCode());
						LOGGER.debug("complete() dto-->", "parameters : merchantHeaderId =" + srmCaseHandleInfoDTO.getMerchantHeaderId());
						LOGGER.debug("complete() dto-->", "parameters : edcType =" + srmCaseHandleInfoDTO.getEdcType());
						LOGGER.debug("complete() dto-->", "parameters : peripherals =" + srmCaseHandleInfoDTO.getPeripherals());
						LOGGER.debug("complete() dto-->", "parameters : peripherals2 =" + srmCaseHandleInfoDTO.getPeripherals2());
						LOGGER.debug("complete() dto-->", "parameters : peripherals3 =" + srmCaseHandleInfoDTO.getPeripherals3());
						LOGGER.debug("complete() dto-->", "parameters : ecrConnection =" + srmCaseHandleInfoDTO.getEcrConnection());
						LOGGER.debug("complete() dto-->", "parameters : softwareVersion =" + srmCaseHandleInfoDTO.getSoftwareVersion());
						oldCUP = false;
						newCUP = false;
						if(!StringUtils.hasText(oldCaseStatus)){
							oldCaseStatus = srmCaseHandleInfoDTO.getCaseStatus();
						}
						// 更新案件處理消息
						caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
						// 案件狀態更新為已完修
						caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.COMPLETED.getCode());
						//Task #3349
						boolean isInstallComplete = false;
						if(caseHandleInfo.getCompleteDate()==null && IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
							isInstallComplete = true;
						}
						// 實際執行時間記錄為該案件的完修時間
						if(srmCaseTransactionDTO.getDealDate() == null){
							caseHandleInfo.setCompleteDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
						} else {
							caseHandleInfo.setCompleteDate(srmCaseTransactionDTO.getDealDate());
						}
						if (isInstallComplete) {
							// 端末機代號啟用日: 實際完修日(裝機)，換機會繼承至新機
							caseHandleInfo.setInstallCompleteDate(caseHandleInfo.getCompleteDate());
						}
						// 完修人員信息
						caseHandleInfo.setCompleteUser(logonUser.getId());
						caseHandleInfo.setCompleteUserName(logonUser.getName());
						// Task #2547  新增，執行完修部門 欄位
						admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, logonUser.getId());
//						caseHandleInfo.setCompleteDepartmentId(admUser.getDeptCode());
						// Task #2547 協調完成：若為客服執行，部門是客服 // CR #2951 廠商客服 //Task #3578 客戶廠商客服
						if(formDTO.getIsCustomerService() || formDTO.getIsVendorService() || formDTO.getIsCusVendorService()){
							caseHandleInfo.setCompleteDepartmentId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
						} else {
							caseHandleInfo.setCompleteDepartmentId(admUser.getDeptCode());
						}
						
						// 更新人員信息
						caseHandleInfo.setUpdatedById(logonUser.getId());
						caseHandleInfo.setUpdatedByName(logonUser.getName());
						caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
						//update by 2017/07/26 Bug #2040
						//紀錄最新的派工單位與人員(USER選擇的)，若USER沒選人員，做完修時， 更新派工處理人員=作業人員
						//Task #2725 案件管理 取消該邏輯 2017/10/31
						/*if(!StringUtils.hasText(caseHandleInfo.getDispatchProcessUser())) {
							caseHandleInfo.setDispatchProcessUser(logonUser.getId());
							caseHandleInfo.setDispatchProcessUsername(logonUser.getName());
						//	AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, logonUser.getId());
							caseHandleInfo.setDispatchDeptId(admUser.getDeptCode());
							if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())) {
								// 裝機時 填入派工單位
								caseHandleInfo.setInstalledDeptId(caseHandleInfo.getDispatchDeptId());
							}
						}*/
						// 處理方式
						caseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_ARRIVE_PROCESS);
						// 裝機日期 如案件類型為裝機時寫入當前日期
						if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
							//caseHandleInfo.setInstalledDate(caseHandleInfo.getUpdatedDate());
							caseHandleInfo.setInstalledDate(caseHandleInfo.getCompleteDate());
						// 拆機日期 如案件類型為拆機時寫入當前日期
						} else if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
							//caseHandleInfo.setUninstalledDate(caseHandleInfo.getUpdatedDate());
							caseHandleInfo.setUninstalledDate(caseHandleInfo.getCompleteDate());
						}
						// 依據案件類別判斷CUP類別存取情況
						// 裝機只判斷當前是否有CUP
						if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
							// 當前交易參數
							srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseHandleInfo.getCaseId(), null);
							if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
								for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
									// 判斷有沒有CUP類別
									if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
										newCUP = true;
										break;
									}
								}
								//如果此筆案件交易參數有cup
								if(newCUP) {
									//判斷案件信息裡面的cup啟用日是否有值 無值 存儲完修日期 如果有值，不管
									if(caseHandleInfo.getCupEnableDate() == null) {
										caseHandleInfo.setCupEnableDate(caseHandleInfo.getCompleteDate());
									}
								} else {
									caseHandleInfo.setCupEnableDate(null);
								}
							}
						// 併機與異動可操作交易參數
						} else if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseHandleInfo.getCaseCategory())
									|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseHandleInfo.getCaseCategory())){
							// 當前交易參數
							srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseHandleInfo.getCaseId(), null);
							if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
								for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
									// 判斷有沒有CUP類別
									if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
										newCUP = true;
										break;
									}
								}
								//有cup交易
								if(newCUP) {
									//案件資料檔cup啟用日有值
									if(caseHandleInfo.getCupEnableDate() != null) {
										//案件資料檔cup移除日有值
										if(caseHandleInfo.getCupDisableDate() != null) {
											//清空cup移除日
											caseHandleInfo.setCupDisableDate(null);
											//cup啟用日設置當前案件完修日期
											caseHandleInfo.setCupEnableDate(caseHandleInfo.getCompleteDate());
										}
									} else {
										//cup啟用日設置當前案件完修日期
										caseHandleInfo.setCupEnableDate(caseHandleInfo.getCompleteDate());
									}
								//沒有cup交易
								} else {
									if(caseHandleInfo.getCupEnableDate() != null) {
										//案件資料檔cup移除日無值
										if(caseHandleInfo.getCupDisableDate() == null) {
											//cup移除日設置當前案件完修日期
											caseHandleInfo.setCupDisableDate(caseHandleInfo.getCompleteDate());
										}
									}
								}
							}
						}
						//CR #2869 新增三個欄位 2017/11/22
						caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
						caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
						caseHandleInfo.setFirstDescription(srmCaseTransactionDTO.getDescription());
						this.srmCaseHandleInfoDAO.update(caseHandleInfo);
						
						// 保存案件記錄信息
						i++;
						caseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
						caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
						//Bug #2634
						String tempTransactionId = transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i);
						if(!StringUtils.hasText(caseTransactionId)) {
							caseTransactionId = tempTransactionId;
						} else {
							caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + tempTransactionId;
						}
						formDTO.setCaseTransactionId(caseTransactionId);
						
						caseTransaction.setTransactionId(transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i));
						caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
						// 當前關卡
						caseTransaction.setCaseStage(oldCaseStatus);
						caseTransaction.setCaseStageName(i18NUtil.getName(oldCaseStatus));
						// 下一關關卡代碼
						caseTransaction.setNextCaseStage(caseTransaction.getCaseStatus());
						caseTransaction.setNextCaseStageName(i18NUtil.getName(caseTransaction.getCaseStatus()));
						caseTransaction.setCreatedById(logonUser.getId());
						caseTransaction.setCreatedByName(logonUser.getName());
						caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
						this.srmCaseTransactionDAO.insert(caseTransaction);
						//Task #3519 存儲下行電文 要有案件歷程id
						if(callCmsMap.containsKey(caseHandleInfo.getCaseId())){
							apiLogResult = "true";
							this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfo.getCaseId(), caseTransaction.getTransactionId(), logonUser, apiLogResult, null, callCmsMap.get(caseHandleInfo.getCaseId()));
						}
						// 更新交易參數信息
						// 完修-裝機 -複製數據到歷史和最新模塊,刪除處理中的所有信息
/*						if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
							this.srmCaseHandleInfoDAO.copyToHis(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), IAtomsConstants.YES, IAtomsConstants.NO);
						} else {
							//非裝機，只複製交易參數到最新資料檔
							this.srmCaseHandleInfoDAO.copyToHis(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), IAtomsConstants.NO, IAtomsConstants.NO);
						}*/
						// CR #2551 查詢最新資料檔是否有該dtid
						//CR #3236 其他案件，無需copy至最新資料當
						if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(caseHandleInfo.getCaseCategory())) {
							boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInNewCase(caseHandleInfo.getDtid());
							if(isNewHave){
								this.srmCaseHandleInfoDAO.copyToHis(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), IAtomsConstants.NO, IAtomsConstants.NO);
							} else {
								this.srmCaseHandleInfoDAO.copyToHis(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), IAtomsConstants.YES, IAtomsConstants.NO);
							}
						}
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())
								&& caseHandleInfo.getInstallCompleteDate()!=null) {
							//'S' save 同dtid下InstallCompleteDate
							this.srmCaseHandleInfoDAO.changeInstallCaseId(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), null, caseHandleInfo.getInstallCompleteDate(), "S");
						} else if (IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory())
										&& caseHandleInfo.getInstallCompleteDate()==null) {
							//'D' delete 同dtid下InstallCompleteDate
							this.srmCaseHandleInfoDAO.changeInstallCaseId(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), null, null, "D");
						}
					}
					formDTO.setCaseIds(StringUtils.toList(formDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR));
					if(StringUtils.hasText(oldCaseStatus) && IAtomsConstants.CASE_STATUS.ARRIVED.getCode().equals(oldCaseStatus)){
						//送至下一關
						this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
					}
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_COMPLETE)});
					/*try {
						this.send(formDTO);
					} catch (Exception e) {
						LOGGER.debug(".complete() --> send() is error... ");
					}*/
				} else {
					LOGGER.error("CaseManagerService --> complete() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_COMPLETE)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> complete() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_COMPLETE)});
				}
			}
			if (errorMsg.length() > 0 && Message.STATUS.SUCCESS.equals(msg.getStatus())) {
				msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{errorMsg.toString()});
				tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
				sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".complete(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".complete(SessionContext sessionContext):" + e, e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#onlineExclusion(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext onlineExclusion(SessionContext sessionContext)throws ServiceException {
		try {
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			String ids = this.checkTransactionParam(srmCaseTransactionDTO.getCaseId());
			if (ids.length() != 0) {
				Message msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_CASE_NO_TRANS_PARAM, new String[]{ids});
				sessionContext.setReturnMessage(msg);
				sessionContext.setResponseResult(formDTO);
				return sessionContext;
			}
			saveSignAndOnlineExclusion(sessionContext);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".saveCaseTransaction(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".saveCaseTransaction(SessionContext sessionContext):" + e, e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#upload(cafe.core.context.SessionContext)
	 */
	public SessionContext upload(SessionContext sessionContext)throws ServiceException {
		CaseManagerFormDTO formDTO = null;
		//用於記錄錯誤信息以及錯誤行號
		List<String> errorMsgs = new ArrayList<String>();
		try {
			formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			//匯入的文件
			Map<String, MultipartFile> uploadFiled = formDTO.getFileMap();
			if (uploadFiled != null) {
				Message msg = null;
				//需要上傳的文件
				MultipartFile multipartFile = uploadFiled.entrySet().iterator().next().getValue();
				//上傳文件類型
				String caseCategory = formDTO.getCaseCategory();
				//記錄需要保存的案件信息
				List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = new ArrayList<SrmCaseHandleInfoDTO>();
				//記錄需要保存的交易參數信息
				//List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
				//獲取當前登錄者信息
				//IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
				//下載的錯誤文件信息名稱
				Map errorFileMap = new HashMap();
				//記錄文件是否錯誤
				Boolean isFileError = Boolean.FALSE;
				List<BimMerchantHeader> bimMerchantHeaders = new ArrayList<BimMerchantHeader>();
				List<BimMerchant> bimMerchants = new ArrayList<BimMerchant>();
				msg  = this.checkUploadFiled(multipartFile, caseCategory, srmCaseHandleInfoDTOs, errorMsgs, formDTO, isFileError, bimMerchantHeaders, bimMerchants);
				//如果超過500行，直接返回錯誤信息。
				Map map = new HashMap();
				if (msg == null) {
					if (CollectionUtils.isEmpty(errorMsgs)) {
						formDTO.setSrmCaseHandleInfoDTOs(srmCaseHandleInfoDTOs);
						formDTO.setCaseCategory(caseCategory);
						caseImportAsynchronousHandle(formDTO, bimMerchantHeaders, bimMerchants);
						msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_UPLOAD_SUCCESS, new String[]{i18NUtil.getName(caseCategory), Integer.toString(srmCaseHandleInfoDTOs.size())});
						sessionContext.setResponseResult(formDTO);
					} else {
						errorFileMap = this.saveErrorMsg(errorMsgs);
						map.put(CaseManagerFormDTO.ERROR_FILE_NAME, errorFileMap.get(CaseManagerFormDTO.ERROR_FILE_NAME));
						map.put(CaseManagerFormDTO.ERROR_FILE_PATH, errorFileMap.get(CaseManagerFormDTO.ERROR_FILE_PATH));
						msg = new Message(Message.STATUS.FAILURE);
					}
				}
				sessionContext.setReturnMessage(msg);
				if (Message.STATUS.SUCCESS.equals(msg.getStatus())) {
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, true);
				} else {
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, false);
				}
				sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
			}
		} catch (DataAccessException e) {
			LOGGER.error("checkCaseData()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.UPLOAD_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("checkCaseData()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.UPLOAD_FAILURE, e);
		} finally {
			if (!CollectionUtils.isEmpty(errorMsgs)) {
				String fileName = formDTO.getFileName();
				String path = this.getSaveTempFilePath(true, fileName, null);
				try {
					FileUtils.removeFile(path);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
//			File tempFilePath = new File(path);
//			File[] fa = tempFilePath.listFiles();
//			if (fa != null) {
//				FileUtils.removeFile(path);
//			}
		}
		return sessionContext;
	}
	
	/**
	 * 
	 * Purpose:
	 * @author Carrie Duan
	 * @param uploadFiled
	 * @param caseCategory
	 * @param srmCaseHandleInfoDTOs
	 * @param errorMsgs
	 * @param srmCaseTransactionParameterDTOs
	 * @param logonUser
	 * @return
	 * @return Message
	 */
	private Message checkUploadFiled(MultipartFile uploadFiled, String caseCategory, List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs, 
			List<String> errorMsgs, CaseManagerFormDTO formDTO, Boolean isFileError, List<BimMerchantHeader> bimMerchantHeaders, List<BimMerchant> bimMerchants) {
		Message message = null;
		LOGGER.debug("START---->"+DateTimeUtils.getCurrentTimestamp());
		try{
			if (uploadFiled != null) {
				List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = null;
				//獲取當前登錄者信息
				IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
				
				// 客戶角色只能建立公司為該客戶的案件
				this.setUserRoleAttribute(formDTO);
				String queryCustomerId = null;
				// Task #3578 客戶廠商客服
				if ((formDTO.getIsCustomerAttribute() || formDTO.getIsCustomerVendorAttribute()) && !formDTO.getIsVendorAttribute()) {
					queryCustomerId = logonUser.getCompanyId();
				}
				
				// 获取上传文件输入流
				InputStream inputStream = uploadFiled.getInputStream();
				Workbook workbook = null;
				Sheet sheet = null;
				Row row = null;
				int rowCount = 0;
				String fileName = uploadFiled.getOriginalFilename();
				String fileTxt = fileName.substring(fileName.lastIndexOf(IAtomsConstants.MARK_NO) + 1);
				if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
					//2003版本
					workbook = new HSSFWorkbook(inputStream);
				} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
					//2007版本
					workbook = new XSSFWorkbook(inputStream);
				}
				if (workbook != null) {
					sheet = workbook.getSheetAt(0);
				} else {
					String errorMsg = i18NUtil.getName(IAtomsMessageCode.FILE_FORMAT_ERROR);
					LOGGER.error("workbook is null >>> ");
					throw new ServiceException();
				}
				// 獲取行數
				rowCount = this.getExcelRealRowCount(sheet);
				if (rowCount <= 1) {
					errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.IATOMS_MSG_NONE_DATA));
				} else if (rowCount > 501) {
					message = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.ABOUCHEMENT_FAILURE_FOR_OVER_LIMIT, new String[]{PropertyNumberImportFormDTO.UPLOAD_NUMBER });
				} else {
					SimpleDtoDmoTransformer transformer = new SimpleDtoDmoTransformer();
					//需求單號
					String requirementNo = null;
					//部門名稱
					String departmentName = null;
					//案件類型名稱
					String caseTypeName = null;
					//預計完成日
					String expectedCompletionDate = null;
					//軟體版本
					String softwareVersionName = null;
					//其他說明
					String description = null;
					// 派工TMS
					String isTms = null;
					//臨時變量
					String temp = null;
					//特點代號
					String merchantCode = null;
					//
					String caseType = null;
					//客戶
					String customerName = null;
					//客戶
					String customerID = null;
					//合約
					String contractCode = null;
					//裝機類型
					String installType = null;
					//維護廠商
					String companyName = null;
					//維護部門
					String vendorDeptName = null;
					//案件序號
					String caseNo = null;
					//專案
					String isProject = null;
					//刷卡機型
					String edcTypeName = null;
					//特點表頭
					String merchantHeaderName = null;
					//內建功能
					String builtInFeatureName = null;
					//雙模組模式
					String multiModuleName = null;
					//週邊設備
					String peripheralsName = null;
					//週邊設備功能
					String peripheralsFunctionName = null;
					//ECR連接
					String ecrConnectionName = null;
					//週邊設備2
					String peripherals2Name = null;
					//週邊設備功能2
					String peripheralsFunction2Name = null;
					//通訊模式
					String connectionTypeName = null;
					//週邊設備3
					String peripherals3Name = null;
					//週邊設備功能3
					String peripheralsFunction3Name = null;
					//本機IP
					String localhostIp = null;
					//寬頻連接名稱
					String netVendorName = null;
					//Gateway
					String gateway = null;
					//Netmask
					String netmask = null;
					//TMS參數說明
					String tmsParamDesc = null;
					//客戶是否爲環匯
					Boolean isGp = Boolean.FALSE;
					Boolean isTsb = Boolean.FALSE;
					SimpleDateFormat sf = new SimpleDateFormat(DateTimeUtils.DT_FMT_YYYYMMDD_DASH);
					//裝機類別
					List<Parameter> installTypeList = (List<Parameter>)this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.INSTALL_TYPE.getCode(), null);
					//雙模組模式列表
					List<Parameter> multiModules = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.DOUBLE_MODULE.getCode(), null);
					//獲取週邊設備下拉列表
					List<Parameter> peripheralsList = null;
					//寬頻鏈接下拉列表
					List<Parameter> netVendorList = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.NET_VENDOR.getCode(), null);
					//獲取客戶下拉列表
					List<Parameter> companyList = this.companyDAO.getCompanyList(null, null, Boolean.FALSE, null);
					//臨時集合變量
					List<Parameter> parameters = new ArrayList<Parameter>();
					//獲取案件類型列表
					List<Parameter> caseTypes = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.TICKET_MODE.getCode(), null);
					//獲取縣市下拉列表
					List<Parameter> locations = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.LOCATION.getCode(), null);
					//獲取特店區域
					List<Parameter> areas = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.REGION.getCode(), null);
					//獲取交易參數列
					List<SrmTransactionParameterItemDTO> transactionParameterItemList = this.srmTransactionParameterItemDAO.listby(sf.format(DateTimeUtils.getCurrentTimestamp()));
					SrmCaseHandleInfoDTO caseHandleInfoDTO = null;
					//記錄為重複的DTID
					Map<String, Integer> repeatDtid = new HashMap<String, Integer>();
					//記錄sla資料
					List<ContractSlaDTO> contractSlaDTOList = null;
					List<String> itemValues = null;
					List<SrmCaseTransactionParameterDTO> caseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
					//臨時記錄交易參數數據
					SrmCaseTransactionParameterDTO caseTransactionParameterDTO = null;
					//記錄交易參數錯誤信息
					List<String> transErrors = new ArrayList<String>();
					int errorRow = 0;
					String dtid = null;
					SrmCaseHandleInfoDTO newCaseHandleInfoDTO = null;
					// 如果狀態為裝機或者異動、拼機，則獲取交易參數頁簽的數據
					if (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)
							|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseCategory)) {
						//循環交易參數sheet，取出數據
						int sheetNo = workbook.getNumberOfSheets();
						if (sheetNo > 1) {
							sheet = workbook.getSheetAt(1);
							// 獲取行數
							rowCount = this.getExcelRealRowCount(sheet);
							int index = 0;
							for (int i = 1; i < rowCount; i++) {
								index = 0;
								itemValues = new ArrayList<String>();
								caseTransactionParameterDTO = new SrmCaseTransactionParameterDTO();
								row = sheet.getRow(i);
								dtid = this.getCellFormatValue(row.getCell(index++), null, true);
								if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
									caseTransactionParameterDTO.setCaseNo(dtid);
								} else {
									caseTransactionParameterDTO.setDTID(dtid);
									caseTransactionParameterDTO.setIsDeleted(this.getCellFormatValue(row.getCell(index++), null, true));
								}
								caseTransactionParameterDTO.setTransactionTypeName(this.getCellFormatValue(row.getCell(index++), null, true));
								caseTransactionParameterDTO.setMerchantCode(this.getCellFormatValue(row.getCell(index++), null, true));
								caseTransactionParameterDTO.setMerchantCodeOther(this.getCellFormatValue(row.getCell(index++), null, true));
								caseTransactionParameterDTO.setTid(this.getCellFormatValue(row.getCell(index++), null, true));
								for (int j = 3; j < transactionParameterItemList.size(); j++) {
									temp = this.getCellFormatValue(row.getCell(j + (index - 3)), null, true);
									itemValues.add(temp);
								}
								caseTransactionParameterDTO.setItemValues(itemValues);
								caseTransactionParameterDTOs.add(caseTransactionParameterDTO);
							}
						}
					}
					//拼機核檢
					if (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseCategory)) {
						String sameInstalled = null;
						Boolean isError = Boolean.FALSE;
						//循環交易參數sheet，取出數據
						sheet = workbook.getSheetAt(0);
						// 獲取行數
						rowCount = this.getExcelRealRowCount(sheet);
						//核檢案件資料sheet
						for (int i = 1; i < rowCount; i++) {
							isGp = Boolean.FALSE;
							isTsb = Boolean.FALSE;
							newCaseHandleInfoDTO = new SrmCaseHandleInfoDTO();
							srmCaseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
							transErrors = new ArrayList<String>();
							errorRow = errorMsgs.size();
							row = sheet.getRow(i);
							if (isRowEmpty(row)) {
								continue;
							}
							dtid = this.getCellFormatValue(row.getCell(2), null, true);
							transErrors.add(i18NUtil.getName(IAtomsMessageCode.CASE_PARAMETER_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
							//驗證dtid是否輸入
							if (StringUtils.hasText(dtid)) {
								repeatDtid.put(dtid, i+1);
								//依據dtid獲取對應的案件信息
							//	caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTOById(dtid);
								// CR #2551 查詢最新資料檔是否有該dtid // 改為抓處理中  如果處理中全部結案 抓最新資料檔 2018/01/04 Bug #3055
								boolean isHave = this.srmCaseNewHandleInfoDAO.isInCase(dtid, null);
								
								// 查詢案件資料
								caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(dtid, isHave, queryCustomerId);
								
								
								//如果查詢結果為空，則代表該筆dtid無法進行異動。
								if (caseHandleInfoDTO != null) {
									//判斷客戶是否爲環慧
									if (IAtomsConstants.PARAM_GP.equals(caseHandleInfoDTO.getCompanyCode())) {
										isGp = Boolean.TRUE;
									} else if (IAtomsConstants.PARAM_TSB_EDC.equals(caseHandleInfoDTO.getCompanyCode())){
										isTsb = Boolean.TRUE;
									}
									//驗證需求單號長度是否正確
									requirementNo = this.getCellFormatValue(row.getCell(1), null, true);
									if (StringUtils.hasText(requirementNo)) {
										if (requirementNo.trim().length() > Integer.valueOf(IAtomsConstants.REQUIREMENT_NO_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO), IAtomsConstants.REQUIREMENT_NO_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											// Task #3584 匯入檢核
											String resault = this.checkRequirementNo(requirementNo, dtid, caseHandleInfoDTO, caseCategory);
											if (StringUtils.hasText(resault)) {
												// 此DTID台新裝機件已存在 || 此DTID台新裝機件尚未建案
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ resault);
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setRequirementNo(requirementNo);
											}
										}
									} else {
										if (isGp || isTsb) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setRequirementNo(null);
										}
									}
									//如若維護部門輸入，維護部門是否屬於當前維護廠商
									departmentName = this.getCellFormatValue(row.getCell(3), null, true);
									if (StringUtils.hasText(departmentName)) {
										if (i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE).equals(departmentName)) {
											newCaseHandleInfoDTO.setDepartmentId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
											newCaseHandleInfoDTO.setDepartmentName(departmentName);
											CompanyDTO companyDTO= this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_CYB);
											if (companyDTO != null) {
												newCaseHandleInfoDTO.setCompanyId(companyDTO.getCompanyId());
												newCaseHandleInfoDTO.setCompanyName(companyDTO.getShortName());
											}
										} else {
											//temp = this.departmentDAO.getDepartmentIdByName(departmentName, null);
											List<BimDepartmentDTO> dtos = this.departmentDAO.listBy(null, null, departmentName, -1, -1, null, null);
											if (!CollectionUtils.isEmpty(dtos)) {
												newCaseHandleInfoDTO.setDepartmentId(dtos.get(0).getDeptCode());
												newCaseHandleInfoDTO.setDepartmentName(departmentName);
												newCaseHandleInfoDTO.setCompanyId(dtos.get(0).getCompanyId());
												newCaseHandleInfoDTO.setCompanyName(dtos.get(0).getCompanyName());
											} else {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null));
												isFileError = Boolean.TRUE;
											}
											/*if (!StringUtils.hasText(temp)) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID), departmentName, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPANY_ID), caseHandleInfoDTO.getCompanyName()}, null));
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setDepartmentId(temp);
												newCaseHandleInfoDTO.setDepartmentName(departmentName);
											}*/
										}
										
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getDepartmentId())) {
											newCaseHandleInfoDTO.setDepartmentId(caseHandleInfoDTO.getDepartmentId());
											newCaseHandleInfoDTO.setDepartmentName(caseHandleInfoDTO.getDepartmentName());
											newCaseHandleInfoDTO.setCompanyId(caseHandleInfoDTO.getCompanyId());
											newCaseHandleInfoDTO.setCompanyName(caseHandleInfoDTO.getCompanyName());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null)) );
											isFileError = Boolean.TRUE;
										}
									}
									//Task #3460若裝機類型為微型商戶，則維護廠商只能是經茂聯網
									if(IAtomsConstants.PARAM_YES.equals(caseHandleInfoDTO.getCmsCase()) &&
											!(StringUtils.hasText(newCaseHandleInfoDTO.getCompanyId()) && newCaseHandleInfoDTO.getCompanyId().equals(IAtomsConstants.CYBERSOFT_CODE))){
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_DEPARTMENT_ERROR));
										isFileError = Boolean.TRUE;
									}
									//是否同裝機作業
									sameInstalled = this.getCellFormatValue(row.getCell(4), null, true);
									if (StringUtils.hasText(sameInstalled)) {
										if (sameInstalled.equals(i18NUtil.getName(IAtomsConstants.YES))){
											newCaseHandleInfoDTO.setSameInstalled(IAtomsConstants.YES);
										} else if (sameInstalled.equals(i18NUtil.getName(IAtomsConstants.NO))){
											newCaseHandleInfoDTO.setSameInstalled(IAtomsConstants.NO);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_SAME_INSTALLED)}, null)) );
										}
									} else {
										newCaseHandleInfoDTO.setSameInstalled(caseHandleInfoDTO.getSameInstalled());
									}
									//核檢案件類型是否輸入正確
									caseTypeName = this.getCellFormatValue(row.getCell(5), null, true);
									if (StringUtils.hasText(caseTypeName)) {
										temp = this.getValueByName(caseTypes, caseTypeName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setCaseType(temp);
											newCaseHandleInfoDTO.setCaseTypeName(caseTypeName);
											if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
												caseType = IAtomsConstants.TICKET_MODE_COMMON;
											} else {
												caseType = temp;
											}
										}
									} else {
										newCaseHandleInfoDTO.setCaseType(caseHandleInfoDTO.getCaseType());
										newCaseHandleInfoDTO.setCaseTypeName(caseHandleInfoDTO.getCaseTypeName());
										newCaseHandleInfoDTO.setExpectedCompletionDate(caseHandleInfoDTO.getExpectedCompletionDate());
										if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(caseHandleInfoDTO.getCaseType())) {
											caseType = IAtomsConstants.TICKET_MODE_COMMON;
										} else {
											caseType = caseHandleInfoDTO.getCaseType();
										}
									}
									//驗證預計完成日期是否輸入正確
									expectedCompletionDate = this.getCellFormatValue(row.getCell(6), "yyyy/MM/dd", false);
									//判斷案件類型是否為預約
									if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
										//如果案件類型是為預約，則預計完成日必填
										if (!StringUtils.hasText(expectedCompletionDate)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null)) );
											isFileError = Boolean.TRUE;
										} else {
											//核檢日期格式是否正確
											if (!ValidateUtils.checkDate(expectedCompletionDate)) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_DATE_FORMAT_YYYY_MM_DD, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null));
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setExpectedCompletionDate(DateTimeUtils.toTimestamp(expectedCompletionDate));
											}
										}
									}
									//
									if (this.checkContactOrInstalled(row, 7, i + 1, caseHandleInfoDTO, newCaseHandleInfoDTO, errorMsgs, locations, caseCategory, null)){
										isFileError = Boolean.TRUE;
									};
									//客戶爲環匯時，驗證aoeMAIL是否輸入
									if (isGp && !StringUtils.hasText(caseHandleInfoDTO.getAoName())) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_AO_NAME)}, null));
										isFileError = Boolean.TRUE;
									}
									//核檢軟體版本
									softwareVersionName = this.getCellFormatValue(row.getCell(19), null, true);
									if (StringUtils.hasText(softwareVersionName)) {
										//依據所選客戶以及刷卡機行獲取相應的軟件版本列表
										parameters = this.pvmApplicationDAO.listSoftwareVersionsBy(caseHandleInfoDTO.getCustomerId(), caseHandleInfoDTO.getEdcType(), IAtomsConstants.NO);
										temp = this.getValueByName(parameters, softwareVersionName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_SOFTWARE_VERSION)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setSoftwareVersion(temp);
											newCaseHandleInfoDTO.setSoftwareVersionName(softwareVersionName);
										}
									} else {
										newCaseHandleInfoDTO.setSoftwareVersion(caseHandleInfoDTO.getSoftwareVersion());
										newCaseHandleInfoDTO.setSoftwareVersionName(caseHandleInfoDTO.getSoftwareVersionName());
									}
									//核檢其他說明
									description = this.getCellFormatValue(row.getCell(20), null, true);
									if (StringUtils.hasText(description)) {
										if (description.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DESCRIPTION), IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setDescription(description.replace("\n", "\r\n"));
										}
									} else {
										newCaseHandleInfoDTO.setDescription(null);
									}
									//核檢TMS
									isTms = this.getCellFormatValue(row.getCell(21), null, true);
									if (StringUtils.hasText(isTms)) {
										if (i18NUtil.getName(IAtomsConstants.NO).equals(isTms)) {
											newCaseHandleInfoDTO.setIsTms(IAtomsConstants.NO);
										} else if (i18NUtil.getName(IAtomsConstants.YES).equals(isTms)) {
											newCaseHandleInfoDTO.setIsTms(IAtomsConstants.YES);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_TMS)}, null));
											isFileError = Boolean.TRUE;
										}
									} else {
										newCaseHandleInfoDTO.setIsTms(caseHandleInfoDTO.getIsTms());
									}
									//核檢TMS參數說明
									tmsParamDesc = this.getCellFormatValue(row.getCell(22), null, true);
									if (StringUtils.hasText(tmsParamDesc)) {
										if (tmsParamDesc.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_TMS_PARAM_DESC)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_TMS_PARAM_DESC), IAtomsConstants.MAXLENGTH_TMS_PARAM_DESC}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setTmsParamDesc(tmsParamDesc.replace("\n", "\r\n"));
										}
									} else {
										newCaseHandleInfoDTO.setTmsParamDesc(caseHandleInfoDTO.getTmsParamDesc());
									}
									//核檢案件有無對應之SLA資料
									if (StringUtils.hasText(caseType)
											&& !IAtomsConstants.PARAM_YES.equals(caseHandleInfoDTO.getCmsCase())) {
										contractSlaDTOList = this.contractSlaDAO.listBy(null, caseHandleInfoDTO.getContractId(), caseHandleInfoDTO.getArea(),
												caseCategory, caseType, null, null, null, null, false);
										if(CollectionUtils.isEmpty(contractSlaDTOList)){
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.NO_SLA_FOR_CASE)));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setContractSlaDTO(contractSlaDTOList.get(0));
										}
									}
									//核檢交易參數
									if (this.checkUploadTrans(srmCaseTransactionParameterDTOs, caseHandleInfoDTO, transErrors, caseTransactionParameterDTOs, i + 1, caseCategory, transactionParameterItemList)){
										isError = Boolean.TRUE;
									} else {
										newCaseHandleInfoDTO.setCaseTransactionParameterDTOs(srmCaseTransactionParameterDTOs);
									};
									if (isFileError) {
										errorMsgs.add(errorRow, i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
										isFileError = Boolean.FALSE;
										errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
									}
									if (isError) {
										for (String string : transErrors) {
											errorMsgs.add(string);
										}
										isError = Boolean.FALSE;
										errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
									}
									newCaseHandleInfoDTO.setAttendanceTimes(Integer.valueOf(0));
									newCaseHandleInfoDTO.setCaseCategory(IAtomsConstants.CASE_CATEGORY.MERGE.getCode());
									newCaseHandleInfoDTO.setMerchantCode(caseHandleInfoDTO.getMerchantId());
									uploadCaseInfoUpdate(newCaseHandleInfoDTO, caseHandleInfoDTO, caseCategory);
									srmCaseHandleInfoDTOs.add(newCaseHandleInfoDTO);
								} else {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_DATA_NOT_FOUND, new String[]{String.valueOf(i + 1)}, null));
									errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
								}
							} else {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{""}, null));
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
										.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DTID)}, null)) );
								errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
							}
						}
						errorRow = errorMsgs.size();
						isFileError = Boolean.FALSE;
						for (int i = 0; i<caseTransactionParameterDTOs.size(); i++) {
							if (!repeatDtid.containsKey(caseTransactionParameterDTOs.get(i).getDTID())) {
								isFileError = Boolean.TRUE;
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_PARAMETER_UPLOAD_NO_CASE_INFO, new String[]{String.valueOf(i + 2)}, null));
								errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
							}
						}
						if (isFileError) {
							errorMsgs.add(errorRow, IAtomsConstants.MARK_EMPTY_STRING);
						}
						//拆機狀態
					} else if (IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseCategory)) {
						//獲取拆機類型列表
						List<Parameter> uninstallTypeList = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.UNINSTALL_TYPE.getCode(), null);
						//拆機類型
						String uninstallTypeName = null;
						//核檢案件資料sheet
						for (int i = 1; i < rowCount; i++) {
							newCaseHandleInfoDTO = new SrmCaseHandleInfoDTO();
							errorRow = errorMsgs.size();
							row = sheet.getRow(i);
							if (isRowEmpty(row)) {
								continue;
							}
							dtid = this.getCellFormatValue(row.getCell(2), null, true);
							//驗證dtid是否輸入
							if (StringUtils.hasText(dtid)) {
								//依據dtid獲取對應的案件信息
							//	caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTOById(dtid);
								// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
								boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(dtid, null);
								// 查詢案件資料
								caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(dtid, isNewHave, queryCustomerId);
								
								//如果查詢結果為空，則代表該筆dtid無法進行異動。
								if (caseHandleInfoDTO != null) {
									//判斷客戶是否爲環慧
									if (IAtomsConstants.PARAM_GP.equals(caseHandleInfoDTO.getCompanyCode())) {
										isGp = Boolean.TRUE;
									} else {
										isGp = Boolean.FALSE;
									}
									//驗證需求單號長度是否正確
									requirementNo = this.getCellFormatValue(row.getCell(1), null, true);
									if (StringUtils.hasText(requirementNo)) {
										if (requirementNo.trim().length() > Integer.valueOf(IAtomsConstants.REQUIREMENT_NO_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO), IAtomsConstants.REQUIREMENT_NO_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											// Task #3584 匯入檢核
											String resault = this.checkRequirementNo(requirementNo, dtid, caseHandleInfoDTO, caseCategory);
											if (StringUtils.hasText(resault)) {
												// 此DTID台新裝機件已存在 || 此DTID台新裝機件尚未建案
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ resault);
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setRequirementNo(requirementNo);
											}
											//newCaseHandleInfoDTO.setRequirementNo(requirementNo);
										}
									} else {
										if (isGp) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setRequirementNo(null);
										}
									} 
									//核檢拆機類型
									uninstallTypeName = this.getCellFormatValue(row.getCell(3), null, true);
									if (StringUtils.hasText(uninstallTypeName)) {
										temp = this.getValueByName(uninstallTypeList, uninstallTypeName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_UNINSTALL_TYPE)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setUninstallType(temp);
											newCaseHandleInfoDTO.setUninstallTypeName(uninstallTypeName);
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getUninstallType())) {
											newCaseHandleInfoDTO.setUninstallType(caseHandleInfoDTO.getUninstallType());
											newCaseHandleInfoDTO.setUninstallTypeName(caseHandleInfoDTO.getUninstallTypeName());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_UNINSTALL_TYPE)}, null)) );
											isFileError = Boolean.TRUE;
										}
									}
									//如若維護部門輸入，維護部門是否屬於當前維護廠商
									departmentName = this.getCellFormatValue(row.getCell(4), null, true);
									if (StringUtils.hasText(departmentName)) {
										if (i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE).equals(departmentName)) {
											newCaseHandleInfoDTO.setDepartmentId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
											newCaseHandleInfoDTO.setDepartmentName(departmentName);
											CompanyDTO companyDTO= this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_CYB);
											if (companyDTO != null) {
												newCaseHandleInfoDTO.setCompanyId(companyDTO.getCompanyId());
												newCaseHandleInfoDTO.setCompanyName(companyDTO.getShortName());
											}
										} else {
											//temp = this.departmentDAO.getDepartmentIdByName(departmentName, null);
											List<BimDepartmentDTO> dtos = this.departmentDAO.listBy(null, null, departmentName, -1, -1, null, null);
											if (!CollectionUtils.isEmpty(dtos)) {
												newCaseHandleInfoDTO.setDepartmentId(dtos.get(0).getDeptCode());
												newCaseHandleInfoDTO.setDepartmentName(departmentName);
												newCaseHandleInfoDTO.setCompanyId(dtos.get(0).getCompanyId());
												newCaseHandleInfoDTO.setCompanyName(dtos.get(0).getCompanyName());
											} else {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null));
												isFileError = Boolean.TRUE;
											}
											/*if (!StringUtils.hasText(temp)) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID), departmentName, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPANY_ID), caseHandleInfoDTO.getCompanyName()}, null));
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setDepartmentId(temp);
												newCaseHandleInfoDTO.setDepartmentName(departmentName);
											}*/
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getDepartmentId())) {
											newCaseHandleInfoDTO.setDepartmentId(caseHandleInfoDTO.getDepartmentId());
											newCaseHandleInfoDTO.setDepartmentName(caseHandleInfoDTO.getDepartmentName());
											newCaseHandleInfoDTO.setCompanyId(caseHandleInfoDTO.getCompanyId());
											newCaseHandleInfoDTO.setCompanyName(caseHandleInfoDTO.getCompanyName());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null));
											isFileError = Boolean.TRUE;
										}
									}
									//Task #3460若裝機類型為微型商戶，則維護廠商只能是經茂聯網
									if(IAtomsConstants.PARAM_YES.equals(caseHandleInfoDTO.getCmsCase()) &&
											!(StringUtils.hasText(newCaseHandleInfoDTO.getCompanyId()) && newCaseHandleInfoDTO.getCompanyId().equals(IAtomsConstants.CYBERSOFT_CODE))){
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_DEPARTMENT_ERROR));
										isFileError = Boolean.TRUE;
									}
									//核檢案件類型是否輸入正確
									caseTypeName = this.getCellFormatValue(row.getCell(5), null, true);
									if (StringUtils.hasText(caseTypeName)) {
										temp = this.getValueByName(caseTypes, caseTypeName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setCaseType(temp);
											newCaseHandleInfoDTO.setCaseTypeName(caseTypeName);
											if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
												caseType = IAtomsConstants.TICKET_MODE_COMMON;
											} else {
												caseType = temp;
											}
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getCaseType())) {
											newCaseHandleInfoDTO.setCaseType(caseHandleInfoDTO.getCaseType());
											newCaseHandleInfoDTO.setCaseTypeName(caseHandleInfoDTO.getCaseTypeName());
											newCaseHandleInfoDTO.setExpectedCompletionDate(caseHandleInfoDTO.getExpectedCompletionDate());
											if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(caseHandleInfoDTO.getCaseType())) {
												caseType = IAtomsConstants.TICKET_MODE_COMMON;
											} else {
												caseType = caseHandleInfoDTO.getCaseType();
											}
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null)) );
											isFileError = Boolean.TRUE;
										}
									}
									//驗證預計完成日期是否輸入正確
									expectedCompletionDate = this.getCellFormatValue(row.getCell(6), "yyyy/MM/dd", false);
									//判斷案件類型是否為預約
									if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
										//如果案件類型是為預約，則預計完成日必填
										if (!StringUtils.hasText(expectedCompletionDate)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null)) );
											isFileError = Boolean.TRUE;
										} else {
											//核檢日期格式是否正確
											if (!ValidateUtils.checkDate(expectedCompletionDate)) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_DATE_FORMAT_YYYY_MM_DD, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null));
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setExpectedCompletionDate(DateTimeUtils.toTimestamp(expectedCompletionDate));
											}
										}
									}
									if (this.checkContactOrInstalled(row, 7, i + 1, caseHandleInfoDTO,newCaseHandleInfoDTO, errorMsgs, locations, caseCategory, null)) {
										isFileError = Boolean.TRUE;
									}
									//客戶爲環匯時，驗證aoeMAIL是否輸入
									if (isGp && !StringUtils.hasText(caseHandleInfoDTO.getAoName())) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_AO_NAME)}, null));
										isFileError = Boolean.TRUE;
									}
									//核檢其他說明
									description = this.getCellFormatValue(row.getCell(19), null, true);
									if (StringUtils.hasText(description)) {
										if (description.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DESCRIPTION), IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setDescription(description.replace("\n", "\r\n"));
										}
									} else {
										newCaseHandleInfoDTO.setDescription(null);
									}
									//核檢案件有無對應之SLA資料
									//Task #3385 若裝機類型為微型商戶，則SLA不用驗證
									if (StringUtils.hasText(newCaseHandleInfoDTO.getCaseType())
											&& !IAtomsConstants.PARAM_YES.equals(caseHandleInfoDTO.getCmsCase())) {
										contractSlaDTOList = this.contractSlaDAO.listBy(null, caseHandleInfoDTO.getContractId(), caseHandleInfoDTO.getArea(),
												caseCategory, caseType, null, null, null, null, false);
										if(CollectionUtils.isEmpty(contractSlaDTOList)){
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.NO_SLA_FOR_CASE)));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setContractSlaDTO(contractSlaDTOList.get(0));
										}
									}
									if (isFileError) {
										errorMsgs.add(errorRow, i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
										isFileError = Boolean.FALSE;
										errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
									} else {
										srmCaseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
									//	List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.listTransactionParameterDTOsByDtid(dtid);
										// CR #2551  查詢交易參數 Bug #3055
										List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.getTransactionParameterDTOsByDtid(dtid, isNewHave);
										
										for (SrmCaseNewTransactionParameterDTO srmCaseNewTransactionParameterDTO : caseNewTransactionParameterDTOs) {
											caseTransactionParameterDTO = (SrmCaseTransactionParameterDTO) transformer .transform(srmCaseNewTransactionParameterDTO, new SrmCaseTransactionParameterDTO());
											srmCaseTransactionParameterDTOs.add(caseTransactionParameterDTO);
										}
										newCaseHandleInfoDTO.setAttendanceTimes(Integer.valueOf(0));
										newCaseHandleInfoDTO.setMerchantCode(caseHandleInfoDTO.getMerchantId());
										newCaseHandleInfoDTO.setCaseTransactionParameterDTOs(srmCaseTransactionParameterDTOs);
										newCaseHandleInfoDTO.setCaseCategory(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode());
										uploadCaseInfoUpdate(newCaseHandleInfoDTO, caseHandleInfoDTO, caseCategory);
										srmCaseHandleInfoDTOs.add(newCaseHandleInfoDTO);
									}
								} else {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_DATA_NOT_FOUND, new String[]{String.valueOf(i + 1)}, null));
									errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
								}
							} else {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{""}, null));
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
										.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DTID)}, null)) );
								errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
							}
							LOGGER.debug("end---->"+DateTimeUtils.getCurrentTimestamp());
						}
						LOGGER.debug("UNINSTALL---end---->"+DateTimeUtils.getCurrentTimestamp());
						//核檢狀態
					} else if (IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(caseCategory)) {
						//核檢案件資料sheet
						for (int i = 1; i < rowCount; i++) {
							newCaseHandleInfoDTO = new SrmCaseHandleInfoDTO();
							errorRow = errorMsgs.size();
							row = sheet.getRow(i);
							if (isRowEmpty(row)) {
								continue;
							}
							dtid = this.getCellFormatValue(row.getCell(2), null, true);
							//驗證dtid是否輸入
							if (StringUtils.hasText(dtid)) {
								//依據dtid獲取對應的案件信息
							//	caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTOById(dtid);
								// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
								boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(dtid, null);
								// 查詢案件資料
								caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(dtid, isNewHave, queryCustomerId);
								
								//如果查詢結果為空，則代表該筆dtid無法進行異動。
								if (caseHandleInfoDTO != null) {
									//判斷客戶是否爲環慧
									if (IAtomsConstants.PARAM_GP.equals(caseHandleInfoDTO.getCompanyCode())) {
										isGp = Boolean.TRUE;
									} else {
										isGp = Boolean.FALSE;
									}
									//驗證需求單號長度是否正確
									requirementNo = this.getCellFormatValue(row.getCell(1), null, true);
									if (StringUtils.hasText(requirementNo)) {
										if (requirementNo.trim().length() > Integer.valueOf(IAtomsConstants.REQUIREMENT_NO_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO), IAtomsConstants.REQUIREMENT_NO_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											// Task #3584 匯入檢核
											String resault = this.checkRequirementNo(requirementNo, dtid, caseHandleInfoDTO, caseCategory);
											if (StringUtils.hasText(resault)) {
												// 此DTID台新裝機件已存在 || 此DTID台新裝機件尚未建案
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ resault);
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setRequirementNo(requirementNo);
											}
											//newCaseHandleInfoDTO.setRequirementNo(requirementNo);
										}
									} else {
										/*if (isGp) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setRequirementNo(null);
										}*/
										newCaseHandleInfoDTO.setRequirementNo(null);
									}
									//如若維護部門輸入，維護部門是否屬於當前維護廠商
									departmentName = this.getCellFormatValue(row.getCell(3), null, true);
									if (StringUtils.hasText(departmentName)) {
										if (i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE).equals(departmentName)) {
											newCaseHandleInfoDTO.setDepartmentId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
											newCaseHandleInfoDTO.setDepartmentName(departmentName);
											CompanyDTO companyDTO= this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_CYB);
											if (companyDTO != null) {
												newCaseHandleInfoDTO.setCompanyId(companyDTO.getCompanyId());
												newCaseHandleInfoDTO.setCompanyName(companyDTO.getShortName());
											}
										} else {
											/*temp = this.departmentDAO.getDepartmentIdByName(departmentName, caseHandleInfoDTO.getCompanyId());
											if (!StringUtils.hasText(temp)) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID), departmentName, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPANY_ID), caseHandleInfoDTO.getCompanyName()}, null));
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setDepartmentId(temp);
												newCaseHandleInfoDTO.setDepartmentName(departmentName);
											}*/
											List<BimDepartmentDTO> dtos = this.departmentDAO.listBy(null, null, departmentName, -1, -1, null, null);
											if (!CollectionUtils.isEmpty(dtos)) {
												newCaseHandleInfoDTO.setDepartmentId(dtos.get(0).getDeptCode());
												newCaseHandleInfoDTO.setDepartmentName(departmentName);
												newCaseHandleInfoDTO.setCompanyId(dtos.get(0).getCompanyId());
												newCaseHandleInfoDTO.setCompanyName(dtos.get(0).getCompanyName());
											} else {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null));
												isFileError = Boolean.TRUE;
											}
											temp = null;
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getDepartmentId())) {
											newCaseHandleInfoDTO.setDepartmentId(caseHandleInfoDTO.getDepartmentId());
											newCaseHandleInfoDTO.setDepartmentName(caseHandleInfoDTO.getDepartmentName());
											newCaseHandleInfoDTO.setCompanyId(caseHandleInfoDTO.getCompanyId());
											newCaseHandleInfoDTO.setCompanyName(caseHandleInfoDTO.getCompanyName());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null));
											isFileError = Boolean.TRUE;
										}
									}
									//Task #3460若裝機類型為微型商戶，則維護廠商只能是經茂聯網
									if(IAtomsConstants.PARAM_YES.equals(caseHandleInfoDTO.getCmsCase()) &&
											!(StringUtils.hasText(newCaseHandleInfoDTO.getCompanyId()) && newCaseHandleInfoDTO.getCompanyId().equals(IAtomsConstants.CYBERSOFT_CODE))){
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_DEPARTMENT_ERROR));
										isFileError = Boolean.TRUE;
									}
									//核檢案件類型是否輸入正確
									caseTypeName = this.getCellFormatValue(row.getCell(4), null, true);
									if (StringUtils.hasText(caseTypeName)) {
										temp = this.getValueByName(caseTypes, caseTypeName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setCaseType(temp);
											newCaseHandleInfoDTO.setCaseTypeName(caseTypeName);
											if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
												caseType = IAtomsConstants.TICKET_MODE_COMMON;
											} else {
												caseType = temp;
											}
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getCaseType())) {
											newCaseHandleInfoDTO.setCaseType(caseHandleInfoDTO.getCaseType());
											newCaseHandleInfoDTO.setCaseTypeName(caseHandleInfoDTO.getCaseTypeName());
											newCaseHandleInfoDTO.setExpectedCompletionDate(caseHandleInfoDTO.getExpectedCompletionDate());
											if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(caseHandleInfoDTO.getCaseType())) {
												caseType = IAtomsConstants.TICKET_MODE_COMMON;
											} else {
												caseType = caseHandleInfoDTO.getCaseType();
											}
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null)) );
											isFileError = Boolean.TRUE;
										}
									}
									//驗證預計完成日期是否輸入正確
									expectedCompletionDate = this.getCellFormatValue(row.getCell(5), "yyyy/MM/dd", false);
									//判斷案件類型是否為預約
									if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
										//如果案件類型是為預約，則預計完成日必填
										if (!StringUtils.hasText(expectedCompletionDate)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null)) );
											isFileError = Boolean.TRUE;
										} else {
											//核檢日期格式是否正確
											if (!ValidateUtils.checkDate(expectedCompletionDate)) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_DATE_FORMAT_YYYY_MM_DD, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null));
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setExpectedCompletionDate(DateTimeUtils.toTimestamp(expectedCompletionDate));
											}
										}
									}
									if (this.checkContactOrInstalled(row, 6, i + 1, caseHandleInfoDTO, newCaseHandleInfoDTO, errorMsgs, locations, caseCategory, null)) {
										isFileError = Boolean.TRUE;
									}
									//客戶爲環匯時，驗證aoeMAIL是否輸入
									if (isGp && !StringUtils.hasText(caseHandleInfoDTO.getAoName())) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_AO_NAME)}, null));
										isFileError = Boolean.TRUE;
									}
									//核檢其他說明
									description = this.getCellFormatValue(row.getCell(18), null, true);
									if (StringUtils.hasText(description)) {
										if (description.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DESCRIPTION), IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setDescription(description.replace("\n", "\r\n"));
										}
									} else {
										newCaseHandleInfoDTO.setDescription(null);
									}
									//核檢案件有無對應之SLA資料
									/*if (StringUtils.hasText(caseType)) {
										contractSlaDTOList = this.contractSlaDAO.listBy(null, caseHandleInfoDTO.getContractId(), caseHandleInfoDTO.getArea(),
												caseCategory, caseType, null, null, null, null, false);
										if(CollectionUtils.isEmpty(contractSlaDTOList)){
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.NO_SLA_FOR_CASE)));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setContractSlaDTO(contractSlaDTOList.get(0));
										}
									}*/
									if (isFileError) {
										errorMsgs.add(errorRow, i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
										errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
									} else {
										srmCaseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
									//	List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.listTransactionParameterDTOsByDtid(dtid);
										// CR #2551  查詢交易參數 Bug #3055
										List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.getTransactionParameterDTOsByDtid(dtid, isNewHave);
										
										for (SrmCaseNewTransactionParameterDTO srmCaseNewTransactionParameterDTO : caseNewTransactionParameterDTOs) {
											caseTransactionParameterDTO = (SrmCaseTransactionParameterDTO) transformer .transform(srmCaseNewTransactionParameterDTO, new SrmCaseTransactionParameterDTO());
											srmCaseTransactionParameterDTOs.add(caseTransactionParameterDTO);
										}
										newCaseHandleInfoDTO.setAttendanceTimes(Integer.valueOf(0));
										newCaseHandleInfoDTO.setCaseTransactionParameterDTOs(srmCaseTransactionParameterDTOs);
										newCaseHandleInfoDTO.setCaseCategory(IAtomsConstants.CASE_CATEGORY.CHECK.getCode());
										newCaseHandleInfoDTO.setMerchantCode(caseHandleInfoDTO.getMerchantId());
										uploadCaseInfoUpdate(newCaseHandleInfoDTO, caseHandleInfoDTO, caseCategory);
										srmCaseHandleInfoDTOs.add(newCaseHandleInfoDTO);
									}
									
								} else {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) + i18NUtil.getName(IAtomsMessageCode.DATA_NOT_FOUND));
									errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
								}
							} else {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{""}, null));
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
										.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DTID)}, null)) );
								errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
							}
						}
						//專安
					}  else if (IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseCategory)) {
						//專案代碼
						String projectCode = null;
						//專案名稱
						String projectName = null;
						//循環交易參數sheet，取出數據
						sheet = workbook.getSheetAt(0);
						// 獲取行數
						rowCount = this.getExcelRealRowCount(sheet);
						//獲取Receipt_type
						List<Parameter> receiptTypes = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.RECEIPT_TYPE.getCode(), null);
						//
						String receiptTypeName = null;
						Boolean isDeleted = false;
						//核檢案件資料sheet
						for (int i = 1; i < rowCount; i++) {
							isGp = Boolean.FALSE;
							srmCaseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
							newCaseHandleInfoDTO = new SrmCaseHandleInfoDTO();
							errorRow = errorMsgs.size();
							row = sheet.getRow(i);
							if (isRowEmpty(row)) {
								continue;
							}
							dtid = this.getCellFormatValue(row.getCell(2), null, true);
							//驗證dtid是否輸入
							if (StringUtils.hasText(dtid)) {
								repeatDtid.put(dtid, i+1);
								//記錄交易參數的錯誤信息
								transErrors = new ArrayList<String>();
								transErrors.add(i18NUtil.getName(IAtomsMessageCode.CASE_PARAMETER_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
								//依據dtid獲取對應的案件信息
							//	caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTOById(dtid);
								// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
								boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(dtid, null);
								// 查詢案件資料
								caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(dtid, isNewHave, queryCustomerId);
								//如果查詢結果為空，則代表該筆dtid無法進行異動。
								if (caseHandleInfoDTO != null) {
									peripheralsList = this.assetTypeDAO.listAssetByCustomerId(caseHandleInfoDTO.getCustomerId(), IAtomsConstants.ASSET_CATEGORY_RODUND_ASSET, true);
									//判斷客戶是否爲環慧
									if (IAtomsConstants.PARAM_GP.equals(caseHandleInfoDTO.getCompanyCode())) {
										isGp = Boolean.TRUE;
									} else {
										isGp = Boolean.FALSE;
									}
									//驗證需求單號長度是否正確
									requirementNo = this.getCellFormatValue(row.getCell(1), null, true);
									if (StringUtils.hasText(requirementNo)) {
										if (requirementNo.trim().length() > Integer.valueOf(IAtomsConstants.REQUIREMENT_NO_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO), IAtomsConstants.REQUIREMENT_NO_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											// Task #3584 匯入檢核
											String resault = this.checkRequirementNo(requirementNo, dtid, caseHandleInfoDTO, caseCategory);
											if (StringUtils.hasText(resault)) {
												// 此DTID台新裝機件已存在 || 此DTID台新裝機件尚未建案
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ resault);
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setRequirementNo(requirementNo);
											}
											//newCaseHandleInfoDTO.setRequirementNo(requirementNo);
										}
									} else {
										newCaseHandleInfoDTO.setRequirementNo(null);
									}
									//核檢專案代碼
									projectCode = this.getCellFormatValue(row.getCell(3), null, true);
									if (StringUtils.hasText(projectCode)) {
										if (projectCode.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_USER_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PROJECT_CODE), IAtomsConstants.CONTACT_USER_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setProjectCode(projectCode);
										}
									} else {
										newCaseHandleInfoDTO.setProjectCode(caseHandleInfoDTO.getProjectCode());
									}
									//核檢專案名稱
									projectName = this.getCellFormatValue(row.getCell(4), null, true);
									if (StringUtils.hasText(projectName)) {
										if (projectName.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_ADDRESS_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PROJECT_NAME), IAtomsConstants.CONTACT_ADDRESS_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setProjectName(projectName);
										}
									} else {
										newCaseHandleInfoDTO.setProjectCode(caseHandleInfoDTO.getProjectName());
									}
									//如若維護部門輸入，維護部門是否屬於當前維護廠商
									departmentName = this.getCellFormatValue(row.getCell(5), null, true);
									if (StringUtils.hasText(departmentName)) {
										if (i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE).equals(departmentName)) {
											newCaseHandleInfoDTO.setDepartmentId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
											newCaseHandleInfoDTO.setDepartmentName(departmentName);
											CompanyDTO companyDTO= this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_CYB);
											if (companyDTO != null) {
												newCaseHandleInfoDTO.setCompanyId(companyDTO.getCompanyId());
												newCaseHandleInfoDTO.setCompanyName(companyDTO.getShortName());
											}
										} else {
											List<BimDepartmentDTO> dtos = this.departmentDAO.listBy(null, null, departmentName, -1, -1, null, null);
											if (!CollectionUtils.isEmpty(dtos)) {
												newCaseHandleInfoDTO.setDepartmentId(dtos.get(0).getDeptCode());
												newCaseHandleInfoDTO.setDepartmentName(departmentName);
												newCaseHandleInfoDTO.setCompanyId(dtos.get(0).getCompanyId());
												newCaseHandleInfoDTO.setCompanyName(dtos.get(0).getCompanyName());
											} else {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null));
												isFileError = Boolean.TRUE;
											}
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getDepartmentId())) {
											newCaseHandleInfoDTO.setDepartmentId(caseHandleInfoDTO.getDepartmentId());
											newCaseHandleInfoDTO.setDepartmentName(caseHandleInfoDTO.getDepartmentName());
											newCaseHandleInfoDTO.setCompanyId(caseHandleInfoDTO.getCompanyId());
											newCaseHandleInfoDTO.setCompanyName(caseHandleInfoDTO.getCompanyName());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null));
											isFileError = Boolean.TRUE;
										}
									}
									//Task #3460若裝機類型為微型商戶，則維護廠商只能是經茂聯網
									if(IAtomsConstants.PARAM_YES.equals(caseHandleInfoDTO.getCmsCase()) &&
											!(StringUtils.hasText(newCaseHandleInfoDTO.getCompanyId()) && newCaseHandleInfoDTO.getCompanyId().equals(IAtomsConstants.CYBERSOFT_CODE))){
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_DEPARTMENT_ERROR));
										isFileError = Boolean.TRUE;
									}
									//核檢案件類型是否輸入正確
									caseTypeName = this.getCellFormatValue(row.getCell(6), null, true);
									if (StringUtils.hasText(caseTypeName)) {
										temp = this.getValueByName(caseTypes, caseTypeName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setCaseType(temp);
											newCaseHandleInfoDTO.setCaseTypeName(caseTypeName);
											if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
												caseType = IAtomsConstants.TICKET_MODE_COMMON;
											} else {
												caseType = temp;
											}
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getCaseType())) {
											newCaseHandleInfoDTO.setCaseType(caseHandleInfoDTO.getCaseType());
											newCaseHandleInfoDTO.setCaseTypeName(caseHandleInfoDTO.getCaseTypeName());
											newCaseHandleInfoDTO.setExpectedCompletionDate(caseHandleInfoDTO.getExpectedCompletionDate());
											if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(caseHandleInfoDTO.getCaseType())) {
												caseType = IAtomsConstants.TICKET_MODE_COMMON;
											} else {
												caseType = caseHandleInfoDTO.getCaseType();
											}
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null)) );
											isFileError = Boolean.TRUE;
										}
									}
									//驗證預計完成日期是否輸入正確
									expectedCompletionDate = this.getCellFormatValue(row.getCell(7), "yyyy/MM/dd", false);
									//判斷案件類型是否為預約
									if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
										//如果案件類型是為預約，則預計完成日必填
										if (!StringUtils.hasText(expectedCompletionDate)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null)) );
											isFileError = Boolean.TRUE;
										} else {
											//核檢日期格式是否正確
											if (!ValidateUtils.checkDate(expectedCompletionDate)) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_DATE_FORMAT_YYYY_MM_DD, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null));
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setExpectedCompletionDate(DateTimeUtils.toTimestamp(expectedCompletionDate));
											}
										}
									}
									//核檢特點代號
									merchantCode = this.getCellFormatValue(row.getCell(8), null, true);
									if (StringUtils.hasText(merchantCode)) {
										//核檢特點代號是否為當前客戶下
										MerchantDTO merchantDTO = this.merchantDAO.getMerchantInfo(null, merchantCode, caseHandleInfoDTO.getCustomerId(), null);
										if (merchantDTO == null) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, 
															new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_CODE), merchantCode, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CUSTOMER_ID), caseHandleInfoDTO.getCustomerName()}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setMerchantCode(merchantDTO.getMerchantId());
											newCaseHandleInfoDTO.setMerMid(merchantCode);
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getMerchantCode())) {
											newCaseHandleInfoDTO.setMerchantCode(caseHandleInfoDTO.getMerchantId());
											newCaseHandleInfoDTO.setMerMid(caseHandleInfoDTO.getMerchantCode());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_CODE)}, null)) );
											isFileError = Boolean.TRUE;
										}
									}
									//核檢表頭信息
									merchantHeaderName = this.getCellFormatValue(row.getCell(9), null, true);
									if (!StringUtils.hasText(merchantHeaderName)) {
										merchantHeaderName = caseHandleInfoDTO.getHeaderName();
									}
									if (StringUtils.hasText(newCaseHandleInfoDTO.getMerchantCode()) && StringUtils.hasText(merchantHeaderName)) {
										//核檢特點表頭是否是該特點代號下
										BimMerchantHeaderDTO bimMerchantHeaderDTO = this.merchantHeaderDAO.getMerchantHeaderDTOBy(newCaseHandleInfoDTO.getMerchantCode(), merchantHeaderName, null);
										if (bimMerchantHeaderDTO == null) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, 
															new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_HEADER_ID), merchantHeaderName, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_CODE), merchantCode}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setMerchantHeaderId(bimMerchantHeaderDTO.getMerchantHeaderId());
											newCaseHandleInfoDTO.setHeaderName(merchantHeaderName);
											//客戶爲環匯時，驗證aoeMAIL是否輸入
											if (isGp && !StringUtils.hasText(bimMerchantHeaderDTO.getAoName())) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_AO_NAME)}, null));
												isFileError = Boolean.TRUE;
											}
										}
									} else {
										if (!StringUtils.hasText(merchantHeaderName)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_HEADER_ID)}, null)) );
											isFileError = Boolean.TRUE;
										}
										
									}
									if (this.checkContactOrInstalled(row, 10, i + 1, caseHandleInfoDTO, newCaseHandleInfoDTO, errorMsgs, locations, caseCategory, null)){
										isFileError = Boolean.TRUE;
									};
									//核檢軟體版本
									softwareVersionName = this.getCellFormatValue(row.getCell(22), null, true);
									if (StringUtils.hasText(softwareVersionName)) {
										//依據所選客戶以及刷卡機行獲取相應的軟件版本列表
										parameters = this.pvmApplicationDAO.listSoftwareVersionsBy(caseHandleInfoDTO.getCustomerId(), caseHandleInfoDTO.getEdcType(), IAtomsConstants.NO);
										temp = this.getValueByName(parameters, softwareVersionName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_SOFTWARE_VERSION)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setSoftwareVersion(temp);
											newCaseHandleInfoDTO.setSoftwareVersionName(softwareVersionName);
										}
									}else {
										if (StringUtils.hasText(caseHandleInfoDTO.getSoftwareVersion())) {
											newCaseHandleInfoDTO.setSoftwareVersion(caseHandleInfoDTO.getSoftwareVersion());
											newCaseHandleInfoDTO.setSoftwareVersionName(caseHandleInfoDTO.getSoftwareVersionName());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_SOFTWARE_VERSION)}, null));
											isFileError = Boolean.TRUE;
										}
									}
									String[] tempArray = null;
									StringBuffer tempBuffer = null;
									//核檢內建功能
									Boolean isError = Boolean.FALSE;
									builtInFeatureName = this.getCellFormatValue(row.getCell(23), null, true);
									if (StringUtils.hasText(builtInFeatureName)) {
										/*tempArray = builtInFeatureName.split(IAtomsConstants.MARK_SEPARATOR);
										tempBuffer = new StringBuffer();
										//獲取對應的內建功能
										parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(caseHandleInfoDTO.getEdcType());
										for (int j = 0; j< tempArray.length; j++) {
											temp = this.getValueByName(parameters, tempArray[j]);
											if (StringUtils.hasText(temp)) {
												tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
											} else {
												isError = Boolean.TRUE;
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_BUILT_IN_FEATURE)}, null));
												isFileError = Boolean.TRUE;
												break;
											}
										}*/
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(23).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(23).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										tempArray = builtInFeatureName.split(IAtomsConstants.MARK_SEPARATOR);
										tempBuffer = new StringBuffer();
										//獲取對應的內建功能
										parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(caseHandleInfoDTO.getEdcType());
										for (int j = 0; j< tempArray.length; j++) {
											temp = this.getValueByName(parameters, tempArray[j]);
											if (StringUtils.hasText(temp)) {
												tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
											} else {
												isError = Boolean.TRUE;
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_BUILT_IN_FEATURE)}, null));
												isFileError = Boolean.TRUE;
												break;
											}
										}
										if (!isError) {
											if (isDeleted) {
												String oldBuilt = caseHandleInfoDTO.getBuiltInFeature();
												String[] newBuilts = tempBuffer.substring(0, tempBuffer.length()-1).split(IAtomsConstants.MARK_SEPARATOR);
												tempArray = null;
												if (StringUtils.hasText(oldBuilt)) {
													tempArray = oldBuilt.split(IAtomsConstants.MARK_SEPARATOR);
												}
												tempBuffer = new StringBuffer();
												if (newBuilts != null && tempArray != null) {
													for (String newBuilt : newBuilts) {
														for (String old : tempArray) {
															if (newBuilt.equals(old)) {
																break;
															}
															tempBuffer.append(old).append(IAtomsConstants.MARK_SEPARATOR);
														}
													}
												}
											}
											if (tempBuffer.length() == 0) {
												newCaseHandleInfoDTO.setBuiltInFeature(null);
												newCaseHandleInfoDTO.setBuiltInFeatureName(null);
											} else {
												newCaseHandleInfoDTO.setBuiltInFeature(tempBuffer.substring(0, tempBuffer.length()-1));
												newCaseHandleInfoDTO.setBuiltInFeatureName(builtInFeatureName);
											}
										}
										/*if (!isError) {
											newCaseHandleInfoDTO.setBuiltInFeature(tempBuffer.substring(0, tempBuffer.length()-1));
											newCaseHandleInfoDTO.setBuiltInFeatureName(builtInFeatureName);
										}*/
									} else {
										newCaseHandleInfoDTO.setBuiltInFeature(caseHandleInfoDTO.getBuiltInFeature());
										newCaseHandleInfoDTO.setBuiltInFeatureName(caseHandleInfoDTO.getBuiltInFeatureName());
									}
									//核檢雙模組模式
									multiModuleName = this.getCellFormatValue(row.getCell(24), null, true);
									if (StringUtils.hasText(multiModuleName)) {
										temp = this.getValueByName(multiModules, multiModuleName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MULTI_MODULE)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setMultiModule(temp);
											newCaseHandleInfoDTO.setMultiModuleName(multiModuleName);
										}
										temp = null;
									} else {
										newCaseHandleInfoDTO.setMultiModule(caseHandleInfoDTO.getMultiModule());
										newCaseHandleInfoDTO.setMultiModuleName(caseHandleInfoDTO.getMultiModuleName());
									}
									//核檢週邊設備1
									peripheralsName = this.getCellFormatValue(row.getCell(25), null, true);
									if (StringUtils.hasText(peripheralsName)) {
										/*temp = this.getValueByName(peripheralsList, peripheralsName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS)}, null));
											//isError = Boolean.TRUE;
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setPeripherals(temp);
											newCaseHandleInfoDTO.setPeripheralsName(peripheralsName);
										}*/
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(25).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(25).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										temp = this.getValueByName(peripheralsList, peripheralsName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS)}, null));
											isFileError = Boolean.TRUE;
										} else {
											if (isDeleted) {
												String eripherals1 = caseHandleInfoDTO.getPeripherals();
												if (temp.equals(eripherals1) || !StringUtils.hasText(eripherals1)) {
													temp = null;
													peripheralsName = null;
												}
											}
											newCaseHandleInfoDTO.setPeripherals(temp);
											newCaseHandleInfoDTO.setPeripheralsName(peripheralsName);
										}
									} else {
										newCaseHandleInfoDTO.setPeripherals(caseHandleInfoDTO.getPeripherals());
										newCaseHandleInfoDTO.setPeripheralsName(caseHandleInfoDTO.getPeripheralsName());
									}
									//核檢週邊設備功能1
									isError = Boolean.FALSE;
									peripheralsFunctionName = this.getCellFormatValue(row.getCell(26), null, true);
									if (StringUtils.hasText(peripheralsFunctionName) && StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals())) {
										/*if (!StringUtils.hasText(peripheralsFunctionName)) {
											peripheralsFunctionName = caseHandleInfoDTO.getPeripheralsFunctionName();
										}
										if (!StringUtils.hasText(peripheralsFunctionName)) {
											newCaseHandleInfoDTO.setPeripheralsFunction(null);
											newCaseHandleInfoDTO.setPeripheralsFunctionName(null);
										} else {
											tempArray = peripheralsFunctionName.split(IAtomsConstants.MARK_SEPARATOR);
											tempBuffer = new StringBuffer();
											//獲取對應的周邊設備功能列表
											parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(newCaseHandleInfoDTO.getPeripherals());
											if(CollectionUtils.isEmpty(parameters)) {
												isError = Boolean.TRUE;
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												        + i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION), peripheralsFunctionName, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS), newCaseHandleInfoDTO.getPeripheralsName()}, null));
												isFileError = Boolean.TRUE;
											} else {
												for (int j = 0; j< tempArray.length; j++) {
													temp = this.getValueByName(parameters, tempArray[j]);
													if (StringUtils.hasText(temp)) {
														tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
													} else {
														isError = Boolean.TRUE;
														errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														        + i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION), tempArray[j], i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS), newCaseHandleInfoDTO.getPeripheralsName()}, null));
														isFileError = Boolean.TRUE;
													}
												}
											}
											if (!isError) {
												newCaseHandleInfoDTO.setPeripheralsFunction(tempBuffer.substring(0, tempBuffer.length()-1));
												newCaseHandleInfoDTO.setPeripheralsFunctionName(peripheralsFunctionName);
											}
										}*/
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(26).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(26).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										tempArray = peripheralsFunctionName.split(IAtomsConstants.MARK_SEPARATOR);
										tempBuffer = new StringBuffer();
										//獲取對應的周邊設備功能列表
										parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(newCaseHandleInfoDTO.getPeripherals());
										if(CollectionUtils.isEmpty(parameters)) {
											isError = Boolean.TRUE;
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION)}, null));
											isFileError = Boolean.TRUE;
										} else {
											for (int j = 0; j< tempArray.length; j++) {
												temp = this.getValueByName(parameters, tempArray[j]);
												if (StringUtils.hasText(temp)) {
													tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
												} else {
													isError = Boolean.TRUE;
													errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
															+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION)}, null));
													isFileError = Boolean.TRUE;
												}
											}
										}
										if (!isError) {
											if (isDeleted) {
												String eripheralsFunction = caseHandleInfoDTO.getPeripheralsFunction();
												String[] delPeripheralsFunction = tempBuffer.substring(0, tempBuffer.length()-1).split(IAtomsConstants.MARK_SEPARATOR);
												tempArray = null;
												if (StringUtils.hasText(eripheralsFunction)) {
													tempArray = eripheralsFunction.split(IAtomsConstants.MARK_SEPARATOR);
												}
												tempBuffer = new StringBuffer();
												if (delPeripheralsFunction != null && tempArray != null) {
													for (String deleInfo : delPeripheralsFunction) {
														for (String old : tempArray) {
															if (deleInfo.equals(old)) {
																break;
															}
															tempBuffer.append(old).append(IAtomsConstants.MARK_SEPARATOR);
														}
													}
												}
											}
											if (tempBuffer.length() == 0) {
												newCaseHandleInfoDTO.setPeripheralsFunction(null);
												newCaseHandleInfoDTO.setPeripheralsFunctionName(null);
											} else {
												newCaseHandleInfoDTO.setPeripheralsFunction(tempBuffer.substring(0, tempBuffer.length()-1));
												newCaseHandleInfoDTO.setPeripheralsFunctionName(peripheralsFunctionName);
											}
										}
									} else {
										if (StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals())) {
											newCaseHandleInfoDTO.setPeripheralsFunction(caseHandleInfoDTO.getPeripheralsFunction());
											newCaseHandleInfoDTO.setPeripheralsFunctionName(caseHandleInfoDTO.getPeripheralsFunctionName());
										} else {
											newCaseHandleInfoDTO.setPeripheralsFunction(null);
											newCaseHandleInfoDTO.setPeripheralsFunctionName(null);
										}
										
									}
									//核檢ECR連線
									ecrConnectionName = this.getCellFormatValue(row.getCell(27), null, true);
									if (StringUtils.hasText(ecrConnectionName)) {
										//獲取下拉列表數據
										parameters = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.ECR_LINE.getCode(), null);
										temp = this.getValueByName(parameters, ecrConnectionName);
										if (StringUtils.hasText(temp)) {
											newCaseHandleInfoDTO.setEcrConnection(temp);
											newCaseHandleInfoDTO.setEcrConnectionName(ecrConnectionName);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ECR_CONNECTION)}, null));
											isFileError = Boolean.TRUE;
										}
									} else {
										newCaseHandleInfoDTO.setEcrConnection(caseHandleInfoDTO.getEcrConnection());
										newCaseHandleInfoDTO.setEcrConnectionName(caseHandleInfoDTO.getEcrConnectionName());
									}
									//核檢週邊設備2
									peripherals2Name = this.getCellFormatValue(row.getCell(28), null, true);
									if (StringUtils.hasText(peripherals2Name)) {
										/*temp = this.getValueByName(peripheralsList, peripherals2Name);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS2)}, null));
											//isError = Boolean.TRUE;
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setPeripherals2(temp);
											newCaseHandleInfoDTO.setPeripherals2Name(peripherals2Name);
										}*/
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(28).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(28).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										temp = this.getValueByName(peripheralsList, peripherals2Name);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS2)}, null));
											isFileError = Boolean.TRUE;
										} else {
											if (isDeleted) {
												String eripherals2 = caseHandleInfoDTO.getPeripherals2();
												if (temp.equals(eripherals2) || !StringUtils.hasText(eripherals2)) {
													temp = null;
													peripherals2Name = null;
												}
											}
											newCaseHandleInfoDTO.setPeripherals2(temp);
											newCaseHandleInfoDTO.setPeripherals2Name(peripherals2Name);
										}
									} else {
										newCaseHandleInfoDTO.setPeripherals2(caseHandleInfoDTO.getPeripherals2());
										newCaseHandleInfoDTO.setPeripherals2Name(caseHandleInfoDTO.getPeripherals2Name());
									}
									//核檢週邊設備功能2
									isError = Boolean.FALSE;
									peripheralsFunction2Name = this.getCellFormatValue(row.getCell(29), null, true);
									if (StringUtils.hasText(peripheralsFunction2Name) && StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals2())) {
										/*if (!StringUtils.hasText(peripheralsFunction2Name)) {
											peripheralsFunction2Name = caseHandleInfoDTO.getPeripheralsFunction2Name();
										}
										if (!StringUtils.hasText(peripheralsFunction2Name)) {
											newCaseHandleInfoDTO.setPeripheralsFunction2(null);
											newCaseHandleInfoDTO.setPeripheralsFunction2Name(null);
										} else {
											tempArray = peripheralsFunction2Name.split(IAtomsConstants.MARK_SEPARATOR);
											tempBuffer = new StringBuffer();
											//獲取對應的周邊設備功能列表
											parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(newCaseHandleInfoDTO.getPeripherals2());
											if(CollectionUtils.isEmpty(parameters)) {
												isError = Boolean.TRUE;
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												        + i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION2), peripheralsFunction2Name, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS2), newCaseHandleInfoDTO.getPeripherals2Name()}, null));
												isFileError = Boolean.TRUE;
											} else {
												for (int j = 0; j< tempArray.length; j++) {
													temp = this.getValueByName(parameters, tempArray[j]);
													if (StringUtils.hasText(temp)) {
														tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
													} else {
														isError = Boolean.TRUE;
														errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														        + i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION2), tempArray[j], i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS2), newCaseHandleInfoDTO.getPeripherals2Name()}, null));
														isFileError = Boolean.TRUE;
													}
												}
											}
											if (!isError) {
												newCaseHandleInfoDTO.setPeripheralsFunction2(tempBuffer.substring(0, tempBuffer.length()-1));
												newCaseHandleInfoDTO.setPeripheralsFunction2Name(peripheralsFunction2Name);
											}
										}*/
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(29).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(29).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										tempArray = peripheralsFunction2Name.split(IAtomsConstants.MARK_SEPARATOR);
										tempBuffer = new StringBuffer();
										//獲取對應的周邊設備功能列表
										parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(newCaseHandleInfoDTO.getPeripherals2());
										if(CollectionUtils.isEmpty(parameters)) {
											isError = Boolean.TRUE;
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION2)}, null));
											isFileError = Boolean.TRUE;
										} else {
											for (int j = 0; j< tempArray.length; j++) {
												temp = this.getValueByName(parameters, tempArray[j]);
												if (StringUtils.hasText(temp)) {
													tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
												} else {
													isError = Boolean.TRUE;
													errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
															+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION2)}, null));
													isFileError = Boolean.TRUE;
												}
											}
										}
										if (!isError) {
											if (isDeleted) {
												String eripheralsFunction = caseHandleInfoDTO.getPeripheralsFunction2();
												String[] delPeripheralsFunction = tempBuffer.substring(0, tempBuffer.length()-1).split(IAtomsConstants.MARK_SEPARATOR);
												tempArray = null;
												if (StringUtils.hasText(eripheralsFunction)) {
													tempArray = eripheralsFunction.split(IAtomsConstants.MARK_SEPARATOR);
												}
												tempBuffer = new StringBuffer();
												if (delPeripheralsFunction != null && tempArray != null) {
													for (String deleInfo : delPeripheralsFunction) {
														for (String old : tempArray) {
															if (deleInfo.equals(old)) {
																break;
															}
															tempBuffer.append(old).append(IAtomsConstants.MARK_SEPARATOR);
														}
													}
												}
											}
											if (tempBuffer.length() == 0) {
												newCaseHandleInfoDTO.setPeripheralsFunction2(null);
												newCaseHandleInfoDTO.setPeripheralsFunction2Name(null);
											} else {
												newCaseHandleInfoDTO.setPeripheralsFunction2(tempBuffer.substring(0, tempBuffer.length()-1));
												newCaseHandleInfoDTO.setPeripheralsFunction2Name(peripheralsFunction2Name);
											}
										}
									} else {
										if (StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals2())) {
											newCaseHandleInfoDTO.setPeripheralsFunction2(caseHandleInfoDTO.getPeripheralsFunction2());
											newCaseHandleInfoDTO.setPeripheralsFunction2Name(caseHandleInfoDTO.getPeripheralsFunction2Name());
										} else {
											newCaseHandleInfoDTO.setPeripheralsFunction2(null);
											newCaseHandleInfoDTO.setPeripheralsFunction2Name(null);
										}
										
									}
									//核檢連接方式
									connectionTypeName = this.getCellFormatValue(row.getCell(30), null, true);
									if (StringUtils.hasText(connectionTypeName)) {
										parameters = this.assetTypeDAO.listConnectionTypeByAssetTypeId(caseHandleInfoDTO.getEdcType());
										tempArray = connectionTypeName.split(IAtomsConstants.MARK_SEPARATOR);
										tempBuffer = new StringBuffer();
										isError = Boolean.FALSE;
										for (String name : tempArray) {
											temp = this.getValueByName(parameters, name);
											if (StringUtils.hasText(temp)) {
												tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
											} else {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONNECTION_TYPE)}, null));
												isFileError = Boolean.TRUE;
												isError  = Boolean.TRUE;
												break;
											}
										}
										if (!isError) {
											newCaseHandleInfoDTO.setConnectionType(tempBuffer.substring(0, tempBuffer.length()-1));
											newCaseHandleInfoDTO.setConnectionTypeName(connectionTypeName);
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getConnectionType())) {
											newCaseHandleInfoDTO.setConnectionType(caseHandleInfoDTO.getConnectionType());
											newCaseHandleInfoDTO.setConnectionTypeName(caseHandleInfoDTO.getConnectionTypeName());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONNECTION_TYPE)}, null));
											isFileError = Boolean.TRUE;
										}
									}
									//核檢週邊設備3
									peripherals3Name = this.getCellFormatValue(row.getCell(31), null, true);
									if (StringUtils.hasText(peripherals3Name)) {
										/*temp = this.getValueByName(peripheralsList, peripherals3Name);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS3)}, null));
											//isError = Boolean.TRUE;
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setPeripherals3(temp);
											newCaseHandleInfoDTO.setPeripherals3Name(peripherals3Name);
										}*/
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(31).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(31).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										temp = this.getValueByName(peripheralsList, peripherals3Name);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS3)}, null));
											//isError = Boolean.TRUE;
											isFileError = Boolean.TRUE;
										} else {
											if (isDeleted) {
												String eripherals3 = caseHandleInfoDTO.getPeripherals3();
												if (temp.equals(eripherals3) || !StringUtils.hasText(eripherals3)) {
													temp = null;
													peripherals3Name = null;
												}
											}
											newCaseHandleInfoDTO.setPeripherals3(temp);
											newCaseHandleInfoDTO.setPeripherals3Name(peripherals3Name);
										}
										temp = null;
									} else {
										newCaseHandleInfoDTO.setPeripherals3(caseHandleInfoDTO.getPeripherals3());
										newCaseHandleInfoDTO.setPeripherals3Name(caseHandleInfoDTO.getPeripherals3Name());
									}
									//核檢週邊設備功能3
									isError = Boolean.FALSE;
									peripheralsFunction3Name = this.getCellFormatValue(row.getCell(32), null, true);
									if (StringUtils.hasText(peripheralsFunction3Name) && StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals3())) {
										/*if (!StringUtils.hasText(peripheralsFunction3Name)) {
											peripheralsFunction3Name = caseHandleInfoDTO.getPeripheralsFunction3Name();
										}
										if (!StringUtils.hasText(peripheralsFunction3Name)) {
											newCaseHandleInfoDTO.setPeripheralsFunction3(null);
											newCaseHandleInfoDTO.setPeripheralsFunction3Name(null);
										} else {
											tempArray = peripheralsFunction3Name.split(IAtomsConstants.MARK_SEPARATOR);
											tempBuffer = new StringBuffer();
											//獲取對應的周邊設備功能列表
											parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(newCaseHandleInfoDTO.getPeripherals3());
											if(CollectionUtils.isEmpty(parameters)) {
												isError = Boolean.TRUE;
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												        + i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION3), peripheralsFunction3Name, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS3), newCaseHandleInfoDTO.getPeripherals3Name()}, null));
												isFileError = Boolean.TRUE;
											} else {
												for (int j = 0; j< tempArray.length; j++) {
													temp = this.getValueByName(parameters, tempArray[j]);
													if (StringUtils.hasText(temp)) {
														tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
													} else {
														isError = Boolean.TRUE;
														isFileError = Boolean.TRUE;
														errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														        + i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION3), tempArray[j], i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS3), newCaseHandleInfoDTO.getPeripherals3Name()}, null));
													}
												}
											}
											if (!isError) {
												newCaseHandleInfoDTO.setPeripheralsFunction3(tempBuffer.substring(0, tempBuffer.length()-1));
												newCaseHandleInfoDTO.setPeripheralsFunction3Name(peripheralsFunction3Name);
											}
										}*/
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(32).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(32).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										tempArray = peripheralsFunction3Name.split(IAtomsConstants.MARK_SEPARATOR);
										tempBuffer = new StringBuffer();
										//獲取對應的周邊設備功能列表
										parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(newCaseHandleInfoDTO.getPeripherals3());
										if(CollectionUtils.isEmpty(parameters)) {
											isError = Boolean.TRUE;
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION3)}, null));
											isFileError = Boolean.TRUE;
										} else {
											for (int j = 0; j< tempArray.length; j++) {
												temp = this.getValueByName(parameters, tempArray[j]);
												if (StringUtils.hasText(temp)) {
													tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
												} else {
													isError = Boolean.TRUE;
													isFileError = Boolean.TRUE;
													errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
															+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION3)}, null));
												}
											}
										}
										if (!isError) {
											if (isDeleted) {
												String eripheralsFunction = caseHandleInfoDTO.getPeripheralsFunction3();
												String[] delPeripheralsFunction = tempBuffer.substring(0, tempBuffer.length()-1).split(IAtomsConstants.MARK_SEPARATOR);
												tempArray = null;
												if (StringUtils.hasText(eripheralsFunction)) {
													tempArray = eripheralsFunction.split(IAtomsConstants.MARK_SEPARATOR);
												}
												tempBuffer = new StringBuffer();
												if (delPeripheralsFunction != null && tempArray != null) {
													for (String deleInfo : delPeripheralsFunction) {
														for (String old : tempArray) {
															if (deleInfo.equals(old)) {
																break;
															}
															tempBuffer.append(old).append(IAtomsConstants.MARK_SEPARATOR);
														}
													}
												}
											}
											if (tempBuffer.length() == 0) {
												newCaseHandleInfoDTO.setPeripheralsFunction3(null);
												newCaseHandleInfoDTO.setPeripheralsFunction3Name(null);
											} else {
												newCaseHandleInfoDTO.setPeripheralsFunction3(tempBuffer.substring(0, tempBuffer.length()-1));
												newCaseHandleInfoDTO.setPeripheralsFunction3Name(peripheralsFunction3Name);
											}
										}
									} else {
										if (StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals3())) {
											newCaseHandleInfoDTO.setPeripheralsFunction3(caseHandleInfoDTO.getPeripheralsFunction3());
											newCaseHandleInfoDTO.setPeripheralsFunction3Name(caseHandleInfoDTO.getPeripheralsFunction3Name());
										} else {
											newCaseHandleInfoDTO.setPeripheralsFunction3(null);
											newCaseHandleInfoDTO.setPeripheralsFunction3Name(null);
										}
									}
									String tempPeripheralsName = null;
									/*
									 * 若週邊設備(1~3)選項重覆，錯誤訊息「週邊設備選項XXX已重覆」
									 */
									// 如果周邊設備1存在 且與周邊設備2或者周邊設備3相同
									if(StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals()) && (newCaseHandleInfoDTO.getPeripherals().equals(newCaseHandleInfoDTO.getPeripherals2()) || newCaseHandleInfoDTO.getPeripherals().equals(newCaseHandleInfoDTO.getPeripherals3()))){
										tempPeripheralsName = newCaseHandleInfoDTO.getPeripheralsName();
										// 如果周邊設備2存在 且與周邊設備1或者周邊設備3相同
									} else if(StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals2()) && (newCaseHandleInfoDTO.getPeripherals2().equals(newCaseHandleInfoDTO.getPeripherals()) || newCaseHandleInfoDTO.getPeripherals2().equals(newCaseHandleInfoDTO.getPeripherals3()))){
										tempPeripheralsName = newCaseHandleInfoDTO.getPeripherals2Name();
										// 如果周邊設備3存在 且與周邊設備1或者周邊設備2相同
									} else if(StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals3()) && (newCaseHandleInfoDTO.getPeripherals3().equals(newCaseHandleInfoDTO.getPeripherals()) || newCaseHandleInfoDTO.getPeripherals3().equals(newCaseHandleInfoDTO.getPeripherals2()))){
										tempPeripheralsName = newCaseHandleInfoDTO.getPeripherals3Name();
									}
									// 符合上面三種情況的任意一種
									if(StringUtils.hasText(tempPeripheralsName)){
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												.concat(i18NUtil.getName(IAtomsMessageCode.PERIPHERALS_IS_REPEAT, new String[]{tempPeripheralsName}, null)));
										isFileError = Boolean.TRUE;
									}
									/*
									 * 若設備內建功能與週邊設備功能重覆，錯誤訊息「設備功能XXX已重覆」
									 */
									if(StringUtils.hasText(newCaseHandleInfoDTO.getBuiltInFeature()) || StringUtils.hasText(newCaseHandleInfoDTO.getPeripheralsFunction()) || StringUtils.hasText(newCaseHandleInfoDTO.getPeripheralsFunction2()) || StringUtils.hasText(newCaseHandleInfoDTO.getPeripheralsFunction3())){
										MultiParameterInquiryContext param = new MultiParameterInquiryContext();
										param.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION.getValue(), newCaseHandleInfoDTO.getPeripheralsFunction());
										param.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION2.getValue(), newCaseHandleInfoDTO.getPeripheralsFunction2());
										param.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION3.getValue(), newCaseHandleInfoDTO.getPeripheralsFunction3());
										param.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.BUILT_IN_FEATURE.getValue(), newCaseHandleInfoDTO.getBuiltInFeature());
										String repeatSupportFun = getRepeatSupportFun(param);
										if(StringUtils.hasText(repeatSupportFun)){
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PERIPHERALS_IS_REPEAT, new String[]{repeatSupportFun}, null));
											isFileError = Boolean.TRUE;
										}
									}
									//核檢LOGO
									String logoStyle = this.getCellFormatValue(row.getCell(33), null, true);
									if (StringUtils.hasText(logoStyle)) {
										if (i18NUtil.getName(IAtomsConstants.PARAMTER_CASE_LOGO_ONLY_LOGO).equals(logoStyle)) {
											newCaseHandleInfoDTO.setLogoStyle(IAtomsConstants.PARAMTER_CASE_LOGO_ONLY_LOGO);
										} else if (i18NUtil.getName(IAtomsConstants.PARAMTER_CASE_LOGO_LOGO_AND_MERCHANT_HEADER).equals(logoStyle)) {
											newCaseHandleInfoDTO.setLogoStyle(IAtomsConstants.PARAMTER_CASE_LOGO_LOGO_AND_MERCHANT_HEADER);
										} else if (i18NUtil.getName(IAtomsConstants.PARAMTER_CASE_LOGO_ONLY_MERCHANT_HEADER).equals(logoStyle)){
											newCaseHandleInfoDTO.setLogoStyle(IAtomsConstants.PARAMTER_CASE_LOGO_ONLY_MERCHANT_HEADER);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_LOGO)}, null));
										}
									} else {
										newCaseHandleInfoDTO.setLogoStyle(caseHandleInfoDTO.getLogoStyle());
									}
									//核檢是否開啟加密
									String isOpenEncrypt = this.getCellFormatValue(row.getCell(34), null, true);
									if (StringUtils.hasText(isOpenEncrypt)) {
										if (i18NUtil.getName(IAtomsConstants.YES).equals(isOpenEncrypt)) {
											newCaseHandleInfoDTO.setIsOpenEncrypt(IAtomsConstants.YES);
										} else if (i18NUtil.getName(IAtomsConstants.NO).equals(isOpenEncrypt)) {
											newCaseHandleInfoDTO.setIsOpenEncrypt(IAtomsConstants.NO);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_OPEN_ENCRYPT)}, null));
										}
									} else {
										newCaseHandleInfoDTO.setIsOpenEncrypt(caseHandleInfoDTO.getIsOpenEncrypt());
									}
									//核檢電子化繳費平台
									String electronicPayPlatform = this.getCellFormatValue(row.getCell(35), null, true);
									if (StringUtils.hasText(isOpenEncrypt)) {
										if (i18NUtil.getName(IAtomsConstants.YES).equals(electronicPayPlatform)) {
											newCaseHandleInfoDTO.setElectronicPayPlatform(IAtomsConstants.YES);
										} else if (i18NUtil.getName(IAtomsConstants.NO).equals(electronicPayPlatform)) {
											newCaseHandleInfoDTO.setElectronicPayPlatform(IAtomsConstants.NO);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ELECTRONIC_PAY_PLATFORM)}, null));
										}
									} else {
										newCaseHandleInfoDTO.setElectronicPayPlatform(caseHandleInfoDTO.getElectronicPayPlatform());
									}
									//核檢電子發票載具
									String electronicInvoice = this.getCellFormatValue(row.getCell(36), null, true);
									if (StringUtils.hasText(electronicInvoice)) {
										if (i18NUtil.getName(IAtomsConstants.YES).equals(electronicInvoice)){
											newCaseHandleInfoDTO.setElectronicInvoice(IAtomsConstants.YES);
										} else if (i18NUtil.getName(IAtomsConstants.NO).equals(electronicInvoice)) {
											newCaseHandleInfoDTO.setElectronicInvoice(IAtomsConstants.NO);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ELECTRONIC_INVOICE)}, null));
										}
									} else {
										newCaseHandleInfoDTO.setElectronicInvoice(caseHandleInfoDTO.getElectronicInvoice());
									}
									//核檢銀聯閃付
									String cupQuickPass = this.getCellFormatValue(row.getCell(37), null, true);
									if (StringUtils.hasText(cupQuickPass)) {
										if (i18NUtil.getName(IAtomsConstants.YES).equals(cupQuickPass)){
											newCaseHandleInfoDTO.setCupQuickPass(IAtomsConstants.YES);
										} else if (i18NUtil.getName(IAtomsConstants.NO).equals(cupQuickPass)) {
											newCaseHandleInfoDTO.setCupQuickPass(IAtomsConstants.NO);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_CUP_QUICK_PASS)}, null));
										}
									} else {
										newCaseHandleInfoDTO.setCupQuickPass(caseHandleInfoDTO.getCupQuickPass());
									}
									//Receipt_type
									receiptTypeName = this.getCellFormatValue(row.getCell(38), null, true);
									if (StringUtils.hasText(receiptTypeName)) {
										temp = this.getValueByName(receiptTypes, receiptTypeName);
										if (StringUtils.hasText(temp)) {
											newCaseHandleInfoDTO.setReceiptType(temp);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_RECEIPT_TYPE)}, null));
											isFileError = Boolean.TRUE;
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getReceiptType())) {
											newCaseHandleInfoDTO.setReceiptType(caseHandleInfoDTO.getReceiptType());
										} else {
											if (isGp) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_RECEIPT_TYPE)}, null));
												isFileError = Boolean.TRUE;
											}
										}
									}
									//核檢本機ip
									localhostIp = this.getCellFormatValue(row.getCell(39), null, true);
									if (StringUtils.hasText(localhostIp)) {
										//核檢ip長度
										if (localhostIp.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_USER_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_LOCALHOST_IP), IAtomsConstants.CONTACT_USER_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setLocalhostIp(localhostIp);
										}
									} else {
										newCaseHandleInfoDTO.setLocalhostIp(caseHandleInfoDTO.getLocalhostIp());
									}
									//核檢寬頻連線
									netVendorName = this.getCellFormatValue(row.getCell(40), null, true);
									if (StringUtils.hasText(netVendorName)) {
										temp = this.getValueByName(netVendorList, netVendorName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_NET_VENDOR_ID)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setNetVendorId(temp);
											newCaseHandleInfoDTO.setNetVendorName(netVendorName);
										}
									} else {
										newCaseHandleInfoDTO.setNetVendorId(caseHandleInfoDTO.getNetVendorId());
										newCaseHandleInfoDTO.setNetVendorName(caseHandleInfoDTO.getNetVendorName());
									}
									//核檢Gateway
									gateway = this.getCellFormatValue(row.getCell(41), null, true);
									if (StringUtils.hasText(gateway)) {
										//核檢gateway長度
										if (gateway.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_USER_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_GATEWAY), IAtomsConstants.CONTACT_USER_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setGateway(gateway);
										}
									} else {
										newCaseHandleInfoDTO.setGateway(caseHandleInfoDTO.getGateway());
									}
									//核檢Netmask
									netmask = this.getCellFormatValue(row.getCell(42), null, true);
									if (StringUtils.hasText(netmask)) {
										//核檢gateway長度
										if (netmask.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_USER_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_NETMASK), IAtomsConstants.CONTACT_USER_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setNetmask(netmask);
										}
									} else {
										newCaseHandleInfoDTO.setNetmask(caseHandleInfoDTO.getNetmask());
									}
									//客戶爲環匯時，驗證aoeMAIL是否輸入
									if (isGp && !StringUtils.hasText(caseHandleInfoDTO.getAoName())) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_AO_NAME)}, null));
										isFileError = Boolean.TRUE;
									}
									//CR #3237  要有 派工TMS選項 核檢TMS
									isTms = this.getCellFormatValue(row.getCell(43), null, true);
									if (StringUtils.hasText(isTms)) {
										if (i18NUtil.getName(IAtomsConstants.NO).equals(isTms)) {
											newCaseHandleInfoDTO.setIsTms(IAtomsConstants.NO);
										} else if (i18NUtil.getName(IAtomsConstants.YES).equals(isTms)) {
											newCaseHandleInfoDTO.setIsTms(IAtomsConstants.YES);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_TMS)}, null));
											isFileError = Boolean.TRUE;
										}
									} else {
										newCaseHandleInfoDTO.setIsTms(caseHandleInfoDTO.getIsTms());
									}
									//核檢其他說明
									description = this.getCellFormatValue(row.getCell(44), null, true);
									if (StringUtils.hasText(description)) {
										if (description.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DESCRIPTION), IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setDescription(description.replace("\n", "\r\n"));
										}
									} else {
										newCaseHandleInfoDTO.setDescription(null);
									}
									//核檢TMS參數說明
									tmsParamDesc = this.getCellFormatValue(row.getCell(45), null, true);
									if (StringUtils.hasText(tmsParamDesc)) {
										if (tmsParamDesc.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_TMS_PARAM_DESC)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_TMS_PARAM_DESC), IAtomsConstants.MAXLENGTH_TMS_PARAM_DESC}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setTmsParamDesc(tmsParamDesc.replace("\n", "\r\n"));
										}
									} else {
										newCaseHandleInfoDTO.setTmsParamDesc(caseHandleInfoDTO.getTmsParamDesc());
									}
									isError = this.checkUploadTrans(srmCaseTransactionParameterDTOs, caseHandleInfoDTO, transErrors, caseTransactionParameterDTOs, i + 1, caseCategory, transactionParameterItemList);
									if (!isError && !CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)) {
										newCaseHandleInfoDTO.setCaseTransactionParameterDTOs(srmCaseTransactionParameterDTOs);
										//核檢交易參數是否選取了未選取CUP或Smartpay交易類別
										Boolean isCupAndSmartpayFlag = Boolean.FALSE;
										//核檢交易參數是是否選取一般交易交易類別
										Boolean isCommonFlag = Boolean.FALSE;
										for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
											if(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VM.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
											|| IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJ.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
											|| IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJU.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
											|| IAtomsConstants.TRANSACTION_CATEGORY.CONSTRUCTION_COMPANY.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
												isCommonFlag = Boolean.TRUE;
											}
											if (IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
													|| IAtomsConstants.TRANSACTION_CATEGORY.SMART_PAY.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())) {
												isCupAndSmartpayFlag = Boolean.TRUE;
											}
										}
										if(!isCommonFlag){
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_COMMON_TRANS_ERROR));
											//isError = Boolean.TRUE;
											isFileError = Boolean.TRUE;
										}
										/*
										 * 未選取CUP或Smartpay交易類別，不可選取Pinpad設備及功能
										 */
										if((StringUtils.hasText(newCaseHandleInfoDTO.getBuiltInFeature()) && newCaseHandleInfoDTO.getBuiltInFeature().contains(IAtomsConstants.SUPPORTED_FUNCTION_PINPAD)) 
												|| (StringUtils.hasText(newCaseHandleInfoDTO.getPeripheralsFunction()) && newCaseHandleInfoDTO.getPeripheralsFunction().contains(IAtomsConstants.SUPPORTED_FUNCTION_PINPAD))
												|| (StringUtils.hasText(newCaseHandleInfoDTO.getPeripheralsFunction2()) && newCaseHandleInfoDTO.getPeripheralsFunction2().contains(IAtomsConstants.SUPPORTED_FUNCTION_PINPAD))
												|| (StringUtils.hasText(newCaseHandleInfoDTO.getPeripheralsFunction3()) && newCaseHandleInfoDTO.getPeripheralsFunction3().contains(IAtomsConstants.SUPPORTED_FUNCTION_PINPAD)) ){
											if(!isCupAndSmartpayFlag){
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.NO_CUP_OR_SMARTPAY_TRANS_TYPE));
												isFileError = Boolean.TRUE;
											}
										} else {
											/*
											 * 選取CUP或Smartpay交易類別，要選取Pinpad設備及功能
											 */
											if(isCupAndSmartpayFlag){
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.NEED_PINPAD_ASSET_FUNCTION));
												isFileError = Boolean.TRUE;
											}
										}
									}
									if (isFileError || isError) {
										if (isFileError) {
											errorMsgs.add(errorRow, i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
											isFileError = Boolean.FALSE;
											errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
										}
										if (isError) {
											for (String string : transErrors) {
												errorMsgs.add(string);
											}
											errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
										}
									} else {
									//	List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.listTransactionParameterDTOsByDtid(dtid);
										// CR #2551  查詢交易參數 Bug #3055
										/*List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.getTransactionParameterDTOsByDtid(dtid, isNewHave);
										
										srmCaseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
										for (SrmCaseNewTransactionParameterDTO srmCaseNewTransactionParameterDTO : caseNewTransactionParameterDTOs) {
											caseTransactionParameterDTO = (SrmCaseTransactionParameterDTO) transformer .transform(srmCaseNewTransactionParameterDTO, new SrmCaseTransactionParameterDTO());
											srmCaseTransactionParameterDTOs.add(caseTransactionParameterDTO);
										}*/
										newCaseHandleInfoDTO.setCaseTransactionParameterDTOs(srmCaseTransactionParameterDTOs);
										newCaseHandleInfoDTO.setAttendanceTimes(Integer.valueOf(0));
										newCaseHandleInfoDTO.setCaseCategory(IAtomsConstants.CASE_CATEGORY.PROJECT.getCode());
										/*newCaseHandleInfoDTO.setMerchantCode(caseHandleInfoDTO.getMerchantId());*/
										uploadCaseInfoUpdate(newCaseHandleInfoDTO, caseHandleInfoDTO, caseCategory);
										srmCaseHandleInfoDTOs.add(newCaseHandleInfoDTO);
									}
									
								} else {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) + i18NUtil.getName(IAtomsMessageCode.DATA_NOT_FOUND));
									errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
								}
							} else {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{""}, null));
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
										.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DTID)}, null)) );
								errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
							}
						}
						errorRow = errorMsgs.size();
						for (int i = 0; i<caseTransactionParameterDTOs.size(); i++) {
							if (!repeatDtid.containsKey(caseTransactionParameterDTOs.get(i).getDTID())) {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_PARAMETER_UPLOAD_NO_CASE_INFO, new String[]{String.valueOf(i + 2)}, null));
								isFileError = Boolean.TRUE;
							}
						}
						//報修
					} else if (IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(caseCategory)) {
						//報修原因列表
						List<Parameter> repairReasonList = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.REPAIR_REASON.getCode(), null);
						//報修原因
						String repairReason = null;
						//核檢案件資料sheet
						for (int i = 1; i < rowCount; i++) {
							newCaseHandleInfoDTO = new SrmCaseHandleInfoDTO();
							errorRow = errorMsgs.size();
							row = sheet.getRow(i);
							if (isRowEmpty(row)) {
								continue;
							}
							dtid = this.getCellFormatValue(row.getCell(2), null, true);
							//驗證dtid是否輸入
							if (StringUtils.hasText(dtid)) {
								//依據dtid獲取對應的案件信息
							//	caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTOById(dtid);
								// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
								boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(dtid, null);
								// 查詢案件資料
								caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(dtid, isNewHave, queryCustomerId);
								
								//如果查詢結果為空，則代表該筆dtid無法進行異動。
								if (caseHandleInfoDTO != null) {
									//判斷客戶是否爲環慧
									if (IAtomsConstants.PARAM_GP.equals(caseHandleInfoDTO.getCompanyCode())) {
										isGp = Boolean.TRUE;
									} else {
										isGp = Boolean.FALSE;
									}
									//驗證需求單號長度是否正確
									requirementNo = this.getCellFormatValue(row.getCell(1), null, true);
									if (StringUtils.hasText(requirementNo)) {
										if (requirementNo.trim().length() > Integer.valueOf(IAtomsConstants.REQUIREMENT_NO_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO), IAtomsConstants.REQUIREMENT_NO_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											// Task #3584 匯入檢核
											String resault = this.checkRequirementNo(requirementNo, dtid, caseHandleInfoDTO, caseCategory);
											if (StringUtils.hasText(resault)) {
												// 此DTID台新裝機件已存在 || 此DTID台新裝機件尚未建案
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ resault);
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setRequirementNo(requirementNo);
											}
											//newCaseHandleInfoDTO.setRequirementNo(requirementNo);
										}
									} else {
										/*if (isGp) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setRequirementNo(null);
										}*/
										newCaseHandleInfoDTO.setRequirementNo(null);
									}
									temp = null;
									//核檢報修原因
									repairReason = this.getCellFormatValue(row.getCell(3), null, true);
									if (StringUtils.hasText(repairReason)) {
										temp = this.getValueByName(repairReasonList, repairReason);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REPAIR_REASON)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setRepairReason(temp);
											newCaseHandleInfoDTO.setRepairReasonName(repairReason);
										}
										temp = null;
									} else {
										//Task #3044 報修原因改爲非必填
										newCaseHandleInfoDTO.setRepairReason(caseHandleInfoDTO.getRepairReason());
										newCaseHandleInfoDTO.setRepairReasonName(caseHandleInfoDTO.getRepairReasonName());
										/*if (StringUtils.hasText(caseHandleInfoDTO.getRepairReason())) {
											newCaseHandleInfoDTO.setRepairReason(caseHandleInfoDTO.getRepairReason());
											newCaseHandleInfoDTO.setRepairReasonName(caseHandleInfoDTO.getRepairReasonName());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REPAIR_REASON)}, null)) );
											isFileError = Boolean.TRUE;
										}*/
									}
									//如若維護部門輸入，維護部門是否屬於當前維護廠商
									departmentName = this.getCellFormatValue(row.getCell(4), null, true);
									if (StringUtils.hasText(departmentName)) {
										if (i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE).equals(departmentName)) {
											newCaseHandleInfoDTO.setDepartmentId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
											newCaseHandleInfoDTO.setDepartmentName(departmentName);
											CompanyDTO companyDTO= this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_CYB);
											if (companyDTO != null) {
												newCaseHandleInfoDTO.setCompanyId(companyDTO.getCompanyId());
												newCaseHandleInfoDTO.setCompanyName(companyDTO.getShortName());
											}
										} else {
											/*temp = this.departmentDAO.getDepartmentIdByName(departmentName, caseHandleInfoDTO.getCompanyId());
											if (!StringUtils.hasText(temp)) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, 
																new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID), departmentName, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPANY_ID), caseHandleInfoDTO.getCompanyName()}, null));
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setDepartmentId(temp);
												newCaseHandleInfoDTO.setDepartmentName(departmentName);
											}*/
											List<BimDepartmentDTO> dtos = this.departmentDAO.listBy(null, null, departmentName, -1, -1, null, null);
											if (!CollectionUtils.isEmpty(dtos)) {
												newCaseHandleInfoDTO.setDepartmentId(dtos.get(0).getDeptCode());
												newCaseHandleInfoDTO.setDepartmentName(departmentName);
												newCaseHandleInfoDTO.setCompanyId(dtos.get(0).getCompanyId());
												newCaseHandleInfoDTO.setCompanyName(dtos.get(0).getCompanyName());
											} else {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null));
												isFileError = Boolean.TRUE;
											}
											temp = null;
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getDepartmentId())) {
											newCaseHandleInfoDTO.setDepartmentId(caseHandleInfoDTO.getDepartmentId());
											newCaseHandleInfoDTO.setDepartmentName(caseHandleInfoDTO.getDepartmentName());
											newCaseHandleInfoDTO.setCompanyId(caseHandleInfoDTO.getCompanyId());
											newCaseHandleInfoDTO.setCompanyName(caseHandleInfoDTO.getCompanyName());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null));
											isFileError = Boolean.TRUE;
										}
									}
									//Task #3460若裝機類型為微型商戶，則維護廠商只能是經茂聯網
									if(IAtomsConstants.PARAM_YES.equals(caseHandleInfoDTO.getCmsCase()) &&
											!(StringUtils.hasText(newCaseHandleInfoDTO.getCompanyId()) && newCaseHandleInfoDTO.getCompanyId().equals(IAtomsConstants.CYBERSOFT_CODE))){
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_DEPARTMENT_ERROR));
										isFileError = Boolean.TRUE;
									}
									//核檢案件類型是否輸入正確
									caseTypeName = this.getCellFormatValue(row.getCell(5), null, true);
									if (StringUtils.hasText(caseTypeName)) {
										temp = this.getValueByName(caseTypes, caseTypeName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setCaseType(temp);
											newCaseHandleInfoDTO.setCaseTypeName(caseTypeName);
											if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
												caseType = IAtomsConstants.TICKET_MODE_COMMON;
											} else {
												caseType = temp;
											}
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getCaseType())) {
											newCaseHandleInfoDTO.setCaseType(caseHandleInfoDTO.getCaseType());
											newCaseHandleInfoDTO.setCaseTypeName(caseHandleInfoDTO.getCaseTypeName());
											newCaseHandleInfoDTO.setExpectedCompletionDate(caseHandleInfoDTO.getExpectedCompletionDate());
											if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(caseHandleInfoDTO.getCaseType())) {
												caseType = IAtomsConstants.TICKET_MODE_COMMON;
											} else {
												caseType = caseHandleInfoDTO.getCaseType();
											}
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null)) );
											isFileError = Boolean.TRUE;
										}
									}
									//驗證預計完成日期是否輸入正確
									expectedCompletionDate = this.getCellFormatValue(row.getCell(6), "yyyy/MM/dd", false);
									//判斷案件類型是否為預約
									if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
										//如果案件類型是為預約，則預計完成日必填
										if (!StringUtils.hasText(expectedCompletionDate)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null)) );
											isFileError = Boolean.TRUE;
										} else {
											//核檢日期格式是否正確
											if (!ValidateUtils.checkDate(expectedCompletionDate)) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_DATE_FORMAT_YYYY_MM_DD, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null));
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setExpectedCompletionDate(DateTimeUtils.toTimestamp(expectedCompletionDate));
											}
										}
									}
									if (this.checkContactOrInstalled(row, 7, i + 1, caseHandleInfoDTO,newCaseHandleInfoDTO, errorMsgs, locations, caseCategory, null)) {
										isFileError = Boolean.TRUE;
									};
									//客戶爲環匯時，驗證aoeMAIL是否輸入
									if (isGp && !StringUtils.hasText(caseHandleInfoDTO.getAoName())) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_AO_NAME)}, null));
										isFileError = Boolean.TRUE;
									}
									//核檢其他說明
									description = this.getCellFormatValue(row.getCell(19), null, true);
									if (StringUtils.hasText(description)) {
										if (description.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DESCRIPTION), IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setDescription(description.replace("\n", "\r\n"));
										}
									} else {
										newCaseHandleInfoDTO.setDescription(null);
									}
									//核檢案件有無對應之SLA資料
									if (StringUtils.hasText(caseType)
											&& !IAtomsConstants.PARAM_YES.equals(caseHandleInfoDTO.getCmsCase())) {
										contractSlaDTOList = this.contractSlaDAO.listBy(caseHandleInfoDTO.getCustomerId(), caseHandleInfoDTO.getContractId(), caseHandleInfoDTO.getArea(),
												caseCategory, caseType, null, null, null, null, false);
										if(CollectionUtils.isEmpty(contractSlaDTOList)){
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.NO_SLA_FOR_CASE)));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setContractSlaDTO(contractSlaDTOList.get(0));
										}
									}
									if (isFileError) {
										errorMsgs.add(errorRow, i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
										isFileError = Boolean.FALSE;
										errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
									} else {
									//	List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.listTransactionParameterDTOsByDtid(dtid);
										// CR #2551  查詢交易參數 Bug #3055
										List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.getTransactionParameterDTOsByDtid(dtid, isNewHave);
										
										srmCaseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
										for (SrmCaseNewTransactionParameterDTO srmCaseNewTransactionParameterDTO : caseNewTransactionParameterDTOs) {
											caseTransactionParameterDTO = (SrmCaseTransactionParameterDTO) transformer .transform(srmCaseNewTransactionParameterDTO, new SrmCaseTransactionParameterDTO());
											srmCaseTransactionParameterDTOs.add(caseTransactionParameterDTO);
										}
										newCaseHandleInfoDTO.setCaseTransactionParameterDTOs(srmCaseTransactionParameterDTOs);
										newCaseHandleInfoDTO.setAttendanceTimes(Integer.valueOf(0));
										newCaseHandleInfoDTO.setCaseCategory(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode());
										newCaseHandleInfoDTO.setMerchantCode(caseHandleInfoDTO.getMerchantId());
										uploadCaseInfoUpdate(newCaseHandleInfoDTO, caseHandleInfoDTO, caseCategory);
										srmCaseHandleInfoDTOs.add(newCaseHandleInfoDTO);
									}
								} else {
									errorMsgs.add(errorRow, i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) + i18NUtil.getName(IAtomsMessageCode.DATA_NOT_FOUND));
									errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
								}
							} else {
								errorMsgs.add(errorRow, i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
										.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DTID)}, null)) );
								errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
							}
						}
						//異動狀態
					} else if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						String sameInstalled = null;
						//是否開啟加密
						String isOpenEncrypt = null;
						//電子化繳費平台
						String electronicPayPlatform = null;
						//LOGO
						String logoStyle = null;
						//記錄是否有錯誤
						Boolean isError = Boolean.FALSE;
						//舊特店代號
						String merchantOldCode = null;
						//臨時數組
						String[] tempArray = null;
						//
						StringBuffer tempBuffer = null;
						//內建功能、周邊設備功能是否刪除
						Boolean isDeleted = Boolean.FALSE;
						//循環交易參數sheet，取出數據
						sheet = workbook.getSheetAt(0);
						// 獲取行數
						rowCount = this.getExcelRealRowCount(sheet);
						//獲取Receipt_type
						List<Parameter> receiptTypes = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.RECEIPT_TYPE.getCode(), null);
						//
						String receiptTypeName = null;
						//核檢案件資料sheet
						for (int i = 1; i < rowCount; i++) {
							isGp = Boolean.FALSE;
							isTsb = Boolean.FALSE;
							caseType = null;
							//記錄需要保存的案件信息
							newCaseHandleInfoDTO = new SrmCaseHandleInfoDTO();
							//記錄交易參數的錯誤信息
							transErrors = new ArrayList<String>();
							//記錄案件錯誤信息
							errorRow = errorMsgs.size();
							srmCaseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
							row = sheet.getRow(i);
							if (isRowEmpty(row)) {
								continue;
							}
							dtid = this.getCellFormatValue(row.getCell(2), null, true);
							transErrors.add(i18NUtil.getName(IAtomsMessageCode.CASE_PARAMETER_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
							//驗證dtid是否輸入
							if (StringUtils.hasText(dtid)) {
								repeatDtid.put(dtid, i+1);
								//依據dtid獲取對應的案件信息
							//	caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTOById(dtid);
								// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
								boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(dtid, null);
								// 查詢案件資料
								caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(dtid, isNewHave, queryCustomerId);
								
								//如果查詢結果為空，則代表該筆dtid無法進行異動。
								if (caseHandleInfoDTO != null) {
									//判斷客戶是否爲環慧
									if (IAtomsConstants.PARAM_GP.equals(caseHandleInfoDTO.getCompanyCode())) {
										isGp = Boolean.TRUE;
									} else if (IAtomsConstants.PARAM_TSB_EDC.equals(caseHandleInfoDTO.getCompanyCode())){
										isTsb = Boolean.TRUE;
									}
									//驗證需求單號長度是否正確
									requirementNo = this.getCellFormatValue(row.getCell(1), null, true);
									if (StringUtils.hasText(requirementNo)) {
										if (requirementNo.trim().length() > Integer.valueOf(IAtomsConstants.REQUIREMENT_NO_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO), IAtomsConstants.REQUIREMENT_NO_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											// Task #3584 匯入檢核
											String resault = this.checkRequirementNo(requirementNo, dtid, caseHandleInfoDTO, caseCategory);
											if (StringUtils.hasText(resault)) {
												// 此DTID台新裝機件已存在 || 此DTID台新裝機件尚未建案
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ resault);
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setRequirementNo(requirementNo);
											}
											//newCaseHandleInfoDTO.setRequirementNo(requirementNo);
										}
									} else {
										if (isGp || isTsb) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setRequirementNo(null);
										}
									}
									peripheralsList = this.assetTypeDAO.listAssetByCustomerId(caseHandleInfoDTO.getCustomerId(), IAtomsConstants.ASSET_CATEGORY_RODUND_ASSET, true);
									//核檢專案欄位
									isProject = this.getCellFormatValue(row.getCell(3), null, true);
									if (StringUtils.hasText(isProject)) {
										if (isProject.equals(i18NUtil.getName(IAtomsConstants.YES))){
											newCaseHandleInfoDTO.setIsProject(IAtomsConstants.YES);
										} else if (isProject.equals(i18NUtil.getName(IAtomsConstants.NO))){
											newCaseHandleInfoDTO.setIsProject(IAtomsConstants.NO);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_IS_PROJECT)}, null)) );
										}
									} else {
										/*errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_IS_PROJECT)}, null)) );
										isFileError = Boolean.TRUE;*/
										newCaseHandleInfoDTO.setIsProject(caseHandleInfoDTO.getIsProject());
									}
									
									//如若維護部門輸入，維護部門是否屬於當前維護廠商
									departmentName = this.getCellFormatValue(row.getCell(4), null, true);
									if (StringUtils.hasText(departmentName)) {
										if (i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE).equals(departmentName)) {
											newCaseHandleInfoDTO.setDepartmentId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
											newCaseHandleInfoDTO.setDepartmentName(departmentName);
											CompanyDTO companyDTO= this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_CYB);
											if (companyDTO != null) {
												newCaseHandleInfoDTO.setCompanyId(companyDTO.getCompanyId());
												newCaseHandleInfoDTO.setCompanyName(companyDTO.getShortName());
											}
										} else {
											/*temp = this.departmentDAO.getDepartmentIdByName(departmentName, caseHandleInfoDTO.getCompanyId());
											if (!StringUtils.hasText(temp)) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, 
																new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID), departmentName, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPANY_ID), caseHandleInfoDTO.getCompanyName()}, null));
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setDepartmentId(temp);
												newCaseHandleInfoDTO.setDepartmentName(departmentName);
											}*/
											List<BimDepartmentDTO> dtos = this.departmentDAO.listBy(null, null, departmentName, -1, -1, null, null);
											if (!CollectionUtils.isEmpty(dtos)) {
												newCaseHandleInfoDTO.setDepartmentId(dtos.get(0).getDeptCode());
												newCaseHandleInfoDTO.setDepartmentName(departmentName);
												newCaseHandleInfoDTO.setCompanyId(dtos.get(0).getCompanyId());
												newCaseHandleInfoDTO.setCompanyName(dtos.get(0).getCompanyName());
											} else {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null));
												isFileError = Boolean.TRUE;
											}
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getDepartmentId())) {
											newCaseHandleInfoDTO.setDepartmentId(caseHandleInfoDTO.getDepartmentId());
											newCaseHandleInfoDTO.setDepartmentName(caseHandleInfoDTO.getDepartmentName());
											newCaseHandleInfoDTO.setCompanyId(caseHandleInfoDTO.getCompanyId());
											newCaseHandleInfoDTO.setCompanyName(caseHandleInfoDTO.getCompanyName());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null));
											isFileError = Boolean.TRUE;
										}
									}
									//Task #3460若裝機類型為微型商戶，則維護廠商只能是經茂聯網
									if(IAtomsConstants.PARAM_YES.equals(caseHandleInfoDTO.getCmsCase()) &&
											!(StringUtils.hasText(newCaseHandleInfoDTO.getCompanyId()) && newCaseHandleInfoDTO.getCompanyId().equals(IAtomsConstants.CYBERSOFT_CODE))){
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_DEPARTMENT_ERROR));
										isFileError = Boolean.TRUE;
									}
									//核檢案件類型是否輸入正確
									caseTypeName = this.getCellFormatValue(row.getCell(5), null, true);
									if (StringUtils.hasText(caseTypeName)) {
										temp = this.getValueByName(caseTypes, caseTypeName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setCaseType(temp);
											newCaseHandleInfoDTO.setCaseTypeName(caseTypeName);
											if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
												caseType = IAtomsConstants.TICKET_MODE_COMMON;
											} else {
												caseType = temp;
											}
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getCaseType())) {
											newCaseHandleInfoDTO.setExpectedCompletionDate(caseHandleInfoDTO.getExpectedCompletionDate());
											newCaseHandleInfoDTO.setCaseType(caseHandleInfoDTO.getCaseType());
											newCaseHandleInfoDTO.setCaseTypeName(caseHandleInfoDTO.getCaseTypeName());
											if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(caseHandleInfoDTO.getCaseType())) {
												caseType = IAtomsConstants.TICKET_MODE_COMMON;
											} else {
												caseType = caseHandleInfoDTO.getCaseType();
											}
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null)) );
											isFileError = Boolean.TRUE;
										}
									}
									//驗證預計完成日期是否輸入正確
									expectedCompletionDate = this.getCellFormatValue(row.getCell(6), "yyyy/MM/dd", false);
									//判斷案件類型是否為預約
									if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
										//如果案件類型是為預約，則預計完成日必填
										if (!StringUtils.hasText(expectedCompletionDate)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null)) );
											isFileError = Boolean.TRUE;
										} else {
											//核檢日期格式是否正確
											if (!ValidateUtils.checkDate(expectedCompletionDate)) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_DATE_FORMAT_YYYY_MM_DD, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null));
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setExpectedCompletionDate(DateTimeUtils.toTimestamp(expectedCompletionDate));
											}
										}
									}
									//核檢是否同裝機作業
									sameInstalled = this.getCellFormatValue(row.getCell(7), null, true);
									if (StringUtils.hasText(sameInstalled)) {
										if (sameInstalled.equals(i18NUtil.getName(IAtomsConstants.YES))){
											newCaseHandleInfoDTO.setSameInstalled(IAtomsConstants.YES);
										} else if (sameInstalled.equals(i18NUtil.getName(IAtomsConstants.NO))){
											newCaseHandleInfoDTO.setSameInstalled(IAtomsConstants.NO);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_SAME_INSTALLED)}, null)) );
										}
									} else {
										newCaseHandleInfoDTO.setSameInstalled(caseHandleInfoDTO.getSameInstalled());
									}
									//核檢特點代號
									merchantCode = this.getCellFormatValue(row.getCell(8), null, true);
									if (StringUtils.hasText(merchantCode)) {
										//核檢特點代號是否為當前客戶下
										MerchantDTO merchantDTO = this.merchantDAO.getMerchantInfo(null, merchantCode, caseHandleInfoDTO.getCustomerId(), null);
										if (merchantDTO == null) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, 
															new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_CODE), merchantCode, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CUSTOMER_ID), caseHandleInfoDTO.getCustomerName()}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setMerchantCode(merchantDTO.getMerchantId());
											newCaseHandleInfoDTO.setMerMid(merchantCode);
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getMerchantCode())) {
											newCaseHandleInfoDTO.setMerchantCode(caseHandleInfoDTO.getMerchantId());
											newCaseHandleInfoDTO.setMerMid(caseHandleInfoDTO.getMerchantCode());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_CODE)}, null)) );
											isFileError = Boolean.TRUE;
										}
									}
									//核檢表頭信息
									merchantHeaderName = this.getCellFormatValue(row.getCell(9), null, true);
									if (!StringUtils.hasText(merchantHeaderName)) {
										merchantHeaderName = caseHandleInfoDTO.getHeaderName();
									}
									if (StringUtils.hasText(newCaseHandleInfoDTO.getMerchantCode()) && StringUtils.hasText(merchantHeaderName)) {
										//核檢特點表頭是否是該特點代號下
										BimMerchantHeaderDTO bimMerchantHeaderDTO = this.merchantHeaderDAO.getMerchantHeaderDTOBy(newCaseHandleInfoDTO.getMerchantCode(), merchantHeaderName, null);
										if (bimMerchantHeaderDTO == null) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, 
															new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_HEADER_ID), merchantHeaderName, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_CODE), merchantCode}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setMerchantHeaderId(bimMerchantHeaderDTO.getMerchantHeaderId());
											newCaseHandleInfoDTO.setHeaderName(merchantHeaderName);
											//客戶爲環匯時，驗證aoeMAIL是否輸入
											if (isGp && !StringUtils.hasText(bimMerchantHeaderDTO.getAoName())) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_AO_NAME)}, null));
												isFileError = Boolean.TRUE;
											}
										}
									} else {
										if (!StringUtils.hasText(merchantHeaderName)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_HEADER_ID)}, null)) );
											isFileError = Boolean.TRUE;
										}
										
									}
									//核檢舊特店代號
									merchantOldCode = this.getCellFormatValue(row.getCell(10), null, true);
									if (StringUtils.hasText(merchantOldCode)) {
										//核檢舊特店代號長度
										if (merchantOldCode.trim().length() > Integer.valueOf(IAtomsConstants.PROPERTY_ID_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_OLD_MERCHANT_CODE), IAtomsConstants.PROPERTY_ID_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setOldMerchantCode(merchantOldCode);
										}
									} else {
										newCaseHandleInfoDTO.setOldMerchantCode(caseHandleInfoDTO.getOldMerchantCode());
									}
									if (this.checkContactOrInstalled(row, 11, i + 1, caseHandleInfoDTO,newCaseHandleInfoDTO, errorMsgs, locations, caseCategory, null)){
										isFileError = Boolean.TRUE;
									}
									
									//核檢軟體版本
									softwareVersionName = this.getCellFormatValue(row.getCell(23), null, true);
									if (StringUtils.hasText(softwareVersionName)) {
										//依據所選客戶以及刷卡機行獲取相應的軟件版本列表
										parameters = this.pvmApplicationDAO.listSoftwareVersionsBy(caseHandleInfoDTO.getCustomerId(), caseHandleInfoDTO.getEdcType(), IAtomsConstants.NO);
										temp = this.getValueByName(parameters, softwareVersionName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_SOFTWARE_VERSION)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setSoftwareVersion(temp);
											newCaseHandleInfoDTO.setSoftwareVersionName(softwareVersionName);
										}
									}else {
										if (StringUtils.hasText(caseHandleInfoDTO.getSoftwareVersion())) {
											newCaseHandleInfoDTO.setSoftwareVersion(caseHandleInfoDTO.getSoftwareVersion());
											newCaseHandleInfoDTO.setSoftwareVersionName(caseHandleInfoDTO.getSoftwareVersionName());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_SOFTWARE_VERSION)}, null));
											isFileError = Boolean.TRUE;
										}
									}
									//核檢內建功能
									isError = Boolean.FALSE;
									builtInFeatureName = this.getCellFormatValue(row.getCell(24), null, true);
									if (StringUtils.hasText(builtInFeatureName)) {
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(24).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(24).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										tempArray = builtInFeatureName.split(IAtomsConstants.MARK_SEPARATOR);
										tempBuffer = new StringBuffer();
										//獲取對應的內建功能
										parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(caseHandleInfoDTO.getEdcType());
										for (int j = 0; j< tempArray.length; j++) {
											temp = this.getValueByName(parameters, tempArray[j]);
											if (StringUtils.hasText(temp)) {
												tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
											} else {
												isError = Boolean.TRUE;
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_BUILT_IN_FEATURE)}, null));
												isFileError = Boolean.TRUE;
												break;
											}
										}
										if (!isError) {
											if (isDeleted) {
												String oldBuilt = caseHandleInfoDTO.getBuiltInFeature();
												String[] newBuilts = tempBuffer.substring(0, tempBuffer.length()-1).split(IAtomsConstants.MARK_SEPARATOR);
												tempArray = null;
												if (StringUtils.hasText(oldBuilt)) {
													tempArray = oldBuilt.split(IAtomsConstants.MARK_SEPARATOR);
												}
												tempBuffer = new StringBuffer();
												if (newBuilts != null && tempArray != null) {
													for (String newBuilt : newBuilts) {
														for (String old : tempArray) {
															if (newBuilt.equals(old)) {
																break;
															}
															tempBuffer.append(old).append(IAtomsConstants.MARK_SEPARATOR);
														}
													}
												}
											}
											if (tempBuffer.length() == 0) {
												newCaseHandleInfoDTO.setBuiltInFeature(null);
												newCaseHandleInfoDTO.setBuiltInFeatureName(null);
											} else {
												newCaseHandleInfoDTO.setBuiltInFeature(tempBuffer.substring(0, tempBuffer.length()-1));
												newCaseHandleInfoDTO.setBuiltInFeatureName(builtInFeatureName);
											}
										}
									} else {
										newCaseHandleInfoDTO.setBuiltInFeature(caseHandleInfoDTO.getBuiltInFeature());
										newCaseHandleInfoDTO.setBuiltInFeatureName(caseHandleInfoDTO.getBuiltInFeatureName());
									}
									//核檢雙模組模式
									multiModuleName = this.getCellFormatValue(row.getCell(25), null, true);
									if (StringUtils.hasText(multiModuleName)) {
										temp = this.getValueByName(multiModules, multiModuleName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MULTI_MODULE)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setMultiModule(temp);
											newCaseHandleInfoDTO.setMultiModuleName(multiModuleName);
										}
										temp = null;
									} else {
										newCaseHandleInfoDTO.setMultiModule(caseHandleInfoDTO.getMultiModule());
										newCaseHandleInfoDTO.setMultiModuleName(caseHandleInfoDTO.getMultiModuleName());
									}
									//核檢週邊設備1
									peripheralsName = this.getCellFormatValue(row.getCell(26), null, true);
									if (StringUtils.hasText(peripheralsName)) {
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(26).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(26).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										temp = this.getValueByName(peripheralsList, peripheralsName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS)}, null));
											//isError = Boolean.TRUE;
											isFileError = Boolean.TRUE;
										} else {
											if (isDeleted) {
												String eripherals1 = caseHandleInfoDTO.getPeripherals();
												if (temp.equals(eripherals1) || !StringUtils.hasText(eripherals1)) {
													temp = null;
													peripheralsName = null;
												}
											}
											newCaseHandleInfoDTO.setPeripherals(temp);
											newCaseHandleInfoDTO.setPeripheralsName(peripheralsName);
										}
									} else {
										newCaseHandleInfoDTO.setPeripherals(caseHandleInfoDTO.getPeripherals());
										newCaseHandleInfoDTO.setPeripheralsName(caseHandleInfoDTO.getPeripheralsName());
									}
									//核檢週邊設備功能1
									isError = Boolean.FALSE;
									peripheralsFunctionName = this.getCellFormatValue(row.getCell(27), null, true);
									if (StringUtils.hasText(peripheralsFunctionName) && StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals())) {
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(27).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(27).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										tempArray = peripheralsFunctionName.split(IAtomsConstants.MARK_SEPARATOR);
										tempBuffer = new StringBuffer();
										//獲取對應的周邊設備功能列表
										parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(newCaseHandleInfoDTO.getPeripherals());
										if(CollectionUtils.isEmpty(parameters)) {
											isError = Boolean.TRUE;
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION)}, null));
											isFileError = Boolean.TRUE;
										} else {
											for (int j = 0; j< tempArray.length; j++) {
												temp = this.getValueByName(parameters, tempArray[j]);
												if (StringUtils.hasText(temp)) {
													tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
												} else {
													isError = Boolean.TRUE;
													errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
															+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION)}, null));
													isFileError = Boolean.TRUE;
												}
											}
										}
										if (!isError) {
											if (isDeleted) {
												String eripheralsFunction = caseHandleInfoDTO.getPeripheralsFunction();
												String[] delPeripheralsFunction = tempBuffer.substring(0, tempBuffer.length()-1).split(IAtomsConstants.MARK_SEPARATOR);
												tempArray = null;
												if (StringUtils.hasText(eripheralsFunction)) {
													tempArray = eripheralsFunction.split(IAtomsConstants.MARK_SEPARATOR);
												}
												tempBuffer = new StringBuffer();
												if (delPeripheralsFunction != null && tempArray != null) {
													for (String deleInfo : delPeripheralsFunction) {
														for (String old : tempArray) {
															if (deleInfo.equals(old)) {
																break;
															}
															tempBuffer.append(old).append(IAtomsConstants.MARK_SEPARATOR);
														}
													}
												}
											}
											if (tempBuffer.length() == 0) {
												newCaseHandleInfoDTO.setPeripheralsFunction(null);
												newCaseHandleInfoDTO.setPeripheralsFunctionName(null);
											} else {
												newCaseHandleInfoDTO.setPeripheralsFunction(tempBuffer.substring(0, tempBuffer.length()-1));
												newCaseHandleInfoDTO.setPeripheralsFunctionName(peripheralsFunctionName);
											}
											/*newCaseHandleInfoDTO.setPeripheralsFunction(tempBuffer.substring(0, tempBuffer.length()-1));
											newCaseHandleInfoDTO.setPeripheralsFunctionName(peripheralsFunctionName);*/
										}
									} else {
										if (StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals())) {
											newCaseHandleInfoDTO.setPeripheralsFunction(caseHandleInfoDTO.getPeripheralsFunction());
											newCaseHandleInfoDTO.setPeripheralsFunctionName(caseHandleInfoDTO.getPeripheralsFunctionName());
										} else {
											newCaseHandleInfoDTO.setPeripheralsFunction(null);
											newCaseHandleInfoDTO.setPeripheralsFunctionName(null);
										}
										
									}
									//核檢ECR連線
									ecrConnectionName = this.getCellFormatValue(row.getCell(28), null, true);
									if (StringUtils.hasText(ecrConnectionName)) {
										//獲取下拉列表數據
										parameters = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.ECR_LINE.getCode(), null);
										temp = this.getValueByName(parameters, ecrConnectionName);
										if (StringUtils.hasText(temp)) {
											newCaseHandleInfoDTO.setEcrConnection(temp);
											newCaseHandleInfoDTO.setEcrConnectionName(ecrConnectionName);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ECR_CONNECTION)}, null));
											isFileError = Boolean.TRUE;
										}
									} else {
										newCaseHandleInfoDTO.setEcrConnection(caseHandleInfoDTO.getEcrConnection());
										newCaseHandleInfoDTO.setEcrConnectionName(caseHandleInfoDTO.getEcrConnectionName());
									}
									//核檢週邊設備2
									peripherals2Name = this.getCellFormatValue(row.getCell(29), null, true);
									if (StringUtils.hasText(peripherals2Name)) {
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(29).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(29).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										temp = this.getValueByName(peripheralsList, peripherals2Name);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS2)}, null));
											//isError = Boolean.TRUE;
											isFileError = Boolean.TRUE;
										} else {
											if (isDeleted) {
												String eripherals2 = caseHandleInfoDTO.getPeripherals2();
												if (temp.equals(eripherals2) || !StringUtils.hasText(eripherals2)) {
													temp = null;
													peripherals2Name = null;
												}
											}
											newCaseHandleInfoDTO.setPeripherals2(temp);
											newCaseHandleInfoDTO.setPeripherals2Name(peripherals2Name);
										}
									} else {
										newCaseHandleInfoDTO.setPeripherals2(caseHandleInfoDTO.getPeripherals2());
										newCaseHandleInfoDTO.setPeripherals2Name(caseHandleInfoDTO.getPeripherals2Name());
									}
									//核檢週邊設備功能2
									isError = Boolean.FALSE;
									peripheralsFunction2Name = this.getCellFormatValue(row.getCell(30), null, true);
									if (StringUtils.hasText(peripheralsFunction2Name) && StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals2())) {
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(30).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(30).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										tempArray = peripheralsFunction2Name.split(IAtomsConstants.MARK_SEPARATOR);
										tempBuffer = new StringBuffer();
										//獲取對應的周邊設備功能列表
										parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(newCaseHandleInfoDTO.getPeripherals2());
										if(CollectionUtils.isEmpty(parameters)) {
											isError = Boolean.TRUE;
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION2)}, null));
											isFileError = Boolean.TRUE;
										} else {
											for (int j = 0; j< tempArray.length; j++) {
												temp = this.getValueByName(parameters, tempArray[j]);
												if (StringUtils.hasText(temp)) {
													tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
												} else {
													isError = Boolean.TRUE;
													errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
															+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION2)}, null));
													isFileError = Boolean.TRUE;
												}
											}
										}
										if (!isError) {
											if (isDeleted) {
												String eripheralsFunction = caseHandleInfoDTO.getPeripheralsFunction2();
												String[] delPeripheralsFunction = tempBuffer.substring(0, tempBuffer.length()-1).split(IAtomsConstants.MARK_SEPARATOR);
												tempArray = null;
												if (StringUtils.hasText(eripheralsFunction)) {
													tempArray = eripheralsFunction.split(IAtomsConstants.MARK_SEPARATOR);
												}
												tempBuffer = new StringBuffer();
												if (delPeripheralsFunction != null && tempArray != null) {
													for (String deleInfo : delPeripheralsFunction) {
														for (String old : tempArray) {
															if (deleInfo.equals(old)) {
																break;
															}
															tempBuffer.append(old).append(IAtomsConstants.MARK_SEPARATOR);
														}
													}
												}
											}
											if (tempBuffer.length() == 0) {
												newCaseHandleInfoDTO.setPeripheralsFunction2(null);
												newCaseHandleInfoDTO.setPeripheralsFunction2Name(null);
											} else {
												newCaseHandleInfoDTO.setPeripheralsFunction2(tempBuffer.substring(0, tempBuffer.length()-1));
												newCaseHandleInfoDTO.setPeripheralsFunction2Name(peripheralsFunction2Name);
											}
										}
									} else {
										if (StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals2())) {
											newCaseHandleInfoDTO.setPeripheralsFunction2(caseHandleInfoDTO.getPeripheralsFunction2());
											newCaseHandleInfoDTO.setPeripheralsFunction2Name(caseHandleInfoDTO.getPeripheralsFunction2Name());
										} else {
											newCaseHandleInfoDTO.setPeripheralsFunction2(null);
											newCaseHandleInfoDTO.setPeripheralsFunction2Name(null);
										}
										
									}
									//核檢連接方式
									connectionTypeName = this.getCellFormatValue(row.getCell(31), null, true);
									if (StringUtils.hasText(connectionTypeName)) {
										parameters = this.assetTypeDAO.listConnectionTypeByAssetTypeId(caseHandleInfoDTO.getEdcType());
										tempArray = connectionTypeName.split(IAtomsConstants.MARK_SEPARATOR);
										tempBuffer = new StringBuffer();
										isError = Boolean.FALSE;
										for (String name : tempArray) {
											temp = this.getValueByName(parameters, name);
											if (StringUtils.hasText(temp)) {
												tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
											} else {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONNECTION_TYPE)}, null));
												isFileError = Boolean.TRUE;
												isError  = Boolean.TRUE;
												break;
											}
										}
										if (!isError) {
											newCaseHandleInfoDTO.setConnectionType(tempBuffer.substring(0, tempBuffer.length()-1));
											newCaseHandleInfoDTO.setConnectionTypeName(connectionTypeName);
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getConnectionType())) {
											newCaseHandleInfoDTO.setConnectionType(caseHandleInfoDTO.getConnectionType());
											newCaseHandleInfoDTO.setConnectionTypeName(caseHandleInfoDTO.getConnectionTypeName());
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONNECTION_TYPE)}, null));
											isFileError = Boolean.TRUE;
										}
									}
									//核檢週邊設備3
									peripherals3Name = this.getCellFormatValue(row.getCell(32), null, true);
									if (StringUtils.hasText(peripherals3Name)) {
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(32).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(32).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										temp = this.getValueByName(peripheralsList, peripherals3Name);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS3)}, null));
											//isError = Boolean.TRUE;
											isFileError = Boolean.TRUE;
										} else {
											if (isDeleted) {
												String eripherals3 = caseHandleInfoDTO.getPeripherals3();
												if (temp.equals(eripherals3) || !StringUtils.hasText(eripherals3)) {
													temp = null;
													peripherals3Name = null;
												}
											}
											newCaseHandleInfoDTO.setPeripherals3(temp);
											newCaseHandleInfoDTO.setPeripherals3Name(peripherals3Name);
										}
										temp = null;
									} else {
										newCaseHandleInfoDTO.setPeripherals3(caseHandleInfoDTO.getPeripherals3());
										newCaseHandleInfoDTO.setPeripherals3Name(caseHandleInfoDTO.getPeripherals3Name());
									}
									//核檢週邊設備功能3
									isError = Boolean.FALSE;
									peripheralsFunction3Name = this.getCellFormatValue(row.getCell(33), null, true);
									if (StringUtils.hasText(peripheralsFunction3Name) && StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals3())) {
										isDeleted = Boolean.FALSE;
										if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
											//2003版本
											HSSFCellStyle cellStyleHss = (HSSFCellStyle) row.getCell(33).getCellStyle();
											if (cellStyleHss != null) {
												HSSFFont font = cellStyleHss.getFont(workbook);
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
											//2007版本
											XSSFCellStyle cellStyle = (XSSFCellStyle) row.getCell(33).getCellStyle();
											if (cellStyle != null) {
												XSSFFont font = cellStyle.getFont();
												if (font.getStrikeout()) {
													isDeleted = true;
												}
											}
										}
										tempArray = peripheralsFunction3Name.split(IAtomsConstants.MARK_SEPARATOR);
										tempBuffer = new StringBuffer();
										//獲取對應的周邊設備功能列表
										parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(newCaseHandleInfoDTO.getPeripherals3());
										if(CollectionUtils.isEmpty(parameters)) {
											isError = Boolean.TRUE;
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION3)}, null));
											isFileError = Boolean.TRUE;
										} else {
											for (int j = 0; j< tempArray.length; j++) {
												temp = this.getValueByName(parameters, tempArray[j]);
												if (StringUtils.hasText(temp)) {
													tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
												} else {
													isError = Boolean.TRUE;
													isFileError = Boolean.TRUE;
													errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
															+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION3)}, null));
												}
											}
										}
										if (!isError) {
											if (isDeleted) {
												String eripheralsFunction = caseHandleInfoDTO.getPeripheralsFunction3();
												String[] delPeripheralsFunction = tempBuffer.substring(0, tempBuffer.length()-1).split(IAtomsConstants.MARK_SEPARATOR);
												tempArray = null;
												if (StringUtils.hasText(eripheralsFunction)) {
													tempArray = eripheralsFunction.split(IAtomsConstants.MARK_SEPARATOR);
												}
												tempBuffer = new StringBuffer();
												if (delPeripheralsFunction != null && tempArray != null) {
													for (String deleInfo : delPeripheralsFunction) {
														for (String old : tempArray) {
															if (deleInfo.equals(old)) {
																break;
															}
															tempBuffer.append(old).append(IAtomsConstants.MARK_SEPARATOR);
														}
													}
												}
											}
											if (tempBuffer.length() == 0) {
												newCaseHandleInfoDTO.setPeripheralsFunction3(null);
												newCaseHandleInfoDTO.setPeripheralsFunction3Name(null);
											} else {
												newCaseHandleInfoDTO.setPeripheralsFunction3(tempBuffer.substring(0, tempBuffer.length()-1));
												newCaseHandleInfoDTO.setPeripheralsFunction3Name(peripheralsFunction3Name);
											}
											/*newCaseHandleInfoDTO.setPeripheralsFunction3(tempBuffer.substring(0, tempBuffer.length()-1));
											newCaseHandleInfoDTO.setPeripheralsFunction3Name(peripheralsFunction3Name);*/
										}
									} else {
										if (StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals3())) {
											newCaseHandleInfoDTO.setPeripheralsFunction3(caseHandleInfoDTO.getPeripheralsFunction3());
											newCaseHandleInfoDTO.setPeripheralsFunction3Name(caseHandleInfoDTO.getPeripheralsFunction3Name());
										} else {
											newCaseHandleInfoDTO.setPeripheralsFunction3(null);
											newCaseHandleInfoDTO.setPeripheralsFunction3Name(null);
										}
									}
									//核檢LOGO
									logoStyle = this.getCellFormatValue(row.getCell(34), null, true);
									if (StringUtils.hasText(logoStyle)) {
										if (i18NUtil.getName(IAtomsConstants.PARAMTER_CASE_LOGO_ONLY_LOGO).equals(logoStyle)) {
											newCaseHandleInfoDTO.setLogoStyle(IAtomsConstants.PARAMTER_CASE_LOGO_ONLY_LOGO);
										} else if (i18NUtil.getName(IAtomsConstants.PARAMTER_CASE_LOGO_LOGO_AND_MERCHANT_HEADER).equals(logoStyle)) {
											newCaseHandleInfoDTO.setLogoStyle(IAtomsConstants.PARAMTER_CASE_LOGO_LOGO_AND_MERCHANT_HEADER);
										} else if (i18NUtil.getName(IAtomsConstants.PARAMTER_CASE_LOGO_ONLY_MERCHANT_HEADER).equals(logoStyle)){
											newCaseHandleInfoDTO.setLogoStyle(IAtomsConstants.PARAMTER_CASE_LOGO_ONLY_MERCHANT_HEADER);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_LOGO)}, null));
										}
									} else {
										newCaseHandleInfoDTO.setLogoStyle(caseHandleInfoDTO.getLogoStyle());
									}
									//核檢是否開啟加密
									isOpenEncrypt = this.getCellFormatValue(row.getCell(35), null, true);
									if (StringUtils.hasText(isOpenEncrypt)) {
										if (i18NUtil.getName(IAtomsConstants.YES).equals(isOpenEncrypt)) {
											newCaseHandleInfoDTO.setIsOpenEncrypt(IAtomsConstants.YES);
										} else if (i18NUtil.getName(IAtomsConstants.NO).equals(isOpenEncrypt)) {
											newCaseHandleInfoDTO.setIsOpenEncrypt(IAtomsConstants.NO);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_OPEN_ENCRYPT)}, null));
										}
									} else {
										newCaseHandleInfoDTO.setIsOpenEncrypt(caseHandleInfoDTO.getIsOpenEncrypt());
									}
									//核檢電子化繳費平台
									electronicPayPlatform = this.getCellFormatValue(row.getCell(36), null, true);
									if (StringUtils.hasText(isOpenEncrypt)) {
										if (i18NUtil.getName(IAtomsConstants.YES).equals(electronicPayPlatform)) {
											newCaseHandleInfoDTO.setElectronicPayPlatform(IAtomsConstants.YES);
										} else if (i18NUtil.getName(IAtomsConstants.NO).equals(electronicPayPlatform)) {
											newCaseHandleInfoDTO.setElectronicPayPlatform(IAtomsConstants.NO);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ELECTRONIC_PAY_PLATFORM)}, null));
										}
									} else {
										newCaseHandleInfoDTO.setElectronicPayPlatform(caseHandleInfoDTO.getElectronicPayPlatform());
									}
									//核檢電子發票載具
									String electronicInvoice = this.getCellFormatValue(row.getCell(37), null, true);
									if (StringUtils.hasText(electronicInvoice)) {
										if (i18NUtil.getName(IAtomsConstants.YES).equals(electronicInvoice)){
											newCaseHandleInfoDTO.setElectronicInvoice(IAtomsConstants.YES);
										} else if (i18NUtil.getName(IAtomsConstants.NO).equals(electronicInvoice)) {
											newCaseHandleInfoDTO.setElectronicInvoice(IAtomsConstants.NO);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ELECTRONIC_INVOICE)}, null));
										}
									} else {
										newCaseHandleInfoDTO.setElectronicInvoice(caseHandleInfoDTO.getElectronicInvoice());
									}
									//核檢銀聯閃付
									String cupQuickPass = this.getCellFormatValue(row.getCell(38), null, true);
									if (StringUtils.hasText(cupQuickPass)) {
										if (i18NUtil.getName(IAtomsConstants.YES).equals(cupQuickPass)){
											newCaseHandleInfoDTO.setCupQuickPass(IAtomsConstants.YES);
										} else if (i18NUtil.getName(IAtomsConstants.NO).equals(cupQuickPass)) {
											newCaseHandleInfoDTO.setCupQuickPass(IAtomsConstants.NO);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_CUP_QUICK_PASS)}, null));
										}
									} else {
										newCaseHandleInfoDTO.setCupQuickPass(caseHandleInfoDTO.getCupQuickPass());
									}
									//Receipt_type
									receiptTypeName = this.getCellFormatValue(row.getCell(39), null, true);
									if (StringUtils.hasText(receiptTypeName)) {
										temp = this.getValueByName(receiptTypes, receiptTypeName);
										if (StringUtils.hasText(temp)) {
											newCaseHandleInfoDTO.setReceiptType(temp);
											newCaseHandleInfoDTO.setReceiptTypeName(receiptTypeName);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_RECEIPT_TYPE)}, null));
											isFileError = Boolean.TRUE;
										}
									} else {
										if (StringUtils.hasText(caseHandleInfoDTO.getReceiptType())) {
											newCaseHandleInfoDTO.setReceiptType(caseHandleInfoDTO.getReceiptType());
											newCaseHandleInfoDTO.setReceiptTypeName(caseHandleInfoDTO.getReceiptTypeName());
										} else {
											if (isGp) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_RECEIPT_TYPE)}, null));
												isFileError = Boolean.TRUE;
											}
										}
									}
									//核檢本機ip
									localhostIp = this.getCellFormatValue(row.getCell(40), null, true);
									if (StringUtils.hasText(localhostIp)) {
										//核檢ip長度
										if (localhostIp.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_USER_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_LOCALHOST_IP), IAtomsConstants.CONTACT_USER_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setLocalhostIp(localhostIp);
										}
									} else {
										newCaseHandleInfoDTO.setLocalhostIp(caseHandleInfoDTO.getLocalhostIp());
									}
									//核檢寬頻連線
									netVendorName = this.getCellFormatValue(row.getCell(41), null, true);
									if (StringUtils.hasText(netVendorName)) {
										temp = this.getValueByName(netVendorList, netVendorName);
										if (!StringUtils.hasText(temp)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_NET_VENDOR_ID)}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setNetVendorId(temp);
											newCaseHandleInfoDTO.setNetVendorName(netVendorName);
										}
									} else {
										newCaseHandleInfoDTO.setNetVendorId(caseHandleInfoDTO.getNetVendorId());
										newCaseHandleInfoDTO.setNetVendorName(caseHandleInfoDTO.getNetVendorName());
									}
									//核檢Gateway
									gateway = this.getCellFormatValue(row.getCell(42), null, true);
									if (StringUtils.hasText(gateway)) {
										//核檢gateway長度
										if (gateway.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_USER_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_GATEWAY), IAtomsConstants.CONTACT_USER_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setGateway(gateway);
										}
									} else {
										newCaseHandleInfoDTO.setGateway(caseHandleInfoDTO.getGateway());
									}
									//核檢Netmask
									netmask = this.getCellFormatValue(row.getCell(43), null, true);
									if (StringUtils.hasText(netmask)) {
										//核檢gateway長度
										if (netmask.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_USER_LENGTH)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_NETMASK), IAtomsConstants.CONTACT_USER_LENGTH}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setNetmask(netmask);
										}
									} else {
										newCaseHandleInfoDTO.setNetmask(caseHandleInfoDTO.getNetmask());
									}
									//核檢其他說明
									description = this.getCellFormatValue(row.getCell(44), null, true);
									if (StringUtils.hasText(description)) {
										if (description.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DESCRIPTION), IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setDescription(description.replace("\n", "\r\n"));
										}
									} else {
										caseHandleInfoDTO.setDescription(null);
									}
									//核檢TMS
									isTms = this.getCellFormatValue(row.getCell(45), null, true);
									if (StringUtils.hasText(isTms)) {
										if (i18NUtil.getName(IAtomsConstants.NO).equals(isTms)) {
											newCaseHandleInfoDTO.setIsTms(IAtomsConstants.NO);
										} else if (i18NUtil.getName(IAtomsConstants.YES).equals(isTms)) {
											newCaseHandleInfoDTO.setIsTms(IAtomsConstants.YES);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_TMS)}, null));
											isFileError = Boolean.TRUE;
										}
									} else {
										newCaseHandleInfoDTO.setIsTms(caseHandleInfoDTO.getIsTms());
									}
									//核檢TMS參數說明
									tmsParamDesc = this.getCellFormatValue(row.getCell(46), null, true);
									if (StringUtils.hasText(tmsParamDesc)) {
										if (tmsParamDesc.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_TMS_PARAM_DESC)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_TMS_PARAM_DESC), IAtomsConstants.MAXLENGTH_TMS_PARAM_DESC}, null));
											isFileError = Boolean.TRUE;
										} else {
											newCaseHandleInfoDTO.setTmsParamDesc(tmsParamDesc.replace("\n", "\r\n"));
										}
									} else {
										newCaseHandleInfoDTO.setTmsParamDesc(caseHandleInfoDTO.getTmsParamDesc());
									}
									//核檢案件有無對應之SLA資料
									if (StringUtils.hasText(caseType) && StringUtils.hasText(newCaseHandleInfoDTO.getMerchantHeaderId())
											&& !IAtomsConstants.PARAM_YES.equals(caseHandleInfoDTO.getCmsCase())) {
										BimMerchantHeader merchantHeader = this.merchantHeaderDAO.findByPrimaryKey(BimMerchantHeader.class, newCaseHandleInfoDTO.getMerchantHeaderId());
										if (merchantHeader != null) {
											contractSlaDTOList = this.contractSlaDAO.listBy(null, caseHandleInfoDTO.getContractId(), merchantHeader.getArea(),
													caseCategory, caseType, null, null, null, null, false);
											if(CollectionUtils.isEmpty(contractSlaDTOList)){
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														.concat(i18NUtil.getName(IAtomsMessageCode.NO_SLA_FOR_CASE)));
												isFileError = Boolean.TRUE;
											} else {
												newCaseHandleInfoDTO.setContractSlaDTO(contractSlaDTOList.get(0));
											}
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.NO_SLA_FOR_CASE)));
											isFileError = Boolean.TRUE;
										}
									}
									String tempPeripheralsName = null;
									/*
									 * 若週邊設備(1~3)選項重覆，錯誤訊息「週邊設備選項XXX已重覆」
									 */
									// 如果周邊設備1存在 且與周邊設備2或者周邊設備3相同
									if(StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals()) && (newCaseHandleInfoDTO.getPeripherals().equals(newCaseHandleInfoDTO.getPeripherals2()) || newCaseHandleInfoDTO.getPeripherals().equals(newCaseHandleInfoDTO.getPeripherals3()))){
										tempPeripheralsName = newCaseHandleInfoDTO.getPeripheralsName();
										// 如果周邊設備2存在 且與周邊設備1或者周邊設備3相同
									} else if(StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals2()) && (newCaseHandleInfoDTO.getPeripherals2().equals(newCaseHandleInfoDTO.getPeripherals()) || newCaseHandleInfoDTO.getPeripherals2().equals(newCaseHandleInfoDTO.getPeripherals3()))){
										tempPeripheralsName = newCaseHandleInfoDTO.getPeripherals2Name();
										// 如果周邊設備3存在 且與周邊設備1或者周邊設備2相同
									} else if(StringUtils.hasText(newCaseHandleInfoDTO.getPeripherals3()) && (newCaseHandleInfoDTO.getPeripherals3().equals(newCaseHandleInfoDTO.getPeripherals()) || newCaseHandleInfoDTO.getPeripherals3().equals(newCaseHandleInfoDTO.getPeripherals2()))){
										tempPeripheralsName = newCaseHandleInfoDTO.getPeripherals3Name();
									}
									// 符合上面三種情況的任意一種
									if(StringUtils.hasText(tempPeripheralsName)){
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												.concat(i18NUtil.getName(IAtomsMessageCode.PERIPHERALS_IS_REPEAT, new String[]{tempPeripheralsName}, null)));
										isFileError = Boolean.TRUE;
									}
									/*
									 * 若設備內建功能與週邊設備功能重覆，錯誤訊息「設備功能XXX已重覆」
									 */
									if(StringUtils.hasText(newCaseHandleInfoDTO.getBuiltInFeature()) || StringUtils.hasText(newCaseHandleInfoDTO.getPeripheralsFunction()) || StringUtils.hasText(newCaseHandleInfoDTO.getPeripheralsFunction2()) || StringUtils.hasText(newCaseHandleInfoDTO.getPeripheralsFunction3())){
										MultiParameterInquiryContext param = new MultiParameterInquiryContext();
										param.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION.getValue(), newCaseHandleInfoDTO.getPeripheralsFunction());
										param.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION2.getValue(), newCaseHandleInfoDTO.getPeripheralsFunction2());
										param.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION3.getValue(), newCaseHandleInfoDTO.getPeripheralsFunction3());
										param.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.BUILT_IN_FEATURE.getValue(), newCaseHandleInfoDTO.getBuiltInFeature());
										String repeatSupportFun = getRepeatSupportFun(param);
										if(StringUtils.hasText(repeatSupportFun)){
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.PERIPHERALS_IS_REPEAT, new String[]{repeatSupportFun}, null));
											isFileError = Boolean.TRUE;
										}
									}
									//核檢交易參數
									isError = this.checkUploadTrans(srmCaseTransactionParameterDTOs, caseHandleInfoDTO, transErrors, caseTransactionParameterDTOs, i + 1, caseCategory, transactionParameterItemList);
									if (!isError && !CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)) {
										newCaseHandleInfoDTO.setCaseTransactionParameterDTOs(srmCaseTransactionParameterDTOs);
										//核檢交易參數是否選取了未選取CUP或Smartpay交易類別
										Boolean isCupAndSmartpayFlag = Boolean.FALSE;
										//核檢交易參數是是否選取一般交易交易類別
										Boolean isCommonFlag = Boolean.FALSE;
										for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
											if(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VM.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
											|| IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJ.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
											|| IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJU.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
											|| IAtomsConstants.TRANSACTION_CATEGORY.CONSTRUCTION_COMPANY.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
												isCommonFlag = Boolean.TRUE;
											}
											if (IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
													|| IAtomsConstants.TRANSACTION_CATEGORY.SMART_PAY.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())) {
												isCupAndSmartpayFlag = Boolean.TRUE;
											}
										}
										if(!isCommonFlag){
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_COMMON_TRANS_ERROR));
											//isError = Boolean.TRUE;
											isFileError = Boolean.TRUE;
										}
										/*
										 * 未選取CUP或Smartpay交易類別，不可選取Pinpad設備及功能
										 */
										if((StringUtils.hasText(newCaseHandleInfoDTO.getBuiltInFeature()) && newCaseHandleInfoDTO.getBuiltInFeature().contains(IAtomsConstants.SUPPORTED_FUNCTION_PINPAD)) 
												|| (StringUtils.hasText(newCaseHandleInfoDTO.getPeripheralsFunction()) && newCaseHandleInfoDTO.getPeripheralsFunction().contains(IAtomsConstants.SUPPORTED_FUNCTION_PINPAD))
												|| (StringUtils.hasText(newCaseHandleInfoDTO.getPeripheralsFunction2()) && newCaseHandleInfoDTO.getPeripheralsFunction2().contains(IAtomsConstants.SUPPORTED_FUNCTION_PINPAD))
												|| (StringUtils.hasText(newCaseHandleInfoDTO.getPeripheralsFunction3()) && newCaseHandleInfoDTO.getPeripheralsFunction3().contains(IAtomsConstants.SUPPORTED_FUNCTION_PINPAD)) ){
											if(!isCupAndSmartpayFlag){
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.NO_CUP_OR_SMARTPAY_TRANS_TYPE));
												isFileError = Boolean.TRUE;
											}
										} else {
											/*
											 * 選取CUP或Smartpay交易類別，要選取Pinpad設備及功能
											 */
											if(isCupAndSmartpayFlag){
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.NEED_PINPAD_ASSET_FUNCTION));
												isFileError = Boolean.TRUE;
											}
										}
									}
									if (isFileError) {
										errorMsgs.add(errorRow, i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
										isFileError = Boolean.FALSE;
										errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
									}
									if (isError) {
										for (String string : transErrors) {
											errorMsgs.add(string);
										}
										errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
									}
									newCaseHandleInfoDTO.setAttendanceTimes(Integer.valueOf(0));
									newCaseHandleInfoDTO.setCaseCategory(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode());
									uploadCaseInfoUpdate(newCaseHandleInfoDTO, caseHandleInfoDTO, caseCategory);
									srmCaseHandleInfoDTOs.add(newCaseHandleInfoDTO);
								} else {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) + i18NUtil.getName(IAtomsMessageCode.DATA_NOT_FOUND));
									//isFileError = Boolean.TRUE;
									errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
								}
							} else {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR_MSG, new String[]{dtid}, null));
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
										.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DTID)}, null)) );
								errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
							}
						}
						errorRow = errorMsgs.size();
						for (int i = 0; i<caseTransactionParameterDTOs.size(); i++) {
							if (!repeatDtid.containsKey(caseTransactionParameterDTOs.get(i).getDTID())) {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_PARAMETER_UPLOAD_NO_CASE_INFO, new String[]{String.valueOf(i + 2)}, null));
								isFileError = Boolean.TRUE;
							}
						}
					} else if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
						String receiptType = null;
						//核檢該筆資料是否有錯誤
						Boolean isError = Boolean.FALSE;
						//核檢過程中，記錄某些臨時信息
						Boolean isTemp = Boolean.FALSE;
						//臨時數組
						String[] tempArray = null;
						//
						StringBuffer tempBuffer = null;
						errorRow = 0;
						//循環交易參數sheet，取出數據
						sheet = workbook.getSheetAt(0);
						// 獲取行數
						rowCount = this.getExcelRealRowCount(sheet);
						//記錄客戶+EDC可以的DTID數
						Map<String, Integer> couldUseDtidNum = new HashMap<String, Integer>();
						//Task #3335 裝機件 若客戶=台新銀行，需求單號為必填欄位
						//獲取Receipt_type
						List<Parameter> receiptTypes = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.RECEIPT_TYPE.getCode(), null);
						//核檢案件資料sheet
						for (int i = 1; i < rowCount; i++) {
							isGp = Boolean.FALSE;
							isTsb = Boolean.FALSE;
							//記錄交易參數錯誤信息
							transErrors = new ArrayList<String>();
							errorRow = errorMsgs.size();
 							caseHandleInfoDTO = new SrmCaseHandleInfoDTO();
							srmCaseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
							row = sheet.getRow(i);
							if (isRowEmpty(row)) {
								continue;
							}
							caseNo = this.getCellFormatValue(row.getCell(0), null, true);
							transErrors.add(i18NUtil.getName(IAtomsMessageCode.CASE_PARAMETER_UPLOAD_CASE_NO_ERROR_MSG, new String[]{caseNo}, null));
							//驗證案件序號是否輸入R
							if (StringUtils.hasText(caseNo)) {
								if (repeatDtid.containsKey(caseNo)) {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_CASE_NO_ERROR_MSG, new String[]{caseNo}, null));
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_AND_ROW, new String[]{String.valueOf((i+1)), repeatDtid.get(caseNo).toString()}, null) + 
											i18NUtil.getName(IAtomsMessageCode.INPUT_REPEAT, new String[]{"案件序號"}, null));
									errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
									continue;
								} else {
									repeatDtid.put(caseNo, i+1);
								}
								caseHandleInfoDTO.setCaseNo(caseNo);
								//驗證客戶是否輸入正確
								customerName = this.getCellFormatValue(row.getCell(2), null, true);
								customerID = this.getValueByName(companyList, customerName);
								if (StringUtils.hasText(customerName)) {
									temp = customerID;
									if (StringUtils.hasText(temp)) {
										setUserRoleAttribute(formDTO);
										// Task #3578 客戶廠商客服
										if (!formDTO.getIsVendorAttribute() && (formDTO.getIsCustomerAttribute() || formDTO.getIsCustomerVendorAttribute())) {
											//當前登入者對應之公司
											String logonUserCompanyId = logonUser.getAdmUserDTO().getCompanyId();
											if (StringUtils.hasText(logonUserCompanyId)) {
												if (logonUserCompanyId.equals(temp)) {
													caseHandleInfoDTO.setCustomerId(temp);
													caseHandleInfoDTO.setCustomerName(customerName);
												} else {
													errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_CUSTOMER_ROLE_ERROR, new String[]{customerName}, null));
													isFileError = Boolean.TRUE;
												}
											} else {
												caseHandleInfoDTO.setCustomerId(temp);
												caseHandleInfoDTO.setCustomerName(customerName);
											}
										} else {
											caseHandleInfoDTO.setCustomerId(temp);
											caseHandleInfoDTO.setCustomerName(customerName);
										}
									} else {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CUSTOMER_ID)}, null));
										isFileError = Boolean.TRUE;
									}
								} else {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
											.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CUSTOMER_ID)}, null)) );
									isFileError = Boolean.TRUE;
								}
								if (StringUtils.hasText(caseHandleInfoDTO.getCustomerId())) {
									peripheralsList = this.assetTypeDAO.listAssetByCustomerId(caseHandleInfoDTO.getCustomerId(), IAtomsConstants.ASSET_CATEGORY_RODUND_ASSET, true);
									BimCompany bimCompany = this.companyDAO.findByPrimaryKey(BimCompany.class, caseHandleInfoDTO.getCustomerId());
									if (bimCompany != null && IAtomsConstants.PARAM_GP.equals(bimCompany.getCompanyCode())) {
										isGp = Boolean.TRUE;
									} else if(bimCompany != null && IAtomsConstants.PARAM_TSB_EDC.equals(bimCompany.getCompanyCode())) {
										isTsb = Boolean.TRUE;
									}
 								}
								//驗證需求單號長度是否正確
								requirementNo = this.getCellFormatValue(row.getCell(1), null, true);
								if (StringUtils.hasText(requirementNo)) {
									if (requirementNo.trim().length() > Integer.valueOf(IAtomsConstants.REQUIREMENT_NO_LENGTH)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO), IAtomsConstants.REQUIREMENT_NO_LENGTH}, null));
										isFileError = Boolean.TRUE;
									} else {
										// Task #3584 匯入檢核
										String resault = this.checkRequirementNo(requirementNo, dtid, caseHandleInfoDTO, caseCategory);
										if (StringUtils.hasText(resault)) {
											// 此DTID台新裝機件已存在 || 此DTID台新裝機件尚未建案
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ resault);
											isFileError = Boolean.TRUE;
										} else {
											caseHandleInfoDTO.setRequirementNo(requirementNo);
										}
										//caseHandleInfoDTO.setRequirementNo(requirementNo);
									}
								} else {
									if (isGp || isTsb) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_REQUIREMENT_NO)}, null));
										isFileError = Boolean.TRUE;
									} else {
										caseHandleInfoDTO.setRequirementNo(null);
									}
								}
								
								//驗證合約是否輸入正確
								contractCode = this.getCellFormatValue(row.getCell(3), null, true);
								if (StringUtils.hasText(caseHandleInfoDTO.getCustomerId())) {
									BimContractDTO bimContractDTO = this.contractDAO.getContractDTOByContractCode(contractCode);
									if (StringUtils.hasText(contractCode)) {
										bimContractDTO = this.contractDAO.getContractDTOByContractCode(contractCode);
									} else {
										List<Parameter> contractList = this.contractDAO.getContractCodeList(customerID, null, false, "contract_code", "asc", true);
										if (contractList.size() > 0) {
											contractCode = (String)((Parameter)contractList.get(0)).getName();
											bimContractDTO = this.contractDAO.getContractDTOByContractCode(contractCode);
										}
									}
									
									if (bimContractDTO != null) {
										if (caseHandleInfoDTO.getCustomerId().equals(bimContractDTO.getCompanyId())) {
											caseHandleInfoDTO.setContractId(bimContractDTO.getContractId());
											caseHandleInfoDTO.setContractCode(contractCode);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, 
															new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTRACT_ID), contractCode, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CUSTOMER_ID), customerName}, null));
											isFileError = Boolean.TRUE;
										}
									} else {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, 
														new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTRACT_ID), contractCode, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CUSTOMER_ID), customerName}, null));
										isFileError = Boolean.TRUE;
									}
								} else {
									if (!StringUtils.hasText(contractCode)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTRACT_ID)}, null)) );
										isFileError = Boolean.TRUE;
									}
								}
								//驗證裝機類型
								installType = this.getCellFormatValue(row.getCell(4), null, true);
								if (StringUtils.hasText(installType)) {
									temp = this.getValueByName(installTypeList, installType);
									if (StringUtils.hasText(temp)) {
										if (IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(temp)) {
											caseHandleInfoDTO.setCmsCase(IAtomsConstants.YES);
											//Task #3460若裝機類型為微型商戶，則維護廠商只能是經茂聯網
											//獲取維護廠商
											companyName = this.getCellFormatValue(row.getCell(5), null, true);
											if(StringUtils.hasText(companyName) && !companyName.equals(i18NUtil.getName(IAtomsConstants.FIELD_CYBERSOFT))){
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_COMPANY_ERROR));
												isFileError = Boolean.TRUE;
											}
										}
										caseHandleInfoDTO.setInstallType(temp);
										caseHandleInfoDTO.setInstallTypeName(installType);
									} else {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALL_TYPE)}, null));
										isFileError = Boolean.TRUE;
									}
								} else {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
											.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALL_TYPE)}, null)) );
									isFileError = Boolean.TRUE;
								}
								//核檢維護廠商
								companyName = this.getCellFormatValue(row.getCell(5), null, true);
								if (StringUtils.hasText(companyName) && StringUtils.hasText(caseHandleInfoDTO.getContractId())) {
									BimContractDTO bimContractDTO = this.contractDAO.getVendorBy(companyName, caseHandleInfoDTO.getContractId());
									if (bimContractDTO != null) {
										caseHandleInfoDTO.setCompanyId(bimContractDTO.getCompanyId());
										caseHandleInfoDTO.setCompanyName(companyName);
									} else {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, 
														new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPANY_ID), companyName, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTRACT_ID), contractCode}, null));
										isFileError = Boolean.TRUE;
									}
								} else {
									if (!StringUtils.hasText(companyName)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPANY_ID)}, null)) );
										isFileError = Boolean.TRUE;
									}
								}
								//核檢維護部門
								vendorDeptName = this.getCellFormatValue(row.getCell(6), null, true);
								if (StringUtils.hasText(vendorDeptName) && StringUtils.hasText(caseHandleInfoDTO.getCompanyId())) {
									// Task #2518 裝機建案，維護部門也新增一個客服
									if(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE).equals(vendorDeptName)){
										temp = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode();
									} else {
										temp = this.departmentDAO.getDepartmentIdByName(vendorDeptName, caseHandleInfoDTO.getCompanyId());
									}
									if (StringUtils.hasText(temp)) {
										caseHandleInfoDTO.setDepartmentId(temp);
										caseHandleInfoDTO.setDepartmentName(departmentName);
									} else {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, 
														new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID), vendorDeptName, i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPANY_ID), companyName}, null));
										isFileError = Boolean.TRUE;
									}
								} else {
									if (!StringUtils.hasText(vendorDeptName)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEPARTMENT_ID)}, null));
										isFileError = Boolean.TRUE;
									}
								}
								
								//核檢專案欄位
								isProject = this.getCellFormatValue(row.getCell(7), null, true);
								if (StringUtils.hasText(isProject)) {
									if (isProject.equals(i18NUtil.getName(IAtomsConstants.YES))){
										caseHandleInfoDTO.setIsProject(IAtomsConstants.YES);
									} else if (isProject.equals(i18NUtil.getName(IAtomsConstants.NO))){
										caseHandleInfoDTO.setIsProject(IAtomsConstants.NO);
									} else {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_IS_PROJECT)}, null)) );
									}
								} else {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
											.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_IS_PROJECT)}, null)) );
									isFileError = Boolean.TRUE;
								}
								//核檢案件類型是否輸入正確
								caseTypeName = this.getCellFormatValue(row.getCell(8), null, true);
								if (StringUtils.hasText(caseTypeName)) {
									temp = this.getValueByName(caseTypes, caseTypeName);
									if (!StringUtils.hasText(temp)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null));
										isFileError = Boolean.TRUE;
									} else {
										caseHandleInfoDTO.setCaseType(temp);
										caseHandleInfoDTO.setCaseTypeName(caseTypeName);
										if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
											caseType = IAtomsConstants.TICKET_MODE_COMMON;
										} else {
											caseType = temp;
										}
									}
								} else {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
											.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null)) );
									isFileError = Boolean.TRUE;
								}
								//驗證預計完成日期是否輸入正確
								expectedCompletionDate = this.getCellFormatValue(row.getCell(9), "yyyy/MM/dd", false);
								//判斷案件類型是否為預約
								if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(temp)) {
									//如果案件類型是為預約，則預計完成日必填
									if (!StringUtils.hasText(expectedCompletionDate)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null)) );
										isFileError = Boolean.TRUE;
									} else {
										//核檢日期格式是否正確
										if (!ValidateUtils.checkDate(expectedCompletionDate)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_DATE_FORMAT_YYYY_MM_DD, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EXPECTED_COMPLETION_DATE)}, null));
											isFileError = Boolean.TRUE;
										} else {
											caseHandleInfoDTO.setExpectedCompletionDate(DateTimeUtils.toTimestamp(expectedCompletionDate));
										}
									}
								}
								String merchantName = null;
								BimMerchant merchant = null;
								String tempId = null;
								//核檢特點代號
								merchantCode = this.getCellFormatValue(row.getCell(10), null, true);
								isError = Boolean.FALSE;
								if (StringUtils.hasText(merchantCode) && StringUtils.hasText(caseHandleInfoDTO.getCustomerId())) {
									//核檢特點代號是否為當前客戶下
									MerchantDTO merchantDTO = this.merchantDAO.getMerchantInfo(null, merchantCode, caseHandleInfoDTO.getCustomerId(), null);
									//Task #3262 特店代號不存在時，則新增該特店代號
									if (merchantDTO == null) {
										for (BimMerchant dto : bimMerchants) {
											if (merchantCode.equals(dto.getMerchantCode())) {
												caseHandleInfoDTO.setMerchantCode(dto.getMerchantId());
												caseHandleInfoDTO.setMerMid(merchantCode);
												break;
											}
										}
										if (!StringUtils.hasText(caseHandleInfoDTO.getMerchantCode())) {
											//核檢長度是否正確
											if (merchantCode.trim().length() > 20) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, 
																new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_CODE), IAtomsConstants.PROPERTY_ID_LENGTH}, null));
												isFileError = Boolean.TRUE;
												isError = Boolean.TRUE;
											}
											//特店代號限輸入英數字
											if (!isError && !ValidateUtils.numberOrEnglish(merchantCode)) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_LIMIT_ENGLISH_AND_NUMBER, 
																new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_CODE)}, null));
												isFileError = Boolean.TRUE;
												isError = Boolean.TRUE;
											}
											if (!isError) {
												//獲取特店名稱
												merchantName = this.getCellFormatValue(row.getCell(43), null, true);
												if (StringUtils.hasText(merchantName)) {
													//核檢特店名稱是長度
													if (merchantName.trim().length() > 50) {
														errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
																+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, 
																		new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_NAME), IAtomsConstants.MAXLENGTH_NUMBER_FIFTY}, null));
														isFileError = Boolean.TRUE;
														isError = Boolean.TRUE;
													}
												} else {
													errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
															+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, 
																	new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_NAME)}, null));
													isFileError = Boolean.TRUE;
													isError = Boolean.TRUE;
												}
											}
											if (!isError) {
												merchant = new BimMerchant();
												tempId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_BIM_MERCHANT);
												merchant.setCompanyId(caseHandleInfoDTO.getCustomerId());
												merchant.setMerchantCode(merchantCode);
												merchant.setName(merchantName);
												merchant.setMerchantId(tempId);
												merchant.setDeleted(IAtomsConstants.NO);
												merchant.setCreatedById(logonUser.getId());
												merchant.setCreatedByName(logonUser.getName());
												merchant.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
												merchant.setUpdatedById(logonUser.getId());
												merchant.setUpdatedByName(logonUser.getName());
												merchant.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
												bimMerchants.add(merchant);
												//this.merchantDAO.save(merchant);
												caseHandleInfoDTO.setMerchantCode(tempId);
												caseHandleInfoDTO.setMerMid(merchantCode);
											}
										}
									} else {
										caseHandleInfoDTO.setMerchantCode(merchantDTO.getMerchantId());
										caseHandleInfoDTO.setMerMid(merchantCode);
									}
								} else {
									if (!StringUtils.hasText(merchantCode)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_CODE)}, null)) );
										isFileError = Boolean.TRUE;
									}
								}
								//核檢表頭信息
								isError = Boolean.FALSE;
								String merchantArea = null;
								String merchantContact = null;
								String merchantContactPhone = null;
								String location = null;
								String address = null;
								BimMerchantHeader header = null;
								String mobilePhone = null;
								merchantHeaderName = this.getCellFormatValue(row.getCell(11), null, true);
								//獲取聯絡手機欄位 ---（Task #3262 協助新增聯絡手機欄位）
								mobilePhone = this.getCellFormatValue(row.getCell(49), null, true);
								if (StringUtils.hasText(mobilePhone)) {
									//核檢長度是否Ok
									if (mobilePhone.trim().length() > 10) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, 
														new String[]{i18NUtil.getName(IAtomsConstants.FIELD_MOBILE_PHONE), IAtomsConstants.MAXLENGTH_NUMBER_TEN}, null));
										isFileError = Boolean.TRUE;
										isError = Boolean.TRUE;
										mobilePhone = null;
									}
									if (StringUtils.hasText(mobilePhone) && !ValidateUtils.twMobile(mobilePhone)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.MOBLIE_PHINE_FORMAT_ERROR));
										isFileError = Boolean.TRUE;
										isError = Boolean.TRUE;
										mobilePhone = null;
									}
								}
								if (StringUtils.hasText(merchantHeaderName) && StringUtils.hasText(caseHandleInfoDTO.getMerchantCode())) {
									//核檢特點表頭是否是該特點代號下
									BimMerchantHeaderDTO bimMerchantHeaderDTO = this.merchantHeaderDAO.getMerchantHeaderDTOBy(caseHandleInfoDTO.getMerchantCode(), merchantHeaderName, null);
									//特店表頭不存在時，則新增Task #3262
									if (bimMerchantHeaderDTO == null) {
										for (BimMerchantHeader dto : bimMerchantHeaders) {
											if (merchantHeaderName.equals(dto.getHeaderName())
													&& caseHandleInfoDTO.getMerchantCode().equals(dto.getMerchantId())) {
												header = dto;
												caseHandleInfoDTO.setMerchantHeaderId(dto.getMerchantHeaderId());
												caseHandleInfoDTO.setMerchantHeaderName(merchantHeaderName);
												break;
											}
										}
										if (!StringUtils.hasText(caseHandleInfoDTO.getMerchantHeaderId())) {
											//核檢特店表頭長度
											if (merchantHeaderName.trim().length() > 100) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, 
																new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_HEADER_ID), IAtomsConstants.MAXLENGTH_NUMBER_ONE_HUNDRED}, null));
												isFileError = Boolean.TRUE;
												isError = Boolean.TRUE;
											}
											//核檢特店區域是否輸入正確
											if (!isError) {
												merchantArea = this.getCellFormatValue(row.getCell(44), null, true);
												if (StringUtils.hasText(merchantArea)) {
													temp = this.getValueByName(areas, merchantArea);
													if (StringUtils.hasText(temp)) {
														merchantArea = temp;
														caseHandleInfoDTO.setArea(merchantArea);
													} else {
														errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
																+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, 
																		new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_AREA)}, null));
														isFileError = Boolean.TRUE;
														isError = Boolean.TRUE;
													}
												} else {
													errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
															+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, 
																	new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_AREA)}, null));
													isFileError = Boolean.TRUE;
													isError = Boolean.TRUE;
												}
											}
											//核檢特店聯絡人是否輸入正確
											if (!isError) {
												merchantContact = this.getCellFormatValue(row.getCell(45), null, true);
												if (StringUtils.hasText(merchantContact)) {
													//核檢特店名稱是長度
													if (merchantContact.trim().length() > 50) {
														errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
																+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, 
																		new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_CONTACT), IAtomsConstants.MAXLENGTH_NUMBER_FIFTY}, null));
														isFileError = Boolean.TRUE;
														isError = Boolean.TRUE;
													}
												}
											}
											//核檢特店聯絡人電話1是否輸入正確
											if (!isError) {
												merchantContactPhone = this.getCellFormatValue(row.getCell(46), null, true);
												if (StringUtils.hasText(merchantContactPhone)) {
													//核檢特店聯絡人電話1是長度
													if (merchantContactPhone.trim().length() > 20) {
														errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
																+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, 
																		new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_CONTACT_TEL), IAtomsConstants.MAXLENGTH_NUMBER_TWENTY}, null));
														isFileError = Boolean.TRUE;
														isError = Boolean.TRUE;
													}
												}
											}
											//核檢營業地址是否輸入正確
											if (!isError) {
												location = this.getCellFormatValue(row.getCell(47), null, true);
												if (StringUtils.hasText(location)) {
													temp = this.getValueByName(locations, location);
													if (StringUtils.hasText(temp)) {
														location = temp;
													} else {
														errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
																+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, 
																		new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_LOCATION)}, null));
														isFileError = Boolean.TRUE;
														isError = Boolean.TRUE;
													}
												}
												address = this.getCellFormatValue(row.getCell(48), null, true);
												if (StringUtils.hasText(address)) {
													//核檢營業地址長度
													if (address.trim().length() > 100) {
														errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
																+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, 
																		new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_ADDRESS), IAtomsConstants.MAXLENGTH_NUMBER_ONE_HUNDRED}, null));
														isFileError = Boolean.TRUE;
														isError = Boolean.TRUE;
													}
												}
											}
											if (!isError) {
												header = new BimMerchantHeader();
												tempId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_BIM_MERCHANT_HEADER);
												header.setArea(merchantArea);
												header.setContact(merchantContact);
												header.setContactTel(merchantContactPhone);
												header.setMerchantHeaderId(tempId);
												header.setMerchantId(caseHandleInfoDTO.getMerchantCode());
												header.setLocation(location);
												header.setBusinessAddress(address);
												header.setHeaderName(merchantHeaderName);
												header.setCreatedById(logonUser.getId());
												header.setCreatedByName(logonUser.getName());
												header.setUpdatedById(logonUser.getId());
												header.setUpdatedByName(logonUser.getId());
												header.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
												header.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
												if (StringUtils.hasText(mobilePhone)) {
													header.setPhone(mobilePhone);
												}
												//新增存儲刪除標誌位 update by hermanwang 2017/05/16
												header.setDeleted(IAtomsConstants.NO);
												//this.merchantHeaderDAO.insert(header);
												bimMerchantHeaders.add(header);
												caseHandleInfoDTO.setMerchantHeaderId(tempId);
												caseHandleInfoDTO.setMerchantHeaderName(merchantHeaderName);
												//客戶爲環匯時，驗證aoeMAIL是否輸入
												if (isGp) {
													errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
															+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_AO_NAME)}, null));
													isFileError = Boolean.TRUE;
												}
											}
										}
									} else {
										caseHandleInfoDTO.setMerchantHeaderId(bimMerchantHeaderDTO.getMerchantHeaderId());
										caseHandleInfoDTO.setMerchantHeaderName(merchantHeaderName);
										caseHandleInfoDTO.setArea(bimMerchantHeaderDTO.getArea());
										caseHandleInfoDTO.setAoName(bimMerchantHeaderDTO.getAoName());
										if (StringUtils.hasText(mobilePhone)) {
											header = new BimMerchantHeader();
											header.setPhone(mobilePhone);
											header.setMerchantHeaderId(bimMerchantHeaderDTO.getMerchantHeaderId());
											bimMerchantHeaders.add(header);
											//this.merchantHeaderDAO.update(header);
										}
										header = new BimMerchantHeader();
										header = this.merchantHeaderDAO.findByPrimaryKey(BimMerchantHeader.class, bimMerchantHeaderDTO.getMerchantHeaderId());
										//客戶爲環匯時，驗證aoeMAIL是否輸入
										if (isGp && !StringUtils.hasText(bimMerchantHeaderDTO.getAoName())) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_AO_NAME)}, null));
											isFileError = Boolean.TRUE;
										}
									}
								} else {
									if (!StringUtils.hasText(merchantHeaderName)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_HEADER_ID)}, null)) );
										isFileError = Boolean.TRUE;
									}
								}
								if (this.checkContactOrInstalled(row, 12, i + 1, caseHandleInfoDTO, caseHandleInfoDTO, errorMsgs, locations, caseCategory, header)) {
									isFileError = Boolean.TRUE;
								}
								
								//核檢刷卡機型
								edcTypeName = this.getCellFormatValue(row.getCell(19), null, true);
								if (StringUtils.hasText(edcTypeName) && StringUtils.hasText(caseHandleInfoDTO.getCustomerId())) {
									parameters = this.assetTypeDAO.listAssetByCustomerId(caseHandleInfoDTO.getCustomerId(), IAtomsConstants.ASSET_CATEGORY_EDC, true);
									if (!CollectionUtils.isEmpty(parameters)) {
										temp = this.getValueByName(parameters, edcTypeName);
										if (StringUtils.hasText(temp)) {
											caseHandleInfoDTO.setEdcType(temp);
											caseHandleInfoDTO.setEdcTypeName(edcTypeName);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EDC_TYPE)}, null));
											isFileError = Boolean.TRUE;
										}
									} else {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_MATCHING, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EDC_TYPE), edcTypeName,
														i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CUSTOMER_ID), customerName}, null));
										isFileError = Boolean.TRUE;
									}
								} else {
									if (!StringUtils.hasText(edcTypeName)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_EDC_TYPE)}, null));
										isFileError = Boolean.TRUE;
									}
								}
								//核檢軟體版本
								softwareVersionName = this.getCellFormatValue(row.getCell(20), null, true);
								LOGGER.debug("softwareVersionName ================> "+softwareVersionName);
								if (StringUtils.hasText(softwareVersionName) && StringUtils.hasText(caseHandleInfoDTO.getEdcType())) {
									//依據所選客戶以及刷卡機行獲取相應的軟件版本列表
									parameters = this.pvmApplicationDAO.listSoftwareVersionsBy(caseHandleInfoDTO.getCustomerId(), caseHandleInfoDTO.getEdcType(), IAtomsConstants.NO);
									temp = this.getValueByName(parameters, softwareVersionName);
									if (!StringUtils.hasText(temp)) {
										temp = this.getValueByLikeName(parameters, softwareVersionName);
									}
									if (!StringUtils.hasText(temp)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_SOFTWARE_VERSION)}, null));
										isFileError = Boolean.TRUE;
									} else {
										caseHandleInfoDTO.setSoftwareVersion(temp);
										caseHandleInfoDTO.setSoftwareVersionName(softwareVersionName);
									}
									temp = null;
								} else {
									if (!StringUtils.hasText(softwareVersionName)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_SOFTWARE_VERSION)}, null));
										isFileError = Boolean.TRUE;
									}
								}
								//核檢內建功能
								builtInFeatureName = this.getCellFormatValue(row.getCell(21), null, true);
								if (StringUtils.hasText(builtInFeatureName) && StringUtils.hasText(caseHandleInfoDTO.getEdcType())) {
									tempArray = builtInFeatureName.split(IAtomsConstants.MARK_SEPARATOR);
									tempBuffer = new StringBuffer();
									//獲取對應的內建功能
									parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(caseHandleInfoDTO.getEdcType());
									for (int j = 0; j< tempArray.length; j++) {
										temp = this.getValueByName(parameters, tempArray[j]);
										if (StringUtils.hasText(temp)) {
											tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
										} else {
											isFileError = Boolean.FALSE;
											isTemp = Boolean.TRUE;
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_BUILT_IN_FEATURE)}, null));
										}
									}
									if (!isTemp) {
										caseHandleInfoDTO.setBuiltInFeature(tempBuffer.substring(0, tempBuffer.length()-1));
										caseHandleInfoDTO.setBuiltInFeatureName(builtInFeatureName);
										isTemp = Boolean.FALSE;
									}
								}
								//核檢雙模組模式
								multiModuleName = this.getCellFormatValue(row.getCell(22), null, true);
								if (StringUtils.hasText(multiModuleName)) {
									temp = this.getValueByName(multiModules, multiModuleName);
									if (!StringUtils.hasText(temp)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MULTI_MODULE)}, null));
										isFileError = Boolean.TRUE;
									} else {
										caseHandleInfoDTO.setMultiModule(temp);
										caseHandleInfoDTO.setMultiModuleName(multiModuleName);
									}
									temp = null;
								}
								//核檢週邊設備1
								peripheralsName = this.getCellFormatValue(row.getCell(23), null, true);
								if (StringUtils.hasText(peripheralsName) && StringUtils.hasText(caseHandleInfoDTO.getCustomerId())) {
									temp = this.getValueByName(peripheralsList, peripheralsName);
									if (!StringUtils.hasText(temp)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS)}, null));
										isFileError = Boolean.TRUE;
									} else {
										caseHandleInfoDTO.setPeripherals(temp);
										caseHandleInfoDTO.setPeripheralsName(peripheralsName);
									}
									temp = null;
								}
								//核檢週邊設備功能1
								isError = Boolean.FALSE;
								peripheralsFunctionName = this.getCellFormatValue(row.getCell(24), null, true);
								if (StringUtils.hasText(peripheralsFunctionName) && StringUtils.hasText(caseHandleInfoDTO.getPeripherals())) {
									tempArray = peripheralsFunctionName.split(IAtomsConstants.MARK_SEPARATOR);
									tempBuffer = new StringBuffer();
									//獲取對應的周邊設備功能列表
									parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(caseHandleInfoDTO.getPeripherals());
									if(CollectionUtils.isEmpty(parameters)) {
										isTemp = Boolean.TRUE;
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION)}, null));
										isFileError = Boolean.TRUE;
									} else {
										for (int j = 0; j< tempArray.length; j++) {
											temp = this.getValueByName(parameters, tempArray[j]);
											if (StringUtils.hasText(temp)) {
												tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
											} else {
												isError = Boolean.TRUE;
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION)}, null));
												isFileError = Boolean.TRUE;
											}
										}
									}
									
									if (!isError) {
										caseHandleInfoDTO.setPeripheralsFunction(tempBuffer.substring(0, tempBuffer.length()-1));
										caseHandleInfoDTO.setPeripheralsFunctionName(peripheralsFunctionName);
									}
								}
								//核檢ECR連線
								ecrConnectionName = this.getCellFormatValue(row.getCell(25), null, true);
								if (StringUtils.hasText(ecrConnectionName)) {
									//獲取下拉列表數據
									parameters = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.ECR_LINE.getCode(), null);
									temp = this.getValueByName(parameters, ecrConnectionName);
									if (StringUtils.hasText(temp)) {
										caseHandleInfoDTO.setEcrConnection(temp);
										caseHandleInfoDTO.setEcrConnectionName(ecrConnectionName);
									} else {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ECR_CONNECTION)}, null));
										isFileError = Boolean.TRUE;
									}
								} else {
									caseHandleInfoDTO.setEcrConnection(IAtomsConstants.CASE_PARAM_NO_ECR_LINE);
									//caseHandleInfoDTO.setEcrConnectionName(ecrConnectionName);
									/*errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
											+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ECR_CONNECTION)}, null));
									isFileError = Boolean.TRUE;*/
								}
								//核檢週邊設備2
								peripherals2Name = this.getCellFormatValue(row.getCell(26), null, true);
								if (StringUtils.hasText(peripherals2Name) && StringUtils.hasText(caseHandleInfoDTO.getCustomerId())) {
									temp = this.getValueByName(peripheralsList, peripherals2Name);
									if (!StringUtils.hasText(temp)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS2)}, null));
										isFileError = Boolean.TRUE;
									} else {
										caseHandleInfoDTO.setPeripherals2(temp);
										caseHandleInfoDTO.setPeripherals2Name(peripherals2Name);
									}
									temp = null;
								}
								//核檢週邊設備功能2
								isTemp = Boolean.FALSE;
								peripheralsFunction2Name = this.getCellFormatValue(row.getCell(27), null, true);
								if (StringUtils.hasText(peripheralsFunction2Name) && StringUtils.hasText(caseHandleInfoDTO.getPeripherals2())) {
									tempArray = peripheralsFunction2Name.split(IAtomsConstants.MARK_SEPARATOR);
									tempBuffer = new StringBuffer();
									//獲取對應的周邊設備功能列表
									parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(caseHandleInfoDTO.getPeripherals2());
									if(CollectionUtils.isEmpty(parameters)) {
										isTemp = Boolean.TRUE;
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION2)}, null));
										isFileError = Boolean.TRUE;
									} else {
										for (int j = 0; j< tempArray.length; j++) {
											temp = this.getValueByName(parameters, tempArray[j]);
											if (StringUtils.hasText(temp)) {
												tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
											} else {
												isTemp = Boolean.TRUE;
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION2)}, null));
												isFileError = Boolean.TRUE;
											}
										}
									}
									if (!isTemp) {
										caseHandleInfoDTO.setPeripheralsFunction2(tempBuffer.substring(0, tempBuffer.length()-1));
										caseHandleInfoDTO.setPeripheralsFunction2Name(peripheralsFunction2Name);
									}
								}
								//核檢連接方式
								connectionTypeName = this.getCellFormatValue(row.getCell(28), null, true);
								if (StringUtils.hasText(connectionTypeName) && StringUtils.hasText(caseHandleInfoDTO.getEdcType())) {
									parameters = this.assetTypeDAO.listConnectionTypeByAssetTypeId(caseHandleInfoDTO.getEdcType());
									tempArray = connectionTypeName.split(IAtomsConstants.MARK_SEPARATOR);
									tempBuffer = new StringBuffer();
									for (String name : tempArray) {
										temp = this.getValueByName(parameters, name);
										if (StringUtils.hasText(temp)) {
											tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
										} else {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONNECTION_TYPE)}, null));
											isFileError = Boolean.TRUE;
											isTemp = Boolean.TRUE;
											break;
										}
									}
									if (!isTemp) {
										caseHandleInfoDTO.setConnectionType(tempBuffer.substring(0, tempBuffer.length()-1));
										caseHandleInfoDTO.setConnectionTypeName(connectionTypeName);
									}
								} else {
									if (!StringUtils.hasText(connectionTypeName)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONNECTION_TYPE)}, null));
										isFileError = Boolean.TRUE;
									}
								}
								//核檢週邊設備3
								peripherals3Name = this.getCellFormatValue(row.getCell(29), null, true);
								if (StringUtils.hasText(peripherals3Name) && StringUtils.hasText(caseHandleInfoDTO.getCustomerId())) {
									temp = this.getValueByName(peripheralsList, peripherals3Name);
									if (!StringUtils.hasText(temp)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS3)}, null));
										isFileError = Boolean.TRUE;
									} else {
										caseHandleInfoDTO.setPeripherals3(temp);
										caseHandleInfoDTO.setPeripherals3Name(peripherals3Name);
									}
									temp = null;
								}
								//核檢週邊設備功能3
								isTemp = Boolean.FALSE;
								peripheralsFunction3Name = this.getCellFormatValue(row.getCell(30), null, true);
								if (StringUtils.hasText(peripheralsFunction3Name) && StringUtils.hasText(caseHandleInfoDTO.getPeripherals3())) {
									tempArray = peripheralsFunction3Name.split(IAtomsConstants.MARK_SEPARATOR);
									tempBuffer = new StringBuffer();
									//獲取對應的周邊設備功能列表
									parameters = this.assetTypeDAO.listBuiltInFeatureByAssetTypeId(caseHandleInfoDTO.getPeripherals3());
									if(CollectionUtils.isEmpty(parameters)) {
										isTemp = Boolean.TRUE;
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION3)}, null));
										isFileError = Boolean.TRUE;
									} else {
										for (int j = 0; j< tempArray.length; j++) {
											temp = this.getValueByName(parameters, tempArray[j]);
											if (StringUtils.hasText(temp)) {
												tempBuffer.append(temp).append(IAtomsConstants.MARK_SEPARATOR);
											} else {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_PERIPHERALS_FUNCTION3)}, null));
												isFileError = Boolean.TRUE;
												isTemp = Boolean.TRUE;
												break;
											}
										}
									}
									if (!isTemp) {
										caseHandleInfoDTO.setPeripheralsFunction3(tempBuffer.substring(0, tempBuffer.length()-1));
										caseHandleInfoDTO.setPeripheralsFunction3Name(peripheralsFunction3Name);
									}
								}
								//核檢LOGO
								String logoStyle = this.getCellFormatValue(row.getCell(31), null, true);
								if (StringUtils.hasText(logoStyle)) {
									if (i18NUtil.getName(IAtomsConstants.PARAMTER_CASE_LOGO_ONLY_LOGO).equals(logoStyle)) {
										caseHandleInfoDTO.setLogoStyle(IAtomsConstants.PARAMTER_CASE_LOGO_ONLY_LOGO);
									} else if (i18NUtil.getName(IAtomsConstants.PARAMTER_CASE_LOGO_LOGO_AND_MERCHANT_HEADER).equals(logoStyle)) {
										caseHandleInfoDTO.setLogoStyle(IAtomsConstants.PARAMTER_CASE_LOGO_LOGO_AND_MERCHANT_HEADER);
									}  else if (i18NUtil.getName(IAtomsConstants.PARAMTER_CASE_LOGO_ONLY_MERCHANT_HEADER).equals(logoStyle)){
										caseHandleInfoDTO.setLogoStyle(IAtomsConstants.PARAMTER_CASE_LOGO_ONLY_MERCHANT_HEADER);
									} else {
										isFileError = Boolean.TRUE;
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_LOGO)}, null));
									}
								}
								//核檢是否開啟加密
								String isOpenEncrypt = this.getCellFormatValue(row.getCell(32), null, true);
								if (StringUtils.hasText(isOpenEncrypt)) {
									if (i18NUtil.getName(IAtomsConstants.YES).equals(isOpenEncrypt)) {
										caseHandleInfoDTO.setIsOpenEncrypt(IAtomsConstants.YES);
									} else if (i18NUtil.getName(IAtomsConstants.NO).equals(isOpenEncrypt)) {
										caseHandleInfoDTO.setIsOpenEncrypt(IAtomsConstants.NO);
									} else {
										isFileError = Boolean.TRUE;
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_OPEN_ENCRYPT)}, null));
									}
								}
								//核檢電子化繳費平台
								String electronicPayPlatform = this.getCellFormatValue(row.getCell(33), null, true);
								if (StringUtils.hasText(electronicPayPlatform)) {
									if (i18NUtil.getName(IAtomsConstants.YES).equals(electronicPayPlatform)) {
										caseHandleInfoDTO.setElectronicPayPlatform(IAtomsConstants.YES);
									} else if (i18NUtil.getName(IAtomsConstants.NO).equals(electronicPayPlatform)) {
										caseHandleInfoDTO.setElectronicPayPlatform(IAtomsConstants.NO);
									} else {
										isFileError = Boolean.TRUE;
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ELECTRONIC_PAY_PLATFORM)}, null));
									}
								}
								//核檢電子發票載具
								String electronicInvoice = this.getCellFormatValue(row.getCell(34), null, true);
								if (StringUtils.hasText(electronicInvoice)) {
									if (i18NUtil.getName(IAtomsConstants.YES).equals(electronicInvoice)){
										caseHandleInfoDTO.setElectronicInvoice(IAtomsConstants.YES);
									} else if (i18NUtil.getName(IAtomsConstants.NO).equals(electronicInvoice)){
										caseHandleInfoDTO.setElectronicInvoice(IAtomsConstants.NO);
									} else {
										isFileError = Boolean.TRUE;
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_ELECTRONIC_INVOICE)}, null));
									}
								}
								//核檢銀聯閃付
								String cupQuickPass = this.getCellFormatValue(row.getCell(35), null, true);
								if (StringUtils.hasText(cupQuickPass)) {
									if (i18NUtil.getName(IAtomsConstants.YES).equals(cupQuickPass)){
										caseHandleInfoDTO.setCupQuickPass(IAtomsConstants.YES);
									} else if (i18NUtil.getName(IAtomsConstants.NO).equals(cupQuickPass)){
										caseHandleInfoDTO.setCupQuickPass(IAtomsConstants.NO);
									} else {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_CUP_QUICK_PASS)}, null));
									}
								}
								//核檢本機ip
								localhostIp = this.getCellFormatValue(row.getCell(36), null, true);
								if (StringUtils.hasText(localhostIp)) {
									//核檢ip長度
									if (localhostIp.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_USER_LENGTH)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_LOCALHOST_IP), IAtomsConstants.CONTACT_USER_LENGTH}, null));
										isFileError = Boolean.TRUE;
									} else {
										caseHandleInfoDTO.setLocalhostIp(localhostIp);
									}
								}
								//核檢寬頻連線
								netVendorName = this.getCellFormatValue(row.getCell(37), null, true);
								if (StringUtils.hasText(netVendorName)) {
									temp = this.getValueByName(netVendorList, netVendorName);
									if (!StringUtils.hasText(temp)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_NET_VENDOR_ID)}, null));
										isFileError = Boolean.TRUE;
									} else {
										caseHandleInfoDTO.setNetVendorId(temp);
										caseHandleInfoDTO.setNetVendorName(netVendorName);
									}
								}
								//核檢Gateway
								gateway = this.getCellFormatValue(row.getCell(38), null, true);
								if (StringUtils.hasText(gateway)) {
									//核檢gateway長度
									if (gateway.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_USER_LENGTH)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_GATEWAY), IAtomsConstants.CONTACT_USER_LENGTH}, null));
										isFileError = Boolean.TRUE;
									} else {
										caseHandleInfoDTO.setGateway(gateway);
									}
								}
								//核檢Netmask
								netmask = this.getCellFormatValue(row.getCell(39), null, true);
								if (StringUtils.hasText(netmask)) {
									//核檢gateway長度
									if (netmask.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_USER_LENGTH)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_NETMASK), IAtomsConstants.CONTACT_USER_LENGTH}, null));
										isFileError = Boolean.TRUE;
									} else {
											caseHandleInfoDTO.setNetmask(netmask);
									}
								}
								//核檢其他說明
								description = this.getCellFormatValue(row.getCell(40), null, true);
								if (StringUtils.hasText(description)) {
									if (description.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DESCRIPTION), IAtomsConstants.MAXLENGTH_NUMBER_ONE_THOUSAND}, null));
										isFileError = Boolean.TRUE;
									} else {
										caseHandleInfoDTO.setDescription(description.replace("\n", "\r\n"));
									}
								}
								//核檢TMS
								isTms = this.getCellFormatValue(row.getCell(41), null, true);
								if (StringUtils.hasText(isTms)) {
									if (i18NUtil.getName(IAtomsConstants.NO).equals(isTms)) {
										caseHandleInfoDTO.setIsTms(IAtomsConstants.NO);
									} else if (i18NUtil.getName(IAtomsConstants.YES).equals(isTms)) {
										caseHandleInfoDTO.setIsTms(IAtomsConstants.YES);
									} else {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_TMS)}, null));
										isFileError = Boolean.TRUE;
									}
								}
								
								//核檢TMS參數說明
								tmsParamDesc = this.getCellFormatValue(row.getCell(42), null, true);
								if (StringUtils.hasText(tmsParamDesc)) {
									if (tmsParamDesc.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_TMS_PARAM_DESC)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_TMS_PARAM_DESC), IAtomsConstants.MAXLENGTH_TMS_PARAM_DESC}, null));
										isFileError = Boolean.TRUE;
									} else {
										caseHandleInfoDTO.setTmsParamDesc(tmsParamDesc.replace("\n", "\r\n"));
									}
								}
								//Receipt_type
								receiptType = this.getCellFormatValue(row.getCell(55), null, true);
								if (StringUtils.hasText(receiptType)) {
									temp = this.getValueByName(receiptTypes, receiptType);
									if (StringUtils.hasText(temp)) {
										caseHandleInfoDTO.setReceiptType(temp);
										caseHandleInfoDTO.setReceiptTypeName(receiptType);
									} else {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_RECEIPT_TYPE)}, null));
										isFileError = Boolean.TRUE;
									}
								} else {
									/*if (isGp) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_RECEIPT_TYPE)}, null));
										isFileError = Boolean.TRUE;
									}*/
								}
								//核檢案件有無對應之SLA資料
								//#3385 若裝機類型=微型商戶，則不查SLA資料
								if(!(IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(caseHandleInfoDTO.getInstallType()))){
									if (!isFileError) {
										contractSlaDTOList = this.contractSlaDAO.listBy(caseHandleInfoDTO.getCustomerId(), caseHandleInfoDTO.getContractId(), caseHandleInfoDTO.getArea(),
												caseCategory, caseType, null, null, null, null, false);
										if(CollectionUtils.isEmpty(contractSlaDTOList)){
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													.concat(i18NUtil.getName(IAtomsMessageCode.NO_SLA_FOR_CASE)));
											isFileError = Boolean.TRUE;
										} else {
											caseHandleInfoDTO.setContractSlaDTO(contractSlaDTOList.get(0));
										}
									}
								}
								String tempPeripheralsName = null;
								
								 //若週邊設備(1~3)選項重覆，錯誤訊息「週邊設備選項XXX已重覆」
								 
								// 如果周邊設備1存在 且與周邊設備2或者周邊設備3相同
								if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals()) && (caseHandleInfoDTO.getPeripherals().equals(caseHandleInfoDTO.getPeripherals2()) || caseHandleInfoDTO.getPeripherals().equals(caseHandleInfoDTO.getPeripherals3()))){
									tempPeripheralsName = caseHandleInfoDTO.getPeripheralsName();
									// 如果周邊設備2存在 且與周邊設備1或者周邊設備3相同
								} else if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals2()) && (caseHandleInfoDTO.getPeripherals2().equals(caseHandleInfoDTO.getPeripherals()) || caseHandleInfoDTO.getPeripherals2().equals(caseHandleInfoDTO.getPeripherals3()))){
									tempPeripheralsName = caseHandleInfoDTO.getPeripherals2Name();
									// 如果周邊設備3存在 且與周邊設備1或者周邊設備2相同
								} else if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals3()) && (caseHandleInfoDTO.getPeripherals3().equals(caseHandleInfoDTO.getPeripherals()) || caseHandleInfoDTO.getPeripherals3().equals(caseHandleInfoDTO.getPeripherals2()))){
									tempPeripheralsName = caseHandleInfoDTO.getPeripherals3Name();
								}
								// 符合上面三種情況的任意一種
								if(StringUtils.hasText(tempPeripheralsName)){
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
											.concat(i18NUtil.getName(IAtomsMessageCode.PERIPHERALS_IS_REPEAT, new String[]{i18NUtil.getName(tempPeripheralsName)}, null)));
									isFileError = Boolean.TRUE;
								}
								
								//若設備內建功能與週邊設備功能重覆，錯誤訊息「設備功能XXX已重覆」
								 
								if(StringUtils.hasText(caseHandleInfoDTO.getCustomerId()) && 
										(StringUtils.hasText(caseHandleInfoDTO.getBuiltInFeature()) 
												|| StringUtils.hasText(caseHandleInfoDTO.getPeripheralsFunction()) 
												|| StringUtils.hasText(caseHandleInfoDTO.getPeripheralsFunction2()) 
												|| StringUtils.hasText(caseHandleInfoDTO.getPeripheralsFunction3()))){
									MultiParameterInquiryContext param = new MultiParameterInquiryContext();
									param.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION.getValue(), caseHandleInfoDTO.getPeripheralsFunction());
									param.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION2.getValue(), caseHandleInfoDTO.getPeripheralsFunction2());
									param.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION3.getValue(), caseHandleInfoDTO.getPeripheralsFunction3());
									param.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.BUILT_IN_FEATURE.getValue(), caseHandleInfoDTO.getBuiltInFeature());
									String repeatSupportFun = getRepeatSupportFun(param);
									if(StringUtils.hasText(repeatSupportFun)){
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.PERIPHERALS_IS_REPEAT, new String[]{repeatSupportFun}, null));
										isFileError = Boolean.TRUE;
									}
								}
								if (StringUtils.hasText(caseHandleInfoDTO.getCustomerId()) && StringUtils.hasText(caseHandleInfoDTO.getEdcType())) {
									//如果couldUseDtidNum包含該客戶+EDC
									if (couldUseDtidNum.containsKey(caseHandleInfoDTO.getCustomerId() + IAtomsConstants.MARK_MIDDLE_LINE + caseHandleInfoDTO.getEdcType())) {
										Integer dtidNumber = couldUseDtidNum.get(caseHandleInfoDTO.getCustomerId() + IAtomsConstants.MARK_MIDDLE_LINE + caseHandleInfoDTO.getEdcType());
										if (dtidNumber > 0) {
											couldUseDtidNum.put(caseHandleInfoDTO.getCustomerId() + IAtomsConstants.MARK_MIDDLE_LINE + caseHandleInfoDTO.getEdcType(), dtidNumber - 1);
										} else { 
											if (dtidNumber != -1) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.NO_DITD_FOR_CUSTOMER_AND_TYPE, new String[]{customerName, edcTypeName}, null));
												isFileError = Boolean.TRUE;
											}
										}
									} else {
										MultiParameterInquiryContext inquiryContext = new MultiParameterInquiryContext();
										inquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CUSTOMER_ID.getValue(), caseHandleInfoDTO.getCustomerId());
										inquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.EDC_TYPE.getValue(), caseHandleInfoDTO.getEdcType());
										inquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_NUMBER.getValue(), null);
										Map<String, Object> hasDtid = this.checkDtidNumber(inquiryContext);
										if (!(Boolean) hasDtid.get(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
													+ i18NUtil.getName(IAtomsMessageCode.NO_DITD_FOR_CUSTOMER_AND_TYPE, new String[]{customerName, edcTypeName}, null));
											isFileError = Boolean.TRUE;
										} else {
											Integer number = getDtidUseNumber(caseHandleInfoDTO.getCustomerId(), caseHandleInfoDTO.getEdcType());
											if (number == 0) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.NO_DITD_FOR_CUSTOMER_AND_TYPE, new String[]{customerName, edcTypeName}, null));
												isFileError = Boolean.TRUE;
											} else {
												if (number != -1) {
													number -= 1;
												}
											}
											couldUseDtidNum.put(caseHandleInfoDTO.getCustomerId() + IAtomsConstants.MARK_MIDDLE_LINE + caseHandleInfoDTO.getEdcType(), number);
										}
									}
								}
								//isFileError = Boolean.FALSE;
								//errorRow = errorMsgs.size();
								isError = this.checkUploadTrans(srmCaseTransactionParameterDTOs, caseHandleInfoDTO, transErrors, caseTransactionParameterDTOs, i + 1, caseCategory, transactionParameterItemList);
								if (!isError && !CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)) {
									boolean isCup = Boolean.FALSE;
									boolean isSmartpay = Boolean.FALSE;
									caseHandleInfoDTO.setCaseTransactionParameterDTOs(srmCaseTransactionParameterDTOs);
									//核檢交易參數是否選取了未選取CUP或Smartpay交易類別
									Boolean isCupAndSmartpayFlag = Boolean.FALSE;
									Boolean isCommonFlag = Boolean.FALSE;
									for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
										if(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VM.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
											|| IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJ.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
											|| IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJU.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
											|| IAtomsConstants.TRANSACTION_CATEGORY.CONSTRUCTION_COMPANY.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
											isCommonFlag = Boolean.TRUE;
										}
										/*if (IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
												|| IAtomsConstants.TRANSACTION_CATEGORY.SMART_PAY.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())) {
											isCupAndSmartpayFlag = Boolean.TRUE;
											if (IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())) {
												isCup = Boolean.TRUE;
											}
										}*/
										if (IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())) {
											isCup = Boolean.TRUE;
										}
										if (IAtomsConstants.TRANSACTION_CATEGORY.SMART_PAY.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())) {
											isSmartpay = Boolean.TRUE;
										}
									}
									if (isSmartpay || isCup) {
										isCupAndSmartpayFlag = Boolean.TRUE;
									}
									if(!isCommonFlag){
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_COMMON_TRANS_ERROR));
										isError = Boolean.TRUE;
									}
									
									//未選取CUP或Smartpay交易類別，不可選取Pinpad設備及功能
									
									if (StringUtils.hasText(caseHandleInfoDTO.getCustomerId())) {
										if((StringUtils.hasText(caseHandleInfoDTO.getBuiltInFeature()) && caseHandleInfoDTO.getBuiltInFeature().contains(IAtomsConstants.SUPPORTED_FUNCTION_PINPAD)) 
												|| (StringUtils.hasText(caseHandleInfoDTO.getPeripheralsFunction()) && caseHandleInfoDTO.getPeripheralsFunction().contains(IAtomsConstants.SUPPORTED_FUNCTION_PINPAD))
												|| (StringUtils.hasText(caseHandleInfoDTO.getPeripheralsFunction2()) && caseHandleInfoDTO.getPeripheralsFunction2().contains(IAtomsConstants.SUPPORTED_FUNCTION_PINPAD))
												|| (StringUtils.hasText(caseHandleInfoDTO.getPeripheralsFunction3()) && caseHandleInfoDTO.getPeripheralsFunction3().contains(IAtomsConstants.SUPPORTED_FUNCTION_PINPAD)) ){
											if(!isCupAndSmartpayFlag){
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.NO_CUP_OR_SMARTPAY_TRANS_TYPE));
												isFileError = Boolean.TRUE;
											}
										} else {
											
											 // 選取CUP或Smartpay交易類別，要選取Pinpad設備及功能
											 
											if(isCupAndSmartpayFlag){
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.NEED_PINPAD_ASSET_FUNCTION));
												isFileError = Boolean.TRUE;
											}
										}
									}
									
									if (StringUtils.hasText(caseHandleInfoDTO.getCustomerId())) {
										//獲取當前客戶code
										BimCompany company = this.companyDAO.findByPrimaryKey(BimCompany.class, caseHandleInfoDTO.getCustomerId());
										String companyCode = company.getCompanyCode();
										boolean isDongle = Boolean.FALSE;
										//Task #3524(客戶=陽信、上銀、彰銀)
										if (IAtomsConstants.PARAMTER_COMPANY_CODE_SYB.equals(companyCode)
												|| IAtomsConstants.PARAMTER_COMPANY_CODE_SCSB.equals(companyCode)
												|| IAtomsConstants.PARAMTER_COMPANY_CODE_CHB.equals(companyCode)) {
											if((StringUtils.hasText(caseHandleInfoDTO.getBuiltInFeature()) && caseHandleInfoDTO.getBuiltInFeature().contains(IAtomsConstants.SUPPORTED_FUNCTION_DONGLE)) 
													|| (StringUtils.hasText(caseHandleInfoDTO.getPeripheralsFunction()) && caseHandleInfoDTO.getPeripheralsFunction().contains(IAtomsConstants.SUPPORTED_FUNCTION_DONGLE))
													|| (StringUtils.hasText(caseHandleInfoDTO.getPeripheralsFunction2()) && caseHandleInfoDTO.getPeripheralsFunction2().contains(IAtomsConstants.SUPPORTED_FUNCTION_DONGLE))
													|| (StringUtils.hasText(caseHandleInfoDTO.getPeripheralsFunction3()) && caseHandleInfoDTO.getPeripheralsFunction3().contains(IAtomsConstants.SUPPORTED_FUNCTION_DONGLE)) ){
												isDongle = Boolean.TRUE;
											}
											if (!isCup || (isCup && !isDongle)) {
												if (!IAtomsConstants.NO.equals(caseHandleInfoDTO.getCupQuickPass())) {
													//陽信銀行、上海商銀、彰化銀行，「交易類別無CUP」或「交易類別有CUP但內建功能或週邊功能無Dongle」，銀聯閃付需為”否”
													errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
															+ i18NUtil.getName(IAtomsMessageCode.PARAM_NO_CUP_AND_DONGLE));
													isFileError = Boolean.TRUE;
												}
											}
										}
										//Task #3525(客戶=陽信、彰銀)
										if (IAtomsConstants.PARAMTER_COMPANY_CODE_SYB.equals(companyCode) || IAtomsConstants.PARAMTER_COMPANY_CODE_CHB.equals(companyCode)) {
											//若「交易類別有CUP」時，是否開啟加密需為”是”
											if (isCup && !IAtomsConstants.YES.equals(caseHandleInfoDTO.getIsOpenEncrypt())) {
												//陽信銀行、彰化銀行，交易有CUP，是否開啟加密需為”是”
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.PARAM_CUP_AND_OPEN_ENCRYPT));
												isFileError = Boolean.TRUE;
											}
											boolean isReturnAndSmartPay = Boolean.FALSE;
											for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
												if (IAtomsConstants.TRANSACTION_CATEGORY.SMART_PAY.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())) {
													String itemValue = srmCaseTransactionParameterDTO.getItemValue();
													if (StringUtils.hasText(itemValue)) {
														Gson gson = new GsonBuilder().create();
														// 合約中的設備列表轉為LIST
														Map<String, String> tempValues = gson.fromJson(itemValue, new TypeToken<Map<String, String>>(){}.getType());
														for(String value : tempValues.keySet()){
												            if (IAtomsConstants.PARAMETER_ITEM_RETURN_TRANSACTION.equals(value) && IAtomsConstants.MARK_V.equals(tempValues.get(value))) {
												            	isReturnAndSmartPay = Boolean.TRUE;
												            	break;
												            }
														}
													}
												}
											}
											//若「交易類別有Smartpay且項目有退貨交易」時，是否開啟加密需為”是”
											if (isSmartpay && isReturnAndSmartPay 
													&& !IAtomsConstants.YES.equals(caseHandleInfoDTO.getIsOpenEncrypt())) {
												//陽信銀行、彰化銀行，交易有Smartpay退貨，是否開啟加密需為”是”
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.PARAM_SMARTPAY_AND_OPEN_ENCRYPT));
												isFileError = Boolean.TRUE;
											}
											//若「交易類別無CUP」及「無Smartpay退貨交易」時，是否開啟加密需為”否”
											if (!isCup && (!isSmartpay || (isSmartpay && !isReturnAndSmartPay))
													&& !IAtomsConstants.NO.equals(caseHandleInfoDTO.getIsOpenEncrypt())) {
												//陽信銀行、彰化銀行，無CUP與無Smartpay退貨，是否開啟加密需為”否”
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.PARAM_SMARTPAY_AND_CUP_OPEN_ENCRYPT));
												isFileError = Boolean.TRUE;
											}
										}
										//Task #3523(客戶=陽信、上銀)
										if (IAtomsConstants.PARAMTER_COMPANY_CODE_SYB.equals(companyCode) || IAtomsConstants.PARAMTER_COMPANY_CODE_SCSB.equals(companyCode)) {
											//一般交易(VM、VMJ、VMJU)類別之JCB(免簽)$700項目不可以勾選
											for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
												if (IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VM.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
														|| IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJ.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
														|| IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJU.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())) {
													String itemValue = srmCaseTransactionParameterDTO.getItemValue();
													if (StringUtils.hasText(itemValue)) {
														Gson gson = new GsonBuilder().create();
														// 合約中的設備列表轉為LIST
														Map<String, String> tempValues = gson.fromJson(itemValue, new TypeToken<Map<String, String>>(){}.getType());
														for(String value : tempValues.keySet()){
												            if (IAtomsConstants.PARAMETER_ITEM_JCB.equals(value) && IAtomsConstants.MARK_V.equals(tempValues.get(value))) {
												            	//陽信銀行、上海商銀，選取一般交易類別，JCB$700項目不可以勾選
												            	errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
																		+ i18NUtil.getName(IAtomsMessageCode.PARAM_COMMON_AND_JCB));
												            	isFileError = Boolean.TRUE;
												            	break;
												            }
														}
													}
												}
											}
										}
										//Task #3522(客戶=陽信)
										if (IAtomsConstants.PARAMTER_COMPANY_CODE_SYB.equals(companyCode) && isSmartpay) {
											boolean isTsam = Boolean.FALSE;
											if((StringUtils.hasText(caseHandleInfoDTO.getPeripherals()) && caseHandleInfoDTO.getPeripheralsName().equals("T-SAM卡"))
													|| (StringUtils.hasText(caseHandleInfoDTO.getPeripherals2()) && caseHandleInfoDTO.getPeripherals2Name().equals("T-SAM卡"))
													|| (StringUtils.hasText(caseHandleInfoDTO.getPeripherals3()) && caseHandleInfoDTO.getPeripherals3Name().equals("T-SAM卡")) ){
												isTsam = Boolean.TRUE;
											}
											if (isSmartpay && !isTsam) {
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
														+ i18NUtil.getName(IAtomsMessageCode.PARAM_PERIPHERALS_AND_T_SAM));
								            	isFileError = Boolean.TRUE;
											}
										}
										//Task #3571
										if (isGp) {
											isTemp = this.checkGpCusInfo(caseHandleInfoDTO, caseTransactionParameterDTOs, i + 1, errorMsgs);
											if (isTemp) {
												isFileError = Boolean.TRUE;
											}
										}
									}
								}
								if (isFileError) {
									errorMsgs.add(errorRow, i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_CASE_NO_ERROR_MSG, new String[]{caseNo}, null));
									isFileError = Boolean.FALSE;
									errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
								}
								if (isError) {
									for (String string : transErrors) {
										errorMsgs.add(string);
									}
									errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
								}
								caseHandleInfoDTO.setAttendanceTimes(Integer.valueOf(0));
								caseHandleInfoDTO.setCaseCategory(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode());
								srmCaseHandleInfoDTOs.add(caseHandleInfoDTO);
							} else {
								errorMsgs.add(errorRow, i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_CASE_NO_ERROR_MSG, new String[]{""}, null));
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
										+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_NO)}, null));
								errorMsgs.add(IAtomsConstants.MARK_EMPTY_STRING);
							}
						}
						for (int i = 0; i<caseTransactionParameterDTOs.size(); i++) {
							if (!repeatDtid.containsKey(caseTransactionParameterDTOs.get(i).getCaseNo())) {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_PARAMETER_UPLOAD_NO_CASE_INFO, new String[]{String.valueOf(i + 2)}, null));
							}
						}
					}
				}
			}
			LOGGER.debug("END---->"+DateTimeUtils.getCurrentTimestamp());
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".init(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.INIT_PAGE_FAILURE);
		}
		return message;
	}
	/**
	 * Purpose:案件匯入-裝機件客戶爲環匯時。核檢邏輯
	 * @author CarrieDuan
	 * @param caseHandleInfoDTO
	 * @return
	 * @return String
	 */
	private boolean checkGpCusInfo (SrmCaseHandleInfoDTO caseHandleInfoDTO, List<SrmCaseTransactionParameterDTO> caseTransactionParameterDTOs, int rowCell, List<String> errorMsgs) {
		String message = null;
		Boolean isError = false;
		try {
			if (caseHandleInfoDTO != null) {
				message = this.getCheckGpCusInfoResult(caseHandleInfoDTO, caseTransactionParameterDTOs, Boolean.TRUE);
				if (message != null && message.length() > 0) {
					List<String> msg = StringUtils.toList(message, IAtomsConstants.MARK_SEMICOLON);
					for (String info : msg) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(rowCell)}, null)
								+ i18NUtil.getName(info));
						isError = true;
					}
				}
			}
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".checkGpCusInfo(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED);
		}
		return isError;
	}
	/**
	 * Purpose: 保存匯入錯誤文件信息
	 * @author CarrieDuan
	 * @param errorMsgs：錯誤信息
	 * @return Map：錯誤文件信息
	 */
	private Map saveErrorMsg(List<String> errorMsgs) {
		PrintWriter printWriter = null;
		String fileName = null; 
		Map map = new HashMap();
		try {
			if (!CollectionUtils.isEmpty(errorMsgs)) {
				StringBuffer stringBuffer = new StringBuffer();
				stringBuffer.append(i18NUtil.getName(IAtomsMessageCode.PARAM_ERROR_INFORMATION) + IAtomsConstants.MARK_ENTER);
				for (String errorMsg : errorMsgs) {
					stringBuffer.append(errorMsg + IAtomsConstants.MARK_ENTER);
				}
				//文件路徑
				String yearMonthDay = DateTimeUtils.toString(DateTimeUtils.getCurrentDate(),  DateTimeUtils.DT_FMT_YYYYMMDD);
				StringBuilder filePathBuilder = new StringBuilder();
				filePathBuilder.append(SystemConfigManager.getProperty(IAtomsConstants.FILE_PATH, IAtomsConstants.FILE_TEMP_PATH));
				filePathBuilder.append(File.separator).append(yearMonthDay);
				filePathBuilder.append(File.separator).append(IAtomsConstants.UC_NO_SRM_05020);
				filePathBuilder.append(File.separator).append(IAtomsConstants.PARAM_STRING_IMPORT);
				String errorFilePath = filePathBuilder.toString();
				/*String errorFilePath = SystemConfigManager.getProperty(IAtomsConstants.FILE_PATH, IAtomsConstants.FILE_TEMP_PATH)
						+ File.separator + yearMonthDay + File.separator + IAtomsConstants.UC_NO_DMM_03030 + File.separator + IAtomsConstants.PARAM_STRING_IMPORT;*/
				fileName = UUID.randomUUID().toString() + IAtomsConstants.MARK_NO + IAtomsConstants.PARAM_FILE_SUFFIX_TXT;
				//錯誤信息文件名
				File filePath = new File(errorFilePath);
				if (!filePath.exists() || !filePath.isDirectory()) {
					filePath.mkdirs();
				}
				File saveFile = new File(filePath, fileName);
				printWriter = new PrintWriter(saveFile, IAtomsConstants.ENCODE_UTF_8);
				printWriter.print(stringBuffer.toString());
				map.put(CaseManagerFormDTO.ERROR_FILE_PATH, errorFilePath);
				map.put(CaseManagerFormDTO.ERROR_FILE_NAME, fileName);
			}
		} catch (Exception e) {
			LOGGER.error("saveEorrorMsg() Error -->", e);
		} finally {
			if (printWriter != null) {
				printWriter.close();
			}
		}
		return  map;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getProblemSolutionList(cafe.core.context.SessionContext)
	 */
	@Override
	public List<Parameter> getProblemSolutionList(MultiParameterInquiryContext inquiryContext) throws ServiceException {
		try {
			boolean isTsbEdc = (Boolean) inquiryContext.getParameter(CaseManagerFormDTO.CUSTOMER_IS_TSB_EDC);
			return this.srmCaseHandleInfoDAO.getProblemSolutionList(isTsbEdc);
		} catch (DataAccessException e) {
			LOGGER.error("getProblemSolutionList()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("getProblemSolutionList()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
	}
	/**
	 * Purpose:通过name值得到value值，若得不到給出錯誤信息
	 * @author CrissZhang
	 * @param parameterList:下拉框列表
	 * @param name ：name值
	 * @return String
	 */
	private String getValueByName(List<Parameter> parameterList, String name){
		String value = null;
		if (CollectionUtils.isEmpty(parameterList)) {
			return null;
		}
		// 错误信息
		for (Parameter param : parameterList){
			if((param.getName()).equals(name)){
				value = (String) param.getValue();
				break;
			}
		}
		return value;
	}
	
	private String getValueByLikeName(List<Parameter> parameterList, String name){
		String value = null;
		if (CollectionUtils.isEmpty(parameterList)) {
			return null;
		}
		// 错误信息
		for (Parameter param : parameterList){
			if((param.getName()).indexOf(name) > 0){
				value = (String) param.getValue();
				break;
			}
		}
		return value;
	}
	
	/**
	 * Purpose:獲取excel表格真實行數
	 * @author CrissZhang
	 * @param sheet ： 傳入參數sheet
	 * @return int : 返回行數
	 */
	private int getExcelRealRowCount(Sheet sheet) {
		int rowCount = 0;
		if(sheet != null){
			int beginRow = sheet.getFirstRowNum();  
		    int endRow = sheet.getLastRowNum();  
		    int beginCell = 0;
		    int endCell = 0;
		    Row tempRow = null;
		    Boolean emptyRow = false;
		    for (int i = beginRow; i <= endRow; i++) {  
		    	tempRow = sheet.getRow(i);
		    	emptyRow = false;
		    	if(tempRow != null){
		    		beginCell = tempRow.getFirstCellNum();
			    	endCell = tempRow.getLastCellNum();
			    	for(int j = beginCell; j <= endCell; j++){
				        if (!StringUtils.hasText(this.getCellFormatValue(tempRow.getCell(j), null, false))) {  
				            continue;  
				        } else {
				        	emptyRow = true;
				        	break;
				        }
			    	}
			    	if(emptyRow){
			    		rowCount ++;
			    	} else {
			    		break;
			    	}
		    	}
		    }  
		}
		return rowCount;
	}
	
	/**
	 * Purpose:判斷Row是否為空
	 * @author CrissZhang
	 * @return Boolean
	 */
	private Boolean isRowEmpty(Row row){
		Boolean flag = true;
		if(row != null){
		  int beginCell = row.getFirstCellNum();
		  int endCell = row.getLastCellNum();
		  for(int i = beginCell; i <= endCell; i++){
		        if (!StringUtils.hasText(this.getCellFormatValue(row.getCell(i), null, false))) {  
		            continue;  
		        } else {
		        	flag = false;
		        	break;
		        }
	    	}
		} 
		return flag;
	}
	
	/**
	 * Purpose:依據Cell類型獲取數據
	 * @param cell:取得Excel cell單元值
	 * @param getTime 日期格式
	 * @return String:单元格数据内容
	 */
	private String getCellFormatValue(Cell cell, String getTime, Boolean isString) {
	    String cellvalue = IAtomsConstants.MARK_EMPTY_STRING;
	    if (cell != null) {
	    	if (isString) {
	    		cell.setCellType(HSSFCell.CELL_TYPE_STRING);
	    	}
	        // 判断当前Cell的Type
	        switch (cell.getCellType()) {
	            // 如果当前Cell的Type为NUMERIC
	            case Cell.CELL_TYPE_NUMERIC:
	            case Cell.CELL_TYPE_FORMULA: {
	                // 判断当前的cell是否为Date
	                if (DateUtil.isCellDateFormatted(cell)) {
	                	SimpleDateFormat sdf = null;
	                	Date date = cell.getDateCellValue();
	                	if (StringUtils.hasText(getTime)) {
	                		sdf = new SimpleDateFormat(getTime);
	                	} else {
	                		sdf = new SimpleDateFormat("yyyy-MM-dd");
	                	}
	                    cellvalue = sdf.format(date);
	                }else {
	                    // 取得当前Cell的数值
	                    cellvalue = String.valueOf((((Double)cell.getNumericCellValue())));
	                    if (StringUtils.hasText(cellvalue)) {
	                    	String[] cellValues = cellvalue.split("\\.");
	                    	if (IAtomsConstants.LEAVE_CASE_STATUS_ZERO.equals(cellValues[1])) {
	                    		cellvalue = cellValues[0];
	                    	}
	                    }
	                }
	                break;
	            }
	            case Cell.CELL_TYPE_STRING:
	                cellvalue = cell.getRichStringCellValue().getString();
	                break;
	            case Cell.CELL_TYPE_BOOLEAN:
	            	cellvalue = String.valueOf(cell.getBooleanCellValue());
	    		    break;
	    		case Cell.CELL_TYPE_BLANK:
	    			cellvalue = IAtomsConstants.MARK_EMPTY_STRING;
	    		    break;
	            default:
	                cellvalue = " ";
	        }
	    } else {
	        cellvalue = IAtomsConstants.MARK_EMPTY_STRING;
	    }
	    return cellvalue.trim();
	}
	
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#closed(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext closed(SessionContext sessionContext)
			throws ServiceException {
		Message msg = null;
		// 主鍵id
		String transactionId = null;
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		//動作
		SrmCaseHandleInfo srmCaseHandleInfo = null;
		SrmCaseTransaction srmCaseTransaction = null;
		// 描述說明 -- 輸入的文字 + 問題原因 + 解決方式 + 責任歸屬
		String description = null;
		List<String> caseIdLists = new ArrayList<String>();
		// 問題原因code
		String problemReasonCode = null;
		String problemReason = null;
		// 問題解決方式code
		String problemSolutionCode = null;
		String problemSolution = null;
		String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
		try {
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			Transformer transformer = new SimpleDtoDmoTransformer();
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				if(StringUtils.hasText(formDTO.getCaseId())){
					// 得到案件處理集合
					List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId(), null);
					if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
						//要進行刪除操作的caseId組成的字符串
						String caseIds= IAtomsConstants.MARK_EMPTY_STRING;
						
						SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = null;
						for (int i = 0; i < srmCaseHandleInfoDTOs.size(); i++) {
							srmCaseHandleInfoDTO = srmCaseHandleInfoDTOs.get(i);
							caseIds += IAtomsConstants.SINGLE_QUOTATION_MARKS + srmCaseHandleInfoDTO.getCaseId() 
									+ IAtomsConstants.SINGLE_QUOTATION_MARKS + IAtomsConstants.MARK_SEPARATOR;
							//若此次循環為最後一次循環則將caseIds最後的一位逗號截取
							if (i == srmCaseHandleInfoDTOs.size() - 1) {
								caseIds = caseIds.substring(0, caseIds.length() - 1);
							}
							//將caseId添加到要進入流程的案件編號集合中
							caseIdLists.add(srmCaseHandleInfoDTO.getCaseId());
							srmCaseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
							//案件狀態更新為結案，實際執行時間為該案件的結案時間
							srmCaseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.CLOSED.getCode());
							// 問題原因code
							if(StringUtils.hasText(srmCaseTransactionDTO.getProblemReason())){
								if(srmCaseTransactionDTO.getProblemReason().indexOf(IAtomsConstants.MARK_MIDDLE_LINE) > 0){
									problemReasonCode = srmCaseTransactionDTO.getProblemReason().substring(0, srmCaseTransactionDTO.getProblemReason().indexOf(IAtomsConstants.MARK_MIDDLE_LINE));
									problemReason = srmCaseTransactionDTO.getProblemReason().replace(problemReasonCode + IAtomsConstants.MARK_MIDDLE_LINE, IAtomsConstants.MARK_EMPTY_STRING);
								}
							}
							// 問題解決方式code
							if(StringUtils.hasText(srmCaseTransactionDTO.getProblemSolution())){
								if(srmCaseTransactionDTO.getProblemSolution().indexOf(IAtomsConstants.MARK_MIDDLE_LINE) > 0){
									problemSolutionCode = srmCaseTransactionDTO.getProblemSolution().substring(0, srmCaseTransactionDTO.getProblemSolution().indexOf(IAtomsConstants.MARK_MIDDLE_LINE));
									problemSolution = srmCaseTransactionDTO.getProblemSolution().replace(problemSolutionCode + IAtomsConstants.MARK_MIDDLE_LINE, IAtomsConstants.MARK_EMPTY_STRING);
								}
							}
							srmCaseHandleInfo.setProblemReason(problemReason);
							srmCaseHandleInfo.setProblemReasonCode(problemReasonCode);
							srmCaseHandleInfo.setProblemSolution(problemSolution);
							srmCaseHandleInfo.setProblemSolutionCode(problemSolutionCode);
							srmCaseHandleInfo.setResponsibity(srmCaseTransactionDTO.getResponsibity());
							srmCaseHandleInfo.setCloseUser(logonUser.getId());
							srmCaseHandleInfo.setCloseUserName(logonUser.getName());
							if(srmCaseTransactionDTO.getDealDate() == null){
								srmCaseHandleInfo.setCloseDate(DateTimeUtils.getCurrentTimestamp());
							} else {
								srmCaseHandleInfo.setCloseDate(srmCaseTransactionDTO.getDealDate());
							}
							srmCaseHandleInfo.setUpdatedById(logonUser.getId());
							srmCaseHandleInfo.setUpdatedByName(logonUser.getName());
							srmCaseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							//清空目前處理人信息
							/*srmCaseHandleInfo.setDispatchProcessUser(null);
							srmCaseHandleInfo.setDispatchProcessUsername(null);*/
							
							//生成id
							transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
							srmCaseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
							
							if(!StringUtils.hasText(caseTransactionId)) {
								caseTransactionId = transactionId;
							} else {
								caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + transactionId;
							}
							formDTO.setCaseTransactionId(caseTransactionId);
							
							// 主鍵
							srmCaseTransaction.setTransactionId(transactionId);
							srmCaseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
							// 放置執行動作
							srmCaseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
							// 放置案件狀態
							srmCaseTransaction.setCaseStatus(srmCaseTransactionDTO.getCaseStatus());
							// 實際執行時間處理
							if(srmCaseTransactionDTO.getDealDate() == null){
								srmCaseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
							} else {
								srmCaseTransaction.setDealDate(srmCaseTransactionDTO.getDealDate());
							}
							//問題原因
							srmCaseTransaction.setProblemReason(problemReason);
							//解決方式
							srmCaseTransaction.setProblemSolution(problemSolution);
							//責任歸屬
							srmCaseTransaction.setResponsibity(srmCaseTransactionDTO.getResponsibity());
							//拼接沒有輸入處理說明的描述
							StringBuffer stringBuffer = new StringBuffer();
							//Task #2401 update by 2017/09/13
							stringBuffer.append(i18NUtil.getName(IAtomsMessageCode.CASE_PROBLEM_REASON)).append(srmCaseTransactionDTO.getProblemReasonName()).append(IAtomsConstants.MARK_SEMICOLON).append(IAtomsConstants.MARK_WRAP);
							stringBuffer.append(i18NUtil.getName(IAtomsMessageCode.CASE_PROBLEM_SOLUTION)).append(srmCaseTransactionDTO.getProblemSolutionName()).append(IAtomsConstants.MARK_SEMICOLON).append(IAtomsConstants.MARK_WRAP)
								.append(i18NUtil.getName(IAtomsMessageCode.CASE_RESPONSIBITY)).append(srmCaseTransactionDTO.getResponsibityName());
							//沒有輸入的處理說明的描述
							String hasDescription = stringBuffer.toString();
							//判斷案件類型，案件類型為“報修”時才存在問題原因等
							if (IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(srmCaseHandleInfo.getCaseCategory())) {
								//若有輸入的處理說明則將處理說明和問題原因等拼接起來，否則只保存處理說明
								if (StringUtils.hasText(srmCaseTransactionDTO.getDescription())) {
									//Task #2401 update by 2017/09/12
									description = srmCaseTransactionDTO.getDescription() + IAtomsConstants.MARK_SEMICOLON + IAtomsConstants.MARK_WRAP + hasDescription;
								} else {
									description = hasDescription;
								}
							} else {
								description = srmCaseTransactionDTO.getDescription();
							}
							// 描述處理
							srmCaseTransaction.setDescription(description);
							
							//CR #2869 新增三個欄位 2017/11/22
							srmCaseHandleInfo.setThirdDescription(srmCaseHandleInfo.getSecondDescription());
							srmCaseHandleInfo.setSecondDescription(srmCaseHandleInfo.getFirstDescription());
							srmCaseHandleInfo.setFirstDescription(srmCaseTransaction.getDescription());
							this.srmCaseHandleInfoDAO.update(srmCaseHandleInfo);
							
							//當前關卡
							srmCaseTransaction.setCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_CLOSE);
							//當前關卡名稱
							srmCaseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode()));
							//下一關關卡代碼
							srmCaseTransaction.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_CASE_PROCESS_END);
							//下一關關卡名稱
							srmCaseTransaction.setNextCaseStageName(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_NAME_END);
							srmCaseTransaction.setCreatedById(logonUser.getId());
							srmCaseTransaction.setCreatedByName(logonUser.getName());
							srmCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							this.srmCaseTransactionDAO.insert(srmCaseTransaction);
							if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(srmCaseHandleInfo.getCaseCategory())) {
								//結案--複製數據到歷史和最新模塊,刪除處理中的所有信息 // Task #2682 結案時不複製最新資料當因線上排除與簽收已複製
								this.srmCaseHandleInfoDAO.copyToHis(srmCaseHandleInfo.getCaseId(), srmCaseHandleInfo.getDtid(), IAtomsConstants.YES, IAtomsConstants.YES);
							}
						}
						formDTO.setCaseIds(caseIdLists);
						//送至下一關
						this.sendNextActiviti(logonUser, formDTO, IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_CLOSE, null);
						//調用CaseDetailDao的放法刪除CAFE_CASE_DETAIL和CAFE_CASE_TRANSACTION表的相關數據
						this.caseDetailDAO.deleteCaseInfos(caseIds);
						/*try {
							this.send(formDTO);
						} catch (Exception e) {
							LOGGER.debug(".closed() --> send() is error... ");
						}*/
						msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CLOSED)});
					}
				} else {
					LOGGER.error("CaseManagerService --> closed() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CLOSED)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> closed() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CLOSED)});
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error("CaseManagerService", ".closed(SessionContext sessionContext) is error", e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error("CaseManagerService", ".closed(SessionContext sessionContext) is error", e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#immediatelyClosing(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext immediatelyClosing(SessionContext sessionContext)
			throws ServiceException {
		Message msg = null;
		StringBuffer cmsErrorMsg = new StringBuffer();
		// 主鍵id
		String transactionId = null;
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		// Task #2547 得到登陸者角色
		this.setUserRoleFlag(formDTO);
		
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		//動作
		SrmCaseHandleInfo srmCaseHandleInfo = null;
		SrmCaseTransaction srmCaseTransaction = null;
		//存放案件編號集合的列表
		List<String> caseIdLists = new ArrayList<String>();
		//CaseDetail caseDetail = new CaseDetail();
		// 最新交易參數信息
		List<SrmCaseNewTransactionParameterDTO> srmCaseNewTransactionParameterDTOs = null;
		// 當前交易參數信息
		List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = null;
		try {
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			Transformer transformer = new SimpleDtoDmoTransformer();
			String oldCaseStatus = null;
			//Task #3519 存儲call cms 成功的案件 key 為 caseid， value 為 下行電文
	    	Map<String, String> callCmsMap = new HashMap<String, String>();
			//對前台進行驗證
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				if(StringUtils.hasText(formDTO.getCaseId())){
					String ids = this.checkTransactionParam(formDTO.getCaseId());
					if (ids.length() != 0) {
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_CASE_NO_TRANS_PARAM, new String[]{ids});
						sessionContext.setReturnMessage(msg);
						sessionContext.setResponseResult(formDTO);
						return sessionContext;
					}
					// 得到案件處理集合
					List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId(), null);
					if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
						//Task #3359
						//若為報修件且為CMS案件,透過CMS API通知CMS(協調完成)，通知失敗，儲存失敗，通知成功，才能儲存成功
						Gson gson = new Gson();
						ReceiveJobNoticeDTO resultMsg = null;
						List<SrmCaseHandleInfoDTO> failDto = new ArrayList<SrmCaseHandleInfoDTO>();
						List<SrmCaseHandleInfoDTO> caseHandleInfoDTOs = null;
						for(SrmCaseHandleInfoDTO dto : srmCaseHandleInfoDTOs){
							if(dto.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode())
									&& dto.getCmsCase().equals(IAtomsConstants.PARAM_YES)){
								Boolean isCallCms = true;
								if(dto.getIsIatomsCreateCms().equals(IAtomsConstants.PARAM_YES)
										&& dto.getDispatchDate() == null){
									isCallCms = false;
									// #3359 發送作業狀態為【01：受理中（派工）】的請求，若返回結果為true,則發送線上排除的請求
									String json = null;
									Map<String, String> map = null;
									String apiLogResult = null;	
									String message = null;
									ReceiveJobNoticeDTO jobNoticeDTO = null;
									SrmCaseHandleInfoDTO caseHandleInfoDTO = null;
									caseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(dto.getCaseId());
									if (caseHandleInfoDTOs != null) {
										caseHandleInfoDTO = caseHandleInfoDTOs.get(0);
									}
									//caseHandleInfoDTO = this.srmCaseHandleInfoDAO.getCaseInfoById(dto.getCaseId());
									jobNoticeDTO = new ReceiveJobNoticeDTO("01", caseHandleInfoDTO.getMerMid(), dto.getCaseId(), caseHandleInfoDTO.getDtid(), 
											caseHandleInfoDTO.getContactUser(), caseHandleInfoDTO.getContactUserPhone(), caseHandleInfoDTO.getContactMobilePhone(), 
											caseHandleInfoDTO.getContactUserEmail(), caseHandleInfoDTO.getContactAddressLocationName(), 
											caseHandleInfoDTO.getContactAddress(), caseHandleInfoDTO.getRepairReasonName(), caseHandleInfoDTO.getContactAreaCode(),
											caseHandleInfoDTO.getContactPostArea());
									json = gson.toJson(jobNoticeDTO);
									LOGGER.debug("CaseManagerService --> immediatelyClosing() --> ", "json=" + json);
									map =  NetUtil.sendHtppsNew("APIOP004", json);
									if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
										message = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
									}
									if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
										apiLogResult = "true";
									} else {
										apiLogResult = "false";
									}
									LOGGER.debug("CaseManagerService --> immediatelyClosing() --> ", "message=" + message);
									//上行(RQ)
									this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, json);
									if (StringUtils.hasText(message)) {
										Object responseJson = (Object) gson.fromJson(message, Object.class);
										resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
										if (!(resultMsg.getRESULT().equals("True"))) {
											failDto.add(dto);
											cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
											apiLogResult = "false";
											//下行(RS)
											this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), message);
										} else {
											isCallCms = true;
											apiLogResult = "true";
											//下行(RS)
											this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, message);
										}
									} else {
										cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), "cms請求失敗"}, null)).append("</br>");
										apiLogResult = "false";
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
										failDto.add(dto);
									}
								}
								if(isCallCms){
									//處理參數
									ReceiveJobNoticeDTO receiveJobNoticeDTO = new ReceiveJobNoticeDTO("05", dto.getCaseId(),
											dto.getMerMid(),dto.getDtid());
									String jsonString = gson.toJson(receiveJobNoticeDTO);
									LOGGER.debug("CaseManagerService --> immediatelyClosing() --> ", "json=" + jsonString);
									//call CMS API
									Map<String, String> map = null;
									String apiLogResult = null;	
									String resultString = null;	
									map = NetUtil.sendHtppsNew("APIOP004", jsonString);
									if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
										resultString = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
									}
									if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
										apiLogResult = "true";
									} else {
										apiLogResult = "false";
									}
									LOGGER.debug("CaseManagerService --> immediatelyClosing() --> ", "message=" + resultString);
									//上行(RQ)
									this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, jsonString);
									if (StringUtils.hasText(resultString)) {
										Object responseJson = (Object) gson.fromJson(resultString, Object.class);
										LOGGER.debug("CaseManagerService --> immediatelyClosing() --> ", "responseJson=" + responseJson);
										resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
										if (!(resultMsg.getRESULT().equals("True"))) {
											failDto.add(dto);
											cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
											apiLogResult = "false";
											//下行(RS)
											this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), resultString);
										} else {
											callCmsMap.put(dto.getCaseId(), resultString);
										}
									} else {
										LOGGER.debug("CaseManagerService --> immediatelyClosing() --> ", "save error!!!", "message is null");
										apiLogResult = "false";
										cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), "cms請求失敗"}, null)).append("</br>");
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
										failDto.add(dto);
									}
								}
							}
						}
						if (!CollectionUtils.isEmpty(failDto)) {
							for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : failDto) {
								srmCaseHandleInfoDTOs.remove(srmCaseHandleInfoDTO);
							}
							if (srmCaseHandleInfoDTOs.size() == 0) {
								Map map = new HashMap();
							    map.put(IAtomsConstants.FIELD_CMS_RESULT, false);
							    String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{cmsErrorMsg.substring(0, cmsErrorMsg.length() - 5)}, null);
							    msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
							    sessionContext.setReturnMessage(msg);
							    srmCaseTransactionDTO.setCaseId("");
							    sessionContext.setResponseResult(formDTO);
							    sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
								return sessionContext;
							}
						}
						
						// 之前有CUP的標記
						boolean oldCUP = false;
						// 當前有CUP標記
						boolean newCUP = false;
						//要進行刪除操作的caseId組成的字符串
						String caseIds= IAtomsConstants.MARK_EMPTY_STRING;
						String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
						
						SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = null;
						AdmUser admUser = null;
						String newCaseId = "";
						for (int i = 0; i < srmCaseHandleInfoDTOs.size(); i++) {
							admUser = null;
							srmCaseHandleInfoDTO = srmCaseHandleInfoDTOs.get(i);
							caseIds += IAtomsConstants.SINGLE_QUOTATION_MARKS + srmCaseHandleInfoDTO.getCaseId() 
									+ IAtomsConstants.SINGLE_QUOTATION_MARKS + IAtomsConstants.MARK_SEPARATOR;
							//拼接新的caseId
							newCaseId = newCaseId + srmCaseHandleInfoDTO.getCaseId() + IAtomsConstants.MARK_SEPARATOR;
							//若此次循環為最後一次循環則將caseIds最後的一位逗號截取
							if (i == srmCaseHandleInfoDTOs.size() - 1) {
								caseIds = caseIds.substring(0, caseIds.length() - 1);
							}
							oldCUP = false;
							newCUP = false;
							if(!StringUtils.hasText(oldCaseStatus)){
								oldCaseStatus = srmCaseHandleInfoDTO.getCaseStatus();
							}
							caseIdLists.add(srmCaseHandleInfoDTO.getCaseId());
							srmCaseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
							
							//案件狀態更新為立即結案
							srmCaseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.IMMEDIATE_CLOSE.getCode());
							//處理方式(task2517--要判斷是否有經過QA，若有，就是軟派，否則是 不需派工)
							//srmCaseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_NO_DISPATCH);
							List<SrmCaseTransactionDTO> caseTransactionDTOs = this.srmCaseTransactionDAO.listAfterQAs(srmCaseHandleInfoDTO.getCaseId());
							if (CollectionUtils.isEmpty(caseTransactionDTOs)) {
								srmCaseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_NO_DISPATCH);
							} else {
								srmCaseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_SOFT_DISPATCH);
							}
							srmCaseHandleInfo.setCompleteUser(logonUser.getId());
							srmCaseHandleInfo.setCompleteUserName(logonUser.getName());
							// Task #2547  新增，執行完修部門 欄位
							admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, logonUser.getId());
							// Task #2547 協調完成：若為客服執行，部門是客服 // CR #2951 廠商客服 //Task #3578 客戶廠商客服
							if(formDTO.getIsCustomerService() || formDTO.getIsVendorService() || formDTO.getIsCusVendorService()){
								srmCaseHandleInfo.setCompleteDepartmentId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
							} else {
								srmCaseHandleInfo.setCompleteDepartmentId(admUser.getDeptCode());
							}
							//Task #3349
							boolean isInstallComplete = false;
							if(srmCaseHandleInfo.getCompleteDate()==null && IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())){
								isInstallComplete = true;
							}
							//srmCaseHandleInfo.setCompleteDate(DateTimeUtils.getCurrentTimestamp());
							// 修改Bug2494\2493,實際執行時間未輸入，則完修日期選擇當前時間，否則完修日期為所選世紀之星時間
							if(srmCaseTransactionDTO.getDealDate() == null){
								srmCaseHandleInfo.setCompleteDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
							} else {
								srmCaseHandleInfo.setCompleteDate(srmCaseTransactionDTO.getDealDate());
							}
							if (isInstallComplete) {
								// 端末機代號啟用日: 實際完修日(裝機)，換機會繼承至新機
								srmCaseHandleInfo.setInstallCompleteDate(srmCaseHandleInfo.getCompleteDate());
							}
							// Task #2602 若 未派工 和 客服自行協調完成 and 進件完工日為空，則取紀錄時間寫入
							if(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
									&& srmCaseHandleInfo.getCreatedFinishDate() == null){
								srmCaseHandleInfo.setCreatedFinishDate(srmCaseHandleInfo.getCompleteDate());
							}
							srmCaseHandleInfo.setCloseUser(logonUser.getId());
							srmCaseHandleInfo.setCloseUserName(logonUser.getName());
							if(srmCaseTransactionDTO.getDealDate() == null){
								srmCaseHandleInfo.setCloseDate(DateTimeUtils.getCurrentTimestamp());
							} else {
								srmCaseHandleInfo.setCloseDate(srmCaseTransactionDTO.getDealDate());
							}
							srmCaseHandleInfo.setUpdatedById(logonUser.getId());
							srmCaseHandleInfo.setUpdatedByName(logonUser.getName());
							srmCaseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							setUserRoleFlag(formDTO);
							//如果當前登入着 是 客服
							//Bug #2305 // CR #2951 廠商客服          									 //Task #3578 客戶廠商客服
							if(formDTO.getIsCustomerService() || formDTO.getIsVendorService() || formDTO.getIsCusVendorService()) {
								srmCaseHandleInfo.setDispatchDeptId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
								srmCaseHandleInfo.setDispatchProcessUser(logonUser.getId());
								srmCaseHandleInfo.setDispatchProcessUsername(logonUser.getName());
								//update by 2017/07/26 Bug #2040
								//紀錄最新的派工單位與人員(USER選擇的)，若USER沒選人員，做直接結案時，更新派工處理人員=作業人員
							}
							if(!StringUtils.hasText(srmCaseHandleInfo.getDispatchProcessUser())) {
								srmCaseHandleInfo.setDispatchProcessUser(logonUser.getId());
								srmCaseHandleInfo.setDispatchProcessUsername(logonUser.getName());
//								AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, logonUser.getId());
								srmCaseHandleInfo.setDispatchDeptId(admUser.getDeptCode());
							}
							if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(formDTO.getCaseCategory())) {
								// 之前交易參數信息
								//	srmCaseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.listTransactionParameterDTOsByDtid(srmCaseHandleInfo.getDtid());
								// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
								boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfo.getDtid(), null);
								// CR #2551  查詢交易參數 Bug #3055
								srmCaseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.getTransactionParameterDTOsByDtid(srmCaseHandleInfo.getDtid(), isNewHave);
								srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(srmCaseHandleInfo.getCaseId(), null);
								if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())){
									// 當前交易參數
									if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
										for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
											// 判斷有沒有CUP類別
											if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
												newCUP = true;
												break;
											}
										}
										//如果此筆案件交易參數有cup
										if(newCUP) {
											//判斷案件信息裡面的cup啟用日是否有值 無值 存儲完修日期 如果有值，不管
											if(srmCaseHandleInfo.getCupEnableDate() == null) {
												srmCaseHandleInfo.setCupEnableDate(srmCaseHandleInfo.getCompleteDate());
											}
										} else {
											srmCaseHandleInfo.setCupEnableDate(null);
										}
									}
									// 併機與異動可操作交易參數
								} else if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfo.getCaseCategory())){
									// 當前交易參數
									//	srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseHandleInfo.getCaseId(), null);
									if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
										for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
											// 判斷有沒有CUP類別
											if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
												newCUP = true;
												break;
											}
										}
										//有cup交易
										if(newCUP) {
											//案件資料檔cup啟用日有值
											if(srmCaseHandleInfo.getCupEnableDate() != null) {
												//案件資料檔cup移除日有值
												if(srmCaseHandleInfo.getCupDisableDate() != null) {
													//清空cup移除日
													srmCaseHandleInfo.setCupDisableDate(null);
													//cup啟用日設置當前案件完修日期
													srmCaseHandleInfo.setCupEnableDate(srmCaseHandleInfo.getCompleteDate());
												}
											} else {
												//cup啟用日設置當前案件完修日期
												srmCaseHandleInfo.setCupEnableDate(srmCaseHandleInfo.getCompleteDate());
											}
										//沒有cup交易
										} else {
											if(srmCaseHandleInfo.getCupEnableDate() != null) {
												//案件資料檔cup移除日無值
												if(srmCaseHandleInfo.getCupDisableDate() == null) {
													//cup移除日設置當前案件完修日期
													srmCaseHandleInfo.setCupDisableDate(srmCaseHandleInfo.getCompleteDate());
												}
											}
										}
									}
								}
							}
							//清空目前處理人信息
							/*srmCaseHandleInfo.setDispatchProcessUser(null);
							srmCaseHandleInfo.setDispatchProcessUsername(null);*/
							//CR #2869 新增三個欄位 2017/11/22
							srmCaseHandleInfo.setThirdDescription(srmCaseHandleInfo.getSecondDescription());
							srmCaseHandleInfo.setSecondDescription(srmCaseHandleInfo.getFirstDescription());
							srmCaseHandleInfo.setFirstDescription(srmCaseTransactionDTO.getDescription());
							this.srmCaseHandleInfoDAO.update(srmCaseHandleInfo);
							if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(formDTO.getCaseCategory())) {
								//update by hermanwang 2017/08/30 Bug #2273
								updateAssetInfoInCheckCase(srmCaseHandleInfo, logonUser, Boolean.TRUE);
							}
							/*String flag = Integer.toString(20);
							List<SrmCaseAssetLinkDTO> srmCaseAssetLinkDTOs = this.srmCaseAssetLinkDAO.listByCaseId(srmCaseHandleInfo.getCaseId(), flag, true,true);
							for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : srmCaseAssetLinkDTOs) {
								if(StringUtils.hasText(srmCaseAssetLinkDTO.getSerialNumber())) {
									//設備鏈接
									DmmRepositoryDTO dmmRepositoryDTO = this.dmmRepositoryDAO.getRepositoryBySerialNumber(srmCaseAssetLinkDTO.getSerialNumber(), null, null);
									//庫存歷史檔id
									String historyId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_DMM_REPOSITORY_HISTORY);
									// CASE_ID 非拆機案件，且連接設備，寫入當前案件編號
									dmmRepositoryDTO.setCaseId(srmCaseHandleInfo.getCaseId());
									//案件完修日(簽收，或線上排除，儲存時，寫入案件完修日期)
									dmmRepositoryDTO.setCaseCompletionDate(new Timestamp(srmCaseHandleInfo.getCompleteDate().getTime()));
									//非拆機案件，且連接設備，寫入當前案件特店主鍵
									dmmRepositoryDTO.setMerchantId(srmCaseHandleInfo.getMerchantCode());
									dmmRepositoryDTO.setInstalledAdress(srmCaseHandleInfo.getInstalledAdress());
									dmmRepositoryDTO.setInstallType(srmCaseHandleInfo.getInstallType());
									dmmRepositoryDTO.setMerchantHeaderId(srmCaseHandleInfo.getMerchantHeaderId());
									dmmRepositoryDTO.setAction(srmCaseHandleInfo.getCaseCategory() + IAtomsConstants.MARK_MIDDLE_LINE + IAtomsConstants.PARAM_ASSET_STATUS_LINK);
									// 裝機地址市縣 維護部門
									dmmRepositoryDTO.setApplicationId(srmCaseHandleInfo.getSoftwareVersion());
									dmmRepositoryDTO.setInstalledAdressLocation(srmCaseHandleInfo.getInstalledAdressLocation());
									//維護部門 ----> 派工部門 
									dmmRepositoryDTO.setDepartmentId(srmCaseHandleInfo.getDispatchDeptId());
									//維護工程師 -----> 派工工程師，紀錄最新的派工單位與人員(USER選擇的)
									dmmRepositoryDTO.setMaintainUser(srmCaseHandleInfo.getDispatchProcessUser());
									//請個空派工日期
									dmmRepositoryDTO.setAnalyzeDate(null);
									
									//edc在異動建的時候的 iscup欄位
									if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfo.getCaseCategory())){
										if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLinkDTO.getItemType())) {
											List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOList = this.srmCaseTransactionParameterDAO.listByCaseId(srmCaseHandleInfo.getCaseId(), null);
											if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOList)){
												boolean isCUP = false;
												for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOList){
													// 判斷有沒有CUP類別
													if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
														isCUP = true;
														break;
													}
												}
												//如果此筆案件交易參數有cup
												if(isCUP) {
													dmmRepositoryDTO.setIsCup(IAtomsConstants.YES);
												} else {
													dmmRepositoryDTO.setIsCup(IAtomsConstants.NO);
												}
											}
										}
									}
									//存儲庫存表
									dmmRepositoryDTO.setUpdateUser(logonUser.getId());
									dmmRepositoryDTO.setUpdateUserName(logonUser.getName());
									dmmRepositoryDTO.setUpdateDate(DateTimeUtils.getCurrentTimestamp());
									DmmRepository dmmRepository = (DmmRepository) transformer.transform(dmmRepositoryDTO, new DmmRepository());
									//存儲庫存歷史表
									this.dmmRepositoryDAO.update(dmmRepository);
									String assetId = dmmRepositoryDTO.getAssetId();
									//調用存儲過程，存儲庫存歷史檔資料
									this.dmmRepositoryDAO.saveRepositoryHist(assetId, historyId, dmmRepositoryDTO.getStatus());
								}
							}*/
							//生成id
							transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
							srmCaseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
							
							if(!StringUtils.hasText(caseTransactionId)) {
								caseTransactionId = transactionId;
							} else {
								caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + transactionId;
							}
							formDTO.setCaseTransactionId(caseTransactionId);
							
							// 主鍵
							srmCaseTransaction.setTransactionId(transactionId);
							srmCaseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
							// 放置執行動作
							srmCaseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
							// 放置案件狀態
							srmCaseTransaction.setCaseStatus(srmCaseTransactionDTO.getCaseStatus());
							// 實際執行時間處理
							if(srmCaseTransactionDTO.getDealDate() == null){
								srmCaseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
							} else {
								srmCaseTransaction.setDealDate(srmCaseTransactionDTO.getDealDate());
							}
							// 描述處理
							srmCaseTransaction.setDescription(srmCaseTransactionDTO.getDescription());
							//當前關卡
							srmCaseTransaction.setCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH);
							//當前關卡名稱
							srmCaseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode()));
							//下一關關卡代碼
							srmCaseTransaction.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_CASE_PROCESS_END);
							//下一關關卡名稱
							srmCaseTransaction.setNextCaseStageName(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_NAME_END);
							srmCaseTransaction.setCreatedById(logonUser.getId());
							srmCaseTransaction.setCreatedByName(logonUser.getName());
							srmCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							this.srmCaseTransactionDAO.insert(srmCaseTransaction);
							if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(formDTO.getCaseCategory())) {
								//複製數據到歷史和最新模塊,刪除處理中的所有信息
								this.srmCaseHandleInfoDAO.copyToHis(srmCaseHandleInfo.getCaseId(), srmCaseHandleInfo.getDtid(), IAtomsConstants.YES, IAtomsConstants.NO);
							}
							//Task #3519 存儲下行電文 要有案件歷程id
							if(callCmsMap.containsKey(srmCaseHandleInfoDTO.getCaseId())){
								String apiLogResult = "true";
								this.insertApiLog(IAtomsConstants.API_RS, srmCaseHandleInfoDTO.getCaseId(), srmCaseTransaction.getTransactionId(), logonUser, apiLogResult, null, callCmsMap.get(srmCaseHandleInfoDTO.getCaseId()));
							}
							if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())
									&& srmCaseHandleInfo.getInstallCompleteDate()!=null) {
								//'S' save 同dtid下InstallCompleteDate
								this.srmCaseHandleInfoDAO.changeInstallCaseId(srmCaseHandleInfo.getCaseId(), srmCaseHandleInfo.getDtid(), null, srmCaseHandleInfo.getInstallCompleteDate(), "S");
							} else if (IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())
											&& srmCaseHandleInfo.getInstallCompleteDate()==null) {
								//'D' delete 同dtid下InstallCompleteDate
								this.srmCaseHandleInfoDAO.changeInstallCaseId(srmCaseHandleInfo.getCaseId(), srmCaseHandleInfo.getDtid(), null, null, "D");
							}
						}
						newCaseId = newCaseId.trim();
						if(newCaseId.length() > 0){
							if(newCaseId.substring(newCaseId.length()-1, newCaseId.length()).equals(IAtomsConstants.MARK_SEPARATOR)){
								srmCaseTransactionDTO.setCaseId(newCaseId.substring(0, newCaseId.length()-1));
							}else{
								srmCaseTransactionDTO.setCaseId(newCaseId);
							}
						}
						formDTO.setCaseIds(caseIdLists);
						//送至下一關 Bug #2331
					//	this.sendNextActiviti(logonUser, formDTO, IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH, null);
					//	Bug #2331
						this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
						//調用CaseDetailDao的放法刪除CAFE_CASE_DETAIL和CAFE_CASE_TRANSACTION表的相關數據
						this.caseDetailDAO.deleteCaseInfos(caseIds);
						/*try {
							this.send(formDTO);
						} catch (Exception e) {
							LOGGER.debug(".immediatelyClosing() --> send() is error... ");
						}*/
						if (cmsErrorMsg.length() > 0) {
						       Map map = new HashMap();
						       map.put(IAtomsConstants.FIELD_CMS_RESULT, false);
						       sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
						       String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{cmsErrorMsg.substring(0, cmsErrorMsg.length() - 5)}, null);
						       msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
						      } else {
						       msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)});
						      }
					}
				} else {
					LOGGER.error("CaseManagerService --> immediatelyClosing() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> immediatelyClosing() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)});
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error("CaseManagerService", ".immediatelyClosing(SessionContext sessionContext) is error", e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error("CaseManagerService", ".immediatelyClosing(SessionContext sessionContext) is error", e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	/** (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#autoDispatching(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext autoDispatching(SessionContext sessionContext)
			throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		Message msg = null;
		try {
			// 案件處理記錄主鍵id
			String transactionId = null;
			// 案件處理記錄DMO對象
			SrmCaseTransaction caseTransaction = null;
			String description = IAtomsConstants.MARK_EMPTY_STRING;
			BimDepartment department = null;
			//BimCompany company = null;
			SrmCaseHandleInfo caseHandleInfo = null;
			String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
			// 案件處理記錄DTO對象
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			// dto/dmo轉換對象
			Transformer transformer = new SimpleDtoDmoTransformer();
			String caseId = null;
			setUserRoleFlag(formDTO);
			Map<String, String> repairMap = null;
			Map tempMap = new HashMap();
			StringBuffer errorMsg = new StringBuffer();
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			//Task #3336 call CMS API Task #3519
			Map<String, String> map = null;
			//Task #3519 存儲call cms 成功的案件 key 為 caseid， value 為 下行電文
	    	Map<String, String> callCmsMap = new HashMap<String, String>();
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				if(StringUtils.hasText(formDTO.getCaseId())){
					String ids = this.checkTransactionParam(formDTO.getCaseId());
					if (ids.length() != 0) {
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_CASE_NO_TRANS_PARAM, new String[]{ids});
						sessionContext.setReturnMessage(msg);
						sessionContext.setResponseResult(formDTO);
						return sessionContext;
					}
					caseId = StringUtils.toList(formDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR).get(0);
					String currentActivitiCode = null;
					// 實際執行時間處理
					//Task #2542
					if(srmCaseTransactionDTO.getDealDate() == null){
						srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
					}
					// 設置下一關卡群組candidateGroup，客服 ==》》 “CUSTOMER_SERVICE” TMS ==》》 “CUSTOMER_SERVICE，TMS””，QA ==》》 “CUSTOMER_SERVICE，QA” 維護廠商 ==》》“CUSTOMER_SERVICE，AGENT, ENGINEER”.
					String candidateGroup = null;
					
					// 案件處理記錄主鍵id
					transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
					// 得到案件處理集合
					List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = (List<SrmCaseHandleInfoDTO>) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT);
					//Task #3324 確認該筆裝機件是否已申請與繳費成功
					List<SrmCaseHandleInfoDTO> errorDto = new ArrayList<SrmCaseHandleInfoDTO>();
					StringBuffer tempCaseId = new StringBuffer();
					String message =  null;
					String apiLogResult = null;
					if (srmCaseHandleInfoDTOs.get(0).getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode())) {
						String api = "APIOP001";
						String json = null;
						ReceiveJobNoticeDTO jobNoticeDTO = null;
						Gson gson = new GsonBuilder().create();
						ReceiveJobNoticeDTO resultMsg = null;
						for(SrmCaseHandleInfoDTO dto : srmCaseHandleInfoDTOs){
							if (IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(dto.getInstallType())) {
								jobNoticeDTO = new ReceiveJobNoticeDTO(dto.getCaseId(), dto.getDtid());
								json = gson.toJson(jobNoticeDTO);
								map = NetUtil.sendHtppsNew(api, json);
								if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
									message = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
								}
								if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
									apiLogResult = "true";
								} else {
									apiLogResult = "false";
								}
								LOGGER.debug("CaseManagerService --> autoDispatching() --> ", "message=" + message);
								//上行(RQ)
								this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, json);
								if (StringUtils.hasText(message)) {
									Object responseJson = (Object) gson.fromJson(message, Object.class);
									resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
									if (!(resultMsg.getRESULT().equals("True"))) {
										errorDto.add(dto);
										errorMsg.append(dto.getCaseId()).append("，<br/>");
										apiLogResult = "false";
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), message);
									} else {
										tempCaseId.append(dto.getCaseId()).append(IAtomsConstants.MARK_SEPARATOR);
										callCmsMap.put(dto.getCaseId(), message);
									}
								} else {
									errorDto.add(dto);
									errorMsg.append(dto.getCaseId()).append("，<br/>");
									apiLogResult = "false";
									//下行(RS)
									this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
								}
							}
						}
						if (errorDto.size() != 0) {
							for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : errorDto) {
								srmCaseHandleInfoDTOs.remove(srmCaseHandleInfoDTO);
							}
							if (srmCaseHandleInfoDTOs.size() == 0) {
								String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_APIOP001_MSG, new String[]{errorMsg.substring(0, errorMsg.length() - 6)}, null);
								msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
								sessionContext.setReturnMessage(msg);
								srmCaseTransactionDTO.setCaseId(null);
								formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
								formDTO.setCaseId(null);
								sessionContext.setResponseResult(formDTO);
								tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
								sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
								return sessionContext;
							} else {
								caseId = StringUtils.toList(tempCaseId.substring(0, tempCaseId.length() - 1), IAtomsConstants.MARK_SEPARATOR).get(0);
								srmCaseTransactionDTO.setCaseId(caseId);
								formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
								formDTO.setCaseId(caseId);
							}
						}
						//保修件，派工時，如爲iatoms建案且爲cms案件，需call cms（Task #3404）
					} else if (formDTO.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode())) {
						repairMap = this.repairCaseSign(srmCaseHandleInfoDTOs, Boolean.FALSE, logonUser, callCmsMap);
						if (srmCaseHandleInfoDTOs.size() == 0) {
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{repairMap.get("msg")});
							sessionContext.setReturnMessage(msg);
							srmCaseTransactionDTO.setCaseId(null);
							formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
							formDTO.setCaseId(null);
							sessionContext.setResponseResult(formDTO);
							tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
							sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
							return sessionContext;
						} else {
							caseId = repairMap.get("caseId");
							srmCaseTransactionDTO.setCaseId(caseId);
							formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
							formDTO.setCaseId(caseId);
						}
					}
					//List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId(), null);
					if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
						Map<String, List<String>> candidateGroupMap = new HashMap<String, List<String>>();
						List<String> list = null;
						int i = 0;
						for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
							// 保存案件記錄信息
							i++;
							caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
							caseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
							caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
							//Bug #2634
							String tempTransactionId = transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i);
							if(!StringUtils.hasText(caseTransactionId)) {
								caseTransactionId = tempTransactionId;
							} else {
								caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + tempTransactionId;
							}
							formDTO.setCaseTransactionId(caseTransactionId);
							
							caseTransaction.setTransactionId(transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i));
							caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
							caseTransaction.setDeptCode(srmCaseTransactionDTO.getDispatchUnit());
							caseTransaction.setDealById(srmCaseTransactionDTO.getDealById());
							caseTransaction.setDealByName(srmCaseTransactionDTO.getDealByName());
							// 實際執行時間處理
							if(srmCaseTransactionDTO.getDealDate() == null){
								caseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
							} else {
								caseTransaction.setDealDate(srmCaseTransactionDTO.getDealDate());
							}
							description = srmCaseTransactionDTO.getDescription();
							if ((IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())) && (IAtomsConstants.CASE_ACTION.AUTO_DISPATCHING.getCode().equals(srmCaseTransactionDTO.getCaseActionId()))) {
								currentActivitiCode = IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH;
								formDTO.setCurrentActivitiCode(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH);
								// 待派工狀態直接派工,
								caseTransaction.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
								caseTransaction.setCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH);
								caseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode()));
								// 若關卡不變，則寫入當前關卡
								caseTransaction.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH);
								// 若關卡不變，則寫入當前關卡
								caseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode()));
								sessionContext.setAttribute(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_STATUS.getValue(), IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode());
								// 若案件之【自動派工】勾選
								if (IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfoDTO.getIsTms())) {
									// 處理內容為“自動派工至[TMS]”
									description = (StringUtils.hasText(description) ? description  + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING) + i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_AUTO_DISPATCH_TO) 
														+ IAtomsConstants.MARK_BRACKET_LEFT 
														+ IAtomsConstants.CASE_ROLE.TMS.getCode() 
														+ IAtomsConstants.MARK_BRACKET_RIGHT;
									srmCaseTransactionDTO.setDispatchUnit(IAtomsConstants.CASE_ROLE.TMS.getCode());
									// 若案件之【自動派工】未勾選
								} else {
									// 處理內容為“派工至[維護廠商-維護部門]”
									//company = this.getCompanyDAO().findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
									//Bug #2305
									if(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDepartmentId())) {
										department = new BimDepartment();
										department.setDeptName(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE));
										description = (StringUtils.hasText(description) ? description  + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING) + i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT;
										description = description + department.getDeptName();
									} else {
										description = (StringUtils.hasText(description) ? description  + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING) + i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT + (!StringUtils.hasText(srmCaseHandleInfoDTO.getCompanyName()) ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getCompanyName()) ;
										if (StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentId())) {
											
											department = this.departmentDAO.findByPrimaryKey(BimDepartment.class, srmCaseHandleInfoDTO.getDepartmentId());
											description = description + IAtomsConstants.MARK_MIDDLE_LINE + department.getDeptName();
											
										}
									}
									caseTransaction.setDeptCode(srmCaseHandleInfoDTO.getDepartmentId());
									srmCaseTransactionDTO.setDispatchUnit(srmCaseHandleInfoDTO.getDepartmentId());
									description = description + IAtomsConstants.MARK_BRACKET_RIGHT;
									//caseTransaction.setDeptCode(caseHandleInfo.getDepartmentId());
								}
							} else if (IAtomsConstants.CASE_ACTION.AUTO_DISPATCHING.getCode().equals(srmCaseTransactionDTO.getCaseActionId())) {
								// 若案件之【自動派工】勾選
								if (IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfoDTO.getIsTms())) {
									// CR #2951 廠商客服 //Task #3578 客戶廠商客服
									if (formDTO.getIsCustomerService() || formDTO.getIsVendorService() || formDTO.getIsCusVendorService()) {
										// 處理內容為“自動派工至[TMS]”
										description = (StringUtils.hasText(description) ? description  + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING) + i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_AUTO_DISPATCH_TO) 
																+ IAtomsConstants.MARK_BRACKET_LEFT 
																+ IAtomsConstants.CASE_ROLE.TMS.getCode()
																+ IAtomsConstants.MARK_BRACKET_RIGHT;
										caseTransaction.setDeptCode(IAtomsConstants.CASE_ROLE.TMS.getCode());
										srmCaseTransactionDTO.setDispatchUnit(IAtomsConstants.CASE_ROLE.TMS.getCode());
									} else if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(caseHandleInfo.getDispatchDeptId())) {
										// 處理內容為“自動派工至[QA]”
										description = (StringUtils.hasText(description) ? description  + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING) + i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_AUTO_DISPATCH_TO)
												+ IAtomsConstants.MARK_BRACKET_LEFT 
												+ IAtomsConstants.CASE_ROLE.QA.getCode()
												+ IAtomsConstants.MARK_BRACKET_RIGHT;
										caseTransaction.setDeptCode(IAtomsConstants.CASE_ROLE.QA.getCode());
										srmCaseTransactionDTO.setDispatchUnit(IAtomsConstants.CASE_ROLE.QA.getCode());
									} else if (IAtomsConstants.CASE_ROLE.QA.getCode().equals(caseHandleInfo.getDispatchDeptId())) {
										// 處理內容為“自動派工至[維護廠商-維護部門]”
										//company = this.getCompanyDAO().findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
										if(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDepartmentId())) {
											department = new BimDepartment();
											department.setDeptName(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE));
											description = (StringUtils.hasText(description) ? description  + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING) + i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_AUTO_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT;
											description = description + department.getDeptName();
										} else {
											description = (StringUtils.hasText(description) ? description  + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING) + i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_AUTO_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT + (!StringUtils.hasText(srmCaseHandleInfoDTO.getCompanyName()) ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getCompanyName()) ;
											if (StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentId())) {
												department = this.departmentDAO.findByPrimaryKey(BimDepartment.class, srmCaseHandleInfoDTO.getDepartmentId());
												description = description + IAtomsConstants.MARK_MIDDLE_LINE + department.getDeptName();
											}
										}
										caseTransaction.setDeptCode(srmCaseHandleInfoDTO.getDepartmentId());
										srmCaseTransactionDTO.setDispatchUnit(srmCaseHandleInfoDTO.getDepartmentId());
										description = description + IAtomsConstants.MARK_BRACKET_RIGHT;
									} else {
										// 處理內容為“自動派工至[維護廠商-維護部門]”
										//company = this.getCompanyDAO().findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
										if(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDepartmentId())) {
											department = new BimDepartment();
											department.setDeptName(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE));
											description = (StringUtils.hasText(description) ? description  + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING) + i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_AUTO_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT;
											description = description + department.getDeptName();
										} else {
											description = (StringUtils.hasText(description) ? description  + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING) + i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_AUTO_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT + (!StringUtils.hasText(srmCaseHandleInfoDTO.getCompanyName()) ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getCompanyName()) ;
											if (StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentId())) {
												department = this.departmentDAO.findByPrimaryKey(BimDepartment.class, srmCaseHandleInfoDTO.getDepartmentId());
												description = description + IAtomsConstants.MARK_MIDDLE_LINE + department.getDeptName();
											}
										}
										caseTransaction.setDeptCode(srmCaseHandleInfoDTO.getDepartmentId());
										srmCaseTransactionDTO.setDispatchUnit(srmCaseHandleInfoDTO.getDepartmentId());
										description = description + IAtomsConstants.MARK_BRACKET_RIGHT;
									}
								} else {
									// 處理內容為“派工至[維護廠商-維護部門]”
									//company = this.getCompanyDAO().findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
										//Bug #2305
										if(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDepartmentId())) {
											department = new BimDepartment();
											department.setDeptName(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE));
											description = (StringUtils.hasText(description) ? description  + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING) + i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT;
											description = description + department.getDeptName();
										} else {
											description = (StringUtils.hasText(description) ? description  + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING) + i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT + (!StringUtils.hasText(srmCaseHandleInfoDTO.getCompanyName()) ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getCompanyName()) ;
											if (StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentId())) {
												department = this.departmentDAO.findByPrimaryKey(BimDepartment.class, srmCaseHandleInfoDTO.getDepartmentId());
												description = description + IAtomsConstants.MARK_MIDDLE_LINE + department.getDeptName();
											}
										}
										caseTransaction.setDeptCode(srmCaseHandleInfoDTO.getDepartmentId());
									srmCaseTransactionDTO.setDispatchUnit(srmCaseHandleInfoDTO.getDepartmentId());
									description = description + IAtomsConstants.MARK_BRACKET_RIGHT;
								}
								
								currentActivitiCode = IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH;
								formDTO.setCurrentActivitiCode(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH);
								caseTransaction.setCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH);
								caseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode()));
								// 若關卡不變，則寫入當前關卡
								caseTransaction.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH);
								// 若關卡不變，則寫入當前關卡
								caseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode()));
								
								//除了待派工和已派工其他不走流程
							}
							// 描述處理
							caseTransaction.setDescription(description);
							caseTransaction.setCreatedById(logonUser.getId());
							caseTransaction.setCreatedByName(logonUser.getName());
							caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							this.srmCaseTransactionDAO.insert(caseTransaction);
							//Task #3519 存儲下行電文 要有案件歷程id
							if(callCmsMap.containsKey(srmCaseHandleInfoDTO.getCaseId())){
								apiLogResult = "true";
								this.insertApiLog(IAtomsConstants.API_RS, srmCaseHandleInfoDTO.getCaseId(), caseTransaction.getTransactionId(), logonUser, apiLogResult, null, callCmsMap.get(srmCaseHandleInfoDTO.getCaseId()));
							}
							// 更新案件處理消息
							if (IAtomsConstants.CASE_ACTION.AUTO_DISPATCHING.getCode().equals(srmCaseTransactionDTO.getCaseActionId())) {
								// 派工時，如果不是派工給客服，TMS, QA則寫入派工單位
								if (!((IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransactionDTO.getDispatchUnit())) || (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransactionDTO.getDispatchUnit())) || (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransactionDTO.getDispatchUnit())))) {
									caseHandleInfo.setDepartmentId(srmCaseTransactionDTO.getDispatchUnit());
									/*if (StringUtils.hasText(srmCaseTransactionDTO.getDispatchUnit())) {
										BimDepartment bimDepartment = this.getDepartmentDAO().findByPrimaryKey(BimDepartment.class, srmCaseTransactionDTO.getDispatchUnit());
										//如果維護部門異動，異動維護廠商
										caseHandleInfo.setCompanyId(bimDepartment.getCompanyId());
									}*/
									if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())) {
										// 裝機時 填入最後一次派工的派工單位（排除客服，TMS，QA）
										caseHandleInfo.setInstalledDeptId(srmCaseTransactionDTO.getDispatchUnit());
										// 裝機時 填入最後一次派工的處理人員（排除客服，TMS，QA）
										caseHandleInfo.setInstalledUser(srmCaseTransactionDTO.getDealById());
									}
									
								}
								// 派工，第一次派工為已派工，第二次狀態不變
								if (IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())) {									
									// 案件狀態更新為已派工
									caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
									// 進件完工日
									caseHandleInfo.setCreatedFinishDate(caseTransaction.getDealDate());
								}
								// 派工單位，包括TMS，QA，客服
								caseHandleInfo.setDispatchDeptId(srmCaseTransactionDTO.getDispatchUnit());
								caseHandleInfo.setDispatchProcessUser(srmCaseTransactionDTO.getDealById());
								caseHandleInfo.setDispatchProcessUsername(srmCaseTransactionDTO.getDealByName());
								caseHandleInfo.setDispatchDate(new Timestamp((caseTransaction.getDealDate()).getTime()));
								caseHandleInfo.setDispatchUser(logonUser.getId());
								caseHandleInfo.setDispatchUserName(logonUser.getName());
								// 處理方式
//								caseHandleInfo.setProcessType(null);
								
								//CR #2869 新增三個欄位 2017/11/22
								caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
								caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
								caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
								// 修改異動人員消息
								caseHandleInfo.setUpdatedById(logonUser.getId());
								caseHandleInfo.setUpdatedByName(logonUser.getName());
								caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
								this.srmCaseHandleInfoDAO.update(caseHandleInfo);
							}
							/*if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(caseHandleInfo.getDispatchDeptId())) {
								candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode();
							} else if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(caseHandleInfo.getDispatchDeptId())) {
								candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.TMS.getCode();
							} else if (IAtomsConstants.CASE_ROLE.QA.getCode().equals(caseHandleInfo.getDispatchDeptId())) {
								candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.QA.getCode();
							} else {
								candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_AGENT.getCode() +IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.ENGINEER.getCode();
							}*/
							// CR #2951 廠商客服	//Task #3578 客戶廠商客服
							candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.CUS_VENDOR_SERVICE.getCode();;
							if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(caseHandleInfo.getDispatchDeptId())) {
							} else if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(caseHandleInfo.getDispatchDeptId())) {
								candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.TMS.getCode();
							} else if (IAtomsConstants.CASE_ROLE.QA.getCode().equals(caseHandleInfo.getDispatchDeptId())) {
								candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.QA.getCode();
							} else {
								candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_AGENT.getCode() +IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.ENGINEER.getCode();
							}
							/*caseIds = new ArrayList<String>();
							caseIds.add(srmCaseHandleInfoDTO.getCaseId());
							formDTO.setCaseIds(caseIds);
							formDTO.setCandidateGroup(null);
							formDTO.setActionId(IAtomsConstants.CASE_ACTION.DISPATCHING.getCode());
							if (IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()) || IAtomsConstants.CASE_STATUS.DISPATCHED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())) {
								LOGGER.debug(this.getClass().getName() + ".autoDispatching()--> sendNextActiviti()... ");
								this.sendNextActiviti(logonUser, formDTO, currentActivitiCode, candidateGroup);
							}*/
							if (candidateGroupMap.containsKey(candidateGroup)) {
								candidateGroupMap.get(candidateGroup).add(caseHandleInfo.getCaseId());
							} else {
								list = new ArrayList<String>();
								list.add(caseHandleInfo.getCaseId());
								candidateGroupMap.put(candidateGroup, list);
							}
						}
						formDTO.setActionId(IAtomsConstants.CASE_ACTION.DISPATCHING.getCode());
						if (IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTOs.get(0).getCaseStatus()) || IAtomsConstants.CASE_STATUS.DISPATCHED.getCode().equals(srmCaseHandleInfoDTOs.get(0).getCaseStatus())) {
							LOGGER.debug(this.getClass().getName() + ".autoDispatching()--> sendNextActiviti()... ");
							this.sendNextActivitiForDispatch(logonUser, formDTO, currentActivitiCode, candidateGroupMap, caseId);
						}
						formDTO.setCaseActionIdEmail(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_AUTO_DISPATCHING));
						/*try {
							//sessionContext.setAttribute(IAtomsConstants.CASE_ACTION.AUTO_DISPATCHING.getCode(), i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_AUTO_DISPATCHING));
							this.send(formDTO);
						} catch (Exception e) {
							LOGGER.debug(this.getClass().getName() + ".autoDispatching()--> send() is error... ");
						}*/
						msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_AUTO_DISPATCHING)});
					} else {
						LOGGER.error("CaseManagerService --> autoDispatching() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_AUTO_DISPATCHING)});
					}
				} else {
					LOGGER.error("CaseManagerService --> autoDispatching() --> ", "save error!!!", "caseIds is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_AUTO_DISPATCHING)});
				}
				if (errorMsg.length() > 0 && Message.STATUS.SUCCESS.equals(msg.getStatus())) {
					String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_APIOP001_MSG, new String[]{errorMsg.substring(0, errorMsg.length() - 6)}, null);
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
					tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
					sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
				} else if (repairMap != null && StringUtils.hasText(repairMap.get("msg"))) {
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{repairMap.get("msg")});
					tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
					sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> autoDispatching() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_AUTO_DISPATCHING)});
				}
			}
			
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".autoDispatching(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".autoDispatching(SessionContext sessionContext):" + e, e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	/** (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#dispatching(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext dispatching(SessionContext sessionContext)
				throws ServiceException {
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
			Message msg = null;
			try {
				// 案件處理記錄主鍵id
				String transactionId = null;
				// 案件處理記錄DMO對象
				SrmCaseTransaction caseTransaction = null;
				String description = IAtomsConstants.MARK_EMPTY_STRING;
				BimDepartment department = null;
				SrmCaseHandleInfo caseHandleInfo = null;
				String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
				// 案件處理記錄DTO對象
				SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
				// dto/dmo轉換對象
				Transformer transformer = new SimpleDtoDmoTransformer();
				String caseId = null;
				setUserRoleFlag(formDTO);
				// 調用驗證方法
				Map<String, Object> resultMap = this.validateCaseAction(formDTO);
				StringBuffer errorMsg = new StringBuffer();
				Map tempMap = new HashMap();
				Map<String, String> repairMap = null;
				//Task #3519 存儲call cms 成功的案件 key 為 caseid， value 為 下行電文
		    	Map<String, String> callCmsMap = new HashMap<String, String>();
				if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
					if(StringUtils.hasText(formDTO.getCaseId())){
						String ids = this.checkTransactionParam(formDTO.getCaseId());
						if (ids.length() != 0) {
							msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_CASE_NO_TRANS_PARAM, new String[]{ids});
							sessionContext.setReturnMessage(msg);
							sessionContext.setResponseResult(formDTO);
							return sessionContext;
						}
						caseId = StringUtils.toList(formDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR).get(0);
						String currentActivitiCode = null;
						// 實際執行時間處理
						if(srmCaseTransactionDTO.getDealDate() == null){
							srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
						}
						// 設置下一關卡群組candidateGroup，客服 ==》》 “CUSTOMER_SERVICE” TMS ==》》 “CUSTOMER_SERVICE，TMS””，QA ==》》 “CUSTOMER_SERVICE，QA” 維護廠商 ==》》“CUSTOMER_SERVICE，AGENT, ENGINEER”.
						String candidateGroup = null;
						
						// 案件處理記錄主鍵id
						transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
						// 得到案件處理集合
						List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = (List<SrmCaseHandleInfoDTO>) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT);
						// 得到案件處理集合
						//List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId(), null);
						
						if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
							List<SrmCaseHandleInfoDTO> errorDto = new ArrayList<SrmCaseHandleInfoDTO>();
							String api = null;
							String json = null;
							ReceiveJobNoticeDTO jobNoticeDTO = null;
							Gson gson = new GsonBuilder().create();
							ReceiveJobNoticeDTO resultMsg = null;
							StringBuffer tempCaseId = new StringBuffer();
							String message =  null;
							Map<String, String> map = null;
							String apiLogResult = null;
							//Task #3324 確認該筆裝機件是否已申請與繳費成功
							if (IAtomsConstants.YES.equals(srmCaseHandleInfoDTOs.get(0).getCmsCase())
									&& srmCaseHandleInfoDTOs.get(0).getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode())) {
								api = "APIOP001";
								for(SrmCaseHandleInfoDTO dto : srmCaseHandleInfoDTOs){
									if (IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(dto.getInstallType())) {
										jobNoticeDTO = new ReceiveJobNoticeDTO(dto.getCaseId(), dto.getDtid());
										json = gson.toJson(jobNoticeDTO);
										LOGGER.debug("CaseManagerService --> dispatching() --> ", "json=" + json);
										map =  NetUtil.sendHtppsNew(api, json);
										if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
											message = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
										}
										if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
											apiLogResult = "true";
										} else {
											apiLogResult = "false";
										}
										LOGGER.debug("CaseManagerService --> dispatching() --> ", "message" + message);
										//上行(RQ)
										this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, json);
										if (StringUtils.hasText(message)) {
											Object responseJson = (Object) gson.fromJson(message, Object.class);
											resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
											if (!(resultMsg.getRESULT().equals("True"))) {
												errorDto.add(dto);
												errorMsg.append(dto.getCaseId()).append("，<br/>");
												apiLogResult = "false";
												//下行(RS)
												this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), message);
											} else {
												tempCaseId.append(dto.getCaseId()).append(IAtomsConstants.MARK_SEPARATOR);
												callCmsMap.put(dto.getCaseId(), message);
											}
										} else {
											errorDto.add(dto);
											errorMsg.append(dto.getCaseId()).append("，<br/>");
											apiLogResult = "false";
											//下行(RS)
											this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
										}
									}
								}
								if (errorDto.size() != 0) {
									for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : errorDto) {
										srmCaseHandleInfoDTOs.remove(srmCaseHandleInfoDTO);
									}
									if (srmCaseHandleInfoDTOs.size() == 0) {
										String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_APIOP001_MSG, new String[]{errorMsg.substring(0, errorMsg.length() - 6)}, null);
										msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
										sessionContext.setReturnMessage(msg);
										srmCaseTransactionDTO.setCaseId(null);
										formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
										formDTO.setCaseId(null);
										sessionContext.setResponseResult(formDTO);
										tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
										sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
										return sessionContext;
									} else {
										caseId = StringUtils.toList(tempCaseId.substring(0, tempCaseId.length() - 1), IAtomsConstants.MARK_SEPARATOR).get(0);
										srmCaseTransactionDTO.setCaseId(caseId);
										formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
										formDTO.setCaseId(caseId);
									}
								}
								//保修件，派工時，如爲iatoms建案且爲cms案件，需call cms（Task #3404）
							} else if (IAtomsConstants.YES.equals(srmCaseHandleInfoDTOs.get(0).getCmsCase())
									&& srmCaseHandleInfoDTOs.get(0).getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode())) {
								repairMap = this.repairCaseSign(srmCaseHandleInfoDTOs, Boolean.FALSE, logonUser, callCmsMap);
								if (srmCaseHandleInfoDTOs.size() == 0) {
									msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{repairMap.get("msg")});
									sessionContext.setReturnMessage(msg);
									srmCaseTransactionDTO.setCaseId(null);
									formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
									formDTO.setCaseId(null);
									sessionContext.setResponseResult(formDTO);
									tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
									sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
									return sessionContext;
								} else {
									caseId = repairMap.get("caseId");
									srmCaseTransactionDTO.setCaseId(caseId);
									formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
									formDTO.setCaseId(caseId);
								}
							}
							List<String> list = null;
							Map<String, List<String>> candidateGroupMap = new HashMap<String, List<String>>();
							int i = 0;
							for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
								// 保存案件記錄信息
								i++;
								caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
								caseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
								caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
								//Bug #2634
								String tempTransactionId = transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i);
								if(!StringUtils.hasText(caseTransactionId)) {
									caseTransactionId = tempTransactionId;
								} else {
									caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + tempTransactionId;
								}
								formDTO.setCaseTransactionId(caseTransactionId);
								
								caseTransaction.setTransactionId(transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i));
								caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
								caseTransaction.setDeptCode(srmCaseTransactionDTO.getDispatchUnit());
								caseTransaction.setDealById(srmCaseTransactionDTO.getDealById());
								caseTransaction.setDealByName(srmCaseTransactionDTO.getDealByName());
								// 實際執行時間處理
								if(srmCaseTransactionDTO.getDealDate() == null){
									caseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
								} else {
									caseTransaction.setDealDate(srmCaseTransactionDTO.getDealDate());
								}
								description = !StringUtils.hasText(srmCaseTransactionDTO.getDescription())?IAtomsConstants.MARK_EMPTY_STRING : srmCaseTransactionDTO.getDescription();
								String caseStatus = null;
								if ((IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())) && (IAtomsConstants.CASE_ACTION.DISPATCHING.getCode().equals(srmCaseTransactionDTO.getCaseActionId()))) {
									caseStatus = srmCaseHandleInfoDTO.getCaseStatus();
									formDTO.setCaseStatus(caseStatus);
									//sessionContext.setAttribute(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_STATUS.getValue(), caseStatus);
									currentActivitiCode = IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH;
									formDTO.setCurrentActivitiCode(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH);
									// 待派工狀態直接派工
									caseTransaction.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
									caseTransaction.setCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH);
									caseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode()));
									// 若關卡不變，則寫入當前關卡
									caseTransaction.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH);
									// 若關卡不變，則寫入當前關卡
									caseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode()));
									// 若案件之【自動派工】勾選
									if (IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfoDTO.getIsTms())) {
										// 處理內容為“派工至[TMS]”
										description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO)
														+ IAtomsConstants.MARK_BRACKET_LEFT 
														+ IAtomsConstants.CASE_ROLE.TMS.getCode() 
														+ IAtomsConstants.MARK_BRACKET_RIGHT;
										srmCaseTransactionDTO.setDispatchUnit(IAtomsConstants.CASE_ROLE.TMS.getCode());
										// 若案件之【自動派工】未勾選
									} else {
										// 處理內容為“派工至[維護廠商-維護部門]”
										//company = this.getCompanyDAO().findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCompanyId());
										//Bug #2305
										if(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfoDTO.getDepartmentId())) {
											department = new BimDepartment();
											department.setDeptName(i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE));
											description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT;
											description = description + department.getDeptName();
										} else{
											description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) + IAtomsConstants.MARK_BRACKET_LEFT + (!StringUtils.hasText(srmCaseHandleInfoDTO.getCompanyName()) ? IAtomsConstants.MARK_EMPTY_STRING : srmCaseHandleInfoDTO.getCompanyName()) ;
											if (StringUtils.hasText(srmCaseHandleInfoDTO.getDepartmentId())) {
												//department = this.departmentDAO.findByPrimaryKey(BimDepartment.class, srmCaseHandleInfoDTO.getDepartmentId());
												description = description + IAtomsConstants.MARK_MIDDLE_LINE + srmCaseHandleInfoDTO.getDepartmentName();
											}
										}
										caseTransaction.setDeptCode(srmCaseHandleInfoDTO.getDepartmentId());
										srmCaseTransactionDTO.setDispatchUnit(srmCaseHandleInfoDTO.getDepartmentId());
										description = description + IAtomsConstants.MARK_BRACKET_RIGHT;
										//caseTransaction.setDeptCode(caseHandleInfo.getDepartmentId());
									}
								} else {
									// 處理內容為“派工至[維護廠商-維護部門]處理人員:XXX”
									if (StringUtils.hasText(srmCaseTransactionDTO.getDispatchUnit())) {
										//原裝機單位及人員
										//Task #2401 update by 2017/09/12
										if (IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory()) && SrmCaseHandleInfoDTO.ATTRIBUTE.OLD_INSTALLED_DEPT_AND_USER.getValue().equals(srmCaseTransactionDTO.getDispatchUnit())) {
											description = (StringUtils.hasText(description) ? description + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING)
													+ i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO)
													+ IAtomsConstants.MARK_BRACKET_LEFT + srmCaseTransactionDTO.getDeptName().substring(0, 5) + IAtomsConstants.MARK_COLON
													+ (StringUtils.hasText(srmCaseHandleInfoDTO.getInstallDeptName()) ? srmCaseHandleInfoDTO.getInstallDeptName() : IAtomsConstants.MARK_EMPTY_STRING) + IAtomsConstants.MARK_SPACE 
													+ srmCaseTransactionDTO.getDeptName().substring(6, 8) + IAtomsConstants.MARK_COLON
													+ (StringUtils.hasText(srmCaseHandleInfoDTO.getInstalledUserName()) ? srmCaseHandleInfoDTO.getInstalledUserName() : IAtomsConstants.MARK_EMPTY_STRING) + IAtomsConstants.MARK_BRACKET_RIGHT;
										} else {
											description = (StringUtils.hasText(description) ? description + IAtomsConstants.MARK_WRAP : IAtomsConstants.MARK_EMPTY_STRING)
													+ i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DISPATCH_TO) 
													+ IAtomsConstants.MARK_BRACKET_LEFT + srmCaseTransactionDTO.getDeptName();
											description = description + IAtomsConstants.MARK_BRACKET_RIGHT;
											if(StringUtils.hasText(srmCaseTransactionDTO.getDealByName())){
												description = description + IAtomsConstants.MARK_SPACE + i18NUtil.getName(SrmCaseTransactionDTO.ATTRIBUTE.DEAL_BY_NAME.getValue())+IAtomsConstants.MARK_COLON + caseTransaction.getDealByName();
											}
										}
									}
									if ((IAtomsConstants.CASE_STATUS.DISPATCHED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())) && (IAtomsConstants.CASE_ACTION.DISPATCHING.getCode().equals(srmCaseTransactionDTO.getCaseActionId()))) {
										currentActivitiCode = IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH;
										formDTO.setCurrentActivitiCode(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH);
										caseTransaction.setCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH);
										caseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode()));
										// 若關卡不變，則寫入當前關卡
										caseTransaction.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_DISPATCH);
										// 若關卡不變，則寫入當前關卡
										caseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode()));
										//除了待派工和已派工其他不走流程
									} else {
										caseTransaction.setCaseStage(getCaseStatusNameByValue(srmCaseHandleInfoDTO.getCaseStatus()));
										caseTransaction.setCaseStageName(i18NUtil.getName(srmCaseHandleInfoDTO.getCaseStatus()));
										
									}
								}
								// 若案件類別為“拆機”，則派工單位增加“原裝機單位及人員”選項，供派工給原裝機人員處理拆機案件
								if (IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory()) && SrmCaseHandleInfoDTO.ATTRIBUTE.OLD_INSTALLED_DEPT_AND_USER.getValue().equals(srmCaseTransactionDTO.getDispatchUnit())) {
									caseTransaction.setDeptCode(caseHandleInfo.getInstalledDeptId());
									caseTransaction.setDealById(caseHandleInfo.getInstalledUser());
									//裝機人員姓名
									caseTransaction.setDealByName(srmCaseHandleInfoDTO.getInstalledUserName());
									srmCaseTransactionDTO.setDispatchUnit(caseHandleInfo.getInstalledDeptId());
									//裝機部門
									//department = this.departmentDAO.findByPrimaryKey(BimDepartment.class, caseHandleInfo.getInstalledDeptId());
									
								}
								// 描述處理
								if(IAtomsConstants.YES.equals(srmCaseHandleInfoDTO.getIsUpdateAsset())) {
									//Task #2401 update by 2017/09/12
									description = description + IAtomsConstants.MARK_WRAP +i18NUtil.getName(IAtomsConstants.ASSET_LINK_IS_CHANGE);
								}
								caseTransaction.setDescription(description);
								caseTransaction.setCreatedById(logonUser.getId());
								caseTransaction.setCreatedByName(logonUser.getName());
								caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
								this.srmCaseTransactionDAO.insert(caseTransaction);
								//Task #3519 存儲下行電文 要有案件歷程id
								if(callCmsMap.containsKey(srmCaseHandleInfoDTO.getCaseId())){
									apiLogResult = "true";
									this.insertApiLog(IAtomsConstants.API_RS, srmCaseHandleInfoDTO.getCaseId(), caseTransaction.getTransactionId(), logonUser, apiLogResult, null, callCmsMap.get(srmCaseHandleInfoDTO.getCaseId()));
								}
								// 更新案件處理消息
								
								if (IAtomsConstants.CASE_ACTION.DISPATCHING.getCode().equals(srmCaseTransactionDTO.getCaseActionId())) {
									// 派工時，如果不是派工給客服，TMS, QA則寫入派工單位
									if (!((IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransactionDTO.getDispatchUnit())) || (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransactionDTO.getDispatchUnit())) || (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransactionDTO.getDispatchUnit())))) {
										if ((StringUtils.hasText(srmCaseTransactionDTO.getDispatchUnit())
												&& StringUtils.hasText(caseHandleInfo.getDepartmentId())
												&& !srmCaseTransactionDTO.getDispatchUnit().equals(caseHandleInfo.getDepartmentId()))
												|| (!StringUtils.hasText(caseHandleInfo.getDepartmentId())
														&& StringUtils.hasText(srmCaseTransactionDTO.getDispatchUnit()))) {
											caseHandleInfo.setDepartmentId(srmCaseTransactionDTO.getDispatchUnit());
											if (StringUtils.hasText(srmCaseTransactionDTO.getDispatchUnit())) {
												BimDepartment bimDepartment = this.getDepartmentDAO().findByPrimaryKey(BimDepartment.class, srmCaseTransactionDTO.getDispatchUnit());
												//如果維護部門異動，異動維護廠商
												caseHandleInfo.setCompanyId(bimDepartment.getCompanyId());
											}
										}
										if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())) {
											// 裝機時 填入最後一次派工的派工單位（排除客服，TMS，QA）
											caseHandleInfo.setInstalledDeptId(srmCaseTransactionDTO.getDispatchUnit());
											// 裝機時 填入最後一次派工的處理人員（排除客服，TMS，QA）
											caseHandleInfo.setInstalledUser(srmCaseTransactionDTO.getDealById());
										}
										
									}
									// 派工，第一次派工為已派工，第二次狀態不變
									if (IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())) {									
										// 案件狀態更新為已派工
										caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
										// 進件完工日
										caseHandleInfo.setCreatedFinishDate(caseTransaction.getDealDate());
									}
									// 派工單位，包括TMS，QA，客服
									caseHandleInfo.setDispatchDeptId(srmCaseTransactionDTO.getDispatchUnit());
									caseHandleInfo.setDispatchProcessUser(caseTransaction.getDealById());
									caseHandleInfo.setDispatchProcessUsername(caseTransaction.getDealByName());
									caseHandleInfo.setDispatchDate(new Timestamp((caseTransaction.getDealDate()).getTime()));
									caseHandleInfo.setDispatchUser(logonUser.getId());
									caseHandleInfo.setDispatchUserName(logonUser.getName());
									// 處理方式
								//	caseHandleInfo.setProcessType(null);
									//CR #2869 新增三個欄位 2017/11/22
									caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
									caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
									caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
									// 修改異動人員消息
									caseHandleInfo.setUpdatedById(logonUser.getId());
									caseHandleInfo.setUpdatedByName(logonUser.getName());
									caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
									this.srmCaseHandleInfoDAO.update(caseHandleInfo);
								}
								/*if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransactionDTO.getDispatchUnit())) {
									candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode();
								} else if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransactionDTO.getDispatchUnit())) {
									candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.TMS.getCode();
								} else if (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransactionDTO.getDispatchUnit())) {
									candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.QA.getCode();
								} else {
									candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.WORK_FLOW_ROLE_VENDOR_AGENT + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.ENGINEER.getCode();
								}*/
								// CR #2951 廠商客服	//Task #3578 客戶廠商客服
								candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.CUS_VENDOR_SERVICE.getCode();
								if (IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseTransactionDTO.getDispatchUnit())) {
								} else if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseTransactionDTO.getDispatchUnit())) {
									candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.TMS.getCode();
								} else if (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseTransactionDTO.getDispatchUnit())) {
									candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.QA.getCode();
								} else {
									candidateGroup += IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.WORK_FLOW_ROLE_VENDOR_AGENT + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.AGENT.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.ENGINEER.getCode();
								}
								/*caseIds = new ArrayList<String>();
								caseIds.add(srmCaseHandleInfoDTO.getCaseId());
								formDTO.setCaseIds(caseIds);
								formDTO.setCandidateGroup(null);
								if (IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()) || IAtomsConstants.CASE_STATUS.DISPATCHED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())) {
									this.sendNextActiviti(logonUser, formDTO, currentActivitiCode, candidateGroup);
								}*/
								if (candidateGroupMap.containsKey(candidateGroup)) {
									candidateGroupMap.get(candidateGroup).add(caseHandleInfo.getCaseId());
								} else {
									list = new ArrayList<String>();
									list.add(caseHandleInfo.getCaseId());
									candidateGroupMap.put(candidateGroup, list);
								}
							}
							//formDTO.setCandidateGroup(null);
							if (IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTOs.get(0).getCaseStatus()) || IAtomsConstants.CASE_STATUS.DISPATCHED.getCode().equals(srmCaseHandleInfoDTOs.get(0).getCaseStatus())) {
								this.sendNextActivitiForDispatch(logonUser, formDTO, currentActivitiCode, candidateGroupMap, caseId);
							}
							/*try {
								this.send(formDTO);
							} catch (Exception e) {
								LOGGER.debug(this.getClass().getName() + ".dispatching()--> send() is error... ");
							}*/
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_DISPACH_SUCCESS);
						} else {
							LOGGER.error("CaseManagerService --> dispatching() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
							msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_DISPACH_FAILURE);
						}
					} else {
						LOGGER.error("CaseManagerService --> dispatching() --> ", "save error!!!", "caseId is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_DISPACH_FAILURE);
					}
				} else {
					// 消息不爲空
					if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
						msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
					} else {
						LOGGER.error("CaseManagerService --> dispatching() --> ", "validate error!!!", "resultMap msg is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_DISPATCHING)});
					}
				}
				if (errorMsg.length() > 0 && Message.STATUS.SUCCESS.equals(msg.getStatus())) {
					String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_APIOP001_MSG, new String[]{errorMsg.substring(0, errorMsg.length() - 6)}, null);
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
					tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
					sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
				} else if (repairMap != null && StringUtils.hasText(repairMap.get("msg"))) {
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{repairMap.get("msg")});
					tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
					sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
				}
				sessionContext.setReturnMessage(msg);
				sessionContext.setResponseResult(formDTO);
			} catch (DataAccessException e) {
				LOGGER.error(this.getClass().getName() + ".dispatching(SessionContext sessionContext) is error" + e);
				throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
			} catch (Exception e) {
				LOGGER.error(this.getClass().getName() + ".dispatching(SessionContext sessionContext):" + e, e);
				Message errorMsg = null;
				if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
				if (errorMsg != null && errorMsg.getCode() != null) {
					if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
						throw new ServiceException(e);
					}
				}
				throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
			}
			return sessionContext;
		}
	
	/**
	 * Purpose:通過案件狀態的value值拿到它的name
	 * @author CrissZhang
	 * @param value ： 案件狀態value值
	 * @return String ： 返回一個String類型
	 */
	private String getCaseStatusNameByValue (String value) {
		String name = IAtomsConstants.MARK_EMPTY_STRING;
		for (IAtomsConstants.CASE_STATUS s : IAtomsConstants.CASE_STATUS.values()){
			if (s.getCode().equals(value)) {
				name = s.name();
				break;
			}
		}
		return name;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getCategoryByTemplatesId(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext getCategoryByTemplatesId(SessionContext sessionContext)
			throws ServiceException {
		String categoryId = IAtomsConstants.MARK_EMPTY_STRING;
		String filePath = IAtomsConstants.MARK_EMPTY_STRING;
		try {
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			String templatesId = formDTO.getTemplatesId();
			SrmCaseTemplates srmCaseTemplates = this.srmCaseTemplatesDAO.findByPrimaryKey(SrmCaseTemplates.class, templatesId);
			if(srmCaseTemplates != null) {
				categoryId = srmCaseTemplates.getCategory();
				filePath = srmCaseTemplates.getFilePath();
			}
			formDTO.setPath(filePath);
			formDTO.setCategoryId(categoryId);
			sessionContext.setResponseResult(formDTO);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getCategoryByTemplatesId(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	
	/** (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#dispatch(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext dispatch(SessionContext sessionContext)
			throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		Message msg = null;
		String caseId = null;
		try {
			// 案件處理信息
			SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = formDTO.getSrmCaseHandleInfoDTO();
			//String candidateGroup = null;
			setUserRoleFlag(formDTO);
			caseId = srmCaseHandleInfoDTO.getCaseId();
			//Task #3519 存儲call cms 成功的案件 key 為 caseid， value 為 下行電文
	    	Map<String, String> callCmsMap = new HashMap<String, String>();
			if (!StringUtils.hasText(caseId)) {
				// 保存案件信息返回一个消息
				if (IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(formDTO.getCaseCategory())) {
					msg = saveOtherCase(formDTO);
				} else {
					//Task3404, 如果爲報修件，且爲iatoms建案、cms案件，首次派工時，則需要call cms
					if (IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(formDTO.getCaseCategory()) && !IAtomsConstants.YES.equals(formDTO.getIsCmsCreate())) {
						// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
						boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfoDTO.getDtid(), null);
						// 查詢案件資料
						SrmCaseHandleInfoDTO newCaseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(srmCaseHandleInfoDTO.getDtid(), isNewHave);
						if (IAtomsConstants.YES.equals(newCaseHandleInfoDTO.getCmsCase())) {
							formDTO.setActionId(IAtomsConstants.ACTION_CREATE_CASE);
							msg = saveCaseInfo(formDTO);
							if (Message.STATUS.SUCCESS.equals(msg.getStatus())) {
								srmCaseHandleInfoDTO.setCaseId(formDTO.getCaseId());
								formDTO.setActionId(IAtomsConstants.ACTION_NEW_DISPATCH);
								formDTO.setSrmCaseHandleInfoDTO(srmCaseHandleInfoDTO);
								sessionContext.setResponseResult(formDTO);
								sessionContext = this.dispatch(sessionContext);
								if ((Map) sessionContext.getAttributes() != null) {
									Map map = (Map) sessionContext.getAttributes().get("result");
									if (map.get(IAtomsConstants.FIELD_CMS_RESULT) != null && !(Boolean) map.get(IAtomsConstants.FIELD_CMS_RESULT)) {
										msg = sessionContext.getReturnMessage();
										msg.setStatus(Message.STATUS.SUCCESS);
										sessionContext.setReturnMessage(msg);
									}
								}
								return sessionContext;
							}
						} else {
							msg = saveCaseInfo(formDTO);
						}
					} else {
						msg = saveCaseInfo(formDTO);
					}
				}
				caseId = formDTO.getCaseId();
			} else {
				SrmCaseHandleInfoDTO caseHandleInfo = null;
				ReceiveJobNoticeDTO jobNoticeDTO = null;
				Gson gson = new GsonBuilder().create();
				ReceiveJobNoticeDTO resultMsg = null;
				String api = null;
				String json = null;
				String message =  null;
				//Map map = new HashMap();
				Boolean isError = false;
				Map<String, String> map = null;
				String apiLogResult = null;
				IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
				List<SrmCaseHandleInfoDTO> caseHandleInfoDTOs = null;
				if (formDTO.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode())
						&& IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(srmCaseHandleInfoDTO.getInstallType())) {
					caseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(caseId);
					if (caseHandleInfoDTOs != null) {
						caseHandleInfo = caseHandleInfoDTOs.get(0);
					}
					//caseHandleInfo = this.srmCaseHandleInfoDAO.getCaseInfoById(caseId);
					api = "APIOP001";
					json = null;
					jobNoticeDTO = new ReceiveJobNoticeDTO(srmCaseHandleInfoDTO.getCaseId(), caseHandleInfo.getDtid());
					json = gson.toJson(jobNoticeDTO);
					map =  NetUtil.sendHtppsNew(api, json);
					if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
						message = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
					}
					if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
						apiLogResult = "true";
					} else {
						apiLogResult = "false";
					}
					LOGGER.debug("CaseManagerService --> dispatch()(INSTALL) --> ", "message=" + message);
					//上行(RQ)
					this.insertApiLog(IAtomsConstants.API_RQ, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, null, json);
					if (StringUtils.hasText(message)) {
						Object responseJson = (Object) gson.fromJson(message, Object.class);
						resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
						if (!(resultMsg.getRESULT().equals("True"))) {
							isError = true;
							apiLogResult = "false";
							//下行(RS)
							this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), message);
						} else {
							callCmsMap.put(caseId, message);
						}
					} else {
						isError = true;
						apiLogResult = "false";
						//下行(RS)
						this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, null, "");
					}
					if (isError) {
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_CMS_APIOP001_MSG, new String[]{srmCaseHandleInfoDTO.getCaseId()});
						sessionContext.setReturnMessage(msg);
						sessionContext.setResponseResult(formDTO);
						Map tempMap = new HashMap();
						tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
						sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
						return sessionContext;
					}
					//保修件，派工時，如爲iatoms建案且爲cms案件，需call cms（Task #3404）
				} else if (IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(srmCaseHandleInfoDTO.getInstallType())
						&& formDTO.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode())) {
					caseHandleInfoDTOs = new ArrayList<SrmCaseHandleInfoDTO>();
					caseHandleInfoDTOs.add(srmCaseHandleInfoDTO);
					Map<String, String> resultMap = this.repairCaseSign(caseHandleInfoDTOs, Boolean.TRUE, logonUser, callCmsMap);
					if (caseHandleInfoDTOs.size() == 0) {
						String tempMsg = resultMap.get("msg").substring(0, resultMap.get("msg").length() - 5);
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
						sessionContext.setReturnMessage(msg);
						sessionContext.setResponseResult(formDTO);
						Map tempMap = new HashMap();
						tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
						sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
						return sessionContext;
					}
				}
				//bug 2262  處理頁面待派工送下一關
				String candidateGroup = null;
				formDTO.setHasCaseIdFlag(IAtomsConstants.PARAM_YES);
				formDTO.setCallCmsMap(callCmsMap);
				sessionContext.setRequestParameter(formDTO);
				sessionContext = createCase(sessionContext);
				formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
				List<String> caseIds = null;
				//處理頁面待派工送下一關
				caseIds = new ArrayList<String>();
				caseIds.add(srmCaseHandleInfoDTO.getCaseId());
				formDTO.setCaseIds(caseIds);
				formDTO.setActionId(IAtomsConstants.ACTION_DISPATCH);
				//caseManagerFormDTO.setCandidateGroup(null);
				String currentActivitiCode = null;
				candidateGroup = formDTO.getCandidateGroup();
				formDTO.setCandidateGroup(null);
				IAtomsLogonUser	iAtomsLogonUser = (IAtomsLogonUser) formDTO.getLogonUser();
				currentActivitiCode = IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH;
				formDTO.setCurrentActivitiCode(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH);
				//this.saveDispatchCase(srmCaseHandleInfoDTO, caseManagerFormDTO);
				this.sendNextActiviti(iAtomsLogonUser, formDTO, currentActivitiCode, candidateGroup);
				// 保存案件信息返回一个消息
				msg = sessionContext.getReturnMessage();
				//msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.SESSION_INVALIDATED_TIME_OUT);
			}
			
			sessionContext.setAttribute(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_STATUS.getValue(), IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode());
			SrmCaseTransactionDTO srmCaseTransactionDTO = new SrmCaseTransactionDTO();
			srmCaseTransactionDTO.setCaseId(caseId);
			//Bug #2373   update by 2017/09/13
			srmCaseTransactionDTO.setToMail(formDTO.getToMail());
			formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
			Map map = new HashMap();
			if (msg != null && Message.STATUS.SUCCESS.equals(msg.getStatus())) {
				map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, true);
			} else {
				map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, false);
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
			map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue(), caseId);
			sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".ctrateCase() DataAccess Exception:" + e, e);
			msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.SAVE_FAILURE, new String[]{this.getMyName()});
			throw new ServiceException(msg);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".ctrateCase(SessionContext sessionContext):" + e, e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED, new String[]{this.getMyName()}, e);
		}
		return sessionContext;
	}
	
	/** (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#voidCase(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext voidCase(SessionContext sessionContext)
			throws ServiceException {
		Message msg = null;
		StringBuffer cmsErrorMsg = new StringBuffer();
		// 主鍵id
		String transactionId = null;
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		//動作
		SrmCaseHandleInfo srmCaseHandleInfo = null;
		SrmCaseTransaction srmCaseTransaction = null;
		//存放案件編號集合的列表
		List<String> caseIdLists = new ArrayList<String>();
		try {
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			Transformer transformer = new SimpleDtoDmoTransformer();
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			String oldCaseStatus = null;
			//Task #3519 存儲call cms 成功的案件 key 為 caseid， value 為 下行電文
	    	Map<String, String> callCmsMap = new HashMap<String, String>();
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				if(StringUtils.hasText(formDTO.getCaseId())){
					// 得到案件處理集合
					List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId(), null);
					if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
						//Task #3361
						//若為報修件且為CMS案件 透過CMS API通知CMS(已退回)，通知失敗，儲存失敗，通知成功，才能儲存成功 通知失敗，顯示錯誤訊息
						Gson gson = new Gson();
						ReceiveJobNoticeDTO resultMsg = null;
						List<SrmCaseHandleInfoDTO> failDto = new ArrayList<SrmCaseHandleInfoDTO>();
						for(SrmCaseHandleInfoDTO dto : srmCaseHandleInfoDTOs){
							if(dto.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode())
									&& dto.getCmsCase().equals(IAtomsConstants.PARAM_YES)
									&& (!(dto.getIsIatomsCreateCms().equals(IAtomsConstants.PARAM_YES)
											&& dto.getDispatchDate() == null))){
								//處理參數
								ReceiveJobNoticeDTO receiveJobNoticeDTO = new ReceiveJobNoticeDTO("04", dto.getCaseId(),
										dto.getMerMid(),dto.getDtid());
								String jsonString = gson.toJson(receiveJobNoticeDTO);
								LOGGER.debug("CaseManagerService --> voidCase() --> ", "json=" + jsonString);
								//call CMS API
								Map<String, String> map = null;
								String apiLogResult = null;
								String resultString = null;
								map = NetUtil.sendHtppsNew("APIOP004", jsonString);
								if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
									resultString = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
								}
								if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
									apiLogResult = "true";
								} else {
									apiLogResult = "false";
								}
								LOGGER.debug("CaseManagerService --> voidCase() --> ", "message=" + resultString);
								//上行(RQ)
								this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, jsonString);
								if (StringUtils.hasText(resultString)) {
									Object responseJson = (Object) gson.fromJson(resultString, Object.class);
									LOGGER.debug("CaseManagerService --> voidCase() --> ", "responseJson=" + responseJson);
									resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
									if (!(resultMsg.getRESULT().equals("True"))) {
										failDto.add(dto);
										cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
										apiLogResult = "false";
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), resultString);
									} else {
										callCmsMap.put(dto.getCaseId(), resultString);
									}
								} else {
									LOGGER.debug("CaseManagerService --> voidCase() --> ", "save error!!!", "message is null");
									apiLogResult = "false";
									cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), "cms請求失敗"}, null)).append("</br>");
									//下行(RS)
									this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
									failDto.add(dto);
								}
							}
						}
						if (!CollectionUtils.isEmpty(failDto)) {
							for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : failDto) {
								srmCaseHandleInfoDTOs.remove(srmCaseHandleInfoDTO);
							}
							if (srmCaseHandleInfoDTOs.size() == 0) {
								Map map = new HashMap();
							    map.put(IAtomsConstants.FIELD_CMS_RESULT, false);
							    String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{cmsErrorMsg.substring(0, cmsErrorMsg.length() - 5)}, null);
							    msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
							    sessionContext.setReturnMessage(msg);
							    sessionContext.setResponseResult(formDTO);
							    sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
								return sessionContext;
							}
						}
						//要進行刪除操作的caseId組成的字符串
						String caseIds= IAtomsConstants.MARK_EMPTY_STRING;
						
						SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = null;
						String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
						List<SrmPaymentInfoDTO> paymentInfoDTOs = null;
						List<String> paymentIds = null;
						for (int i = 0; i < srmCaseHandleInfoDTOs.size(); i++) {
							srmCaseHandleInfoDTO = srmCaseHandleInfoDTOs.get(i);
							//Task #3346 刪除由案件建立的求償案件
							paymentInfoDTOs = this.paymentInfoDAO.getByCaseCreate(srmCaseHandleInfoDTO.getCaseId());
							if (!CollectionUtils.isEmpty(paymentInfoDTOs)) {
								paymentIds = new ArrayList<String>();
								for (SrmPaymentInfoDTO dto : paymentInfoDTOs) {
									paymentIds.add(dto.getPaymentId());
								}
								this.paymentInfoDAO.deletePaymenInfo(paymentIds);
							}
							caseIds += IAtomsConstants.SINGLE_QUOTATION_MARKS + srmCaseHandleInfoDTO.getCaseId() 
									+ IAtomsConstants.SINGLE_QUOTATION_MARKS + IAtomsConstants.MARK_SEPARATOR;
							//若此次循環為最後一次循環則將caseIds最後的一位逗號截取
							if (i == srmCaseHandleInfoDTOs.size() - 1) {
								caseIds = caseIds.substring(0, caseIds.length() - 1);
							}
							if(!StringUtils.hasText(oldCaseStatus)){
								oldCaseStatus = srmCaseHandleInfoDTO.getCaseStatus();
							}
							caseIdLists.add(srmCaseHandleInfoDTO.getCaseId());
							srmCaseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
							//案件狀態更新為已作廢
							srmCaseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.VOIDED.getCode());
							//修改結案人員信息
							srmCaseHandleInfo.setCloseUser(logonUser.getId());
							srmCaseHandleInfo.setCloseUserName(logonUser.getName());
							if(srmCaseTransactionDTO.getDealDate() == null){
								srmCaseHandleInfo.setCloseDate(DateTimeUtils.getCurrentTimestamp());
							} else {
								srmCaseHandleInfo.setCloseDate(srmCaseTransactionDTO.getDealDate());
							}
							//修改異動人員消息
							srmCaseHandleInfo.setUpdatedById(logonUser.getId());
							srmCaseHandleInfo.setUpdatedByName(logonUser.getName());
							srmCaseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							//清空目前處理人信息
							/*srmCaseHandleInfo.setDispatchProcessUser(null);
							srmCaseHandleInfo.setDispatchProcessUsername(null);*/
							//CR #2869 新增三個欄位 2017/11/22
							srmCaseHandleInfo.setThirdDescription(srmCaseHandleInfo.getSecondDescription());
							srmCaseHandleInfo.setSecondDescription(srmCaseHandleInfo.getFirstDescription());
							srmCaseHandleInfo.setFirstDescription(srmCaseTransactionDTO.getDescription());
							this.srmCaseHandleInfoDAO.update(srmCaseHandleInfo);
							
							//生成id
							transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
							srmCaseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
							
							if(!StringUtils.hasText(caseTransactionId)) {
								caseTransactionId = transactionId;
							} else {
								caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + transactionId;
							}
							formDTO.setCaseTransactionId(caseTransactionId);
							// 主鍵
							srmCaseTransaction.setTransactionId(transactionId);
							srmCaseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
							// 放置執行動作
							srmCaseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
							// 放置案件狀態
							srmCaseTransaction.setCaseStatus(srmCaseTransactionDTO.getCaseStatus());
							srmCaseTransaction.setDealById(logonUser.getId());
							srmCaseTransaction.setDealByName(logonUser.getName());
							// 實際執行時間處理
							srmCaseTransaction.setDealDate(DateTimeUtils.getCurrentTimestamp());
							//當前關卡
							srmCaseTransaction.setCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH);
							//當前關卡名稱
							srmCaseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode()));
							//下一關關卡代碼
							srmCaseTransaction.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_CASE_PROCESS_END);
							//下一關關卡名稱
							srmCaseTransaction.setNextCaseStageName(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_NAME_END);
							srmCaseTransaction.setCreatedById(logonUser.getId());
							srmCaseTransaction.setCreatedByName(logonUser.getName());
							srmCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							this.srmCaseTransactionDAO.insert(srmCaseTransaction);
							//Task #3519 存儲下行電文 要有案件歷程id
							if(callCmsMap.containsKey(srmCaseHandleInfoDTO.getCaseId())){
								String apiLogResult = "true";
								this.insertApiLog(IAtomsConstants.API_RS, srmCaseHandleInfoDTO.getCaseId(), srmCaseTransaction.getTransactionId(), logonUser, apiLogResult, null, callCmsMap.get(srmCaseHandleInfoDTO.getCaseId()));
							}
							
							//複製數據到歷史和最新模塊,刪除處理中的所有信息
						//	this.srmCaseHandleInfoDAO.copyToHis(srmCaseHandleInfo.getCaseId(), srmCaseHandleInfo.getDtid(), IAtomsConstants.NO, IAtomsConstants.NO);
						}
						formDTO.setCaseIds(caseIdLists);
						//送至下一關
					//	this.sendNextActiviti(logonUser, formDTO, IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH, null);
//						Bug #2331
						this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
						//調用CaseDetailDao的放法刪除CAFE_CASE_DETAIL和CAFE_CASE_TRANSACTION表的相關數據
						this.caseDetailDAO.deleteCaseInfos(caseIds);
						//Task #3584 reopen 若是bcc裝機件EI開頭 作廢后，清空同dtid下的裝機案件單號，
						CompanyDTO bccCompanyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_BCC);
						if((IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())
								&&(bccCompanyDTO == null 
										|| (bccCompanyDTO != null 
												&& !bccCompanyDTO.getCompanyId().equals(srmCaseHandleInfo.getCustomerId()))))
									|| (bccCompanyDTO != null 
												&& bccCompanyDTO.getCompanyId().equals(srmCaseHandleInfo.getCustomerId())
												&& StringUtils.hasText(srmCaseHandleInfo.getRequirementNo())
												&& (srmCaseHandleInfo.getRequirementNo().startsWith("ei")
														|| srmCaseHandleInfo.getRequirementNo().startsWith("EI")))){
							//調用存儲過程，將同dtid下installCaseId的值改變， 或者同dtid下 em eu...installCaseId 的值改變
							this.srmCaseHandleInfoDAO.changeInstallCaseId(srmCaseHandleInfo.getCaseId(), srmCaseHandleInfo.getDtid(), null, null, null);
						}
						/*try {
							this.send(formDTO);
						} catch (Exception e) {
							LOGGER.debug("voidCase() --> send() is error... ");
						}*/
						if (cmsErrorMsg.length() > 0) {
						       Map map = new HashMap();
						       map.put(IAtomsConstants.FIELD_CMS_RESULT, false);
						       sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
						       String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{cmsErrorMsg.substring(0, cmsErrorMsg.length() - 5)}, null);
						       msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
						      } else {
						       msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_VOID_CASE)});
						      }
					} else {
						LOGGER.error("CaseManagerService --> voidCase() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_VOID_CASE)});
					}
				} else {
					LOGGER.error("CaseManagerService --> voidCase() --> ", "save error!!!", "caseId is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_VOID_CASE)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> voidCase() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_VOID_CASE)});
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error("CaseManagerService", ".voidCase(SessionContext sessionContext) is error", e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error("CaseManagerService", ".voidCase(SessionContext sessionContext) is error", e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#response(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext response(SessionContext sessionContext)
			throws ServiceException {
		Message msg = null;
		// 主鍵id
		String transactionId = null;
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		String oldCaseStatus = IAtomsConstants.MARK_EMPTY_STRING;
		try {
			//動作
			SrmCaseHandleInfo caseHandleInfo = null;
			SrmCaseTransaction caseTransaction = null;
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			String[] caseIds = null;
			Transformer transformer = new SimpleDtoDmoTransformer();
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				if(StringUtils.hasText(srmCaseTransactionDTO.getCaseId())){
					String ids = this.checkTransactionParam(srmCaseTransactionDTO.getCaseId());
					if (ids.length() != 0) {
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_CASE_NO_TRANS_PARAM, new String[]{ids});
						sessionContext.setReturnMessage(msg);
						sessionContext.setResponseResult(formDTO);
						return sessionContext;
					}
					caseIds = srmCaseTransactionDTO.getCaseId().split(IAtomsConstants.MARK_SEPARATOR);
					if(caseIds != null){
						String delay = null;
						String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
						//生成id
						transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
						int i = 0;
						SrmCaseTransactionDTO caseTransactionDTO = null;
						if (srmCaseTransactionDTO.getDelayTime() != null) {
							caseTransactionDTO = (SrmCaseTransactionDTO) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransactionDTO());
							caseTransactionDTO.setCaseStage(IAtomsConstants.CASE_ACTION.DELAY.getCode());
							caseTransactionDTO.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_ACTION.DELAY.getCode()));
							caseTransactionDTO.setCaseActionId(IAtomsConstants.CASE_ACTION.DELAY.getCode());
							caseTransactionDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.DELAYING.getCode());
						}
						// 得到案件處理集合
						List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = (List<SrmCaseHandleInfoDTO>) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT);
						for (SrmCaseHandleInfoDTO caseHandleInfoDTO : srmCaseHandleInfoDTOs) {
							i++;
							// 更新案件處理消息
							caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(caseHandleInfoDTO, new SrmCaseHandleInfo());
							//獲取案件主檔
							//caseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseIds[i]);
							if (caseHandleInfo != null) {
								if(!StringUtils.hasText(oldCaseStatus)){
									oldCaseStatus = caseHandleInfo.getCaseStatus();
								}
								//生成id
								//transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
								caseTransaction = new SrmCaseTransaction();
								transformer.transform(srmCaseTransactionDTO, caseTransaction);
								//案件編號
								caseTransaction.setCaseId(caseHandleInfoDTO.getCaseId());
								//Bug #2634
								String tempTransactionId = transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i);
								if(!StringUtils.hasText(caseTransactionId)) {
									caseTransactionId = tempTransactionId;
								} else {
									caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + tempTransactionId;
								}
								formDTO.setCaseTransactionId(caseTransactionId);
								// 主鍵
								caseTransaction.setTransactionId(transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i));
								// 放置執行動作
								caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
								// 放置案件狀態
								caseTransaction.setCaseStatus(srmCaseTransactionDTO.getCaseStatus());
								// 實際執行時間處理
								if(srmCaseTransactionDTO.getDealDate() == null){
									caseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
								} else {
									caseTransaction.setDealDate(srmCaseTransactionDTO.getDealDate());
								}
								// 描述處理
								caseTransaction.setDescription(srmCaseTransactionDTO.getDescription());
								//新增人員信息
								caseTransaction.setCreatedById(logonUser.getId());
								caseTransaction.setCreatedByName(logonUser.getName());
								caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
								//當前關卡
								caseTransaction.setCaseStage(srmCaseTransactionDTO.getCaseStatus());
								//當前關卡名稱
								if(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(oldCaseStatus)) {
									// 進件完工日  當脫離待派工狀態時，需寫入進件完工日 2018/01/08
									caseHandleInfo.setCreatedFinishDate(caseTransaction.getDealDate());
									//待派工
									caseTransaction.setCaseStageName(i18NUtil.getName(oldCaseStatus));
								} else {
									//已派工
									caseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode()));
								}
								//下一關關卡代碼
								caseTransaction.setNextCaseStage(IAtomsConstants.CASE_STATUS.RESPONSED.getCode());
								//下一關關卡名稱
								caseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.RESPONSED.getCode()));
								this.srmCaseTransactionDAO.insert(caseTransaction);
								Timestamp delayTime = srmCaseTransactionDTO.getDelayTime();
								//Task #3124 回應時，可以同時延期，若輸入延期時間，多新增一筆延期紀錄
								if (delayTime != null) {
									i++;
									delay = updateDelay(caseHandleInfoDTO, logonUser, transactionId, caseTransactionDTO, delay, IAtomsConstants.CASE_STATUS.RESPONSED.getCode(), i,
											true);
								} else {
									caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.RESPONSED.getCode());
									// 回應動作人員 ID
									caseHandleInfo.setResponseUser(logonUser.getId());
									// 回應動作人員姓名
									caseHandleInfo.setResponseUserName(logonUser.getName());
									// 回應動作日期 畫面上輸入之實際執行時間,如果為空,則填入當前時間
									caseHandleInfo.setResponseDate(caseTransaction.getDealDate());
									//CR #2869 新增三個欄位 2017/11/22
									caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
									caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
									caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
									caseHandleInfo.setUpdatedById(logonUser.getId());
									caseHandleInfo.setUpdatedByName(logonUser.getName());
									caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
									this.srmCaseHandleInfoDAO.update(caseHandleInfo);
								}
							}
						}
						if(msg == null){
							formDTO.setCaseIds(StringUtils.toList(srmCaseTransactionDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR));
							if(StringUtils.hasText(oldCaseStatus)){
								//送至下一關
								this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
								/*try {
									this.send(formDTO);
								} catch (Exception e) {
									LOGGER.debug("CaseManagerService.response() --> send() is error... ");
								}*/
								//Task #3124 回應時，可以同時延期，若輸入延期時間，多新增一筆延期紀錄
								if (srmCaseTransactionDTO.getDelayTime() != null) {
									String caseStatus = formDTO.getCaseStatus();
									formDTO.setCaseActionId(IAtomsConstants.CASE_ACTION.DELAY.getCode());
									formDTO.setActionId(IAtomsConstants.CASE_ACTION.DELAY.getCode());
									formDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.RESPONSED.getCode());
									caseTransactionDTO.setNowCaseStatus(IAtomsConstants.CASE_STATUS.RESPONSED.getCode());
									formDTO.setSrmCaseTransactionDTO(caseTransactionDTO);
									formDTO.setCaseTransactionId(delay);
									this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(IAtomsConstants.CASE_STATUS.RESPONSED.getCode()), null);
									
									try {
										this.send(formDTO);
									} catch (Exception e) {
										LOGGER.debug("CaseManagerService.response() --> send() is error... ");
									}
									formDTO.setActionId(IAtomsConstants.CASE_ACTION.RESPONSE.getCode());
									formDTO.setCaseActionId(IAtomsConstants.CASE_ACTION.RESPONSE.getCode());
									formDTO.setCaseStatus(caseStatus);
									formDTO.setCaseTransactionId(caseTransactionId);
								}	
							}
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RESPONSE)});

						}
					} else {
						LOGGER.error("CaseManagerService --> response() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RESPONSE)});
					}
				} else {
					LOGGER.error("CaseManagerService --> response() --> ", "save error!!!", "caseId is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RESPONSE)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> response() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RESPONSE)});
				}
			}
			
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".response(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".response(SessionContext sessionContext):" + e, e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#delay(cafe.core.context.SessionContext)
	 */
	public SessionContext delay(SessionContext sessionContext) throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		String oldCaseStatus = IAtomsConstants.MARK_EMPTY_STRING;
		Message msg = null;
		try {
			// 案件處理記錄主鍵id
			String transactionId = null;
			// 案件處理記錄DTO對象
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if ((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)) {
				if(StringUtils.hasText(formDTO.getCaseId())){
					// 實際執行時間處理
					if(srmCaseTransactionDTO.getDealDate() == null){
						srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
					}
					// 案件處理記錄主鍵id
					transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
					// 得到案件處理集合
					List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId(), null);
					if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
						int i = 0;
						String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
//						String caseType = null;
						for(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs){
							if(!StringUtils.hasText(oldCaseStatus)){
								oldCaseStatus = srmCaseHandleInfoDTO.getCaseStatus();
							}
							caseTransactionId = updateDelay(srmCaseHandleInfoDTO, logonUser, transactionId, srmCaseTransactionDTO, caseTransactionId, oldCaseStatus, i, false);
							formDTO.setCaseTransactionId(caseTransactionId);
							i++;
						}
						if (msg == null) {
							formDTO.setCaseIds(StringUtils.toList(formDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR));
							//Task #3123 延期也可以延期 不送下一關
							if(StringUtils.hasText(oldCaseStatus) && !IAtomsConstants.CASE_STATUS.DELAYING.getCode().equals(oldCaseStatus)){
								//送至下一關
								this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
							}
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_DELAY)});
							/*try {
								this.send(formDTO);
							} catch (Exception e) {
								LOGGER.debug(".delay() --> send() is error... ");
							}*/
						}
					} else {
						LOGGER.error("CaseManagerService --> delay() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_DELAY)});
					}
				} else {
					LOGGER.error("CaseManagerService --> delay() --> ", "save error!!!", "caseId is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_DELAY)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> delay() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_DELAY)});
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".delay(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".delay(SessionContext sessionContext):" + e, e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}

	private String updateDelay(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO, IAtomsLogonUser logonUser, String transactionId, SrmCaseTransactionDTO srmCaseTransactionDTO,
			String caseTransactionId, String oldCaseStatus, int i, boolean isResponse) {
		try {
			// dto/dmo轉換對象
			Transformer transformer = new SimpleDtoDmoTransformer();
			String description = null;
			// 更新案件處理消息
			SrmCaseHandleInfo caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
//			BimMerchantHeader bimMerchantHeader = this.merchantHeaderDAO.findByPrimaryKey(BimMerchantHeader.class, caseHandleInfo.getMerchantHeaderId());
//			if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(caseHandleInfo.getCaseType())) {
//				caseType = IAtomsConstants.TICKET_MODE_COMMON;
//			} else {
//				caseType = caseHandleInfo.getCaseType();
//			}
			/*List<ContractSlaDTO> contractSlaDTOList = this.contractSlaDAO.listBy(null, caseHandleInfo.getContractId(), bimMerchantHeader.getArea(),
					caseHandleInfo.getCaseCategory(), caseType, null, null, null, null, false);
			if (CollectionUtils.isEmpty(contractSlaDTOList)) {
				msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_SLA_FOR_CASE_PARAM, new String[]{srmCaseHandleInfoDTO.getCaseId()});
				break;
			}*/
			// 保存案件記錄信息
			description = null;
			SrmCaseTransaction caseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
			if(StringUtils.hasText(caseTransaction.getDescription())){
				description = i18NUtil.getName(IAtomsMessageCode.PARAM_DEAL_DATE, new String[]{DateTimeUtils.toString(caseTransaction.getDelayTime(), DateTimeUtils.DT_FMT_YYYYMMDD_SLASH)}, null)
						+ IAtomsConstants.MARK_WRAP + caseTransaction.getDescription();
			} else {
				description = i18NUtil.getName(IAtomsMessageCode.PARAM_DEAL_DATE, new String[]{DateTimeUtils.toString(caseTransaction.getDelayTime(), DateTimeUtils.DT_FMT_YYYYMMDD_SLASH)}, null);
			}
			// 實際執行時間處理
			if(srmCaseTransactionDTO.getDealDate() == null){
				caseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
			} else {
				caseTransaction.setDealDate(srmCaseTransactionDTO.getDealDate());
			}
			caseTransaction.setDescription(description);
			caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
			//Bug #2634
			String tempTransactionId = transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i);
			if(!StringUtils.hasText(caseTransactionId)) {
				caseTransactionId = tempTransactionId;
			} else {
				caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + tempTransactionId;
			}
			//formDTO.setCaseTransactionId(caseTransactionId);
			
			caseTransaction.setTransactionId(transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i));
			caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
			caseTransaction.setCaseStage(srmCaseTransactionDTO.getCaseStage());
			caseTransaction.setCaseStageName(srmCaseTransactionDTO.getCaseStageName());
			caseTransaction.setNextCaseStage(IAtomsConstants.CASE_STATUS.DELAYING.getCode());
			caseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DELAYING.getCode()));
			caseTransaction.setCreatedById(logonUser.getId());
			caseTransaction.setCreatedByName(logonUser.getName());
			caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
			this.srmCaseTransactionDAO.insert(caseTransaction);
			
			//ContractSlaDTO contractSlaDTO = contractSlaDTOList.get(0);
			// Task #2489 專案與查核案件，無須計算SLA
			// Task #3385若為雲端租賃設備(CMS_CASE=Y或裝機件 裝機類型=微型商戶)所有案件類別，合約編號非必填，不用驗證SLA
			// 該處判斷CMS_CASE=Y
			if(IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory()) 
					|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
					|| IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
					|| IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfoDTO.getCmsCase())){
				if(IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(srmCaseHandleInfoDTO.getCaseType())){
					srmCaseHandleInfoDTO.setExpectedCompletionDate(srmCaseTransactionDTO.getDelayTime());
				} 
			} else {
				// 得到計算時效的map集合
				Timestamp tempDate = new Timestamp((setHourForDate(srmCaseTransactionDTO.getDelayTime(), 23, 59, 59, 0)).getTime());
				if (IAtomsConstants.CASE_STATUS.ARRIVED.getCode().equals(caseHandleInfo.getCaseStatus())) {
						if(IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(srmCaseHandleInfoDTO.getCaseType())){
							srmCaseHandleInfoDTO.setExpectedCompletionDate(srmCaseTransactionDTO.getDelayTime());
						} 
						// 應完修時間
						srmCaseHandleInfoDTO.setAcceptableFinishDate(tempDate);
					
					//srmCaseHandleInfoDTO.setCompleteWarnning(contractSlaDTO.getCompleteWarnning());
				} else {
					
						if(IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(srmCaseHandleInfoDTO.getCaseType())){
							srmCaseHandleInfoDTO.setExpectedCompletionDate(srmCaseTransactionDTO.getDelayTime());
						} 
						// 應到達時間
						srmCaseHandleInfoDTO.setAcceptableArriveDate(tempDate);
						// 應完修時間
						srmCaseHandleInfoDTO.setAcceptableFinishDate(tempDate);
					
				}
			}
			// 更新案件處理消息
			caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
			// 案件狀態更新為延期中
			caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.DELAYING.getCode());
			//CR #2869 新增三個欄位 2017/11/22
			caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
			caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
			caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
			caseHandleInfo.setUpdatedById(logonUser.getId());
			caseHandleInfo.setUpdatedByName(logonUser.getName());
			caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
			
			// Task #3205 是否執行過延期
			caseHandleInfo.setHasDelay(IAtomsConstants.YES);
			
			if (isResponse) {
				// 回應動作日期 畫面上輸入之實際執行時間,如果為空,則填入當前時間
				caseHandleInfo.setResponseDate(caseTransaction.getDealDate());
				// 回應動作人員 ID
				caseHandleInfo.setResponseUser(logonUser.getId());
				// 回應動作人員姓名
				caseHandleInfo.setResponseUserName(logonUser.getName());
			}
			this.srmCaseHandleInfoDAO.update(caseHandleInfo);
		} catch (Exception e) {
			// TODO: handle exception
			LOGGER.error(this.getClass().getName() + ".updateDelay(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		}
		return caseTransactionId;
	}
	
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#retreat(cafe.core.context.SessionContext)
	 */
	public SessionContext retreat(SessionContext sessionContext) throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		String oldCaseStatus = IAtomsConstants.MARK_EMPTY_STRING;
		Message msg = null;
		try {
			// 案件處理記錄主鍵id
			String transactionId = null;
			// 案件處理處理中資料DMO對象
			SrmCaseHandleInfo caseHandleInfo = null;
			// 案件處理記錄DMO對象
			SrmCaseTransaction caseTransaction = null;
			// 案件處理記錄DTO對象
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			// dto/dmo轉換對象
			Transformer transformer = new SimpleDtoDmoTransformer();
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				if(StringUtils.hasText(formDTO.getCaseId())){
					// 實際執行時間處理
					if(srmCaseTransactionDTO.getDealDate() == null){
						srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
					}
					// 案件處理記錄主鍵id
					transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
					// 得到案件處理集合
					List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId(), null);
					// Task #3113 完修退回至客服
					boolean isCompeteStatus = false;
					// 已派工接受群組
					// 設置下一關卡群組candidateGroup，客服 ==》》 “CUSTOMER_SERVICE” TMS ==》》 “CUSTOMER_SERVICE，TMS””，QA ==》》 “CUSTOMER_SERVICE，QA” 維護廠商 ==》》“CUSTOMER_SERVICE，AGENT, ENGINEER”.
					//Task #3578 客戶廠商客服
					String candidateGroup = IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.VENDOR_SERVICE.getCode() + IAtomsConstants.MARK_SEPARATOR + IAtomsConstants.CASE_ROLE.CUS_VENDOR_SERVICE.getCode();;
					// 歷程描述 退回至客服
					String description = null;
					if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
						int i = 0;
						String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
						for(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs){
							formDTO.setCurrentActivitiCode(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH);
							
							// Task #3113 完修退回至客服
							isCompeteStatus = false;
							if(IAtomsConstants.CASE_STATUS.COMPLETED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
								isCompeteStatus = true;
							}
							// 保存案件記錄信息
							i++;
							caseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
							caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
							//Bug #2634
							String tempTransactionId = transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i);
							if(!StringUtils.hasText(caseTransactionId)) {
								caseTransactionId = tempTransactionId;
							} else {
								caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + tempTransactionId;
							}
							formDTO.setCaseTransactionId(caseTransactionId);
							caseTransaction.setTransactionId(transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i));
							caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
							// Task #3113 完修退回至客服
						//	caseTransaction.setCaseStage(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode());
							LOGGER.debug("CaseManagerService.retreat() -->caseTransaction status=" + caseTransaction.getCaseStatus());
							
							// Task #3113 完修退回至客服
							if(isCompeteStatus){
								caseTransaction.setCaseStage(IAtomsConstants.CASE_STATUS.COMPLETED.getCode());
								caseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.COMPLETED.getCode()));
								caseTransaction.setNextCaseStage(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
								caseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode()));
								
								caseTransaction.setDeptCode(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
								// 歷程描述 退回至客服
								description = i18NUtil.getName(IAtomsMessageCode.RETREAT_CASE_TO_CUSTOMER_SERVICE);
								description = StringUtils.hasText(caseTransaction.getDescription()) ? caseTransaction.getDescription()  + IAtomsConstants.MARK_WRAP + description : description;
								caseTransaction.setDescription(description);
							} else {
								caseTransaction.setCaseStage(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode());
								caseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode()));
								caseTransaction.setNextCaseStage(IAtomsConstants.CASE_STATUS.COMPLETED.getCode());
								caseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.COMPLETED.getCode()));
							}
							//待結案審查
						//	caseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode()));
						//	caseTransaction.setNextCaseStage(IAtomsConstants.CASE_STATUS.COMPLETED.getCode());
						//	caseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.COMPLETED.getCode()));
							caseTransaction.setCreatedById(logonUser.getId());
							caseTransaction.setCreatedByName(logonUser.getName());
							caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							this.srmCaseTransactionDAO.insert(caseTransaction);
							if(!StringUtils.hasText(oldCaseStatus)){
								oldCaseStatus = srmCaseHandleInfoDTO.getCaseStatus();
							}
							// 更新案件處理消息
							caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
							// 案件狀態更新為完修
						//	caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.COMPLETED.getCode());
							
							// Task #3113 完修退回至客服
							if(isCompeteStatus){
								caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.DISPATCHED.getCode());
								caseHandleInfo.setResponseUser(null);
								caseHandleInfo.setResponseUserName(null);
								caseHandleInfo.setResponseDate(null);
								
								caseHandleInfo.setArriveUser(null);
								caseHandleInfo.setArriveUserName(null);
								caseHandleInfo.setArriveDate(null);
								caseHandleInfo.setAttendanceTimes(0);
									
								caseHandleInfo.setCompleteUser(null);
								caseHandleInfo.setCompleteUserName(null);
								caseHandleInfo.setCompleteDate(null);
								caseHandleInfo.setCompleteDepartmentId(null);
								caseHandleInfo.setProcessType(null);

								caseHandleInfo.setAnalyzeDate(null);
								caseHandleInfo.setProblemReason(null);
								caseHandleInfo.setProblemReasonCode(null);
								caseHandleInfo.setProblemSolution(null);
								caseHandleInfo.setProblemSolutionCode(null);
								caseHandleInfo.setResponsibity(null);
								caseHandleInfo.setAnalyzeUser(null);
								caseHandleInfo.setAnalyzeUserName(null);
								caseHandleInfo.setInstalledDeptId(null);

								caseHandleInfo.setProcessType(null);
								caseHandleInfo.setCompleteUser(null);
								caseHandleInfo.setCompleteUserName(null);
								caseHandleInfo.setCompleteDate(null);
								caseHandleInfo.setHasOnlineExclusion(IAtomsConstants.NO);

								caseHandleInfo.setRepairTimes(1);
								
								
								// 派工單位，包括TMS，QA，客服
								caseHandleInfo.setDispatchDeptId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
								caseHandleInfo.setDispatchDate(new Timestamp((caseTransaction.getDealDate()).getTime()));
								caseHandleInfo.setDispatchUser(logonUser.getId());
								caseHandleInfo.setDispatchUserName(logonUser.getName());
								
								caseHandleInfo.setDispatchProcessUser(null);
								caseHandleInfo.setDispatchProcessUsername(null);
								
								// Task #3205 是否執行過延期
								caseHandleInfo.setHasDelay(IAtomsConstants.NO);
							} else {
								caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.COMPLETED.getCode());
								// Task #3110 退回标记
								caseHandleInfo.setHasRetreat(IAtomsConstants.PARAM_YES);
							}
							
							LOGGER.debug("CaseManagerService.retreat() --> status=" + caseHandleInfo.getCaseStatus());
							caseHandleInfo.setUpdatedById(logonUser.getId());
							caseHandleInfo.setUpdatedByName(logonUser.getName());
							caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							//CR #2869 新增三個欄位 2017/11/22
							caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
							caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
							caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
							// Task #3113 完修退回至客服
							// Task #3110 退回标记
						//	caseHandleInfo.setHasRetreat(IAtomsConstants.PARAM_YES);
							this.srmCaseHandleInfoDAO.update(caseHandleInfo);
						}
						formDTO.setCaseIds(StringUtils.toList(formDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR));
						if(StringUtils.hasText(oldCaseStatus)){
							//送至下一關
						//	this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
							// Task #3113 完修退回至客服
							this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), candidateGroup);
							/*try {
								this.send(formDTO);
							} catch (Exception e) {
								LOGGER.debug("CaseManagerService.retreat() --> send() is error... ");
							}*/
						}
						msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RETREAT)});
					} else {
						LOGGER.error("CaseManagerService --> retreat() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RETREAT)});
					}
				} else {
					LOGGER.error("CaseManagerService --> retreat() --> ", "save error!!!", "caseId is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RETREAT)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> retreat() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RETREAT)});
				}
			}
			
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".retreat(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".retreat(SessionContext sessionContext):" + e, e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}

	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#rushRepair(cafe.core.context.SessionContext)
	 */
	public SessionContext rushRepair(SessionContext sessionContext) throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		String oldCaseStatus = IAtomsConstants.MARK_EMPTY_STRING;
		Message msg = null;
		try {
			// 案件處理記錄主鍵id
			String transactionId = null;
			// 案件處理處理中資料DMO對象
			SrmCaseHandleInfo caseHandleInfo = null;
			// 案件處理記錄DMO對象
			SrmCaseTransaction caseTransaction = null;
			// 案件處理記錄DTO對象
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			// dto/dmo轉換對象
			Transformer transformer = new SimpleDtoDmoTransformer();
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if ((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)) {
				if(StringUtils.hasText(formDTO.getCaseId())){
					// 實際執行時間處理
					if(srmCaseTransactionDTO.getDealDate() == null){
						srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
					}
					// 案件處理記錄主鍵id
					transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
					// 得到案件處理集合
					List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId(), null);
					if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
						int i = 0;
						String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
						for(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs){
							// 保存案件記錄信息
							i++;
							caseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
							caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
							//Bug #2634
							String tempTransactionId = transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i);
							if(!StringUtils.hasText(caseTransactionId)) {
								caseTransactionId = tempTransactionId;
							} else {
								caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + tempTransactionId;
							}
							formDTO.setCaseTransactionId(caseTransactionId);
							
							caseTransaction.setTransactionId(transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i));
							caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
							caseTransaction.setCaseStage(srmCaseHandleInfoDTO.getCaseStatus());
							caseTransaction.setCaseStageName(srmCaseHandleInfoDTO.getCaseCategoryName());
							caseTransaction.setNextCaseStage(srmCaseHandleInfoDTO.getCaseStatus());
							caseTransaction.setNextCaseStageName(srmCaseHandleInfoDTO.getCaseCategoryName());
							caseTransaction.setCreatedById(logonUser.getId());
							caseTransaction.setCreatedByName(logonUser.getName());
							caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							this.srmCaseTransactionDAO.insert(caseTransaction);
							if(!StringUtils.hasText(oldCaseStatus)){
								oldCaseStatus = srmCaseHandleInfoDTO.getCaseStatus();
							}
							// 更新案件處理消息
							caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
							Integer repairTimes = caseHandleInfo.getRepairTimes();
							if (repairTimes == null) {
								repairTimes = 1;
							}
							caseHandleInfo.setRepairTimes(repairTimes + 1);
							caseHandleInfo.setUpdatedById(logonUser.getId());
							caseHandleInfo.setUpdatedByName(logonUser.getName());
							caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							//CR #2869 新增三個欄位 2017/11/22
							caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
							caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
							caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
							this.srmCaseHandleInfoDAO.update(caseHandleInfo);
						}
						/*try {
							this.send(formDTO);
						} catch (Exception e) {
							LOGGER.debug(".rushRepair() --> send() is error... ");
						}*/
						msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RUSH_REPAIR)});
					} else {
						LOGGER.error("CaseManagerService --> complete() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RUSH_REPAIR)});
					}
				} else {
					LOGGER.error("CaseManagerService --> complete() --> ", "save error!!!", "caseId is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RUSH_REPAIR)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> complete() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RUSH_REPAIR)});
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".complete(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".complete(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}

	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#arrive(cafe.core.context.SessionContext)
	 */
	public SessionContext arrive(SessionContext sessionContext) throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		String oldCaseStatus = IAtomsConstants.MARK_EMPTY_STRING;
		Message msg = null;
		try {
			// 案件處理記錄主鍵id
			String transactionId = null;
			// 案件處理處理中資料DMO對象
			SrmCaseHandleInfo caseHandleInfo = null;
			// 案件處理記錄DMO對象
			SrmCaseTransaction caseTransaction = null;
			// 案件處理記錄DTO對象
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			// dto/dmo轉換對象
			Transformer transformer = new SimpleDtoDmoTransformer();
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				if(StringUtils.hasText(formDTO.getCaseId())){
					// 實際執行時間處理
					if(srmCaseTransactionDTO.getDealDate() == null){
						srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
					}
					// 案件處理記錄主鍵id
					transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
					// 得到案件處理集合
					List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = (List<SrmCaseHandleInfoDTO>) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT);
					// 得到案件處理集合
					//List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId(), null);
					if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
						int i = 0;
						String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
						for(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs){
							// 保存案件記錄信息
							i++;
							caseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
							caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
							//Bug #2634
							String tempTransactionId = transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i);
							if(!StringUtils.hasText(caseTransactionId)) {
								caseTransactionId = tempTransactionId;
							} else {
								caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + tempTransactionId;
							}
							formDTO.setCaseTransactionId(caseTransactionId);
							caseTransaction.setTransactionId(transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i));
							caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
							caseTransaction.setCaseStage(srmCaseHandleInfoDTO.getCaseStatus());
							caseTransaction.setCaseStageName(srmCaseHandleInfoDTO.getCaseStatusName());
							if (IAtomsConstants.CASE_STATUS.RESPONSED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()) 
									|| IAtomsConstants.CASE_STATUS.DELAYING.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())) {
								caseTransaction.setNextCaseStage(srmCaseTransactionDTO.getCaseStatus());
								caseTransaction.setNextCaseStageName(srmCaseTransactionDTO.getAfterCaseStatus());
							} else {
								caseTransaction.setNextCaseStage(srmCaseHandleInfoDTO.getCaseStatus());
								caseTransaction.setNextCaseStageName(srmCaseHandleInfoDTO.getCaseStatusName());
							}
							caseTransaction.setCreatedById(logonUser.getId());
							caseTransaction.setCreatedByName(logonUser.getName());
							caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							this.srmCaseTransactionDAO.insert(caseTransaction);
							if(!StringUtils.hasText(oldCaseStatus)){
								oldCaseStatus = srmCaseHandleInfoDTO.getCaseStatus();
							}
							// 更新案件處理消息
							caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
							Integer attendanceTimes = caseHandleInfo.getAttendanceTimes();
							if (attendanceTimes == null) {
								attendanceTimes = 1;
							} else {
								attendanceTimes += 1;
							}
							if (IAtomsConstants.CASE_STATUS.ARRIVED.getCode().equals(srmCaseTransactionDTO.getCaseStatus())) {
								caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.ARRIVED.getCode());
							}
							// 更新人員日期
							caseHandleInfo.setArriveDate(srmCaseTransactionDTO.getDealDate());
							caseHandleInfo.setArriveUser(logonUser.getId());
							caseHandleInfo.setArriveUserName(logonUser.getName());
							
							caseHandleInfo.setAttendanceTimes(attendanceTimes);
							//CR #2869 新增三個欄位 2017/11/22
							caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
							caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
							caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
							caseHandleInfo.setUpdatedById(logonUser.getId());
							caseHandleInfo.setUpdatedByName(logonUser.getName());
							caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							this.srmCaseHandleInfoDAO.update(caseHandleInfo);
						}
						if (IAtomsConstants.CASE_STATUS.RESPONSED.getCode().equals(oldCaseStatus) 
								|| IAtomsConstants.CASE_STATUS.DELAYING.getCode().equals(oldCaseStatus)) {
							formDTO.setCaseIds(StringUtils.toList(formDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR));
							if(StringUtils.hasText(oldCaseStatus)){
								//送至下一關
								this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
							}
						}
						/*try {
							this.send(formDTO);
						} catch (Exception e) {
							LOGGER.debug("CaseManagerService.arrive() --> send() is error... ");
						}*/
						msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ARRIVE)});
					} else {
						LOGGER.error("CaseManagerService --> arrive() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ARRIVE)});
					}
				} else {
					LOGGER.error("CaseManagerService --> arrive() --> ", "save error!!!", "caseId is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ARRIVE)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> arrive() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ARRIVE)});
				}
			}
			
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".arrive(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".arrive(SessionContext sessionContext):" + e, e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	
	/**
	 * Purpose:
	 * @author Carrie Duan
	 * @return void
	 */
	public void caseImportAsynchronousHandle(CaseManagerFormDTO formDTO, List<BimMerchantHeader> bimMerchantHeaders, List<BimMerchant> bimMerchants) {
		Timestamp startDate = DateTimeUtils.getCurrentTimestamp();
		List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = formDTO.getSrmCaseHandleInfoDTOs();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		String caseCategory = formDTO.getCaseCategory();
		//AdmUser admUser = (AdmUser) admUserDAO.findByPrimaryKey(AdmUser.class, logonUser.getId());
		/*//郵件內容
		String mailContext = null;
		//郵件主題模板
		String subjectTemplate = MailComponent.MAIL_TEMPLATE_ADD + TemplateMailMessageDTO.CASE_UPLOAD_SUBJECT_TEMPLATE;
		//郵件內容模板
		String textTemplate = MailComponent.MAIL_TEMPLATE_ADD + TemplateMailMessageDTO.CASE_UPLOAD_TEXT_TEMPLATE;
		//郵件內容
		Map<String, Object> variables = new HashMap<String, Object>();
 		variables.put("toMail", admUser.getEmail());*/
 		// TODO
			try {
				CaseManagerFormDTO caseManagerFormDTO = null;
				Transformer transformer = new SimpleDtoDmoTransformer();
				formDTO.setActivitiCaseStatusStage(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode());
				SessionContext ctx = startCaseSetting(formDTO);
				String dtid = null;
				String caseId = null;
				int i = 0;
				if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					//添加需要新增的特店信息
					for (BimMerchant merchant : bimMerchants) {
						this.merchantDAO.save(merchant);
					}
					//添加需要新增的特店表頭信息
					String phone = null;
					for (BimMerchantHeader merchantHeader : bimMerchantHeaders) {
						if (!StringUtils.hasText(merchantHeader.getMerchantId())) {
							phone = merchantHeader.getPhone();
							merchantHeader = this.merchantHeaderDAO.findByPrimaryKey(BimMerchantHeader.class, merchantHeader.getMerchantHeaderId());
							merchantHeader.setPhone(phone);
						}
						this.merchantHeaderDAO.getDaoSupport().saveOrUpdate(merchantHeader);
					}
				}
				for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
					i++;
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
						//BimCompany company = this.companyDAO.findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCustomerId());
						dtid = calculateDtid(srmCaseHandleInfoDTO.getCustomerId(), srmCaseHandleInfoDTO.getEdcType(), srmCaseHandleInfoDTO.getCaseTransactionParameterDTOs()); 
						srmCaseHandleInfoDTO.setDtid(dtid);
					} else {
						dtid = srmCaseHandleInfoDTO.getDtid();
					}
					
					// Task #2489 專案與查核案件，無須計算SLA
					// Task #3385若為雲端租賃設備(CMS_CASE=Y或裝機件 裝機類型=微型商戶)所有案件類別，合約編號非必填，不用驗證SLA
					// 該處判斷CMS_CASE=Y
					if(IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(caseCategory) 
							|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseCategory)
							|| IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfoDTO.getCmsCase())){
					} else {
						// 得到sla信息
						ContractSlaDTO contractSlaDTO =  srmCaseHandleInfoDTO.getContractSlaDTO();
						if(contractSlaDTO != null){
							// 開始計算sla的時間
							Date slaStartDate = DateTimeUtils.getCurrentTimestamp();
							// 計算並設置應回應、到場、完修時間
							srmCaseHandleInfoDTO = this.settingAcceptDate(contractSlaDTO, slaStartDate, srmCaseHandleInfoDTO);
						}
					}
					
					/*ContractSlaDTO contractSlaDTO = srmCaseHandleInfoDTO.getContractSlaDTO();
					// 得到計算時效的map集合
					Map<String, Date> dateMap = calAcceptableDate(contractSlaDTO, DateTimeUtils.getCurrentTimestamp());
					if(!CollectionUtils.isEmpty(dateMap)){
						if(IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(srmCaseHandleInfoDTO.getCaseType())){
							Timestamp tempDate = new Timestamp((setHourForDate(srmCaseHandleInfoDTO.getExpectedCompletionDate(), 23, 59, 59, 0)).getTime());
							// 應回應時間
							srmCaseHandleInfoDTO.setAcceptableResponseDate(tempDate);
							// 應到達時間
							srmCaseHandleInfoDTO.setAcceptableArriveDate(tempDate);
							// 應完修時間
							srmCaseHandleInfoDTO.setAcceptableFinishDate(tempDate);
						} else {
							// 應回應時間
							if(dateMap.get(CaseManagerFormDTO.PARAM_ACCEPTABLE_RESPONSE_DATE) != null){
								srmCaseHandleInfoDTO.setAcceptableResponseDate(new Timestamp((dateMap.get(CaseManagerFormDTO.PARAM_ACCEPTABLE_RESPONSE_DATE)).getTime()));
							}
							// 應到達時間
							srmCaseHandleInfoDTO.setAcceptableArriveDate(new Timestamp((dateMap.get(CaseManagerFormDTO.PARAM_ACCEPTABLE_ARRIVE_DATE)).getTime()));
							// 應完修時間
							srmCaseHandleInfoDTO.setAcceptableFinishDate(new Timestamp((dateMap.get(CaseManagerFormDTO.PARAM_ACCEPTABLE_FINISH_DATE)).getTime()));
						}
					}
					// 放置警示時效
					srmCaseHandleInfoDTO.setResponseWarnning(contractSlaDTO.getResponseWarnning());
					srmCaseHandleInfoDTO.setArriveWarnning(contractSlaDTO.getArriveWarnning());
					srmCaseHandleInfoDTO.setCompleteWarnning(contractSlaDTO.getCompleteWarnning());*/
					
					
					//設置新增，修改人員時間信息
					srmCaseHandleInfoDTO.setCreatedById(logonUser.getId());
					srmCaseHandleInfoDTO.setCreatedByName(logonUser.getName());
					srmCaseHandleInfoDTO.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
					srmCaseHandleInfoDTO.setUpdatedById(srmCaseHandleInfoDTO.getCreatedById());
					srmCaseHandleInfoDTO.setUpdatedByName(logonUser.getName());
					srmCaseHandleInfoDTO.setUpdatedDate(srmCaseHandleInfoDTO.getCreatedDate());
					//設置案件狀態
					srmCaseHandleInfoDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode());
					// 保存異動說明
					caseManagerFormDTO = new CaseManagerFormDTO();
					caseManagerFormDTO.setSrmCaseTransactionParameterDTOs(srmCaseHandleInfoDTO.getCaseTransactionParameterDTOs());
					caseManagerFormDTO.setSrmCaseHandleInfoDTO(srmCaseHandleInfoDTO);
					caseManagerFormDTO.setCaseCategory(srmCaseHandleInfoDTO.getCaseCategory());
					String updatedDescription = createUpdateDescription(caseManagerFormDTO, Boolean.FALSE, Boolean.TRUE);
					srmCaseHandleInfoDTO.setUpdatedDescription(updatedDescription);
					// 生成異動項目
					String updateItem = createUpdateItem(caseManagerFormDTO);
					srmCaseHandleInfoDTO.setUpdateItem(updateItem);
					// 設置報修次數
					srmCaseHandleInfoDTO.setRepairTimes(1);
					// 案件處理中設備支援功能檔DTO集合
					List<SrmCaseAssetFunctionDTO> tempAssetFunctionDTOs = new ArrayList<SrmCaseAssetFunctionDTO>();
					// 處理內建功能
					List<SrmCaseAssetFunctionDTO> builtInFeatureDtos = null;
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getBuiltInFeature())){
						builtInFeatureDtos = getCaseAssetFunctionDtoList(srmCaseHandleInfoDTO.getBuiltInFeature(), IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE);
						tempAssetFunctionDTOs.addAll(builtInFeatureDtos);
					}
					// 周邊設備功能1
					List<SrmCaseAssetFunctionDTO> peripheralsFunctionDtos = null;
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsFunction())){
						peripheralsFunctionDtos = getCaseAssetFunctionDtoList(srmCaseHandleInfoDTO.getPeripheralsFunction(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS);
						tempAssetFunctionDTOs.addAll(peripheralsFunctionDtos);
					}
					// 周邊設備功能2
					List<SrmCaseAssetFunctionDTO> peripheralsFunction2Dtos = null;
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsFunction2())){
						peripheralsFunction2Dtos = getCaseAssetFunctionDtoList(srmCaseHandleInfoDTO.getPeripheralsFunction2(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2);
						tempAssetFunctionDTOs.addAll(peripheralsFunction2Dtos);
					}
					// 周邊設備功能3
					List<SrmCaseAssetFunctionDTO> peripheralsFunction3Dtos = null;
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripheralsFunction3())){
						peripheralsFunction3Dtos = getCaseAssetFunctionDtoList(srmCaseHandleInfoDTO.getPeripheralsFunction3(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3);
						tempAssetFunctionDTOs.addAll(peripheralsFunction3Dtos);
					}
					// 設備支援功能檔DTO集合保存至案件處理DTO
					srmCaseHandleInfoDTO.setSrmCaseAssetFunctionDTOs(tempAssetFunctionDTOs);
					// 案件處理中設備链接档DTO集合
					List<SrmCaseAssetLinkDTO> tempAssetLinkDTOs = new ArrayList<SrmCaseAssetLinkDTO>();
					// 裝機時案件設備链接档資料處理
					if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)){
						// TODO
						// 處理刷卡機型
						SrmCaseAssetLinkDTO edcTypeDTO = null;
						if(StringUtils.hasText(srmCaseHandleInfoDTO.getEdcType())){
							edcTypeDTO = getCaseAssetLinkDto(srmCaseHandleInfoDTO.getEdcType(), IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE, logonUser);
							tempAssetLinkDTOs.add(edcTypeDTO);
						}
						// 周邊設備1
						SrmCaseAssetLinkDTO peripheralsDTO = null;
						if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals())){
							peripheralsDTO = getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS, logonUser);
							tempAssetLinkDTOs.add(peripheralsDTO);
						}
						// 周邊設備2
						SrmCaseAssetLinkDTO peripherals2DTO = null;
						if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals2())){
							peripherals2DTO = getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals2(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2, logonUser);
							tempAssetLinkDTOs.add(peripherals2DTO);
						}
						// 周邊設備3
						SrmCaseAssetLinkDTO peripherals3DTO = null;
						if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals3())){
							peripherals3DTO = getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals3(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3, logonUser);
							tempAssetLinkDTOs.add(peripherals3DTO);
						}
						// 異動時案件設備链接档資料處理
					} else if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)
							|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseCategory)){
						// TODO
						// 查找之前案件編號下所有設備鏈接檔信息
					//	List<SrmCaseAssetLinkDTO> srmNewCaseAssetLinkDTOs = srmCaseNewAssetLinkDAO.listBy(srmCaseHandleInfoDTO.getCaseId());
						// 根據dtid得到最新案件信息
					//	SrmCaseHandleInfoDTO caseHandleInfoDTO = srmCaseNewHandleInfoDAO.getCaseHandleInfoDTOById(srmCaseHandleInfoDTO.getDtid());
						// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
						boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfoDTO.getDtid(), null);
						// 查詢案件資料
						SrmCaseHandleInfoDTO caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(srmCaseHandleInfoDTO.getDtid(), isNewHave);
						// CR #2551  查詢設備鏈接 Bug #3055
						List<SrmCaseAssetLinkDTO> srmNewCaseAssetLinkDTOs = srmCaseNewAssetLinkDAO.listBy(srmCaseHandleInfoDTO.getCaseId(), !isNewHave);
						
						SrmCaseAssetLinkDTO tempSrmCaseAssetLinkDTO = null;
						if(caseHandleInfoDTO != null){
							// 周邊設備1
							SrmCaseAssetLinkDTO peripheralsDTO = null;
							boolean isAddPeripherals = false;
							// 周邊設備1
							if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals())){
								if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals())){
									// 周邊設備1異動
									if(!caseHandleInfoDTO.getPeripherals().equals(srmCaseHandleInfoDTO.getPeripherals())){
										isAddPeripherals = true;
										// 新增設備鏈接檔信息
										peripheralsDTO = getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS, logonUser);
										tempAssetLinkDTOs.add(peripheralsDTO);
									} 
								} else {
									// 新增設備鏈接檔信息
									peripheralsDTO = getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS, logonUser);
									tempAssetLinkDTOs.add(peripheralsDTO);
								}
							} else {
								if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals())){
									isAddPeripherals = true;
								}
							}
							// 周邊設備2
							SrmCaseAssetLinkDTO peripherals2DTO = null;
							boolean isAddPeripherals2 = false;
							if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals2())){
								if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals2())){
									// 周邊設備2異動
									if(!caseHandleInfoDTO.getPeripherals2().equals(srmCaseHandleInfoDTO.getPeripherals2())){
										isAddPeripherals2 = true;
										// 新增設備鏈接檔信息
										peripherals2DTO = getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals2(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2, logonUser);
										tempAssetLinkDTOs.add(peripherals2DTO);
									}
								} else {
									// 新增設備鏈接檔信息
									peripherals2DTO = getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals2(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2, logonUser);
									tempAssetLinkDTOs.add(peripherals2DTO);
								}
							} else {
								if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals2())){
									isAddPeripherals2 = true;
								}
							}
							// 周邊設備3
							SrmCaseAssetLinkDTO peripherals3DTO = null;
							boolean isAddPeripherals3 = false;
							// 周邊設備3
							if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals3())){
								if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals3())){
									// 周邊設備2異動
									if(!caseHandleInfoDTO.getPeripherals3().equals(srmCaseHandleInfoDTO.getPeripherals3())){
										isAddPeripherals3 = true;
										// 新增設備鏈接檔信息
										peripherals3DTO = getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals3(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3, logonUser);
										tempAssetLinkDTOs.add(peripherals3DTO);
									}
								} else {
									// 新增設備鏈接檔信息
									peripherals3DTO = getCaseAssetLinkDto(srmCaseHandleInfoDTO.getPeripherals3(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3, logonUser);
									tempAssetLinkDTOs.add(peripherals3DTO);
								}
							} else {
								if(StringUtils.hasText(caseHandleInfoDTO.getPeripherals3())){
									isAddPeripherals3 = true;
								}
							}
							for(SrmCaseAssetLinkDTO srmNewCaseAssetLinkDTO : srmNewCaseAssetLinkDTOs){
								tempSrmCaseAssetLinkDTO = null;
								// edc以及耗材
								if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmNewCaseAssetLinkDTO.getItemType())){
									tempSrmCaseAssetLinkDTO = (SrmCaseAssetLinkDTO) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLinkDTO());
								// 周邊設備1
								} else if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS.equals(srmNewCaseAssetLinkDTO.getItemType())){
									tempSrmCaseAssetLinkDTO = (SrmCaseAssetLinkDTO) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLinkDTO());
									if(isAddPeripherals){
										// 設備鏈接檔設置刪除標誌位
										tempSrmCaseAssetLinkDTO.setIsLink(IAtomsConstants.CASE_REMOVE_ASSET);
									}
								// 周邊設備2	
								} else if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2.equals(srmNewCaseAssetLinkDTO.getItemType())){
									tempSrmCaseAssetLinkDTO = (SrmCaseAssetLinkDTO) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLinkDTO());
									if(isAddPeripherals2){
										// 設備鏈接檔設置刪除標誌位
										tempSrmCaseAssetLinkDTO.setIsLink(IAtomsConstants.CASE_REMOVE_ASSET);
									}
								// 周邊設備3	
								} else if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3.equals(srmNewCaseAssetLinkDTO.getItemType())){
									tempSrmCaseAssetLinkDTO = (SrmCaseAssetLinkDTO) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLinkDTO());
									if(isAddPeripherals3){
										// 設備鏈接檔設置刪除標誌位
										tempSrmCaseAssetLinkDTO.setIsLink(IAtomsConstants.CASE_REMOVE_ASSET);
									}
									// 耗材不處理
								} else if(IAtomsConstants.PARAM_CASE_LINK_SUPPLIES.equals(srmNewCaseAssetLinkDTO.getItemType())){
									continue;
								}
								// 保存至集合
								if(tempSrmCaseAssetLinkDTO != null){
									tempAssetLinkDTOs.add(tempSrmCaseAssetLinkDTO);
								}
							}
						}
						// 其他案件類別時案件設備链接档處理
						} else {
							// TODO
						//	List<SrmCaseAssetLinkDTO> srmNewCaseAssetLinkDTOs = srmCaseNewAssetLinkDAO.listBy(srmCaseHandleInfoDTO.getCaseId());
							// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
							boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfoDTO.getDtid(), null);
							// CR #2551  查詢設備鏈接 Bug #3055
							List<SrmCaseAssetLinkDTO> srmNewCaseAssetLinkDTOs = srmCaseNewAssetLinkDAO.listBy(srmCaseHandleInfoDTO.getCaseId(), !isNewHave);
							
							SrmCaseAssetLinkDTO tempSrmCaseAssetLinkDTO = null;
							for(SrmCaseAssetLinkDTO srmNewCaseAssetLinkDTO : srmNewCaseAssetLinkDTOs){
								// 去掉耗材 耗材不保存
								if(IAtomsConstants.PARAM_CASE_LINK_SUPPLIES.equals(srmNewCaseAssetLinkDTO.getItemType())){
									continue;
								}
								tempSrmCaseAssetLinkDTO = (SrmCaseAssetLinkDTO) transformer.transform(srmNewCaseAssetLinkDTO, new SrmCaseAssetLinkDTO());
								tempAssetLinkDTOs.add(tempSrmCaseAssetLinkDTO);
							}
						}
						// 設備链接档DTO集合保存至案件處理DTO
						srmCaseHandleInfoDTO.setSrmCaseAssetLinkDTOs(tempAssetLinkDTOs);
						// 處理案件處理記錄
						SrmCaseTransactionDTO srmCaseTransactionDTO = new SrmCaseTransactionDTO();
						srmCaseTransactionDTO.setActionId(IAtomsConstants.ACTION_SAVE);
						srmCaseTransactionDTO.setCaseStatus(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode());
						srmCaseTransactionDTO.setCreatedById(logonUser.getId());
						srmCaseTransactionDTO.setCreatedByName(logonUser.getName());
						srmCaseTransactionDTO.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
						srmCaseTransactionDTO.setDealById(logonUser.getId());
						srmCaseTransactionDTO.setDealByName(logonUser.getName());
						srmCaseTransactionDTO.setDealDate(DateTimeUtils.getCurrentTimestamp());
						/*if (!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseManagerFormDTO.getCaseCategory())) {
							updateItem = this.getUpdateContent(srmCaseHandleInfoDTO, Boolean.FALSE, Boolean.TRUE);
							if (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseManagerFormDTO.getCaseCategory())
									|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseManagerFormDTO.getCaseCategory())) {
								updatedDescription = this.createUpdateDescription(caseManagerFormDTO, Boolean.TRUE, Boolean.TRUE);
								if (StringUtils.hasText(updateItem)) {
									updateItem += (updatedDescription==null?"":updatedDescription);
								} else {
									updateItem = updatedDescription == null?"":updatedDescription;
								}
							}
						}
						srmCaseTransactionDTO.setUpdateItem(updateItem);*/
						// 案件處理記錄DTO保存至案件處理DTO
						srmCaseHandleInfoDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
						//獲取客戶碼
						BimCompany bimCompany = companyDAO.findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCustomerId());
						if (bimCompany != null) {
							srmCaseHandleInfoDTO.setCustomerCode(bimCompany.getCustomerCode());
						}
						caseId = createCaesId(srmCaseHandleInfoDTO.getCustomerCode(), srmCaseHandleInfoDTO.getCaseCategory());
						srmCaseHandleInfoDTO.setCaseId(caseId);
						//添加上傳的文件
						createSingleCase(srmCaseHandleInfoDTO, ctx, IAtomsConstants.NO);
						if (i == srmCaseHandleInfoDTOs.size()) {
							saveCaseAttFile(logonUser, formDTO.getFileName(), caseId, Boolean.TRUE);
						} else {
							saveCaseAttFile(logonUser, formDTO.getFileName(), caseId, Boolean.FALSE);
						}
					}	
					//variables.put("context", i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_SUCCESS, new String[]{i18NUtil.getName(caseCategory), Integer.toString(srmCaseHandleInfoDTOs.size())}, null));
				} catch (Exception e) {
					// TODO: handle exception
					//variables.put("context", i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_ERROR, new String[]{i18NUtil.getName(caseCategory), Integer.toString(srmCaseHandleInfoDTOs.size())}, null));
					LOGGER.error(this.getClass().getName() + ".caseImportAsynchronousHandle() Service Exception--->" + e, e);
					throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
				} finally {
					try{
						//mailComponent.mailTo( null, admUser.getEmail(), subjectTemplate, textTemplate, variables);
						Timestamp endDate = DateTimeUtils.getCurrentTimestamp();
						long diff = endDate.getTime() - startDate.getTime();
						LOGGER.debug(this.getClass().getName() + ".caseImportAsynchronousHandle() Service End--->"+diff +"ms");
					} catch (Exception e) {
						LOGGER.debug(".caseImportAsynchronousHandle() --> caseImportAsynchronousHandle() is error... ");
					}
				}
	}
	
	/**
	 * Purpose:
	 * @author Carrie Duan
	 * @param row
	 * @param cell
	 * @param index
	 * @param caseHandleInfoDTO
	 * @param errorMsgs
	 * @param locations
	 * @param caseCategory
	 * @return void
	 */
	private Boolean checkContactOrInstalled(Row row, int cell, int index, SrmCaseHandleInfoDTO caseHandleInfoDTO, SrmCaseHandleInfoDTO newCaseHandleInfoDTO, List<String> errorMsgs, List<Parameter> locations,
			String caseCategory, BimMerchantHeader merchantHeader) {
		String contact = null;
		String contactPhone = null;
		Boolean isError = Boolean.FALSE;
		String temp = null;
		BimMerchantHeaderDTO headerDTO = null;
		Transformer transformer = new SimpleDtoDmoTransformer();
		try {
			if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) && !StringUtils.hasText(caseHandleInfoDTO.getMerchantHeaderId())) {
				return true;
			}
			if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseCategory)) {
				if (StringUtils.hasText(newCaseHandleInfoDTO.getMerchantHeaderId())) {
					//merchantHeader = this.merchantHeaderDAO.findByPrimaryKey(BimMerchantHeader.class, newCaseHandleInfoDTO.getMerchantHeaderId());
					headerDTO = this.merchantHeaderDAO.getMerchantHeaderById(newCaseHandleInfoDTO.getMerchantHeaderId());
				} else {
					return true;
				}
			} else {
				if (!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					//merchantHeader = this.merchantHeaderDAO.findByPrimaryKey(BimMerchantHeader.class, caseHandleInfoDTO.getMerchantHeaderId());
					headerDTO = this.merchantHeaderDAO.getMerchantHeaderById(caseHandleInfoDTO.getMerchantHeaderId());
				} else {
					headerDTO = (BimMerchantHeaderDTO) transformer.transform(merchantHeader, new BimMerchantHeaderDTO());
				}
			}
			//獲取是否同營業地址
			String isBussinessAddress = this.getCellFormatValue(row.getCell(cell), null, true);
			//核檢是否選取同營業地址，如果未輸入，則帶入DTID下的資料
			if (StringUtils.hasText(isBussinessAddress)) {
				//如果選擇否
				if (i18NUtil.getName(IAtomsConstants.NO).equals(isBussinessAddress)) {
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessAddress(IAtomsConstants.NO);
					} else {
						newCaseHandleInfoDTO.setContactIsBussinessAddress(IAtomsConstants.NO);
					}
					//選擇是，則帶入特點信息
				} else if (i18NUtil.getName(IAtomsConstants.YES).equals(isBussinessAddress)){
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessAddress(IAtomsConstants.YES);
						newCaseHandleInfoDTO.setInstalledAdressLocation(headerDTO.getLocation());
						newCaseHandleInfoDTO.setInstalledAdressLocationName(headerDTO.getMerchantLocationName());
						newCaseHandleInfoDTO.setInstalledPostCode(headerDTO.getPostCodeId());
						newCaseHandleInfoDTO.setInstalledPostCodeName(headerDTO.getPostName());
						newCaseHandleInfoDTO.setInstalledAdress(headerDTO.getBusinessAddress());
					} else {
						newCaseHandleInfoDTO.setContactIsBussinessAddress(IAtomsConstants.YES);
						newCaseHandleInfoDTO.setContactAddressLocation(headerDTO.getLocation());
						newCaseHandleInfoDTO.setContactAddressLocationName(headerDTO.getMerchantLocationName());
						newCaseHandleInfoDTO.setContactPostCode(headerDTO.getPostCodeId());
						newCaseHandleInfoDTO.setContactPostCodeName(headerDTO.getPostName());
						newCaseHandleInfoDTO.setContactAddress(headerDTO.getBusinessAddress());
					}
				} else {
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_HANDLE_IS_BUSSINESS_ADDRESS)}, null));
					} else {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_HANDLE_CONTACT_IS_BUSSINESS_ADDRESS)}, null));
					}
					isError = Boolean.TRUE;
				}
			} else {
				if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					
				} else {
					//異動為裝機
					if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessAddress(caseHandleInfoDTO.getIsBussinessAddress());
						if (IAtomsConstants.YES.equals(caseHandleInfoDTO.getIsBussinessAddress())) {
							newCaseHandleInfoDTO.setInstalledAdressLocation(headerDTO.getLocation());
							newCaseHandleInfoDTO.setInstalledAdressLocationName(headerDTO.getMerchantLocationName());
							newCaseHandleInfoDTO.setInstalledPostCode(headerDTO.getPostCodeId());
							newCaseHandleInfoDTO.setInstalledPostCodeName(headerDTO.getPostName());
							newCaseHandleInfoDTO.setInstalledAdress(headerDTO.getBusinessAddress());
						} else {
							newCaseHandleInfoDTO.setInstalledAdressLocation(caseHandleInfoDTO.getInstalledAdressLocation());
							newCaseHandleInfoDTO.setInstalledAdressLocationName(caseHandleInfoDTO.getInstalledAdressLocationName());
							newCaseHandleInfoDTO.setInstalledPostCode(caseHandleInfoDTO.getInstalledPostCode());
							newCaseHandleInfoDTO.setInstalledPostCodeName(caseHandleInfoDTO.getInstalledPostCodeName());
							newCaseHandleInfoDTO.setInstalledAdress(caseHandleInfoDTO.getInstalledAdress());
						}
					} else {
						String isEquals = caseHandleInfoDTO.getContactIsBussinessAddress();
						String location = caseHandleInfoDTO.getContactAddressLocation();
						String locationName = caseHandleInfoDTO.getContactAddressLocationName();
						String postCode = caseHandleInfoDTO.getContactPostCode();
						String postCodeName = caseHandleInfoDTO.getContactPostCodeName();
						String businessAddress = caseHandleInfoDTO.getContactAddress();
						if (IAtomsConstants.COLUMN_E.equals(isEquals)) {
							isEquals = caseHandleInfoDTO.getIsBussinessAddress();
						}
						if (!StringUtils.hasText(location)) {
							location = caseHandleInfoDTO.getInstalledAdressLocation();
							locationName = caseHandleInfoDTO.getInstalledAdressLocationName();
						}
						if (!StringUtils.hasText(postCode)) {
							postCode = caseHandleInfoDTO.getInstalledPostCode();
							postCodeName = caseHandleInfoDTO.getInstalledPostCodeName();
						}
						if (!StringUtils.hasText(businessAddress)) {
							businessAddress = caseHandleInfoDTO.getInstalledAdress();
						}
						newCaseHandleInfoDTO.setContactIsBussinessAddress(isEquals);
						if (IAtomsConstants.YES.equals(isEquals)) {
							newCaseHandleInfoDTO.setContactAddressLocation(headerDTO.getLocation());
							newCaseHandleInfoDTO.setContactAddressLocationName(headerDTO.getMerchantLocationName());
							newCaseHandleInfoDTO.setContactPostCode(headerDTO.getPostCodeId());
							newCaseHandleInfoDTO.setContactPostCodeName(headerDTO.getPostName());
							newCaseHandleInfoDTO.setContactAddress(headerDTO.getBusinessAddress());
						} else if (IAtomsConstants.NO.equals(isEquals)){
							newCaseHandleInfoDTO.setContactAddressLocation(location);
							newCaseHandleInfoDTO.setContactAddressLocationName(locationName);
							newCaseHandleInfoDTO.setContactPostCode(postCode);
							newCaseHandleInfoDTO.setContactPostCodeName(postCodeName);
							newCaseHandleInfoDTO.setContactAddress(businessAddress);
						}
					}
				}
			}
			
			//如果未選擇同營業地址，則需要核檢營業地址輸入是否正確
			if (i18NUtil.getName(IAtomsConstants.NO).equals(isBussinessAddress)) {
				String contactAddressLocation = this.getCellFormatValue(row.getCell(cell + 1), null, true);
				String postCode = null;
				String contactAddress;
				if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) ) {
					postCode = this.getCellFormatValue(row.getCell(cell + 42), null, true);
					contactAddress = this.getCellFormatValue(row.getCell(cell + 2), null, true);
				} else {
					postCode = this.getCellFormatValue(row.getCell(cell + 2), null, true);
					contactAddress = this.getCellFormatValue(row.getCell(cell + 3), null, true);
				}
				
				//驗證聯繫地址-縣市是否輸入
				if (StringUtils.hasText(contactAddressLocation)) {
					//驗證聯繫地址-縣市是否輸入正確
					temp = this.getValueByName(locations, contactAddressLocation);
					if (!StringUtils.hasText(temp)) {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) 
								|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_LOCATION)}, null));
							newCaseHandleInfoDTO.setInstalledAdressLocation("-1");
						} else {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_ADDRESS_LOCATION)}, null));
							newCaseHandleInfoDTO.setInstalledAdressLocation("-1");
						}
						isError = Boolean.TRUE;
					} else {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							newCaseHandleInfoDTO.setInstalledAdressLocation(temp);
							newCaseHandleInfoDTO.setInstalledAdressLocationName(contactAddressLocation);
						} else {
							newCaseHandleInfoDTO.setContactAddressLocation(temp);
							newCaseHandleInfoDTO.setContactAddressLocationName(contactAddressLocation);
						}
					}
				} else {
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
						
					} else {
						if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							newCaseHandleInfoDTO.setInstalledAdressLocation(caseHandleInfoDTO.getInstalledAdressLocation());
							newCaseHandleInfoDTO.setInstalledAdressLocationName(caseHandleInfoDTO.getInstalledAdressLocationName());
						} else {
							String location = caseHandleInfoDTO.getContactAddressLocation();
							String locationName = caseHandleInfoDTO.getContactAddressLocationName();
							if (!StringUtils.hasText(location)) {
								location = caseHandleInfoDTO.getInstalledAdressLocation();
								locationName = caseHandleInfoDTO.getInstalledAdressLocationName();
							}
							newCaseHandleInfoDTO.setContactAddressLocation(location);
							newCaseHandleInfoDTO.setContactAddressLocationName(locationName);
						}
					}
				}
				
				//驗證聯繫地址-郵遞區號是否輸入
				if (StringUtils.hasText(postCode) && (StringUtils.hasText(newCaseHandleInfoDTO.getInstalledAdressLocation()) || StringUtils.hasText(newCaseHandleInfoDTO.getContactAddressLocation()))) {
					//驗證聯繫地址-縣市是否輸入正確
					String location = null;
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						location = newCaseHandleInfoDTO.getInstalledAdressLocation();
					} else {
						location = newCaseHandleInfoDTO.getContactAddressLocation();
					}
					String[] tempPost = postCode.split("\\(");
					if (tempPost.length != 2) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_POST_CODE)}, null));
						newCaseHandleInfoDTO.setInstalledPostCode("-1");
					} else {
						//檢核郵遞區域是否屬於該縣市
						List<Parameter> postCodeList = this.baseParameterPostCodeDAO.getPostCodeList(location, tempPost[1].substring(0, tempPost[1].length() - 1), tempPost[0]);
						if(!CollectionUtils.isEmpty(postCodeList)){
							if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
								newCaseHandleInfoDTO.setInstalledPostCode(postCodeList.get(0).getValue().toString());
								newCaseHandleInfoDTO.setInstalledPostCodeName(postCode);
							} else {
								newCaseHandleInfoDTO.setContactPostCode(postCodeList.get(0).getValue().toString());
								newCaseHandleInfoDTO.setContactPostCodeName(postCode);
							}
						}else{
							if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) 
									|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
										+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_POST_CODE)}, null));
								newCaseHandleInfoDTO.setInstalledPostCode("-1");
							} else {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
										+ i18NUtil.getName(IAtomsMessageCode.INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_POST_CODE)}, null));
								newCaseHandleInfoDTO.setContactPostCode("-1");
							}
							isError = Boolean.TRUE;
						}
					}
				} else {
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
						
					} else {
						if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory) && StringUtils.hasText(newCaseHandleInfoDTO.getInstalledPostCode())) {
							newCaseHandleInfoDTO.setInstalledPostCode(caseHandleInfoDTO.getInstalledPostCode());
							newCaseHandleInfoDTO.setInstalledPostCodeName(caseHandleInfoDTO.getInstalledPostCodeName());
						} else {
							String tempPostCode = caseHandleInfoDTO.getContactPostCode();
							String tempPostCodeName = caseHandleInfoDTO.getContactPostCodeName();
							if (!StringUtils.hasText(tempPostCode)) {
								tempPostCode = caseHandleInfoDTO.getInstalledPostCode();
								tempPostCodeName = caseHandleInfoDTO.getInstalledPostCodeName();
							}
							newCaseHandleInfoDTO.setContactPostCode(tempPostCode);
							newCaseHandleInfoDTO.setContactPostCodeName(tempPostCodeName);
						}
					}
				}
				
				//驗證聯繫地址否輸入
				if (StringUtils.hasText(contactAddress)) {
					//驗證聯繫地址是否長度正確
					if (contactAddress.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_ADDRESS_LENGTH)) {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_ADRESS), IAtomsConstants.CONTACT_ADDRESS_LENGTH}, null));
							newCaseHandleInfoDTO.setInstalledAdress("-1");
						} else {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_ADDRESS), IAtomsConstants.CONTACT_ADDRESS_LENGTH}, null));
							newCaseHandleInfoDTO.setInstalledAdress("-1");
						}
						isError = Boolean.TRUE;
					} else {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							newCaseHandleInfoDTO.setInstalledAdress(contactAddress);
						} else {
							newCaseHandleInfoDTO.setContactAddress(contactAddress);
						}
					}
				} else {
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
						
					} else {
						if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							newCaseHandleInfoDTO.setInstalledAdress(caseHandleInfoDTO.getInstalledAdress());
						} else {
							String businessAddress = caseHandleInfoDTO.getContactAddress();
							if (!StringUtils.hasText(businessAddress)) {
								businessAddress = caseHandleInfoDTO.getInstalledAdress();
							}
							newCaseHandleInfoDTO.setContactAddress(businessAddress);
						}
					}
					
				}
			}
			//獲取是否同營業聯絡人
			String isBussinessContact = null;
			if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
				isBussinessContact = this.getCellFormatValue(row.getCell(cell + 3), null, true);
			} else {
				isBussinessContact = this.getCellFormatValue(row.getCell(cell + 4), null, true);
			}
			if (StringUtils.hasText(isBussinessContact)) {
				if (i18NUtil.getName(IAtomsConstants.NO).equals(isBussinessContact)) {
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessContact(IAtomsConstants.NO);
					} else {
						newCaseHandleInfoDTO.setContactIsBussinessContact(IAtomsConstants.NO);
					}
				} else if (i18NUtil.getName(IAtomsConstants.YES).equals(isBussinessContact)) {
					contact = headerDTO.getContact();
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessContact(IAtomsConstants.YES);
						newCaseHandleInfoDTO.setInstalledContact(headerDTO.getContact());
					} else {
						newCaseHandleInfoDTO.setContactIsBussinessContact(IAtomsConstants.YES);
						newCaseHandleInfoDTO.setContactUser(contact);
					}
				} else {
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_BUSSINESS_CONTACT)}, null));
					} else {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_IS_BUSSINESS_CONTACT)}, null));
					}
					
					isError = Boolean.TRUE;
				}
			} else {
				if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					
				} else {
					if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessContact(caseHandleInfoDTO.getIsBussinessContact());
						if (IAtomsConstants.YES.equals(caseHandleInfoDTO.getIsBussinessContact())) {
							newCaseHandleInfoDTO.setInstalledContact(headerDTO.getContact());
						} else {
							newCaseHandleInfoDTO.setInstalledContact(caseHandleInfoDTO.getInstalledContact());
						}
					} else {
						String isEquals = null;
						isEquals = caseHandleInfoDTO.getContactIsBussinessContact();
						contact = caseHandleInfoDTO.getContactUser();
						if (IAtomsConstants.COLUMN_E.equals(isEquals)) {
							isEquals = caseHandleInfoDTO.getIsBussinessContact();
						}
						if (!StringUtils.hasText(contact)) {
							contact = caseHandleInfoDTO.getInstalledContact();
						}
						newCaseHandleInfoDTO.setContactIsBussinessContact(isEquals);
						if (IAtomsConstants.YES.equals(isEquals)) {
							newCaseHandleInfoDTO.setContactUser(headerDTO.getContact());
						} else if (IAtomsConstants.NO.equals(isEquals)){
							newCaseHandleInfoDTO.setContactUser(contact);
						}
					}
				}
			}
			//如果未選擇同營業聯絡人，則需要核檢聯絡人輸入是否正確
			if (i18NUtil.getName(IAtomsConstants.NO).equals(isBussinessContact)) {
				String contactUser = null;
				if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					contactUser = this.getCellFormatValue(row.getCell(cell + 4), null, true);
				} else {
					contactUser = this.getCellFormatValue(row.getCell(cell + 5), null, true);
				}
				//驗證聯絡人是否輸入
				if (StringUtils.hasText(contactUser)) {
					//核檢長度是否正確
					if (contactUser.trim().length() > Integer.valueOf(IAtomsConstants.CONTACT_USER_LENGTH)) {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT), IAtomsConstants.CONTACT_USER_LENGTH}, null));
							newCaseHandleInfoDTO.setInstalledContact("-1");
						} else {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_USER), IAtomsConstants.CONTACT_USER_LENGTH}, null));
							newCaseHandleInfoDTO.setContactUser("-1");
						}
						isError = Boolean.TRUE;
					} else {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							newCaseHandleInfoDTO.setInstalledContact(contactUser);
						} else {
							newCaseHandleInfoDTO.setContactUser(contactUser);
						}
					}
				} else {
					/*if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfoDTO.getCaseCategory()) 
							|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseHandleInfoDTO.getCaseCategory())) {
						contact = caseHandleInfoDTO.getInstalledContact();
					} else {
						contact = caseHandleInfoDTO.getContactUser();
					}*/
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
						
					} else {
						if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							newCaseHandleInfoDTO.setInstalledContact(caseHandleInfoDTO.getInstalledContact());
						} else {
							contact = caseHandleInfoDTO.getContactUser();
							if (!StringUtils.hasText(contact)) {
								contact = caseHandleInfoDTO.getContact();
							}
							newCaseHandleInfoDTO.setContactUser(contact);
						}
					}
					
					
				}
			}
			
			//獲取是否同營業聯絡人電話
			String isBussinessContactPhone = null;
			if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
				isBussinessContactPhone = this.getCellFormatValue(row.getCell(cell + 5), null, true);
			} else {
				isBussinessContactPhone = this.getCellFormatValue(row.getCell(cell + 6), null, true);
			}
			if (StringUtils.hasText(isBussinessContactPhone)) {
				if (i18NUtil.getName(IAtomsConstants.NO).equals(isBussinessContactPhone)) {
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessContactPhone(IAtomsConstants.NO);
					} else {
						newCaseHandleInfoDTO.setContactIsBussinessContactPhone(IAtomsConstants.NO);
					}
				} else if (i18NUtil.getName(IAtomsConstants.YES).equals(isBussinessContactPhone)) {
					contactPhone = headerDTO.getContactTel();
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessContactPhone(IAtomsConstants.YES);
						newCaseHandleInfoDTO.setInstalledContactPhone(contactPhone);
					} else {
						newCaseHandleInfoDTO.setContactIsBussinessContactPhone(IAtomsConstants.YES);
						newCaseHandleInfoDTO.setContactUserPhone(contactPhone);
					}
				} else {
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_BUSSINESS_CONTACT_PHONE)}, null));
					} else {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_IS_BUSSINESS_CONTACT_PHONE)}, null));
					}
					
					isError = Boolean.TRUE;
				}
			} else {
				if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					
				} else {
					if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessContactPhone(caseHandleInfoDTO.getIsBussinessContactPhone());
						if (IAtomsConstants.YES.equals(caseHandleInfoDTO.getIsBussinessContactPhone())) {
							newCaseHandleInfoDTO.setInstalledContactPhone(headerDTO.getContactTel());
						} else {
							newCaseHandleInfoDTO.setInstalledContactPhone(caseHandleInfoDTO.getInstalledContactPhone());
						}
					} else {
						String isEquals = null;
						isEquals = caseHandleInfoDTO.getContactIsBussinessContactPhone();
						contactPhone = caseHandleInfoDTO.getContactUserPhone();
						if (IAtomsConstants.COLUMN_E.equals(isEquals)) {
							isEquals = caseHandleInfoDTO.getIsBussinessContactPhone();
						}
						if (!StringUtils.hasText(contactPhone)) {
							contactPhone = caseHandleInfoDTO.getInstalledContactPhone();
						}
						newCaseHandleInfoDTO.setContactIsBussinessContactPhone(isEquals);
						if (IAtomsConstants.YES.equals(isEquals)) {
							newCaseHandleInfoDTO.setContactUserPhone(headerDTO.getContactTel());
						} else if (IAtomsConstants.NO.equals(isEquals)) {
							newCaseHandleInfoDTO.setContactUserPhone(contactPhone);
						}
					}
				}
			}
			//如果未選擇同營業聯絡人電話，則需要核檢聯絡人電話輸入是否正確
			if (i18NUtil.getName(IAtomsConstants.NO).equals(isBussinessContactPhone)) {
				String contactUserPhone = null;
				if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					contactUserPhone = this.getCellFormatValue(row.getCell(cell + 6), null, true);
				} else {
					contactUserPhone = this.getCellFormatValue(row.getCell(cell + 7), null, true);
				}
				//驗證聯絡人電話是否輸入
				if (StringUtils.hasText(contactUserPhone)) {
					//核檢長度是否正確
					if (contactUserPhone.trim().length() > Integer.valueOf(IAtomsConstants.PROPERTY_ID_LENGTH)) {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_PHONE), IAtomsConstants.PROPERTY_ID_LENGTH}, null));
							newCaseHandleInfoDTO.setInstalledContactPhone("-1");
						} else {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_USER_PHONE), IAtomsConstants.PROPERTY_ID_LENGTH}, null));
							newCaseHandleInfoDTO.setContactUserPhone("-1");
						}
						isError = Boolean.TRUE;
					} else {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							newCaseHandleInfoDTO.setInstalledContactPhone(contactUserPhone);
						} else {
							newCaseHandleInfoDTO.setContactUserPhone(contactUserPhone);
						}
					}
				} else {
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
						
					} else {
						if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							newCaseHandleInfoDTO.setInstalledContactPhone(caseHandleInfoDTO.getInstalledContactPhone());
						} else {
							contactPhone = caseHandleInfoDTO.getContactUserPhone();
							if (!StringUtils.hasText(contactPhone)) {
								contactPhone = caseHandleInfoDTO.getContactTel();
							}
							newCaseHandleInfoDTO.setContactUserPhone(contactPhone);
						}
					}
					
				}
			}
			
			//獲取是否同營業聯絡人手機
			String isBussinessContactMobilePhone = null;
			if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
				isBussinessContactMobilePhone = this.getCellFormatValue(row.getCell(cell + 38), null, true);
			} else {
				isBussinessContactMobilePhone = this.getCellFormatValue(row.getCell(cell + 8), null, true);
			}
			//核檢是否輸入，如果輸入，則根據是/否進行分別處理
			if (StringUtils.hasText(isBussinessContactMobilePhone)) {
				//選擇否，則需核檢輸入的內容是否正確，此處值記錄否，核檢在下方判斷
				if (i18NUtil.getName(IAtomsConstants.NO).equals(isBussinessContactMobilePhone)) {
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessContactMobilePhone(IAtomsConstants.NO);
					} else {
						newCaseHandleInfoDTO.setContactIsBussinessContactMobilePhone(IAtomsConstants.NO);
					}
					//如果選擇是，則帶入對應的特店資料
				} else if (i18NUtil.getName(IAtomsConstants.YES).equals(isBussinessContactMobilePhone)) {
					contactPhone = headerDTO.getPhone();
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessContactMobilePhone(IAtomsConstants.YES);
						newCaseHandleInfoDTO.setInstalledContactMobilePhone(contactPhone);
					} else {
						newCaseHandleInfoDTO.setContactIsBussinessContactMobilePhone(IAtomsConstants.YES);
						newCaseHandleInfoDTO.setContactMobilePhone(contactPhone);
					}
				} else {
					//非是、否，則提示輸入錯誤
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
							+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_BUSSINESS_CONTACT_MOBILE_PHONE)}, null));
					} else {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
							+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_IS_BUSSINESS_CONTACT_MOBILE_PHONE)}, null));
					}	
					isError = Boolean.TRUE;
				}
			} else {
				//選擇是，則異動案件帶入特店裝機資料
				if (!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessContactMobilePhone(caseHandleInfoDTO.getIsBussinessContactMobilePhone());
						if (IAtomsConstants.YES.equals(caseHandleInfoDTO.getIsBussinessContactMobilePhone())) {
							newCaseHandleInfoDTO.setInstalledContactMobilePhone(headerDTO.getPhone());
						} else {
							newCaseHandleInfoDTO.setInstalledContactMobilePhone(caseHandleInfoDTO.getInstalledContactMobilePhone());
						}
						//選擇是，則非異動案件有聯系帶入特店聯系資料，無聯系帶入特店裝機資料
					} else {
						String isEquals = null;
						isEquals = caseHandleInfoDTO.getContactIsBussinessContactMobilePhone();
						contactPhone = caseHandleInfoDTO.getContactMobilePhone();
						if (IAtomsConstants.COLUMN_E.equals(isEquals)) {
							isEquals = caseHandleInfoDTO.getIsBussinessContactMobilePhone();
							contactPhone = caseHandleInfoDTO.getInstalledContactMobilePhone();
						}
						newCaseHandleInfoDTO.setContactIsBussinessContactMobilePhone(isEquals);
						if (IAtomsConstants.YES.equals(isEquals)) {
							newCaseHandleInfoDTO.setContactMobilePhone(headerDTO.getPhone());
						} else if (IAtomsConstants.NO.equals(isEquals)) {
							newCaseHandleInfoDTO.setContactMobilePhone(contactPhone);
						}
					}
				}
			}
			//如果未選擇同營業聯絡人手機，則需要核檢聯絡人手機輸入是否正確
			if (i18NUtil.getName(IAtomsConstants.NO).equals(isBussinessContactMobilePhone)) {
				String contactMobelPhone = null;
				if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					contactMobelPhone = this.getCellFormatValue(row.getCell(cell + 39), null, true);
				} else {
					contactMobelPhone = this.getCellFormatValue(row.getCell(cell + 9), null, true);
				}
				//驗證聯絡人手機是否輸入
				if (StringUtils.hasText(contactMobelPhone)) {
					//核檢長度是否正確
					if (contactMobelPhone.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_NUMBER_TEN)) {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_MOBILE_PHONE), IAtomsConstants.MAXLENGTH_NUMBER_TEN}, null));
							newCaseHandleInfoDTO.setInstalledContactMobilePhone("-1");
						} else {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_MOBILE_PHONE), IAtomsConstants.MAXLENGTH_NUMBER_TEN}, null));
							newCaseHandleInfoDTO.setContactMobilePhone("-1");
						}
						isError = Boolean.TRUE;
						//核檢格式是否正確
					} else if (!ValidateUtils.twMobile(contactMobelPhone)) {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.TW_PHONE_INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_MOBILE_PHONE)}, null));
							newCaseHandleInfoDTO.setInstalledContactMobilePhone("-1");
						} else {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.TW_PHONE_INPUT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_MOBILE_PHONE)}, null));
							newCaseHandleInfoDTO.setContactMobilePhone("-1");
						}
						isError = Boolean.TRUE;
					} else {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							newCaseHandleInfoDTO.setInstalledContactMobilePhone(contactMobelPhone);
						} else {
							newCaseHandleInfoDTO.setContactMobilePhone(contactMobelPhone);
						}
					}
				}
			}
			
			//獲取是否同營業聯絡人Email
			String isBussinessContactEmail = null;
			if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
				isBussinessContactEmail = this.getCellFormatValue(row.getCell(cell + 40), null, true);
			} else {
				isBussinessContactEmail = this.getCellFormatValue(row.getCell(cell + 10), null, true);
			}
			String contactEmail = null;
			//核檢是否輸入，如果輸入，則根據是/否進行分別處理
			if (StringUtils.hasText(isBussinessContactEmail)) {
				//選擇否，則需核檢輸入的內容是否正確，此處值記錄否，核檢在下方判斷
				if (i18NUtil.getName(IAtomsConstants.NO).equals(isBussinessContactEmail)) {
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessContactEmail(IAtomsConstants.NO);
					} else {
						newCaseHandleInfoDTO.setContactIsBussinessContactEmail(IAtomsConstants.NO);
					}
					//如果選擇是，則帶入對應的特店資料
				} else if (i18NUtil.getName(IAtomsConstants.YES).equals(isBussinessContactEmail)) {
					contactEmail = headerDTO.getContactEmail();
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessContactEmail(IAtomsConstants.YES);
						newCaseHandleInfoDTO.setInstalledContactEmail(contactEmail);
					} else {
						newCaseHandleInfoDTO.setContactIsBussinessContactEmail(IAtomsConstants.YES);
						newCaseHandleInfoDTO.setContactUserEmail(contactEmail);
					}
				} else {
					//非是、否，則提示輸入錯誤
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
							+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_BUSSINESS_CONTACT_EMAIL)}, null));
					} else {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
							+ i18NUtil.getName(IAtomsMessageCode.INPUT_YES_OR_NO, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_IS_BUSSINESS_CONTACT_EMAIL)}, null));
					}	
					isError = Boolean.TRUE;
				}
			} else {
				//未選擇時，則異動案件帶入特店裝機資料
				if (!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
						newCaseHandleInfoDTO.setIsBussinessContactEmail(caseHandleInfoDTO.getIsBussinessContactEmail());
						if (IAtomsConstants.YES.equals(caseHandleInfoDTO.getIsBussinessContactEmail())) {
							newCaseHandleInfoDTO.setInstalledContactEmail(headerDTO.getContactEmail());
						} else {
							newCaseHandleInfoDTO.setInstalledContactEmail(caseHandleInfoDTO.getInstalledContactEmail());
						}
						//未選擇時，則非異動案件有聯系帶入特店聯系資料，無聯系帶入特店裝機資料
					} else {
						String isEquals = null;
						isEquals = caseHandleInfoDTO.getContactIsBussinessContactEmail();
						contactEmail = caseHandleInfoDTO.getContactUserEmail();
						if (IAtomsConstants.COLUMN_E.equals(isEquals)) {
							isEquals = caseHandleInfoDTO.getIsBussinessContactEmail();
							contactEmail = caseHandleInfoDTO.getInstalledContactEmail();
						}
						newCaseHandleInfoDTO.setContactIsBussinessContactEmail(isEquals);
						if (IAtomsConstants.YES.equals(isEquals)) {
							newCaseHandleInfoDTO.setContactUserEmail(headerDTO.getContactEmail());
						} else if (IAtomsConstants.NO.equals(isEquals)) {
							newCaseHandleInfoDTO.setContactUserEmail(contactEmail);
						}
					}
				}
			}
			//如果未選擇同營業聯絡人手機，則需要核檢聯絡人手機輸入是否正確
			if (i18NUtil.getName(IAtomsConstants.NO).equals(isBussinessContactEmail)) {
				String contactUserMail = null;
				if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					contactUserMail = this.getCellFormatValue(row.getCell(cell + 41), null, true);
				} else {
					contactUserMail = this.getCellFormatValue(row.getCell(cell + 11), null, true);
				}
				//驗證聯絡人手機是否輸入
				if (StringUtils.hasText(contactUserMail)) {
					//核檢長度是否正確
					if (contactUserMail.trim().length() > Integer.valueOf(IAtomsConstants.MAXLENGTH_NUMBER_FIFTY)) {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_EMAIL), IAtomsConstants.MAXLENGTH_NUMBER_FIFTY}, null));
							newCaseHandleInfoDTO.setInstalledContactEmail("-1");
						} else {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_USER_EMAIL), IAtomsConstants.MAXLENGTH_NUMBER_FIFTY}, null));
						
							newCaseHandleInfoDTO.setContactUserEmail("-1");
						}
						isError = Boolean.TRUE;
						//核檢格式是否正確
					} else if (!ValidateUtils.email(contactUserMail)) {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.FORMAT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_EMAIL)}, null));
							newCaseHandleInfoDTO.setInstalledContactEmail("-1");
						} else {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.FORMAT_ERROR, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_USER_EMAIL)}, null));
							newCaseHandleInfoDTO.setContactUserEmail("-1");
						}
						isError = Boolean.TRUE;
					} else {
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
							newCaseHandleInfoDTO.setInstalledContactEmail(contactUserMail);
						} else {
							newCaseHandleInfoDTO.setContactUserEmail(contactUserMail);
						}
					}
				}
			}
			//核檢必填項是否輸入
			if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) || IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
				//核檢是否同特點地址是否有值
				if (StringUtils.hasText(newCaseHandleInfoDTO.getIsBussinessAddress())) {
					//核檢區塊是否有值
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getInstalledAdressLocation())) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_LOCATION)}, null));
						isError = Boolean.TRUE;
					}
					//核檢郵遞區號是否有值
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getInstalledPostCode()) && StringUtils.hasText(newCaseHandleInfoDTO.getInstalledAdressLocation())) {
						boolean isCmsCase = false;
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
							isCmsCase = IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(newCaseHandleInfoDTO.getInstallType());
						} else {
							isCmsCase = IAtomsConstants.YES.equals(caseHandleInfoDTO.getCmsCase());
						}
						if (isCmsCase) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_POST_CODE)}, null));
							isError = Boolean.TRUE;
						}
						/*errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_LOCATION)}, null));
						isError = Boolean.TRUE;*/
					}
					//核檢地址是否有值
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getInstalledAdress())) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_ADRESS)}, null));
						isError = Boolean.TRUE;
					}
				} else {
					errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
							+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_HANDLE_IS_BUSSINESS_ADDRESS)}, null));
					isError = Boolean.TRUE;
				}
				//核檢同特點聯絡人是否有值
				if (StringUtils.hasText(newCaseHandleInfoDTO.getIsBussinessContact())
						&& IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					//核檢聯絡人欄位是否有值
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getInstalledContact())) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT)}, null));
						isError = Boolean.TRUE;
					}
				} else {
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getIsBussinessContact()) 
							&& IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_BUSSINESS_CONTACT)}, null));
						isError = Boolean.TRUE;
					}
				}
				//核檢同特點聯絡人電話是否有值
				if (StringUtils.hasText(newCaseHandleInfoDTO.getIsBussinessContactPhone())
						&& IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					//核檢聯絡人欄位是否有值
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getInstalledContactPhone())) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_PHONE)}, null));
						isError = Boolean.TRUE;
					}
				} else {
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getIsBussinessContactPhone()) 
							&& IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_IS_BUSSINESS_CONTACT_PHONE)}, null));
						isError = Boolean.TRUE;
					}
				}
			} else {
				//核檢是否同特點地址是否有值
				if (StringUtils.hasText(newCaseHandleInfoDTO.getContactIsBussinessAddress())) {
					//核檢區塊是否有值
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getContactAddressLocation())) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_ADDRESS_LOCATION)}, null));
						isError = Boolean.TRUE;
					}
					//核檢郵遞區號是否有值
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getContactPostCode()) && StringUtils.hasText(newCaseHandleInfoDTO.getContactAddressLocation())) {
						if (IAtomsConstants.YES.equals(caseHandleInfoDTO.getCmsCase())) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_POST_CODE)}, null));
							isError = Boolean.TRUE;
						}
						/*errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_LOCATION)}, null));
						isError = Boolean.TRUE;*/
					}
					//核檢地址是否有值
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getContactAddress())) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_ADDRESS)}, null));
						isError = Boolean.TRUE;
					}
				} else {
					errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
							+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_HANDLE_CONTACT_IS_BUSSINESS_ADDRESS)}, null));
					isError = Boolean.TRUE;
				}
				//核檢同特點聯絡人是否有值
				if (StringUtils.hasText(newCaseHandleInfoDTO.getContactIsBussinessContact())
						&& (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseCategory)
								|| IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseCategory))) {
					//核檢聯絡人欄位是否有值
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getContactUser())) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_USER)}, null));
						isError = Boolean.TRUE;
					}
				} else {
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getContactIsBussinessContact())
							&& (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseCategory)
									|| IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseCategory))) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_IS_BUSSINESS_CONTACT)}, null));
						isError = Boolean.TRUE;
					}
				}
				//核檢同特點聯絡人電話是否有值
				if (StringUtils.hasText(newCaseHandleInfoDTO.getContactIsBussinessContactPhone())
						&& (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseCategory)
								|| IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseCategory))) {
					//核檢聯絡人欄位是否有值
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getContactUserPhone())) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_USER_PHONE)}, null));
						isError = Boolean.TRUE;
					}
				} else {
					if (!StringUtils.hasText(newCaseHandleInfoDTO.getContactIsBussinessContactPhone())
							&& (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseCategory)
									|| IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseCategory))) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(index)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CONTACT_IS_BUSSINESS_CONTACT_PHONE)}, null));
						isError = Boolean.TRUE;
					}
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".checkContactOrInstalled() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".checkContactOrInstalled() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		
		return isError;
	}
	/**
	 * Purpose:
	 * @author Carrie Duan
	 * @param srmCaseTransactionParameterDTOs
	 * @param caseHandleInfoDTO
	 * @param errorMsgs
	 * @param caseTransactionParameterDTOs
	 * @param index
	 * @param caseCategory
	 * @return
	 * @return Boolean
	 */
	private Boolean checkUploadTrans (List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs, SrmCaseHandleInfoDTO caseHandleInfoDTO, List<String> errorMsgs, List<SrmCaseTransactionParameterDTO> caseTransactionParameterDTOs, int index,
			String caseCategory, List<SrmTransactionParameterItemDTO> transactionParameterItemList) {
		try {
			Map<String, Integer> caseTransaction = new HashMap<String, Integer>();
			SrmCaseTransactionParameterDTO caseTransactionParameterDTO = null;
			String transactionType = null;
			Boolean isError = Boolean.FALSE;
			String temp = null;
			int j = 1;
			cafe.core.bean.dto.parameter.BaseParameterItemDefDTO baseParameterItemDefDTO =  this.baseParameterItemDefDAO.getParameterItemByValue(IATOMS_PARAM_TYPE.TICKET_TYPE.getCode(), null, caseCategory);
			BaseParameterInquiryContext inquiryCtx = new BaseParameterInquiryContext();
			inquiryCtx.setParameterType(IATOMS_PARAM_TYPE.TRANSACTION_CATEGORY.getCode());
			List<Parameter> result = null;
			//獲取交易參數可編輯列
			SimpleDateFormat sf = new SimpleDateFormat(DateTimeUtils.DT_FMT_YYYYMMDD_DASH);
			MultiParameterInquiryContext param = new MultiParameterInquiryContext();
			param.addParameter(SrmTransactionParameterItemDTO.ATTRIBUTE.EFFECTIVE_DATE.getValue(), sf.format(DateTimeUtils.getCurrentTimestamp()));
			Map<String,List<String>> editFieldsGroupbyTransactionType = this.getEditFieldsGroupbyTransactionType(param);
			if(baseParameterItemDefDTO != null && StringUtils.hasText(baseParameterItemDefDTO.getItemId())){
				inquiryCtx.setParentItemId(baseParameterItemDefDTO.getItemId());
				result  = (List<Parameter>) this.baseParameterItemDefDAO.getParameterItems(inquiryCtx);
			}
			Boolean isHave = Boolean.FALSE;
			int commonNumber = 0;
			for (SrmCaseTransactionParameterDTO dto : caseTransactionParameterDTOs) {
				HashMap<String, String> tempTemp = new HashMap<String, String>();
				if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
					isHave = StringUtils.hasText(dto.getCaseNo()) && dto.getCaseNo().equals(caseHandleInfoDTO.getCaseNo());
				} else {
					isHave = StringUtils.hasText(dto.getDTID()) && dto.getDTID().equals(caseHandleInfoDTO.getDtid());
				}
				if (isHave) {
					caseTransactionParameterDTO = new SrmCaseTransactionParameterDTO();
					//獲取交易參數
					transactionType = dto.getTransactionTypeName();
					//核檢交易參數是否輸入
					if (StringUtils.hasText(transactionType)) {
						temp = this.getValueByName(result, transactionType);
						if (StringUtils.hasText(temp)) {
							dto.setTransactionType(temp);
						} else {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_NOT_UPDATE_TRANS_TYPE, new String[]{String.valueOf(j + 1)}, null));
							isError = Boolean.TRUE;
							j++;
							continue;
						}
					} else {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(j + 1)}, null)
								+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_TRANSACTION_TYPE)}, null));
						j++;
						isError = Boolean.TRUE;
						continue;
					}
					
					
					if ((IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VM.getCode().equals(temp) 
							|| IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJ.getCode().equals(temp) 
							|| IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJU.getCode().equals(temp)) && !i18NUtil.getName(IAtomsConstants.YES).equals(dto.getIsDeleted())) {
						if (commonNumber == 0) {
							commonNumber++;
						} else {
							if (commonNumber == 1){
								commonNumber++;
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_COMMON_TRANS_ERROR));
								isError = Boolean.TRUE;
								j++;
								continue;
							}
						}
					}
					if (caseTransaction.containsKey(temp)) {
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_AND_ROW, new String[]{String.valueOf((j + 1)), caseTransaction.get(temp).toString()}, null) + 
								i18NUtil.getName(IAtomsMessageCode.INPUT_REPEAT, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_TRANSACTION_TYPE)}, null));
						isError = Boolean.TRUE;
						j++;
						continue;
					} else if (!i18NUtil.getName(IAtomsConstants.YES).equals(dto.getIsDeleted())){
						caseTransaction.put(temp, j+1);
					}
					if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)
							|| IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseCategory)
							|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseCategory)) {
						if (i18NUtil.getName(IAtomsConstants.YES).equals(dto.getIsDeleted())) {
							srmCaseTransactionParameterDTOs.add(dto);
							j++;
							continue;
						}
					}
					List<String> editFields = editFieldsGroupbyTransactionType.get(temp);
					//核檢特點代號
					String merchantCode = dto.getMerchantCode();
					//核檢該筆交易項目是否可以異動特點代號
					if (editFields.contains(transactionParameterItemList.get(0).getParamterItemCode())) {
						if (StringUtils.hasText(merchantCode)) {
							//核檢特點代號輸入格式是否正確
							if (!ValidateUtils.numberOrEnglish(merchantCode)) {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf((j + 1))}, null) 
										+ i18NUtil.getName(IAtomsMessageCode.NUMBER_OR_ENGLISH, new String[]{transactionParameterItemList.get(0).getParamterItemName()}, null));
								isError = Boolean.TRUE;
							}
							//核檢長度是否正確
							if (merchantCode.trim().length() > Integer.valueOf(transactionParameterItemList.get(0).getParamterItemLength())) {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(j + 1)}, null)
										+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{transactionParameterItemList.get(0).getParamterItemName(), transactionParameterItemList.get(0).getParamterItemLength().toString()}, null));
								isError = Boolean.TRUE;
							}
						} else {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(j + 1)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{transactionParameterItemList.get(0).getParamterItemName()}, null));
							isError = Boolean.TRUE;
						}
					} else {
						if (StringUtils.hasText(merchantCode)) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(j + 1)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_UPDATE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_TRANSACTION_TYPE),transactionType,transactionParameterItemList.get(0).getParamterItemName()}, null));
							isError = Boolean.TRUE;
						}
					}
					//核檢分期特點代號
					String merchantCodeOther = dto.getMerchantCodeOther();
					//核檢該筆交易項目是否可以異動分期特點代號
					if (editFields.contains(transactionParameterItemList.get(1).getParamterItemCode())) {
						if (StringUtils.hasText(merchantCodeOther)) {
							//核檢分期特點代號輸入格式是否正確
							if (!ValidateUtils.numberOrEnglish(merchantCodeOther)) {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf((j + 1))}, null) 
										+ i18NUtil.getName(IAtomsMessageCode.NUMBER_OR_ENGLISH, new String[]{transactionParameterItemList.get(1).getParamterItemName()}, null));
								isError = Boolean.TRUE;
							}
							//核檢長度是否正確
							if (merchantCodeOther.trim().length() > Integer.valueOf(transactionParameterItemList.get(1).getParamterItemLength())) {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(j + 1)}, null)
										+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{transactionParameterItemList.get(1).getParamterItemName(), transactionParameterItemList.get(1).getParamterItemLength().toString()}, null));
								isError = Boolean.TRUE;
							}
						} else {
							// Task #2518 交易參數中，MID2 改為非必填
							/*errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(j + 1)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{transactionParameterItemList.get(1).getParamterItemName()}, null));
							isError = Boolean.TRUE;*/
						}
					} else {
						if (StringUtils.hasText(merchantCodeOther)) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(j + 1)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_UPDATE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_TRANSACTION_TYPE),transactionType,transactionParameterItemList.get(1).getParamterItemName()}, null));
							isError = Boolean.TRUE;
						}
					}
					//核檢tid
					String tid = dto.getTid();
					//核檢該筆交易項目是否可以異動tid
					if (editFields.contains(transactionParameterItemList.get(2).getParamterItemCode())) {
						if (StringUtils.hasText(tid)) {
							//核檢tid輸入格式是否正確 限英數字
							if (!ValidateUtils.numberOrEnglish(tid)) {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf((j + 1))}, null) 
									+ i18NUtil.getName(IAtomsMessageCode.NUMBER_OR_ENGLISH, new String[]{transactionParameterItemList.get(2).getParamterItemName()}, null));
								isError = Boolean.TRUE;
							}
							//核檢長度是否正確
							if (tid.trim().length() > Integer.valueOf(transactionParameterItemList.get(2).getParamterItemLength())) {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(j + 1)}, null)
										+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{transactionParameterItemList.get(2).getParamterItemName(), transactionParameterItemList.get(2).getParamterItemLength().toString()}, null));
								isError = Boolean.TRUE;
							}
						} else {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(j + 1)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{transactionParameterItemList.get(2).getParamterItemName()}, null));
							isError = Boolean.TRUE;
						}
					} else {
						if (StringUtils.hasText(tid)) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(j + 1)}, null)
									+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_UPDATE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_TRANSACTION_TYPE), transactionType,transactionParameterItemList.get(2).getParamterItemName()}, null));
							isError = Boolean.TRUE;
						}
					}
					List<String> itemValues = dto.getItemValues();
					for (int m = 3; m < transactionParameterItemList.size(); m++) {
						temp = itemValues.get(m-3);
						if (editFields.contains(transactionParameterItemList.get(m).getParamterItemCode())) {
							if ("click".equals(transactionParameterItemList.get(m).getParamterItemType())) {
								tempTemp.put(transactionParameterItemList.get(m).getParamterItemCode(), StringUtils.hasText(temp) ? "V":IAtomsConstants.MARK_EMPTY_STRING);
							} else if ("combobox".equals(transactionParameterItemList.get(m).getParamterItemType())) {
								//核檢長度是否正確
								if (temp.trim().length() > Integer.valueOf(transactionParameterItemList.get(m).getParamterItemLength())) {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(j + 1)}, null)
										+ i18NUtil.getName(IAtomsMessageCode.PARAM_LENGTH_IS_INVALID, new String[]{transactionParameterItemList.get(m).getParamterItemName(), transactionParameterItemList.get(m).getParamterItemLength().toString()}, null));
										isError = Boolean.TRUE;
								} 
								if ("number".equals(transactionParameterItemList.get(m).getParamterDataType())){
									if (StringUtils.hasText(temp) && !ValidateUtils.numberOnly(temp)) {
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf((j + 1))}, null) 
											+ i18NUtil.getName(IAtomsMessageCode.INPUT_NUMBER, new String[]{transactionParameterItemList.get(m).getParamterItemName()}, null));
										isError = Boolean.TRUE;
										continue;
									}
								} 
								tempTemp.put(transactionParameterItemList.get(m).getParamterItemCode(), temp);
							}
						} else {
							if (StringUtils.hasText(temp)) {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(j + 1)}, null)
										+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_UPDATE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_TRANSACTION_TYPE),transactionType,transactionParameterItemList.get(m).getParamterItemName()}, null));
								isError = Boolean.TRUE;
							}
						}
					}
					JSONObject json = new JSONObject(tempTemp);
					dto.setItemValue(json.toString());
					srmCaseTransactionParameterDTOs.add(dto);
				}
				j++;
			}
			//srmCaseTransactionParameterDTOs 按键汇入的交易参数
			//caseNewTransactionParameterDTOs 按键之前的交易参数
			if (!isError && !IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
			//	List<SrmCaseNewTransactionParameterDTO> caseOldTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.listTransactionParameterDTOsByDtid(caseHandleInfoDTO.getDtid());
				// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
				boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(caseHandleInfoDTO.getDtid(), null);
				// CR #2551  查詢交易參數 Bug #3055
				List<SrmCaseNewTransactionParameterDTO> caseOldTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.getTransactionParameterDTOsByDtid(caseHandleInfoDTO.getDtid(), isNewHave);
				
				SimpleDtoDmoTransformer transformer = new SimpleDtoDmoTransformer();
				if (srmCaseTransactionParameterDTOs.size() == 0) {
					if (!CollectionUtils.isEmpty(caseOldTransactionParameterDTOs)) {
						for (SrmCaseNewTransactionParameterDTO srmCaseNewTransactionParameterDTO : caseOldTransactionParameterDTOs) {
							caseTransactionParameterDTO = (SrmCaseTransactionParameterDTO) transformer.transform(srmCaseNewTransactionParameterDTO, new SrmCaseTransactionParameterDTO());
							srmCaseTransactionParameterDTOs.add(caseTransactionParameterDTO);
						}
					}
				} else {
					//記錄需要新增的交易項目
					ArrayList<SrmCaseTransactionParameterDTO> addCaseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
					//記錄需要刪除的交易項目
					ArrayList<SrmCaseTransactionParameterDTO> delCaseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
					List<SrmCaseTransactionParameterDTO> dtos = new ArrayList<SrmCaseTransactionParameterDTO>();
					//转换旧资料的类型
					for (SrmCaseNewTransactionParameterDTO dto : caseOldTransactionParameterDTOs) {
						dtos.add((SrmCaseTransactionParameterDTO) transformer.transform(dto, new SrmCaseTransactionParameterDTO()));
					}
					//比较旧资料与最新交易参数，没有的则新增，有的则修改
					for (int i = 0; i < srmCaseTransactionParameterDTOs.size(); i++) {
						isError = Boolean.FALSE;
						for (int m = 0; m < dtos.size(); m++) {
							if (dtos.get(m).getTransactionType().equals(srmCaseTransactionParameterDTOs.get(i).getTransactionType())) {
								dtos.remove(m);
								if (m == dtos.size()) {
									dtos.add(srmCaseTransactionParameterDTOs.get(i));	
								} else {
									dtos.add(m, srmCaseTransactionParameterDTOs.get(i));
								}
								isError = Boolean.TRUE;
								break;
							}
						}
						if (!isError) {
							dtos.add(srmCaseTransactionParameterDTOs.get(i));
						}
					}
					//記錄需要刪除的交易項目
					for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
						if (i18NUtil.getName(IAtomsConstants.YES).equals(srmCaseTransactionParameterDTO.getIsDeleted())) {
							delCaseTransactionParameterDTOs.add(srmCaseTransactionParameterDTO);
						}
					}
					for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : delCaseTransactionParameterDTOs) {
						for (SrmCaseTransactionParameterDTO dto : dtos) {
							if (dto.getTransactionType().equals(srmCaseTransactionParameterDTO.getTransactionType())) {
								dtos.remove(dto);
								break;
							}
						}
					}
					srmCaseTransactionParameterDTOs.clear();
					for (SrmCaseTransactionParameterDTO dto : dtos) {
						srmCaseTransactionParameterDTOs.add(dto);
					}
					int i = 0;
					for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs) {
						if (IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VM.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
								|| IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJ.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())
								|| IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJU.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())) {
							i++;
						}
					}
					isError = Boolean.FALSE;
					if (i > 1) {
						isError = Boolean.TRUE;
						errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_UPLOAD_COMMON_TRANS_ERROR));
					}
				}
			}
			return isError;
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".checkUploadTrans() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		//return false;
	}
	
	/**
	 * Purpose:驗證案件動作的保存
	 * @author CrissZhang
	 * @throws ServiceException : 出錯時拋出ServiceException
	 * @return Map<String,Object> ： 返回一個保存結果數據的map集合
	 */
	private Map<String, Object> validateCaseAction(CaseManagerFormDTO formDTO) throws ServiceException {
		setUserRoleFlag(formDTO);
		// TODO
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Message msg = null;
		boolean validateResult = true;
		List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = null;
		try{
			if(StringUtils.hasText(formDTO.getCaseId())){
				// 臨時處理的案件狀態
				String tempCaseStatus = null;
				// 臨時處理的案件狀態
				String tempCaseCategory = null;
				// 臨時處理的更新時間
				String tempUpdateDate = null;
				// 得到案件處理集合
				srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId(), null);
				//獲取案件歷程dto
				SrmCaseTransactionDTO caseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
				//獲取當前處理案件的狀態
				String caseStatus = caseTransactionDTO.getNowCaseStatus();
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
					// 第一個案件狀態
					tempCaseStatus = srmCaseHandleInfoDTOs.get(0).getCaseStatus();
					// 第一個案件類別
					tempCaseCategory = srmCaseHandleInfoDTOs.get(0).getCaseCategory();
					//異動時間					
					tempUpdateDate = caseTransactionDTO.getUpdatedDateString();
					//格式為     更新日期;案件編號，更新日期;案件編號
					//先用逗號轉換為為list
					List<String> updateDateStrings = StringUtils.toList(tempUpdateDate, IAtomsConstants.MARK_SEPARATOR);
					Map<String, String> map = new HashMap<String, String>();
					IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
					//循環list，裡面每一個都是分號隔開的  更新日期；案件編號   的形式.
					for (String updateDate : updateDateStrings) {
						map.put(updateDate.split(IAtomsConstants.MARK_SEMICOLON)[1], updateDate.split(IAtomsConstants.MARK_SEMICOLON)[0]);
					}
					for(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs){
						String updateDateString = map.get(srmCaseHandleInfoDTO.getCaseId());
						//由異動時間判斷該筆資料是否已被異動
						DateTimeUtils.toTimestamp(DateTimeUtils.toString(srmCaseHandleInfoDTO.getUpdatedDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_DASH)).getTime();
						if (StringUtils.hasText(updateDateString) && !updateDateString.equals(srmCaseHandleInfoDTO.getUpdatedDate() != null ? String.valueOf(srmCaseHandleInfoDTO.getUpdatedDate().getTime()) : Long.parseLong(IAtomsConstants.MARK_EMPTY_STRING))) {
							LOGGER.debug("validateCaseAction() query updateDate=" + updateDateString);
							LOGGER.debug("validateCaseAction() srmCaseHandleInfoDTO updateDate=" + srmCaseHandleInfoDTO.getUpdatedDate() != null ? String.valueOf(srmCaseHandleInfoDTO.getUpdatedDate().getTime()) : Long.parseLong(IAtomsConstants.MARK_EMPTY_STRING));
							LOGGER.debug("validateCaseAction() caseId=" + srmCaseHandleInfoDTO.getCaseId());
							validateResult = false;
							msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.DATA_ALERDAY_UPDATE);
							break;
						}
						if(!tempCaseStatus.equals(srmCaseHandleInfoDTO.getCaseStatus()) || !tempCaseCategory.equals(srmCaseHandleInfoDTO.getCaseCategory())){
							msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.SAME_STATUS_AND_SAME_CATEGORY);
							validateResult = false;
							break;
						}
						if (StringUtils.hasText(caseStatus) && !caseStatus.equals(srmCaseHandleInfoDTO.getCaseStatus())) {
							LOGGER.debug("validateCaseAction() caseStatus=" + caseStatus);
							LOGGER.debug("validateCaseAction() srmCaseHandleInfoDTO.caseStatus=" + srmCaseHandleInfoDTO.getCaseStatus());
							LOGGER.debug("validateCaseAction() caseId=" + srmCaseHandleInfoDTO.getCaseId());
							validateResult = false;
							msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.DATA_ALERDAY_UPDATE);
							break;
						}
						// 判斷案件狀態是否可以進行動作
						// 新增記錄
						if(IAtomsConstants.CASE_ACTION.ADD_RECORD.getCode().equals(formDTO.getActionId())){
							// 若案件狀態為“待派工、已作廢、立即結案、結案”，則顯示訊息「案件狀態不符，不可進行新增記錄」
							// Task #2559 立即結案、結案 可新增記錄
							if(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
									|| IAtomsConstants.CASE_STATUS.VOIDED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ADD_RECORD)});
								break;
							}
						// 完修
						} else if(IAtomsConstants.CASE_ACTION.COMPLETE.getCode().equals(formDTO.getActionId())){
							// 若案件狀態不為 “已到場”，則顯示訊息「案件狀態不為已到場，不可進行完修」
							if(!IAtomsConstants.CASE_STATUS.ARRIVED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_COMPLETE)});
								break;
							}
						// 線上排除
						} else if(IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode().equals(formDTO.getActionId())){
							// 若勾選資料之案件狀態為“待結案審查、已作廢、立即結案、結案”，則顯示訊息「案件狀態不符，不可進行線上排除」
							// Task #3205 案件僅能完修一次，即完修後不能線上排除
							if(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
									|| IAtomsConstants.CASE_STATUS.VOIDED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
									|| IAtomsConstants.CASE_STATUS.CLOSED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
									|| IAtomsConstants.CASE_STATUS.IMMEDIATE_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
									|| IAtomsConstants.CASE_STATUS.COMPLETED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ONLINE_EXCLUSION)});
								break;
							}
						//結案
						} else if(IAtomsConstants.CASE_ACTION.CLOSED.getCode().equals(formDTO.getActionId())){
							//若案件狀態不為“待結案審查”，則顯示訊息「案件狀態為待結案審查，才可進行結案」
							if(!IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CLOSED)});
								break;
							}
						//立即結案
						} else if(IAtomsConstants.CASE_ACTION.IMMEDIATELY_CLOSING.getCode().equals(formDTO.getActionId())){
							//若案件狀態不為“待派工”或目前處理人員不為客服，則顯示訊息「案件狀態不符，不可進行立即結案」
							//若重複進件(案件類別=倂機、異動、拆機、專案、報修)，則需將之前重複進件的案件結案，才可立即結案，顯示訊息「來自{當前案件編號}訊息：請先將{之前重複進件的案件編號}結案」
							/*if((!IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())) 
								|| (IAtomsConstants.NO.equals(formDTO.getIsCustomerService()))){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)});
								break;
							}*/
							// Bug #2331
							// 是客服 // CR #2951 廠商客服 //Task #3578 客戶廠商客服
							if(formDTO.getIsCustomerService() || formDTO.getIsVendorService() || formDTO.getIsCusVendorService()){
								// 不爲待派工、已派、已回應、已到場、延期
								if(!IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
										&& !IAtomsConstants.CASE_STATUS.DISPATCHED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
										&& !IAtomsConstants.CASE_STATUS.RESPONSED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
										&& !IAtomsConstants.CASE_STATUS.ARRIVED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
										&& !IAtomsConstants.CASE_STATUS.DELAYING.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
									validateResult = false;
									msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)});
									break;
								}
							// 不是客服
							} else {
								// 不爲待派工
								if(!IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
									validateResult = false;
									msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)});
									break;
								}
							}
						//作廢
						} else if(IAtomsConstants.CASE_ACTION.VOID_CASE.getCode().equals(formDTO.getActionId())){
							//若案件狀態不不為“待派工”或目前處理人員不為客服，則顯示訊息「案件狀態不符，不可進行作廢」。
							/*if((!IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									|| (IAtomsConstants.NO.equals(formDTO.getIsCustomerService()))){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_VOID_CASE)});
								break;
							}*/
							// Bug #2331
							// 是客服 // CR #2951 廠商客服 //Task #3578 客戶廠商客服
							if(formDTO.getIsCustomerService() || formDTO.getIsVendorService() || formDTO.getIsCusVendorService()){
								// 不爲待派工、已派、已回應、已到場、延期
								if(!IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
										&& !IAtomsConstants.CASE_STATUS.DISPATCHED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
										&& !IAtomsConstants.CASE_STATUS.RESPONSED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
										&& !IAtomsConstants.CASE_STATUS.ARRIVED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
										&& !IAtomsConstants.CASE_STATUS.DELAYING.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
									validateResult = false;
									msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)});
									break;
								}
							// 不是客服
							} else {
								// 不爲待派工
								if(!IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
									validateResult = false;
									msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)});
									break;
								}
							}
						//派工 自動派工
						} else if (IAtomsConstants.CASE_ACTION.DISPATCHING.getCode().equals(formDTO.getActionId())
									|| IAtomsConstants.CASE_ACTION.AUTO_DISPATCHING.getCode().equals(formDTO.getActionId())) {
							//件狀態為 “待結案審查、已作廢、立即結案、結案”，則顯示訊息「案件狀態不符，不可進行派工」
							if((IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									|| (IAtomsConstants.CASE_STATUS.VOIDED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									|| (IAtomsConstants.CASE_STATUS.IMMEDIATE_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									|| (IAtomsConstants.CASE_STATUS.CLOSED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_DISPATCHING)});
								break;
							}
							//當前登錄者不是客服時走以下驗證 // CR #2951 廠商客服  //Bug #2986  廠商客服不走以下驗證 2017/12/21 //Task #3578 客戶廠商客服
							if ((!formDTO.getIsCustomerService()) && (!formDTO.getIsVendorService()) && (!formDTO.getIsCusVendorService())) {
								//Bug #2515
								//不是VendorAgent 且 不是CyberAgent
								if ((!formDTO.getIsVendorAgent()) && (!formDTO.getIsCyberAgent())) {
									//既是tms又是QA時
									if (formDTO.getIsTMS() && formDTO.getIsQA() 
											&& !IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName()) 
											&& !IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName())) {
										validateResult = false;
										msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
										break;
									} else if (formDTO.getIsTMS() && !formDTO.getIsQA()
											&& !IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName())) {
										validateResult = false;
										msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
										break;
									} else if (formDTO.getIsQA() && !formDTO.getIsTMS()
											&& !IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName())) {
										validateResult = false;
										msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
										break;
									}
								} else {
									if (!IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())) {
										//維護廠商不為登陸者公司
										if (!logonUser.getCompanyId().equals(srmCaseHandleInfoDTO.getCompanyId())) {
											if ((!formDTO.getIsQA()) && (!formDTO.getIsTMS())){
												validateResult = false;
												msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
												break;
											} else if (formDTO.getIsTMS() && formDTO.getIsQA() 
													&& !IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName()) 
													&& !IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName())) {
												validateResult = false;
												msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
												break;
											} else if (formDTO.getIsTMS() && !formDTO.getIsQA()
													&& !IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName())) {
												validateResult = false;
												msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
												break;
											} else if (formDTO.getIsQA() && !formDTO.getIsTMS()
													&& !IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName())) {
												validateResult = false;
												msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
												break;
											}
										} else {
											//維護廠商為登陸者公司
											if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName())
													||IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName())
													||i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE).equals(srmCaseHandleInfoDTO.getDispatchDeptName())) {
												if (IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName()) && !formDTO.getIsTMS()) {
													validateResult = false;
													msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
													break;
												}
												if (IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName()) && !formDTO.getIsQA()) {
													validateResult = false;
													msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
													break;
												}
												if (i18NUtil.getName(IAtomsConstants.FIELD_CASE_ROLE_CUSTOMER_SERVICE).equals(srmCaseHandleInfoDTO.getDispatchDeptName())) {
													validateResult = false;
													msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
													break;
												}
											}
										}
									} else {
										validateResult = false;
										msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
										break;
									}
								}
								/*if (formDTO.getIsTMS() && formDTO.getIsQA() 
										&& !IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName()) 
										&& !IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName())) {
									validateResult = false;
									msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
									break;
								} else if (formDTO.getIsTMS() && !formDTO.getIsQA()
										&& !IAtomsConstants.CASE_ROLE.TMS.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName())) {
									validateResult = false;
									msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
									break;
								} else if (formDTO.getIsQA() && !formDTO.getIsTMS()
										&& !IAtomsConstants.CASE_ROLE.QA.getCode().equals(srmCaseHandleInfoDTO.getDispatchDeptName())) {
									validateResult = false;
									msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.TMS_QA_MUCH_TMS_QA);
									break;
								}*/
								//
							}
							//回應
						} else if (IAtomsConstants.CASE_ACTION.RESPONSE.getCode().equals(formDTO.getActionId())) {
							//若已回應過，不可再回應，不為“待派工”或“已派工” ,則顯示訊息「案件狀態不符，不可進行回應」
							if((!IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.DISPATCHED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RESPONSE)});
								break;
							}
							//到場
						} else if (IAtomsConstants.CASE_ACTION.ARRIVE.getCode().equals(formDTO.getActionId())) {
							//若案件狀態不為“已回應”或“已到場” 或“延期中” 或“完修”，則顯示訊息「案件狀態不符，不可進行到場」
							if((!IAtomsConstants.CASE_STATUS.RESPONSED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.ARRIVED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.DELAYING.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.COMPLETED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_ARRIVE)});
								break;
							}
							//案件類型修改
						} else if (IAtomsConstants.CASE_ACTION.CHANGE_CASE_TYPE.getCode().equals(formDTO.getActionId())) {
							//若案件狀態不為“待派工”、“已派工”、“已回應”、“已到場”、“延期中”，則顯示訊息「案件狀態不符，不可進行案件類型修改」
							// Task #3227 結案后可修改案件類型
							if((!IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.DISPATCHED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.RESPONSED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.ARRIVED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.DELAYING.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.CLOSED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.IMMEDIATE_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CHANGE_CASE_TYPE)});
								break;
							}
							//退回
						} else if (IAtomsConstants.CASE_ACTION.RETREAT.getCode().equals(formDTO.getActionId())) {
							//若案件狀態不為待結案審查，則顯示訊息「案件狀態為待結案審查，才可進行退回(完修)」
							/*if(!IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_MUCH_WAIT_CLOSE_CAN_RETREAT);
								break;
							}*/
							// Task #3113 完修退回至客服
							if(!IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())
									&& !IAtomsConstants.CASE_STATUS.COMPLETED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_MUCH_WAIT_CLOSE_CAN_RETREAT);
								break;
							}
							//催修
						} else if (IAtomsConstants.CASE_ACTION.RUSH_REPAIR.getCode().equals(formDTO.getActionId())) {
							//若案件狀態不為“待派工”、“已派工”、“已回應”、“已到場”、“延期中”, 不可進行催修
							if((!IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.DISPATCHED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.RESPONSED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.ARRIVED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.DELAYING.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_RUSH_REPAIR)});
								break;
							}
							//延期
						} else if (IAtomsConstants.CASE_ACTION.DELAY.getCode().equals(formDTO.getActionId())) {
							//若案件狀態不為“已回應”或“已到場”, 不可進行延期 //Task #3123 延期也可以延期
							if((!IAtomsConstants.CASE_STATUS.RESPONSED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.ARRIVED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))
									&& (!IAtomsConstants.CASE_STATUS.DELAYING.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_DELAY)});
								break;
							}
						} else if(IAtomsConstants.CASE_ACTION.SIGN.getCode().equals(formDTO.getActionId())) {
							//若案件狀態不為“完修” 不可進行簽收
							if((!IAtomsConstants.CASE_STATUS.COMPLETED.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus()))){
								validateResult = false;
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_SIGN)});
								break;
							}
						}
					}
				}
			}
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".validateCaseAction() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		resultMap.put(IAtomsConstants.PARAM_FLAG, validateResult);
		resultMap.put(IAtomsConstants.PARAM_ACTION_RESULT_MSG, msg);
		resultMap.put(IAtomsConstants.PARAM_ACTION_RESULT, srmCaseHandleInfoDTOs);
		return resultMap;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getCaseInfoById(cafe.core.context.MultiParameterInquiryContext)
	 */
	@Override
	public Map getCaseInfoById(MultiParameterInquiryContext inquiryContext)throws ServiceException {
		Map map = new HashMap();
		try{
			String caseId = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue());
			//Task #3566
			String dtoFlag = (String) inquiryContext.getParameter(IAtomsConstants.PARAM_FLAG);
			if(StringUtils.hasText(caseId)){
				if (IAtomsConstants.COLUMN_P.equals(dtoFlag)) {
					List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseId, null);
					if (!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs) && srmCaseTransactionParameterDTOs.get(0) != null) {
						Gson gsonss = null;
						gsonss = new GsonBuilder().create();
						//将集合转化为JSON字符串
						String caseTransactionParameterStr = gsonss.toJson(srmCaseTransactionParameterDTOs);
						if(StringUtils.hasText(caseTransactionParameterStr)){
							map.put("caseTransactionParameterStr", caseTransactionParameterStr);
						}
					}
				} else {
					SrmCaseHandleInfoDTO srmCaseHandleInfo = this.srmCaseHandleInfoDAO.getCaseInfoById(caseId, IAtomsConstants.PARAM_NO).get(0);
					if(srmCaseHandleInfo != null){
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_STATUS.getValue(), srmCaseHandleInfo.getCaseStatus());
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_CATEGORY.getValue(), srmCaseHandleInfo.getCaseCategory());
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_TYPE.getValue(), srmCaseHandleInfo.getCaseType());
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.DISPATCH_DEPT_NAME.getValue(), srmCaseHandleInfo.getDispatchDeptName());
						//bug2331 派工回客服驗證 所需派工單位id update by 2017/09/15
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.DISPATCH_DEPT_ID.getValue(), srmCaseHandleInfo.getDispatchDeptId());

						//處理頁面處理后，更新相關欄位
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.ATTENDANCE_TIMES.getValue(), srmCaseHandleInfo.getAttendanceTimes());
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPANY_ID.getValue(), srmCaseHandleInfo.getCompanyId());
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.DEPARTMENT_ID.getValue(), srmCaseHandleInfo.getDepartmentId());
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPANY_NAME.getValue(), srmCaseHandleInfo.getCompanyName());
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.EXPECTED_COMPLETION_DATE.getValue(), srmCaseHandleInfo.getExpectedCompletionDate());
						//異動時間 --用於多瀏覽器驗證
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.UPDATED_DATE.getValue(), srmCaseHandleInfo.getUpdatedDate() != null ? String.valueOf(srmCaseHandleInfo.getUpdatedDate().getTime()) : String.valueOf(""));
						
						// Bug #2331 查詢目前處理人
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.DISPATCH_PROCESS_USER.getValue(), srmCaseHandleInfo.getDispatchProcessUser());
						//Bug #2346 查詢 客戶code 要判斷 是否彰銀
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPANY_CODE.getValue(), srmCaseHandleInfo.getCompanyCode());
						//Bug #2276 處理頁面簽收后直接結案dto中沒有問題原因等相關的值 2017/11/16
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.RESPONSIBITY.getValue(), srmCaseHandleInfo.getResponsibity());
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PROBLEM_REASON.getValue(), srmCaseHandleInfo.getProblemReason());
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PROBLEM_REASON_CODE.getValue(), srmCaseHandleInfo.getProblemReasonCode());
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PROBLEM_SOLUTION.getValue(), srmCaseHandleInfo.getProblemSolution());
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PROBLEM_SOLUTION_CODE.getValue(), srmCaseHandleInfo.getProblemSolutionCode());

						// Task #3113 完修可以退回客服 簽收設備后不能作廢
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.HAS_RETREAT.getValue(), srmCaseHandleInfo.getHasRetreat());
						
						// Task #3227 結案后可修改案件類型
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPLETE_DATE.getValue(), srmCaseHandleInfo.getCompleteDate());
						// Task #3336若為CMS案件為必填
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CMS_CASE.getValue(), srmCaseHandleInfo.getCmsCase());
						map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CUSTOMER_ID.getValue(), srmCaseHandleInfo.getCustomerId());

					}
					//Task #3566
					if (IAtomsConstants.PARAM_YES.equals(dtoFlag)) {
						List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseId, null);
						if (!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs) && srmCaseTransactionParameterDTOs.get(0) != null) {
							Gson gsonss = null;
							gsonss = new GsonBuilder().create();
							//将集合转化为JSON字符串
							String caseTransactionParameterStr = gsonss.toJson(srmCaseTransactionParameterDTOs);
							if(StringUtils.hasText(caseTransactionParameterStr)){
								srmCaseHandleInfo.setCaseTransactionParameterStr(caseTransactionParameterStr);
							}
						}
						map.put("srmCaseHandleInfo", srmCaseHandleInfo);
					}
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".getCaseInfoById() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getCaseInfoById() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return map;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getChangeCaseInfoById(cafe.core.context.MultiParameterInquiryContext)
	 */
	@Override
	public Map getChangeCaseInfoById(MultiParameterInquiryContext inquiryContext)throws ServiceException {
		Map map = new HashMap();
		try{
			String caseId = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue());
			if(StringUtils.hasText(caseId)){
				SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = this.srmCaseHandleInfoDAO.getChangeCaseInfoById(caseId, IAtomsConstants.PARAM_NO).get(0);
				if(srmCaseHandleInfoDTO != null){
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue(), srmCaseHandleInfoDTO.getCaseId());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS.getValue(), srmCaseHandleInfoDTO.getPeripherals());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_NAME.getValue(), srmCaseHandleInfoDTO.getPeripheralsName());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION.getValue(), srmCaseHandleInfoDTO.getPeripheralsFunction());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION_NAME.getValue(), srmCaseHandleInfoDTO.getPeripheralsFunctionName());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS2.getValue(), srmCaseHandleInfoDTO.getPeripherals2());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS2_NAME.getValue(), srmCaseHandleInfoDTO.getPeripherals2Name());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION2.getValue(), srmCaseHandleInfoDTO.getPeripheralsFunction2());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION2_NAME.getValue(), srmCaseHandleInfoDTO.getPeripheralsFunction2Name());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS3.getValue(), srmCaseHandleInfoDTO.getPeripherals3());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS3_NAME.getValue(), srmCaseHandleInfoDTO.getPeripherals3Name());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION3.getValue(), srmCaseHandleInfoDTO.getPeripheralsFunction3());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION3_NAME.getValue(), srmCaseHandleInfoDTO.getPeripheralsFunction3Name());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.UPDATED_DATE.getValue(), srmCaseHandleInfoDTO.getUpdatedDate() != null ? String.valueOf(srmCaseHandleInfoDTO.getUpdatedDate().getTime()) : String.valueOf(""));
					
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.UPDATED_BY_NAME.getValue(), srmCaseHandleInfoDTO.getUpdatedByName());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.UPDATED_BY_ID.getValue(), srmCaseHandleInfoDTO.getUpdatedById());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_CONTRACT.getValue(), srmCaseHandleInfoDTO.getPeripheralsContract());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS2_CONTRACT.getValue(), srmCaseHandleInfoDTO.getPeripherals2Contract());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS3_CONTRACT.getValue(), srmCaseHandleInfoDTO.getPeripherals3Contract());
					
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_SERIAL_NUMBER.getValue(), srmCaseHandleInfoDTO.getPeripheralsSerialNumber());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS2_SERIAL_NUMBER.getValue(), srmCaseHandleInfoDTO.getPeripherals2SerialNumber());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS3_SERIAL_NUMBER.getValue(), srmCaseHandleInfoDTO.getPeripherals3SerialNumber());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.EDC_SERIAL_NUMBER.getValue(), srmCaseHandleInfoDTO.getEdcSerialNumber());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.ENABLE_DATE.getValue(), srmCaseHandleInfoDTO.getEnableDate());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.WAREHOUSE_NAME.getValue(), srmCaseHandleInfoDTO.getWareHouseName());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.FIRST_DESCRIPTION.getValue(), srmCaseHandleInfoDTO.getFirstDescription());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.SECOND_DESCRIPTION.getValue(), srmCaseHandleInfoDTO.getSecondDescription());
					map.put(SrmCaseHandleInfoDTO.ATTRIBUTE.THIRD_DESCRIPTION.getValue(), srmCaseHandleInfoDTO.getThirdDescription());

				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".getChangeCaseInfoById() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getChangeCaseInfoById() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return map;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getAoEmailByCaseId(cafe.core.context.MultiParameterInquiryContext)
	 */
	@Override
	public Map getAoEmailByCaseId( MultiParameterInquiryContext inquiryContext)
			throws ServiceException {
		Map map = new HashMap();
		try {
			String caseId = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue());
			String[] caseIds = caseId.split(IAtomsConstants.MARK_SEPARATOR);
			String email = null;
			for (String caseIdstring : caseIds) {
				SrmCaseHandleInfoDTO SrmCaseHandleInfoDTO = this.srmCaseHandleInfoDAO.getCaseInfoById(caseIdstring, IAtomsConstants.PARAM_NO).get(0);
				AdmUser createUser = (AdmUser) admUserDAO.findByPrimaryKey(AdmUser.class, SrmCaseHandleInfoDTO.getCreatedById());
				if(StringUtils.hasText(email)) {
					email = email + createUser.getEmail() + IAtomsConstants.MARK_SEMICOLON + SrmCaseHandleInfoDTO.getAoemail() + IAtomsConstants.MARK_SEMICOLON;
				} else {
					email = createUser.getEmail() + IAtomsConstants.MARK_SEMICOLON + SrmCaseHandleInfoDTO.getAoemail() + IAtomsConstants.MARK_SEMICOLON;
				}
 			}
			if(StringUtils.hasText(email)){
				String[] emails = email.split(IAtomsConstants.MARK_SEMICOLON);
				email = IAtomsConstants.MARK_EMPTY_STRING;
				for (String emailstring : emails) {
					if(email.indexOf(emailstring)<0) {
						email = email + emailstring + IAtomsConstants.MARK_SEMICOLON ;
					}
				}
			}
			map.put("email", email);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getAoEmailByCaseId() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return map;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getCaseEmailByCaseId(cafe.core.context.MultiParameterInquiryContext)
	 */
	@Override
	public Map getCaseEmailByCaseId(MultiParameterInquiryContext inquiryContext)
			throws ServiceException {
		Map map = new HashMap();
		try {
			String caseId = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue());
			String actionId = (String) inquiryContext.getParameter("actionId");
			String[] caseIds = caseId.split(IAtomsConstants.MARK_SEPARATOR);
			String email = IAtomsConstants.MARK_EMPTY_STRING;
			for (String caseIdstring : caseIds) {
				SrmCaseHandleInfoDTO SrmCaseHandleInfoDTO = this.srmCaseHandleInfoDAO.getCaseInfoById(caseIdstring, IAtomsConstants.PARAM_NO).get(0);
				if(StringUtils.hasText(SrmCaseHandleInfoDTO.getDispatchUser())) {
					AdmUser dispatchUser = (AdmUser) admUserDAO.findByPrimaryKey(AdmUser.class, SrmCaseHandleInfoDTO.getDispatchUser());
					if(StringUtils.hasText(email)) {
						email = email + dispatchUser.getEmail() + IAtomsConstants.MARK_SEMICOLON;
					} else {
						email = dispatchUser.getEmail() + IAtomsConstants.MARK_SEMICOLON;
					}
				} else if(IAtomsConstants.CASE_ACTION.RUSH_REPAIR.getCode().equals(actionId)
						||IAtomsConstants.CASE_ACTION.ADD_RECORD.getCode().equals(actionId)) {
					List<Parameter> admUserDTOList = null;
					if(IAtomsConstants.CASE_ROLE.QA.getCode().equals(SrmCaseHandleInfoDTO.getDispatchDeptId())
						|| IAtomsConstants.CASE_ROLE.TMS.getCode().equals(SrmCaseHandleInfoDTO.getDispatchDeptId())
						||IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(SrmCaseHandleInfoDTO.getDispatchDeptId())) {
						admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(null, SrmCaseHandleInfoDTO.getDispatchDeptId(), true, true);
					} else {
						admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(SrmCaseHandleInfoDTO.getDispatchDeptId(), null, true, true);
					}
					for (Parameter admUserDTO : admUserDTOList) {
						email += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
					}
					
				}else {
					List<Parameter> admUserDTOList = this.admUserDAO.getDeptAgentByCompanyId(SrmCaseHandleInfoDTO.getCompanyId(), false);
					for (Parameter admUserDTO : admUserDTOList) {
						email += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
					}
				}
 			}
			if(StringUtils.hasText(email)){
				String[] emails = email.split(IAtomsConstants.MARK_SEMICOLON);
				email = IAtomsConstants.MARK_EMPTY_STRING;
				for (String emailstring : emails) {
					if(email.indexOf(emailstring)<0) {
						email = email + emailstring + IAtomsConstants.MARK_SEMICOLON ;
					}
				}
			}
			map.put("email", email);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getAoEmailByCaseId() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return map;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#showDetailInfo(cafe.core.context.SessionContext)
	 */
	public SessionContext showDetailInfo(SessionContext sessionContext) throws ServiceException {
		try{
			sessionContext = initEdit(sessionContext);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".showDetailInfo() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".showDetailInfo() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return sessionContext;
	}
	
	/**
	 * Purpose: 在核檢案件匯入時，更新數據
	 * @author CarrieDuan
	 * @param newCaseHandleInfoDTO：最新案件資料信息
	 * @param oldCaseHandleInfoDTO：數據庫中該筆資料信息
	 * @throws ServiceException
	 * @return void
	 */
	private void uploadCaseInfoUpdate (SrmCaseHandleInfoDTO newCaseHandleInfoDTO, SrmCaseHandleInfoDTO oldCaseHandleInfoDTO, String caseCategory) throws ServiceException {
		try {
			if (!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
				newCaseHandleInfoDTO.setCmsCase(oldCaseHandleInfoDTO.getCmsCase());
			}
			if (!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) 
					&& !IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)
					&& !IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseCategory)) {
				newCaseHandleInfoDTO.setMerchantCode(oldCaseHandleInfoDTO.getMerchantId());
				newCaseHandleInfoDTO.setMerchantHeaderId(oldCaseHandleInfoDTO.getMerchantHeaderId());
				newCaseHandleInfoDTO.setEdcType(oldCaseHandleInfoDTO.getEdcType());
				newCaseHandleInfoDTO.setBuiltInFeature(oldCaseHandleInfoDTO.getBuiltInFeature());
				newCaseHandleInfoDTO.setMultiModule(oldCaseHandleInfoDTO.getMultiModule());
				newCaseHandleInfoDTO.setPeripherals(oldCaseHandleInfoDTO.getPeripherals());
				newCaseHandleInfoDTO.setPeripheralsFunction(oldCaseHandleInfoDTO.getPeripheralsFunction());
				newCaseHandleInfoDTO.setEcrConnection(oldCaseHandleInfoDTO.getEcrConnection());
				newCaseHandleInfoDTO.setPeripherals2(oldCaseHandleInfoDTO.getPeripherals2());
				newCaseHandleInfoDTO.setPeripheralsFunction2(oldCaseHandleInfoDTO.getPeripheralsFunction2());
				newCaseHandleInfoDTO.setConnectionType(oldCaseHandleInfoDTO.getConnectionType());
				newCaseHandleInfoDTO.setPeripherals3(oldCaseHandleInfoDTO.getPeripherals3());
				newCaseHandleInfoDTO.setPeripheralsFunction3(oldCaseHandleInfoDTO.getPeripheralsFunction3());
				newCaseHandleInfoDTO.setLogoStyle(oldCaseHandleInfoDTO.getLogoStyle());
				newCaseHandleInfoDTO.setIsOpenEncrypt(oldCaseHandleInfoDTO.getIsOpenEncrypt());
				newCaseHandleInfoDTO.setElectronicPayPlatform(oldCaseHandleInfoDTO.getElectronicPayPlatform());
				newCaseHandleInfoDTO.setElectronicInvoice(oldCaseHandleInfoDTO.getElectronicInvoice());
				newCaseHandleInfoDTO.setCupQuickPass(oldCaseHandleInfoDTO.getCupQuickPass());
				newCaseHandleInfoDTO.setLocalhostIp(oldCaseHandleInfoDTO.getLocalhostIp());
				newCaseHandleInfoDTO.setNetVendorId(oldCaseHandleInfoDTO.getNetVendorId());
				newCaseHandleInfoDTO.setGateway(oldCaseHandleInfoDTO.getGateway());
				newCaseHandleInfoDTO.setNetmask(oldCaseHandleInfoDTO.getNetmask());
				newCaseHandleInfoDTO.setDtid(oldCaseHandleInfoDTO.getDtid());
				newCaseHandleInfoDTO.setReceiptType(oldCaseHandleInfoDTO.getReceiptType());
				//newCaseHandleInfoDTO.setCompanyId(oldCaseHandleInfoDTO.getCompanyId());
				newCaseHandleInfoDTO.setCaseId(oldCaseHandleInfoDTO.getCaseId());
				/*newCaseHandleInfoDTO.setIsBussinessAddress(oldCaseHandleInfoDTO.getIsBussinessAddress());
				if (IAtomsConstants.YES.equals(oldCaseHandleInfoDTO.getIsBussinessAddress())) {
					newCaseHandleInfoDTO.setInstalledAdressLocation(oldCaseHandleInfoDTO.getLocation());
					newCaseHandleInfoDTO.setInstalledAdress(oldCaseHandleInfoDTO.getBusinessAddress());
				} else {
					newCaseHandleInfoDTO.setInstalledAdressLocation(oldCaseHandleInfoDTO.getInstalledAdressLocation());
					newCaseHandleInfoDTO.setInstalledAdress(oldCaseHandleInfoDTO.getInstalledAdress());
				}*/
			}
			/*if (!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory) 
					&& !IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)) {
				if (IAtomsConstants.YES.equals(oldCaseHandleInfoDTO.getIsBussinessAddress())) {
					newCaseHandleInfoDTO.setInstalledAdressLocation(oldCaseHandleInfoDTO.getLocation());
					newCaseHandleInfoDTO.setInstalledAdress(oldCaseHandleInfoDTO.getBusinessAddress());
				} else {
					newCaseHandleInfoDTO.setInstalledAdressLocation(oldCaseHandleInfoDTO.getInstalledAdressLocation());
					newCaseHandleInfoDTO.setInstalledAdress(oldCaseHandleInfoDTO.getInstalledAdress());
				}
			}*/
			if (IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(caseCategory)) {
				newCaseHandleInfoDTO.setCustomerId(oldCaseHandleInfoDTO.getCustomerId());
				newCaseHandleInfoDTO.setContractId(oldCaseHandleInfoDTO.getContractId());
			} else if (IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseCategory)
					|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseCategory)) {
				/*if (IAtomsConstants.YES.equals(oldCaseHandleInfoDTO.getIsBussinessAddress())) {
					newCaseHandleInfoDTO.setInstalledAdressLocation(oldCaseHandleInfoDTO.getLocation());
					newCaseHandleInfoDTO.setInstalledAdress(oldCaseHandleInfoDTO.getBusinessAddress());
				} else {
					newCaseHandleInfoDTO.setInstalledAdressLocation(oldCaseHandleInfoDTO.getInstalledAdressLocation());
					newCaseHandleInfoDTO.setInstalledAdress(oldCaseHandleInfoDTO.getInstalledAdress());
				}*/
				newCaseHandleInfoDTO.setCustomerId(oldCaseHandleInfoDTO.getCustomerId());
				newCaseHandleInfoDTO.setContractId(oldCaseHandleInfoDTO.getContractId());
				//newCaseHandleInfoDTO.setCompanyId(oldCaseHandleInfoDTO.getCompanyId());
				newCaseHandleInfoDTO.setEdcType(oldCaseHandleInfoDTO.getEdcType());
				newCaseHandleInfoDTO.setDtid(oldCaseHandleInfoDTO.getDtid());
				newCaseHandleInfoDTO.setCaseId(oldCaseHandleInfoDTO.getCaseId());
			} else if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseCategory) 
					|| IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(caseCategory)
					|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseCategory)
					|| IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(caseCategory)){
				newCaseHandleInfoDTO.setCustomerId(oldCaseHandleInfoDTO.getCustomerId());
				newCaseHandleInfoDTO.setContractId(oldCaseHandleInfoDTO.getContractId());
				newCaseHandleInfoDTO.setSoftwareVersion(oldCaseHandleInfoDTO.getSoftwareVersion());
				newCaseHandleInfoDTO.setTmsParamDesc(oldCaseHandleInfoDTO.getTmsParamDesc());
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#isSignAndOnlineExclusion(cafe.core.context.MultiParameterInquiryContext)
	 */
	@Override
	public Boolean isSignAndOnlineExclusion(MultiParameterInquiryContext param) throws ServiceException {
		try {
			String caseId = (String) param.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue());
			if (StringUtils.hasText(caseId)) {
				SrmCaseHandleInfo srmCaseHandleInfo= this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseId);
				if (srmCaseHandleInfo != null) {
					//看改筆案件是否有完修時間
					if (srmCaseHandleInfo.getCompleteDate() != null) {
						return true;
					} else {
						return false;
					}
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".isSignAndOnlineExclusion() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".isSignAndOnlineExclusion() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return null;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getCountByInstall(cafe.core.context.MultiParameterInquiryContext)
	 */
	@Override
	public String getCountByInstall(MultiParameterInquiryContext inquiryContext)throws ServiceException {
		try {
			String dtid = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.DTID.getValue());
			String caseId = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue());
			int count = this.srmCaseHandleInfoDAO.getCountByInstall(dtid, caseId, true);
			if (count < 1) {
				count = this.srmCaseHandleInfoDAO.getCountByInstall(dtid, caseId, false);
				if (count < 1) {
					return IAtomsConstants.PARAM_YES;
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(".getCountByInstall() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(".getCountByInstall() Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		}
		return IAtomsConstants.PARAM_NO;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getCaseRepeatByInstallUncomplete(cafe.core.context.MultiParameterInquiryContext)
	 */
	@Override
	public Map<String, Object> getCaseRepeatByInstallUncomplete( MultiParameterInquiryContext inquiryContext)
			throws ServiceException {
		Map<String, Object> caseIdMap = new HashMap<String, Object>();
		try{
			String dtid = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.DTID.getValue());
			String caseId = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue());
			String repeatCaseIdListString = null;
			//根據dtid查詢出來最新鏈接檔的鏈接設備list
			List<SrmCaseAssetLinkDTO> newSrmCaseAssetLinkDTOs = this.srmCaseNewAssetLinkDAO.getAssetLinkListByDtid(dtid);
			//最新鏈接檔不為空 說明裝機案已完修  CR #2551
			if(!CollectionUtils.isEmpty(newSrmCaseAssetLinkDTOs) && newSrmCaseAssetLinkDTOs.size() > 0) {
				caseIdMap.put(IAtomsConstants.IS_CHANGE_CASE_LINK, false);
				return caseIdMap;
			} else {
				//如果該dtid在最新設備連接檔無值，則裝機案件沒有完修,查出該筆裝機案件，返回
				List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOList = this.getSrmCaseHandleInfoDAO().getCaseRepeatList(dtid, caseId, null,IAtomsConstants.CASE_CATEGORY.INSTALL.getCode());
				
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOList)) {
					for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOList) {
						if(caseIdMap.get(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue()) == null){
							caseIdMap.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue(), srmCaseHandleInfoDTO.getRepeatCaseId());	
						} else {
							String emptyString = IAtomsConstants.MARK_EMPTY_STRING;
							repeatCaseIdListString = caseIdMap.get(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue()) + "," + "<br/>" + emptyString + srmCaseHandleInfoDTO.getRepeatCaseId();
							caseIdMap.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue(), repeatCaseIdListString);
						}
					}
					caseIdMap.put(IAtomsConstants.IS_CHANGE_CASE_LINK, true);
					return caseIdMap;
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(".getCaseRepeatByInstallUncomplete() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(".getCaseRepeatByInstallUncomplete() Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		}
		return caseIdMap;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getCaseLinkIsChange(cafe.core.context.MultiParameterInquiryContext)
	 */
	@Override
	public Map<String, Object> getCaseLinkIsChange( MultiParameterInquiryContext inquiryContext)
			throws ServiceException {
		//key 是 重複進建的caseid。value 是 重複進建的 caseid List
		Map<String, Object> caseIdMap = new HashMap<String, Object>();
		try{
			//CR #2551 將結案時間改為設備最新資料檔創建時間 2017/12/07
			Timestamp oldUpdateDate = null; 
			String oldUpdateDateString = IAtomsConstants.MARK_EMPTY_STRING;
			String oldCaseId = IAtomsConstants.MARK_EMPTY_STRING;
			String caseId = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue());
			String dtid = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.DTID.getValue());
			//如果 已經存在簽收日期則  設備連接不做比較 CR #2551 
			if (StringUtils.hasText(caseId)) {
				SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseId);
				// TODO 調整是否經歷過簽收 Task #3113 完修退回
			//	if (srmCaseHandleInfo != null && srmCaseHandleInfo.getAnalyzeDate() != null) {
				if (srmCaseHandleInfo != null && IAtomsConstants.YES.equals(srmCaseHandleInfo.getHasRetreat())) {
					caseIdMap.put(IAtomsConstants.IS_CHANGE_CASE_LINK, false);
					return caseIdMap;
				}
			}
			//根據dtid查詢出來最新鏈接檔的鏈接設備list
			List<SrmCaseAssetLinkDTO> newSrmCaseAssetLinkDTOs = this.srmCaseNewAssetLinkDAO.getAssetLinkListByDtid(dtid);
			if(!CollectionUtils.isEmpty(newSrmCaseAssetLinkDTOs)) {
				if(newSrmCaseAssetLinkDTOs.size() > 0) {
					oldCaseId = newSrmCaseAssetLinkDTOs.get(0).getCaseId();
					oldUpdateDate = newSrmCaseAssetLinkDTOs.get(0).getCreatedDate();
					oldUpdateDateString = DateTimeUtils.toString(oldUpdateDate,  DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH);
					//最新鏈接檔caseid
					/*if(StringUtils.hasText(oldCaseId)) {
						SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, oldCaseId);
						if(srmCaseHandleInfo != null) {
							//上一筆案件是 裝機 不用檢核
							if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())) {
								caseIdMap.put(IAtomsConstants.IS_CHANGE_CASE_LINK, false);
								return caseIdMap;
							}
						}
					}*/
				}
			}
			List<SrmCaseAssetLinkDTO> SrmCaseAssetLinkDTOs = this.srmCaseAssetLinkDAO.getCaseAssetLinkByCaseId(caseId, true);
			//獲取包含未連接的設備
			List<SrmCaseAssetLinkDTO> AllSrmCaseAssetLinkDTOs = this.srmCaseAssetLinkDAO.getCaseAssetLinkByCaseId(caseId, false);
			Map<String, String> copyAssetLinkmap = new HashMap<String, String>();
			//是否案件信息被修改
			boolean isChangeCaseLink = this.compareAssetLinkDTOListIsChange(newSrmCaseAssetLinkDTOs, SrmCaseAssetLinkDTOs, AllSrmCaseAssetLinkDTOs, caseId, copyAssetLinkmap);
			//當最新資料檔沒有設備資料 且驗證通過時 提示消息：本案件dtid之EDC設備已拆除，請退回客服作廢2018/01/30
			if (!isChangeCaseLink && (CollectionUtils.isEmpty(newSrmCaseAssetLinkDTOs) || newSrmCaseAssetLinkDTOs.get(0) == null)) {
				caseIdMap.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue(), oldCaseId);
				caseIdMap.put(IAtomsConstants.INIT_EDIT_CHECK_UPDATE, IAtomsConstants.PARAM_YES);
				caseIdMap.put(IAtomsConstants.IS_CHANGE_CASE_LINK, true);
				return caseIdMap;
			}
			if(isChangeCaseLink) {
				caseIdMap.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue(), oldCaseId);
				SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, oldCaseId);
				if(srmCaseHandleInfo != null) {
					//CR #2551 將結案時間改為設備最新資料檔創建時間 2017/12/07
					oldUpdateDateString = StringUtils.hasText(oldUpdateDateString) ? oldUpdateDateString : IAtomsConstants.MARK_SPACE;
					caseIdMap.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CLOSE_DATE.getValue(), oldUpdateDateString);
					//是否修改案件設備信息
					srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseId);
					srmCaseHandleInfo.setIsUpdateAsset(IAtomsConstants.YES);
					this.srmCaseHandleInfoDAO.update(srmCaseHandleInfo);
				}
				
			} else {
				if (copyAssetLinkmap.get(IAtomsConstants.ASSET_LINK_IS_CHANGE) != null) {
					caseIdMap.put(IAtomsConstants.ASSET_LINK_IS_CHANGE, true);
				}
			}
			caseIdMap.put(IAtomsConstants.IS_CHANGE_CASE_LINK, isChangeCaseLink);
		} catch (DataAccessException e) {
			LOGGER.error(".getCaseRepeatList() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(".getCaseRepeatList() Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		}
		return caseIdMap;
	}
	/**
	 * Purpose:查詢改筆案件的關聯設備信息是否被通dtid的案件修改過
	 * @author HermanWang
	 * @param caseId：案件編號
	 * @param dtid：dtid
	 * @throws ServiceException：出錯時返回ServiceException
	 * @return Boolean：返回一個是否被修改過結果
	 */
	public Boolean compareAssetLinkDTOListIsChange(List<SrmCaseAssetLinkDTO> newSrmCaseAssetLinkDTOs, List<SrmCaseAssetLinkDTO> SrmCaseAssetLinkDTOs, List<SrmCaseAssetLinkDTO> AllSrmCaseAssetLinkDTOs, String caseId, Map copyAssetLinkmap) 
			throws ServiceException {
		boolean isChangeCaseLink = false;
		try {
			boolean flag = false;
			//存放所有處理中存在的設備序號map 2018/01/23
			Map<String, String> assetMap = new HashMap<String, String>();
			for(int i = 0; i < AllSrmCaseAssetLinkDTOs.size(); i++) {
				if (StringUtils.hasText(AllSrmCaseAssetLinkDTOs.get(i).getSerialNumber())) {
					if (!assetMap.containsKey(AllSrmCaseAssetLinkDTOs.get(i).getSerialNumber())) {
						assetMap.put(AllSrmCaseAssetLinkDTOs.get(i).getSerialNumber(), AllSrmCaseAssetLinkDTOs.get(i).getItemId());
					}
				}
			}
			//兩個dto都不為空     Bug #3055 不管上一筆是不是裝機，都要自動帶設備 從無到有
			//當 上一筆為裝機時 有周邊設備設備序號，而本案件周邊設備設備序號為空，其他相同的時候，將最新資料檔copy過來 CR #2551 2017/12/13
			if (newSrmCaseAssetLinkDTOs.size() == AllSrmCaseAssetLinkDTOs.size()) {
				if (!CollectionUtils.isEmpty(newSrmCaseAssetLinkDTOs) && newSrmCaseAssetLinkDTOs.get(0) != null) {
					//SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, newSrmCaseAssetLinkDTOs.get(0).getCaseId());
				//	if (srmCaseHandleInfo!= null && IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())) {
						// 以itemid為key 以設備序號為value 
					Map<String, String> assetLinkMap = new HashMap<String, String>();
					for(int i = 0; i < newSrmCaseAssetLinkDTOs.size(); i++) {
						if (!assetLinkMap.containsKey(newSrmCaseAssetLinkDTOs.get(i).getItemId())) {
							assetLinkMap.put(newSrmCaseAssetLinkDTOs.get(i).getItemId(), newSrmCaseAssetLinkDTOs.get(i).getSerialNumber());
						}
					}
					for (int i1 = 0; i1 < AllSrmCaseAssetLinkDTOs.size(); i1++) {
							if (assetLinkMap.containsKey(AllSrmCaseAssetLinkDTOs.get(i1).getItemId())) {
								if (StringUtils.hasText(assetLinkMap.get(AllSrmCaseAssetLinkDTOs.get(i1).getItemId()))
										&& !StringUtils.hasText(AllSrmCaseAssetLinkDTOs.get(i1).getSerialNumber())
										&& !assetMap.containsKey(assetLinkMap.get(AllSrmCaseAssetLinkDTOs.get(i1).getItemId()))) {
									flag = true;
									/*if ("10".equals(AllSrmCaseAssetLinkDTOs.get(i1).getItemType())) {
										isChangeCaseLink = true;
										return isChangeCaseLink;
									}*/
									/*String assetLinkId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_LINK);
									String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
									this.srmCaseHandleInfoDAO.copyNewAssetLinkToCase(caseId, assetLinkId, transactionId);
									copyAssetLinkmap.put(IAtomsConstants.ASSET_LINK_IS_CHANGE, true);*/
									
								} else if (StringUtils.hasText(assetLinkMap.get(AllSrmCaseAssetLinkDTOs.get(i1).getItemId()))
										&& !assetLinkMap.get(AllSrmCaseAssetLinkDTOs.get(i1).getItemId()).equals(AllSrmCaseAssetLinkDTOs.get(i1).getSerialNumber())) {
									flag = false;
									isChangeCaseLink = true;
									return isChangeCaseLink;
								}
								
							} else {
								//if (IAtomsConstants.LEAVE_CASE_STATUS_TEN.equals(AllSrmCaseAssetLinkDTOs.get(i1).getItemType())) {
									flag = true;
									isChangeCaseLink = true;
									return isChangeCaseLink;
								//}
							}
					}
					if (flag) {
						String assetLinkId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_LINK);
						String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
						this.srmCaseHandleInfoDAO.copyNewAssetLinkToCase(caseId, assetLinkId, transactionId);
						copyAssetLinkmap.put(IAtomsConstants.ASSET_LINK_IS_CHANGE, true);
						return isChangeCaseLink;
					}
				}
			} else {
				if (!CollectionUtils.isEmpty(newSrmCaseAssetLinkDTOs) && newSrmCaseAssetLinkDTOs.get(0) != null) {
					//SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, newSrmCaseAssetLinkDTOs.get(0).getCaseId());
					//if (srmCaseHandleInfo!= null && IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())) {
						// 以itemid為key 以設備序號為value 
						Map<String, String> linkMap = new HashMap<String, String>();
						Map<String, String> addMap = new HashMap<String, String>();
						for(int i = 0; i < AllSrmCaseAssetLinkDTOs.size(); i++) {
							if (!linkMap.containsKey(AllSrmCaseAssetLinkDTOs.get(i).getItemId())) {
								linkMap.put(AllSrmCaseAssetLinkDTOs.get(i).getItemId(), AllSrmCaseAssetLinkDTOs.get(i).getSerialNumber());
								addMap.put(AllSrmCaseAssetLinkDTOs.get(i).getItemId(), AllSrmCaseAssetLinkDTOs.get(i).getSerialNumber());
							}
						}
						for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : newSrmCaseAssetLinkDTOs) {
							if (linkMap.containsKey(srmCaseAssetLinkDTO.getItemId())){
								//如果該設備已存在，將其從addMap中刪除
								addMap.remove(srmCaseAssetLinkDTO.getItemId());
								if (!StringUtils.hasText(linkMap.get(srmCaseAssetLinkDTO.getItemId()))// 當前連接檔無設備序號
										&& StringUtils.hasText(srmCaseAssetLinkDTO.getSerialNumber())// 最新連接檔有設備序號
										&& !assetMap.containsKey(srmCaseAssetLinkDTO.getSerialNumber())) {//處理中設備連接檔不存在該設備序號
									flag = true;
								}
							} else {
								flag = true;
								isChangeCaseLink = true;
								return isChangeCaseLink;
							}
						}
						//如果該itemId所對應設備序號存在，則返回提示重新帶值
						if(!CollectionUtils.isEmpty(addMap)){
							for (String itemId : addMap.keySet()) {
								if (StringUtils.hasText(addMap.get(itemId))) {
									flag = true;
									isChangeCaseLink = true;
									return isChangeCaseLink;
								}
							}
						}
						if (flag) {
							String assetLinkId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_ASSET_LINK);
							String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
							this.srmCaseHandleInfoDAO.copyNewAssetLinkToCase(caseId, assetLinkId, transactionId);
							copyAssetLinkmap.put(IAtomsConstants.ASSET_LINK_IS_CHANGE, true);
							return isChangeCaseLink;
						}
					//}
				}
			} 
			//不為裝機時，原邏輯不變
			if (!CollectionUtils.isEmpty(newSrmCaseAssetLinkDTOs) && newSrmCaseAssetLinkDTOs.get(0) != null) {
				SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, newSrmCaseAssetLinkDTOs.get(0).getCaseId());
				if (srmCaseHandleInfo!= null && !IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())) {
					if(newSrmCaseAssetLinkDTOs.size() != SrmCaseAssetLinkDTOs.size()) {
						isChangeCaseLink = true;
					} else {
						for(int i = 0; i < newSrmCaseAssetLinkDTOs.size(); i++) {
							//查詢時候排序完成，如果類別 和 設備序號 有一個不一樣，就認為兩個list不一樣
							if(!newSrmCaseAssetLinkDTOs.get(i).getItemType().equals(SrmCaseAssetLinkDTOs.get(i).getItemType())
									|| !newSrmCaseAssetLinkDTOs.get(i).getSerialNumber().equals(SrmCaseAssetLinkDTOs.get(i).getSerialNumber())) {
								isChangeCaseLink = true;
							}
						}
					}
				}
				if (srmCaseHandleInfo == null ) {
					LOGGER.error("compareAssetLinkDTOListIsChange() srmCaseHandleInfo is null caseId = "+newSrmCaseAssetLinkDTOs.get(0).getCaseId());
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".compareAssetLinkDTOListIsChange() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".compareAssetLinkDTOListIsChange() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return isChangeCaseLink;
	}
	/**
	 * Purpose:案件匯入裝機核檢-判斷該客戶、刷卡機行下是否有可用的DTID。並獲取可用數量。
	 * @author CarrieDuan
	 * @param customerId ：客戶ID
	 * @param edcType ：刷卡機行
	 * @throws ServiceException ：出錯時返回ServiceException
	 * @return Integer ：dtid可用數量
	 */
	private Integer getDtidUseNumber(String customerId, String edcType) throws ServiceException {
		Integer number = 0;
		try{	
			if(StringUtils.hasText(customerId)){
				// 拿到公司信息
				BimCompany company = (BimCompany) this.companyDAO.findByPrimaryKey(BimCompany.class, customerId);
				if(company != null){
					// 得到dtid產生方式
					String dtidType = company.getDtidType();
					// 【客戶DTID產生方式】為“同TID”，則DTID為交易類別為“一般交易”之TID
					if(StringUtils.hasText(dtidType) && IAtomsConstants.PARAM_IATOMS_DTID_TYPE_SAME.equals(dtidType)){
						// 交易類別為“一般交易”之TID
						number = -1;
					// 【客戶DTID產生方式】為“自動生成”，則取得【DTID號碼管理】之該客戶該機型之可使用之最小的DTID，若有複製作業，要依複製數量取得不同DTID。
					} else if(StringUtils.hasText(dtidType) && IAtomsConstants.PARAM_IATOMS_DTID_TYPE_AUTO.equals(dtidType)){
						// 拿到該客戶該機型下所有dtid
						List<PvmDtidDefDTO> pvmDtidDefDTOs = this.dtidDefDAO.listBy(customerId, edcType, null, null, null, null, 0, 0, false);
						// 存放dtid的list
						if(!CollectionUtils.isEmpty(pvmDtidDefDTOs)){
							for(int i=0; i < pvmDtidDefDTOs.size(); i++){
								if (StringUtils.hasText(pvmDtidDefDTOs.get(i).getCurrentNumber())) {
									number = number + Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) - Integer.parseInt(pvmDtidDefDTOs.get(i).getCurrentNumber());
								} else {
									number = number + Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidEnd()) - Integer.parseInt(pvmDtidDefDTOs.get(i).getDtidStart()) + 1;
								}
							}
						}
					}
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".getDtidUseNumber() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".getDtidUseNumber() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return number;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#isChangeAsset(cafe.core.context.MultiParameterInquiryContext)
	 */
	@Override
	public boolean isChangeAsset(MultiParameterInquiryContext param)throws ServiceException {
		boolean result = false;
		try {
			String caseId = (String) param.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue());
			if(StringUtils.hasText(caseId)){
				result = this.srmCaseHandleInfoDAO.isChangeAsset(caseId);
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".compareAssetLinkDTOListIsChange() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".compareAssetLinkDTOListIsChange() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return result;
	}
	/**
	 * Purpose:驗證案件編號是否含有交易參數
	 * @author carrieduan
	 * @param caseHandleInfoDTOs ： 案件集合
	 * @throws DataAccessException ： 出錯時拋出DataAccessException
	 * @return void
	 */
	public String checkTransactionParam(String caseId) {
		StringBuffer caseIds = new StringBuffer();
		try {
			// 得到案件處理集合
			List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(caseId, null);
			// Task #2721 多筆不需要檢核 拆機 查核 專案 報修
			Map<String, String> ignoreCaseIds = new HashMap<String, String>();
			if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
				for(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
					if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
							|| IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
							|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
						ignoreCaseIds.put(srmCaseHandleInfoDTO.getCaseId(), srmCaseHandleInfoDTO.getCaseId());
					}
				}
			}
			List<String> ids = new ArrayList<String>();
			ids = StringUtils.toList(caseId, IAtomsConstants.MARK_SEPARATOR);
			/*for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : caseHandleInfoDTOs) {
				ids.add(srmCaseHandleInfoDTO.getCaseId());
			}*/
			Boolean isExist = Boolean.FALSE;
			List<SrmCaseTransactionParameterDTO> caseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseIdHaveTransParam(ids);
			if (!CollectionUtils.isEmpty(caseTransactionParameterDTOs)) {
				for (String id : ids) {
					isExist = Boolean.FALSE;
					for (SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : caseTransactionParameterDTOs) {
						if (id.equals(srmCaseTransactionParameterDTO.getCaseId())) {
							isExist = Boolean.TRUE;
							break;
						}
					}
					if (!isExist) {
						// Task #2721 多筆不需要檢核 拆機 查核 專案 報修
						if(!CollectionUtils.isEmpty(ignoreCaseIds) && ignoreCaseIds.containsKey(id)){
							caseIds.append(id).append(IAtomsConstants.MARK_SEPARATOR);
						}
					}
				}
				/*if (caseIds.length() > 0) {
					return caseIds.substring(0, caseIds.length() - 1);
				}*/
			} else {
			//	caseIds.append(caseId);
				// Task #2721 多筆不需要檢核 拆機 查核 專案 報修
				for (String id : ids) {
					if(!CollectionUtils.isEmpty(ignoreCaseIds) && ignoreCaseIds.containsKey(id)){
						caseIds.append(id).append(IAtomsConstants.MARK_SEPARATOR);
					}
				}
			}
			// 返回集合
			if (caseIds.length() > 0) {
				return caseIds.substring(0, caseIds.length() - 1);
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".checkTransactionParam() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".checkTransactionParam() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
		return caseIds.toString();
	}
	
	/**
	 * Purpose: 查核件签收线上排除时与协调完成操作设备信息
	 * @author CarrieDuan
	 * @param srmCaseHandleInfo：案件信息
	 * @param logonUser：当前登陆者信息
	 * @param isImmediatelyClosing：是否为协调完成
	 * @return void
	 */
	public void updateAssetInfoInCheckCase(SrmCaseHandleInfo srmCaseHandleInfo, IAtomsLogonUser logonUser, Boolean isImmediatelyClosing) {
		try {
			Transformer transformer = new SimpleDtoDmoTransformer();
			String flag = Integer.toString(20);
			List<SrmCaseAssetLinkDTO> srmCaseAssetLinkDTOs = this.srmCaseAssetLinkDAO.listByCaseId(srmCaseHandleInfo.getCaseId(), flag, true,true);
			SrmCaseAssetLink srmCaseAssetLink = null;
			for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : srmCaseAssetLinkDTOs) {
				if(StringUtils.hasText(srmCaseAssetLinkDTO.getSerialNumber())) {
					//修改為 由hql查詢獲取dmo 防止多筆案件更新同一筆設備報錯 2017/11/20
					DmmRepository dmmRepository = this.dmmRepositoryDAO.getRepositoryByHql(srmCaseAssetLinkDTO.getSerialNumber());
					String assetId = dmmRepository.getAssetId();
					//庫存歷史檔id
					String historyId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_DMM_REPOSITORY_HISTORY);
					// CASE_ID 非拆機案件，且連接設備，寫入當前案件編號
					dmmRepository.setCaseId(srmCaseHandleInfo.getCaseId());
					//案件完修日(簽收，或線上排除，儲存時，寫入案件完修日期)
					dmmRepository.setCaseCompletionDate(new Timestamp(srmCaseHandleInfo.getCompleteDate().getTime()));
					//非拆機案件，且連接設備，寫入當前案件特店主鍵
					dmmRepository.setMerchantId(srmCaseHandleInfo.getMerchantCode());
					dmmRepository.setInstalledAdress(srmCaseHandleInfo.getInstalledAdress());
					dmmRepository.setInstallType(srmCaseHandleInfo.getInstallType());
					dmmRepository.setMerchantHeaderId(srmCaseHandleInfo.getMerchantHeaderId());
					dmmRepository.setAction(srmCaseHandleInfo.getCaseCategory() + IAtomsConstants.MARK_MIDDLE_LINE + IAtomsConstants.PARAM_ASSET_STATUS_LINK);
					// 裝機地址市縣 維護部門
					dmmRepository.setApplicationId(srmCaseHandleInfo.getSoftwareVersion());
					dmmRepository.setInstalledAdressLocation(srmCaseHandleInfo.getInstalledAdressLocation());
					//維護部門 ----> 派工部門 
					dmmRepository.setDepartmentId(srmCaseHandleInfo.getDispatchDeptId());
					//維護工程師 -----> 派工工程師，紀錄最新的派工單位與人員(USER選擇的)
					dmmRepository.setMaintainUser(srmCaseHandleInfo.getDispatchProcessUser());
					//請個空派工日期
					dmmRepository.setAnalyzeDate(null);
					if (isImmediatelyClosing) {
						//edc在異動建的時候的 iscup欄位
						if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfo.getCaseCategory())){
							if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLinkDTO.getItemType())) {
								List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOList = this.srmCaseTransactionParameterDAO.listByCaseId(srmCaseHandleInfo.getCaseId(), null);
								if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOList)){
									boolean isCUP = false;
									for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOList){
										// 判斷有沒有CUP類別
										if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
											isCUP = true;
											break;
										}
									}
									//如果此筆案件交易參數有cup
									if(isCUP) {
										dmmRepository.setIsCup(IAtomsConstants.YES);
									} else {
										dmmRepository.setIsCup(IAtomsConstants.NO);
									}
								}
							}
						}
					}
					//存儲庫存表
					dmmRepository.setUpdateUser(logonUser.getId());
					dmmRepository.setUpdateUserName(logonUser.getName());
					dmmRepository.setUpdateDate(DateTimeUtils.getCurrentTimestamp());
					//DmmRepository dmmRepository = (DmmRepository) transformer.transform(dmmRepositoryDTO, new DmmRepository());
					//存儲庫存歷史表
					this.dmmRepositoryDAO.update(dmmRepository);
					//String assetId = dmmRepositoryDTO.getAssetId();
					//調用存儲過程，存儲庫存歷史檔資料
					this.dmmRepositoryDAO.saveRepositoryHist(assetId, historyId, dmmRepository.getStatus());
					
					// Bug #3231 簽收時更新設備信息至案件鏈接檔
					srmCaseAssetLink = (SrmCaseAssetLink)transformer.transform(srmCaseAssetLinkDTO, new SrmCaseAssetLink());
					// 設備啟用日
					srmCaseAssetLink.setEnableDate(dmmRepository.getEnableDate());
					// 合約編號
					srmCaseAssetLink.setContractId(dmmRepository.getContractId());
					// 倉庫
					srmCaseAssetLink.setWarehouseId(dmmRepository.getWarehouseId());
					// 財產編號
					srmCaseAssetLink.setPropertyId(dmmRepository.getPropertyId());
					
					this.srmCaseAssetLinkDAO.getDaoSupport().saveOrUpdate(srmCaseAssetLink);
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".updateAssetInfoInCheckCase() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".updateAssetInfoInCheckCase() Service Exception--->" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
		}
	}
	
	/**
	 * 保存案件設備鏈接檔信息
	 * @author CrissZhang
	 * @param srmCaseHandleInfoDTO ： 案件主檔dto
	 * @param logonUser ：登陸者信息
	 * @throws ServiceException
	 */
	private void saveCaseAssetLink(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO, LogonUser logonUser) throws ServiceException{
		try {
			// 當前案件編號
			String caseId = srmCaseHandleInfoDTO.getCaseId();
			// 案件處理DMO對象
			SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseId);
			// 之前的設備鏈接檔
			List<SrmCaseAssetLinkDTO> oldSsrmCaseAssetLinkDTOs = this.srmCaseAssetLinkDAO.listByCaseId(caseId, IAtomsConstants.PARAM_CASE_LINK_SUPPLIES, true, false);
			// 之前設備鏈接檔移除設備
			String oldEdcType = null;
			String oldPeripherals = null;
			String oldPeripherals2 = null;
			String oldPeripherals3 = null;
			// 是否異動更新設備
			boolean isUpdateAsset = false;
			if(!CollectionUtils.isEmpty(oldSsrmCaseAssetLinkDTOs)){
				for(SrmCaseAssetLinkDTO tempSrmCaseAssetLinkDTO : oldSsrmCaseAssetLinkDTOs){
					if(IAtomsConstants.CASE_REMOVE_ASSET.equals(tempSrmCaseAssetLinkDTO.getIsLink())){
						if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(tempSrmCaseAssetLinkDTO.getItemType())) {
							oldEdcType = tempSrmCaseAssetLinkDTO.getItemId();
						} else if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS.equals(tempSrmCaseAssetLinkDTO.getItemType())) {
							oldPeripherals = tempSrmCaseAssetLinkDTO.getItemId();
						} else if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2.equals(tempSrmCaseAssetLinkDTO.getItemType())) {
							oldPeripherals2 = tempSrmCaseAssetLinkDTO.getItemId();
						} else if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3.equals(tempSrmCaseAssetLinkDTO.getItemType())) {
							oldPeripherals3 = tempSrmCaseAssetLinkDTO.getItemId();
						}
					}
				}
			}
			// 刷卡機型
			// 裝機
			if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())){
				// 之前有設備
				if(StringUtils.hasText(srmCaseHandleInfo.getEdcType())){
					// 現在有設備
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getEdcType())){
						// 兩者相等不用處理
						if(srmCaseHandleInfo.getEdcType().equals(srmCaseHandleInfoDTO.getEdcType())){
						} else {
							// 兩者不相等處理設備異動
							isUpdateAsset = true;
						}
					// 現在無設備
					} else {
						// 兩者不相等處理設備異動
						isUpdateAsset = true;
					}
				// 之前無設備
				} else {
					// 現在有設備
					if(StringUtils.hasText(srmCaseHandleInfoDTO.getEdcType())){
						// 若新增設備同原移除設備，更新原移除設備，新增設備鏈接檔信息
						isUpdateAsset = true;
					// 現在無設備 不處理
					} 
				}
			}
			// 異動設備
			if(isUpdateAsset){
				this.compareAndUpdateAsset(oldSsrmCaseAssetLinkDTOs, caseId, oldEdcType, 
						srmCaseHandleInfoDTO.getEdcType(), IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE, logonUser);
				isUpdateAsset = false;
			}
			
			// 周邊設備1
			// 之前有設備
			if(StringUtils.hasText(srmCaseHandleInfo.getPeripherals())){
				// 現在有設備
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals())){
					// 兩者相等不用處理
					if(srmCaseHandleInfo.getPeripherals().equals(srmCaseHandleInfoDTO.getPeripherals())){
					} else {
						// 兩者不相等處理設備異動
						isUpdateAsset = true;
					}
				// 現在無設備
				} else {
					// 兩者不相等處理設備異動
					isUpdateAsset = true;
				}
			// 之前無設備
			} else {
				// 現在有設備
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals())){
					// 若新增設備同原移除設備，更新原移除設備，新增設備鏈接檔信息
					isUpdateAsset = true;
				// 現在無設備 不處理
				} 
			}
			// 異動設備
			if(isUpdateAsset){
				this.compareAndUpdateAsset(oldSsrmCaseAssetLinkDTOs, caseId, oldPeripherals, 
						srmCaseHandleInfoDTO.getPeripherals(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS, logonUser);
				isUpdateAsset = false;
			}
			
			// 周邊設備2
			// 之前有設備
			if(StringUtils.hasText(srmCaseHandleInfo.getPeripherals2())){
				// 現在有設備
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals2())){
					// 兩者相等不用處理
					if(srmCaseHandleInfo.getPeripherals2().equals(srmCaseHandleInfoDTO.getPeripherals2())){
					} else {
						// 兩者不相等處理設備異動
						isUpdateAsset = true;
					}
				// 現在無設備
				} else {
					// 兩者不相等處理設備異動
					isUpdateAsset = true;
				}
			// 之前無設備
			} else {
				// 現在有設備
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals2())){
					// 若新增設備同原移除設備，更新原移除設備，新增設備鏈接檔信息
					isUpdateAsset = true;
				// 現在無設備 不處理
				} 
			}
			// 異動設備
			if(isUpdateAsset){
				this.compareAndUpdateAsset(oldSsrmCaseAssetLinkDTOs, caseId, oldPeripherals2, 
						srmCaseHandleInfoDTO.getPeripherals2(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2, logonUser);
				isUpdateAsset = false;
			}
			
			// 周邊設備3
			// 之前有設備
			if(StringUtils.hasText(srmCaseHandleInfo.getPeripherals3())){
				// 現在有設備
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals3())){
					// 兩者相等不用處理
					if(srmCaseHandleInfo.getPeripherals3().equals(srmCaseHandleInfoDTO.getPeripherals3())){
					} else {
						// 兩者不相等處理設備異動
						isUpdateAsset = true;
					}
				// 現在無設備
				} else {
					// 兩者不相等處理設備異動
					isUpdateAsset = true;
				}
			// 之前無設備
			} else {
				// 現在有設備
				if(StringUtils.hasText(srmCaseHandleInfoDTO.getPeripherals3())){
					// 若新增設備同原移除設備，更新原移除設備，新增設備鏈接檔信息
					isUpdateAsset = true;
				// 現在無設備 不處理
				} 
			}
			// 異動設備
			if(isUpdateAsset){
				this.compareAndUpdateAsset(oldSsrmCaseAssetLinkDTOs, caseId, oldPeripherals3, 
						srmCaseHandleInfoDTO.getPeripherals3(), IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3, logonUser);
				isUpdateAsset = false;
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".saveCaseAssetLink() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("saveCaseAssetLink():" + e, e);
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED, new String[]{this.getMyName()}, e);
		}
	}
	
	
	/**
	 * 比較更新設備鏈接檔信息
	 * @author CrissZhang
	 * @param oldSsrmCaseAssetLinkDTOs : 之前案件鏈接檔信息
	 * @param caseId : 案件編號
	 * @param oldAsset : 之前的設備
	 * @param currentAsset : 當前的設備
	 * @param assetType : 設備類別
	 * @param logonUser
	 */
	private void compareAndUpdateAsset(List<SrmCaseAssetLinkDTO> oldSsrmCaseAssetLinkDTOs, String caseId, String oldAsset, 
			String currentAsset, String assetType, LogonUser logonUser){
		try {
			// 當前案件編號
			Transformer transformer = new SimpleDtoDmoTransformer();
			// 是否Y標記
			boolean isHaveLinked = false;
			// 是否R標記
			boolean isHaveRemoved = false;
			SrmCaseAssetLink editSrmCaseAssetLink = null;
			SrmCaseAssetLink deleteSrmCaseAssetLink = null;
			for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : oldSsrmCaseAssetLinkDTOs) {
				// 當前設備類別與設備鏈接檔相等
				if(assetType.equals(srmCaseAssetLinkDTO.getItemType())) {
					// 原鏈接檔存在R標記
					if(IAtomsConstants.CASE_REMOVE_ASSET.equals(srmCaseAssetLinkDTO.getIsLink())) {
						isHaveRemoved = true;
						editSrmCaseAssetLink = (SrmCaseAssetLink) transformer.transform(srmCaseAssetLinkDTO, new SrmCaseAssetLink());
					// 原鏈接檔存在Y標記
					} else if(IAtomsConstants.YES.equals(srmCaseAssetLinkDTO.getIsLink())) {
						isHaveLinked = true;
						editSrmCaseAssetLink = (SrmCaseAssetLink) transformer.transform(srmCaseAssetLinkDTO, new SrmCaseAssetLink());
					// 原鏈接檔存在N標記
					} else if(IAtomsConstants.NO.equals(srmCaseAssetLinkDTO.getIsLink())){
						deleteSrmCaseAssetLink = (SrmCaseAssetLink) transformer.transform(srmCaseAssetLinkDTO, new SrmCaseAssetLink());
					}
				}
			}
			// 有移除或者關聯設備
			if(isHaveLinked || isHaveRemoved){
				// 已經關聯
				if(isHaveLinked){
					if(editSrmCaseAssetLink != null){
						editSrmCaseAssetLink.setIsLink(IAtomsConstants.CASE_REMOVE_ASSET);
						this.srmCaseAssetLinkDAO.update(editSrmCaseAssetLink);
					}
					// 新增設備鏈接檔信息
					if(StringUtils.hasText(currentAsset)){
						this.dealCaseAssetLink(currentAsset, caseId, assetType, logonUser);
					}
				// 已經移除
				} else {
					// 刪除未關聯項
					if(deleteSrmCaseAssetLink != null){
						this.srmCaseAssetLinkDAO.delete(deleteSrmCaseAssetLink);
					}
					if(StringUtils.hasText(currentAsset)){
						// 新設定值設備值同之前鏈接檔移除設備
						if(currentAsset.equals(oldAsset)){
							editSrmCaseAssetLink.setIsLink(IAtomsConstants.YES);
							this.srmCaseAssetLinkDAO.update(editSrmCaseAssetLink);
						} else {
							// 新增設備鏈接檔信息
							this.dealCaseAssetLink(currentAsset, caseId, assetType, logonUser);
						}
					}
				}
			// 否則判斷當前有無設備序號，若有不用處理
			} else {
				// 刪除未關聯項
				if(deleteSrmCaseAssetLink != null){
					this.srmCaseAssetLinkDAO.delete(deleteSrmCaseAssetLink);
				}
				// 新增設備鏈接檔信息
				if(StringUtils.hasText(currentAsset)){
					// 新增設備鏈接檔信息
					this.dealCaseAssetLink(currentAsset, caseId, assetType, logonUser);
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".compareAndUpdateAsset() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("compareAndUpdateAsset():" + e, e);
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED, new String[]{this.getMyName()}, e);
		}
	}
	
	/**
	 * Purpose:送至下一關審核（派工--由於群組可以改變，調用公共方法效率低，新增派工送下一關專用方法）
	 * @author amandawang
	 * @param logonUser:登錄者
	 * @param formDTO:案件消息
	 * @param currentActivitiCode:當前關卡ID
	 * @param candidateGroupMap：群組為key，caseId list 為value
	 * @throws ServiceException
	 */
	public Message sendNextActivitiForDispatch(IAtomsLogonUser logonUser, CaseManagerFormDTO formDTO, String currentActivitiCode, Map<String, List<String>> candidateGroupMap, String id) throws ServiceException {
		//IAtomsCaseFormDTO caseFormDTO = new IAtomsCaseFormDTO();
		Map<String, ActivitiResultDTO> map = new HashMap<String, ActivitiResultDTO>();
		ActivitiWorkflowContext workflowContext = new ActivitiWorkflowContext(logonUser);
		IAtomsTaskContext taskContext = new IAtomsTaskContext();
		AbstractIAtomsPayloadContext payLoadContext = new CaseProcessPayloadContext();
		ActivitiResultDTO caseActivitiResultDTO = null;
		String taskId = null;
		Message msg = null;
		try {
			//傳遞的案件單號
			//List<String> caseIds = formDTO.getCaseIds();
			formDTO.setCandidateGroup(null);
			formDTO.setCurrentActivitiCode(currentActivitiCode);
			formDTO.setProcessId(CaseManagerFormDTO.IATOMS_BP_CASE_PROCESS);
			TaskQueryRequest  filters = new TaskQueryRequest();
			ITaskInquiryContext taskQueryCtx = new ActivitiRestTaskInquiryContext();
			taskQueryCtx.setPredicate(filters);
			taskQueryCtx.setStartPage(0);
			taskQueryCtx.setPageSize(1000);
			formDTO.setTaskQueryCtx(taskQueryCtx);
			IWorkflowContext wfCtx = new ActivitiWorkflowContext(logonUser);
			formDTO.setWfCtx(wfCtx);
			List<String> caseIds = null;
			//查找該關卡的workList案件
			List<ITask> tasks =  this.iAtomsActivitiUtilsService.getTaskList(formDTO);
			if(!CollectionUtils.isEmpty(tasks)){
				map = AnalyticalActivitiTaskDataUtils.analytical2Map(tasks);
				if(map != null){
					//查找當前流程中到登錄者跟前的案子
					caseActivitiResultDTO = map.get(CaseManagerFormDTO.SICK_CASE_TYPE);
					if(caseActivitiResultDTO != null){
						formDTO.setActivitiResultDTO(caseActivitiResultDTO);
						List<ActivitiDataDTO> activitiDataDTOs = caseActivitiResultDTO.getActivitiDataDTOList();
						if(!CollectionUtils.isEmpty(activitiDataDTOs)){
							Set<String> set = candidateGroupMap.keySet();
							
							for (String  candidateGroup: set) {
								caseIds = candidateGroupMap.get(candidateGroup);
								//循環群組所對應的案件編號獲取相應的taskID
								for (String caseId : caseIds) {
									taskId = null;
									for (ActivitiDataDTO activitiDataDTO : activitiDataDTOs) {
										//設置taskId
										if(activitiDataDTO.getCaseId().equals(caseId)){
											taskId = activitiDataDTO.getTaskId();
											break;
										}
									}
									//當存在taskId時進行相應的activiti操作，否則送至下一關失敗
									if (!StringUtils.hasText(taskId)) {
										LOGGER.error("CaseManagerService -->  .sendNextActivitiForDispatch() --> ", i18NUtil.getName(IAtomsMessageCode.CASE_TASKID_IS_NULL,  new String[]{caseId}, null));
										msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.BPM_PERFORM_TASK_FAILED, new String[]{caseId});
										throw new ServiceException(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED, new String[]{caseId});
									} else{
										//根據案件單號查詢該案件的消息，修改異動人員消息
										//設置當前登錄者
									//	workflowContext.setUserId(logonUser.getUserCode());
										//設置activiti需要的消息
										formDTO.setLogonUser(logonUser);
										formDTO.setWorkflowContext(workflowContext);
										formDTO.setProcessId(CaseManagerFormDTO.IATOMS_BP_CASE_PROCESS);
										formDTO.setActionId(formDTO.getActionId());
										formDTO.setServiceId(formDTO.getServiceId());
										formDTO.setDispatchUser(logonUser.getUserCode());
										taskContext.setPayload(payLoadContext);
										//案件编号
										formDTO.setCaseId(caseId);
										formDTO.setTaskId(taskId);
										taskContext.setTaskId(taskId);
										taskContext.setCaseId(caseId);
										taskContext.setAssigner(logonUser.getName());
										formDTO.setTaskContext((IAtomsTaskContext) taskContext);									
										formDTO.setCandidateGroup(candidateGroup);
										formDTO.setOutcome(formDTO.getActionId());
										SessionContext ctx = new SessionContext();			
										ctx.setRequestParameter(formDTO);
										//送至下一關
										super.performTaskAction(formDTO, null);
										msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.BPM_PERFORM_TASK_FAILED);
									}
								}
							}
						} else {
							LOGGER.error(".sendNextActivitiForDispatch() there is no tasks by activitiDataDTOs..." + formDTO.getCaseId());
						}
					} else {
						LOGGER.error(".sendNextActivitiForDispatch() there is no tasks by caseActivitiResultDTO..." + formDTO.getCaseId());
					}
				} else {
					LOGGER.error(".sendNextActivitiForDispatch() there is no tasks by map..." + formDTO.getCaseId());
				}
			} else {
				LOGGER.error(".sendNextActivitiForDispatch() there is no tasks by this group..." + formDTO.getCaseId());
			}
			if (null == msg) {
				throw new ServiceException(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED, new String[]{id});
			} else {
				return msg;
			}
		} catch (Exception e) {
			LOGGER.error(".sendNextActivitiForDispatch() ",e);
			throw new ServiceException(e);
		}
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#send(cafe.core.context.SessionContext)
	 */
	public SessionContext sendTo(SessionContext sessionContext) throws ServiceException {
		try{
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			//当前登录用户
			LogonUser logonUser= (LogonUser) caseManagerFormDTO.getLogonUser();
			//發件人名
			caseManagerFormDTO.setFromName(logonUser.getName());
			//发送人Mail地址
			String fromMailAddress = logonUser.getEmail();
			//邮件主题
			caseManagerFormDTO.setMailSubject(i18NUtil.getName(CaseManagerFormDTO.CASE_MANAGER_MAIL_SUBKECT));
			//還差好多屬性，可以根據文檔更新進行添加
			//caseManagerFormDTO.setMailContext1(i18NUtil.getName(caseManagerFormDTO.CASE_MANAGER_MAIL_SUBKECT, mailContext, Locale.CHINA));
			SrmCaseTransactionDTO srmCaseTransactionDTO = caseManagerFormDTO.getSrmCaseTransactionDTO();
			//邮件内容
			String mailContext = srmCaseTransactionDTO.getMailInfo(); 
			if(StringUtils.hasText(srmCaseTransactionDTO.getCaseId())){
				String toMailAddress = IAtomsConstants.MARK_EMPTY_STRING;
				List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(srmCaseTransactionDTO.getCaseId(), null);
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
					List<Parameter> admUserDTOList = null;
					//admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(null, IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode(), true, false);
					//Task #3568 行動工單[mail客服]僅通知Cyber客服
					admUserDTOList = this.admRoleDAO.getUserByDepartmentAndRole(null, "CYBER_SERVICE", true, false);
					for (Parameter admUserDTO : admUserDTOList) {
						toMailAddress += admUserDTO.getName() + IAtomsConstants.MARK_SEMICOLON;
					}
					int count = 0;
					//邮件主题模板
					String subjectTemplate = MailComponent.MAIL_TEMPLATE_ADD + CaseManagerFormDTO.SUBJECT_TEMPLATE;
					//邮件内容模板
					String textTemplate = MailComponent.MAIL_TEMPLATE_ADD + "mailToCustomerServiceContext.html";
					
					for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
						Map<String, Object> variables = new HashMap<String, Object>();
						
						//iATOMS[${caseStatus}]通知-[${caseCategory}]${merchantName}/${merchantCode}/${dtid}${mainRequirementNo}
						//fromMailAddress =  WfSystemConfigManager.getProperty(IAtomsConstants.MAIL, IAtomsConstants.MAIL_FROM_MAIL);
						variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_STATUS.getValue(), i18NUtil.getName(IAtomsConstants.FIELD_MOBILE_ACTION));
						//案件類別
						variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_CATEGORY.getValue(), i18NUtil.getName(srmCaseHandleInfoDTO.getCaseCategory()));
						//案件編號
						variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getCaseId()) ? srmCaseHandleInfoDTO.getCaseId() : IAtomsConstants.MARK_EMPTY_STRING);
						//需求单号 ---改為案件編號
						variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MAIN_REQUIREMENT_NO.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getCaseId()) ? IAtomsConstants.MARK_BACKSLASH + srmCaseHandleInfoDTO.getCaseId() : IAtomsConstants.MARK_EMPTY_STRING);
						//進見時間
						LOGGER.debug(this.getClass().getName(), ".sendEmail()--->", " 進見時間 ="+srmCaseHandleInfoDTO.getCreatedDate());
						//dtid
						variables.put("subjectDtid", StringUtils.hasText(srmCaseHandleInfoDTO.getDtid()) ? IAtomsConstants.MARK_BACKSLASH + srmCaseHandleInfoDTO.getDtid() : IAtomsConstants.MARK_EMPTY_STRING);
						
						if(StringUtils.hasText(srmCaseHandleInfoDTO.getMerchantCode())) {
							BimMerchant Merchant = this.merchantDAO.findByPrimaryKey(BimMerchant.class, srmCaseHandleInfoDTO.getMerchantCode());
							srmCaseHandleInfoDTO.setMerchantCode(Merchant.getMerchantCode());
						}
						//特店代號
						variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MERCHANT_CODE.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getMerchantCode()) ? srmCaseHandleInfoDTO.getMerchantCode() : IAtomsConstants.MARK_EMPTY_STRING);
						//特店名稱
						variables.put(SrmCaseHandleInfoDTO.ATTRIBUTE.MERCHANT_NAME.getValue(), StringUtils.hasText(srmCaseHandleInfoDTO.getMerchantName()) ? srmCaseHandleInfoDTO.getMerchantName() : IAtomsConstants.MARK_EMPTY_STRING);
						variables.put(IAtomsConstants.MAIL_CONTEXT, mailContext);
						//去除重複mail地址 2017/10/24
						try {
							toMailAddress = IAtomsUtils.removeDuplicate(toMailAddress, IAtomsConstants.MARK_SEMICOLON);
						} catch (Exception e) {
							LOGGER.debug("Error is in CaseManagerService.removeDuplicate,Error——>toMailAddress ", toMailAddress);
						}
						LOGGER.debug(this.getClass().getName(), "mailComponent.mailTo() --> is start... ");
						this.mailComponent.mailTo(fromMailAddress, toMailAddress, subjectTemplate, textTemplate, variables);
						if(count == 0) {
							String[] toEmails = toMailAddress.split(IAtomsConstants.MARK_SEMICOLON);
							String tempEmail = IAtomsConstants.MARK_EMPTY_STRING;
							for (String toEmail : toEmails) {
								if(StringUtils.hasText(toEmail)) {
									if(!StringUtils.hasText(tempEmail)) {
										tempEmail = toEmail + IAtomsConstants.MARK_SEMICOLON;
									} else {
										tempEmail = tempEmail + IAtomsConstants.RETURN_LINE_FEED + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + 
												IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + 
												IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE + IAtomsConstants.MARK_SPACE +toEmail + IAtomsConstants.MARK_SEMICOLON;
									}
								}
							}
							toMailAddress = tempEmail;
							count ++;
							String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
							if(StringUtils.hasText(transactionId)) {
								// 案件處理處理中資料DMO對象
								SrmCaseHandleInfo caseHandleInfo = null;
								SrmCaseTransaction caseTransaction = new SrmCaseTransaction();
								// 更新案件處理消息
								caseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, srmCaseHandleInfoDTO.getCaseId());
								if (caseHandleInfo != null) {
									caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
									caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
									caseHandleInfo.setFirstDescription(srmCaseTransactionDTO.getMailInfo());
									caseHandleInfo.setUpdatedById(logonUser.getId());
									caseHandleInfo.setUpdatedByName(logonUser.getName());
									caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
									this.srmCaseHandleInfoDAO.update(caseHandleInfo);
									// 保存案件記錄信息
									caseTransaction.setActionId(CASE_ACTION.ADD_RECORD.getCode());
									caseTransaction.setCaseStatus(srmCaseHandleInfoDTO.getCaseStatus());
									// 實際執行時間處理
									caseTransaction.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
									caseTransaction.setTransactionId(transactionId);
									caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
									// 當前關卡
									caseTransaction.setCaseStage(srmCaseHandleInfoDTO.getCaseStatus());
									caseTransaction.setCaseStageName(i18NUtil.getName(srmCaseHandleInfoDTO.getCaseStatus()));
									// 下一關關卡代碼
									caseTransaction.setNextCaseStage(srmCaseHandleInfoDTO.getCaseStatus());
									caseTransaction.setNextCaseStageName(i18NUtil.getName(srmCaseHandleInfoDTO.getCaseStatus()));
									caseTransaction.setCreatedById(logonUser.getId());
									caseTransaction.setCreatedByName(logonUser.getName());
									caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
									caseTransaction.setDescription("行動工單通知"+IAtomsConstants.MARK_COLON+ IAtomsConstants.MARK_WRAP + mailContext);
									caseTransaction.setMailInfo(i18NUtil.getName(IAtomsConstants.EMAIL_TIME)+ DateTimeUtils.toString(DateTimeUtils.getCurrentTimestamp(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH) 
											+ IAtomsConstants.RETURN_LINE_FEED + "收件人:" + toMailAddress);
									this.srmCaseTransactionDAO.getDaoSupport().save(caseTransaction);
									this.srmCaseTransactionDAO.getDaoSupport().flush();
									Message msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.SENDEMAIL_SUCCESS);
									sessionContext.setReturnMessage(msg);
									return sessionContext;
								}
							}
						}
					}
				}
			}
			
		}catch(Exception e){
			LOGGER.error(this.getClass().getName()+".send() to customer service is error in Service:"+e, e);
			Message msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.SENDEMAIL_FAILURE);
			sessionContext.setReturnMessage(msg);
			return sessionContext;
		}
		return sessionContext;
		
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#changeCompleteDate(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext changeCompleteDate(SessionContext sessionContext) throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		Transformer transformer = new SimpleDtoDmoTransformer();
		Message msg = null;
		try {
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				// 案件處理記錄主鍵id
				String transactionId = null;
				// 案件處理處理中資料DMO對象
				SrmCaseHandleInfo caseHandleInfo = null;
				// 案件處理記錄DMO對象
				SrmCaseTransaction caseTransaction = null;
				// 案件處理記錄DTO對象
				SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
				if (srmCaseTransactionDTO != null) {
					Timestamp completeDate = srmCaseTransactionDTO.getCompleteDate();
					String[] caseIds = srmCaseTransactionDTO.getCaseId().split(IAtomsConstants.MARK_SEPARATOR);
					if(caseIds != null && completeDate != null){
						// 得到案件處理集合
						List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = (List<SrmCaseHandleInfoDTO>) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT);
						if (!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)) {
							//int i = 0;
							String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
							for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
								caseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, srmCaseHandleInfoDTO.getCaseId());
								// 保存案件記錄信息
								//i++;
								if (srmCaseHandleInfoDTO != null) {
									Boolean isTrue = Boolean.TRUE;
									//實際完修時間是否有修改
									if((srmCaseHandleInfoDTO.getCompleteDate() != null) || (completeDate != null)){
										if (srmCaseHandleInfoDTO.getCompleteDate() != null && completeDate != null) {
											if((srmCaseHandleInfoDTO.getCompleteDate().getTime() != completeDate.getTime())){
												isTrue = Boolean.FALSE;
											}
										} else {
											isTrue = Boolean.FALSE;
										}
									}
									//生成id
									transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
									if(!StringUtils.hasText(caseTransactionId)) {
										caseTransactionId = transactionId;
									} else {
										caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + transactionId;
									}
									formDTO.setCaseTransactionId(caseTransactionId);
									caseTransaction = new SrmCaseTransaction();
									transformer.transform(srmCaseTransactionDTO, caseTransaction);
									// 放置案件動作
									caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
									// 放置案件狀態
									caseTransaction.setCaseStatus(srmCaseHandleInfoDTO.getCaseStatus());
									caseTransaction.setDealById(srmCaseTransactionDTO.getDealById());
									caseTransaction.setDealByName(srmCaseTransactionDTO.getDealByName());
									// 實際執行時間處理
									caseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
									// 描述說明
									String description = srmCaseTransactionDTO.getDescription();
									StringBuffer buffer = new StringBuffer();
									//buffer.append();
									buffer.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
									buffer.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_COMPLETE_DATE));
									buffer.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
									buffer.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
											new String[]{caseHandleInfo.getCompleteDate() == null ? IAtomsConstants.MARK_EMPTY_STRING : DateTimeUtils.toString(caseHandleInfo.getCompleteDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH), 
													DateTimeUtils.toString(completeDate, DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH)}, null));
									buffer.append(IAtomsConstants.MARK_SEMICOLON);
									buffer.append(IAtomsConstants.MARK_WRAP);
									if (StringUtils.hasText(description)) {
										description = description + IAtomsConstants.MARK_WRAP + buffer.toString();
									} else {
										description = buffer.toString();
									}
									// 描述處理
									caseTransaction.setDescription(description);
									caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
									caseTransaction.setTransactionId(transactionId);
									caseTransaction.setCreatedById(logonUser.getId());
									caseTransaction.setCreatedByName(logonUser.getName());
									caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
									this.srmCaseTransactionDAO.insert(caseTransaction);
									if (!isTrue) {
										
										// 更新設備庫存信息
										this.dmmRepositoryDAO.updateRepositoryByCaseId(srmCaseHandleInfoDTO.getCaseId(), completeDate, IAtomsConstants.NO);
										//更新CUP啟用日、CUP移除日
										if(caseHandleInfo.getCompleteDate() != null && caseHandleInfo.getCupEnableDate() != null
												&& caseHandleInfo.getCompleteDate().getTime() == caseHandleInfo.getCupEnableDate().getTime()){
											caseHandleInfo.setCupEnableDate(completeDate);
										}
										if(caseHandleInfo.getCompleteDate() != null && caseHandleInfo.getCupDisableDate() != null
												&& caseHandleInfo.getCompleteDate().getTime() == caseHandleInfo.getCupDisableDate().getTime()){
											caseHandleInfo.setCupDisableDate(completeDate);
										}
										//更新裝機日期、拆機日期
										if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
											if(caseHandleInfo.getCompleteDate() != null && caseHandleInfo.getInstalledDate() != null
													&& caseHandleInfo.getCompleteDate().getTime() == caseHandleInfo.getInstalledDate().getTime()){
												caseHandleInfo.setInstalledDate(completeDate);
											}
										}
										if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
											if(caseHandleInfo.getCompleteDate() != null && caseHandleInfo.getUninstalledDate() != null
													&& caseHandleInfo.getCompleteDate().getTime() == caseHandleInfo.getUninstalledDate().getTime()){
												caseHandleInfo.setUninstalledDate(completeDate);
											}
										}
										caseHandleInfo.setCompleteDate(completeDate);
										caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
										caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
										caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
										caseHandleInfo.setUpdatedById(logonUser.getId());
										caseHandleInfo.setUpdatedByName(logonUser.getName());
										caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
										this.srmCaseHandleInfoDAO.update(caseHandleInfo);
										//修改最新一筆完修的時間
										srmCaseTransactionDTO = this.srmCaseTransactionDAO.listNewCompleteDate(IAtomsConstants.CASE_STATUS.COMPLETED.getCode(), srmCaseHandleInfoDTO.getCaseId(), IAtomsConstants.PARAM_PAGE_DESCEND_ORDER);
										if (srmCaseTransactionDTO != null) {
											caseTransaction = this.srmCaseTransactionDAO.findByPrimaryKey(SrmCaseTransaction.class, srmCaseTransactionDTO.getTransactionId());
											caseTransaction.setDealDate(completeDate);
										}
									}
								}
							}
						} else {
							LOGGER.error("CaseManagerService --> changeCompleteDate() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
							msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CHANGE_COMPLETE_DATE)});
						}
						if(msg == null){
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CHANGE_COMPLETE_DATE)});	
						}
					} else {
						LOGGER.error("CaseManagerService --> changeCompleteDate() --> ", "save error!!!", "caseIds is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CHANGE_COMPLETE_DATE)});
					}
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".changeCompleteDate() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("changeCompleteDate():" + e, e);
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED, new String[]{this.getMyName()}, e);
		}
		return sessionContext;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#changeCreateDate(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext changeCreateDate(SessionContext sessionContext) throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		Transformer transformer = new SimpleDtoDmoTransformer();
		Message msg = null;
		try {
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				// 案件處理記錄主鍵id
				String transactionId = null;
				// 案件處理處理中資料DMO對象
				SrmCaseHandleInfo caseHandleInfo = null;
				// 案件處理記錄DMO對象
				SrmCaseTransaction caseTransaction = null;
				// 案件處理記錄DTO對象
				SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
				if (srmCaseTransactionDTO != null) {
					Timestamp createDate = srmCaseTransactionDTO.getCreatedDate();
					String[] caseIds = srmCaseTransactionDTO.getCaseId().split(IAtomsConstants.MARK_SEPARATOR);
					if(caseIds != null && createDate != null){
						// 得到案件處理集合
						List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = (List<SrmCaseHandleInfoDTO>) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT);
						if (!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)) {
							Boolean isIgnoreSla = false;
							BimMerchantHeader merchantHeader = null;
							String caseType = null;
							List<ContractSlaDTO> contractSlaDTOs = null;
							Map<String, List<ContractSlaDTO>> slaMap = new HashMap<String, List<ContractSlaDTO>>();
							//存放sla集合
							//if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(formDTO.getCaseCategory())) {
								// Task #2489 專案與查核案件，無須計算SLA
								// Task #3385若為雲端租賃設備(CMS_CASE=Y或裝機件 裝機類型=微型商戶)所有案件類別，合約編號非必填，不用驗證SLA
								// 該處判斷CMS_CASE=Y
								SrmCaseHandleInfoDTO tempSrmCaseHandleInfoDTO = srmCaseHandleInfoDTOs.get(0);
								if(IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(tempSrmCaseHandleInfoDTO.getCaseCategory()) 
										|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(tempSrmCaseHandleInfoDTO.getCaseCategory())
										|| IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(tempSrmCaseHandleInfoDTO.getCaseCategory())
										|| IAtomsConstants.PARAM_YES.equals(tempSrmCaseHandleInfoDTO.getCmsCase())){
									isIgnoreSla = true;
								}
								// 無sla
								if(!isIgnoreSla){
									for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
										// 得到sla信息 
										merchantHeader = this.merchantHeaderDAO.findByPrimaryKey(BimMerchantHeader.class, srmCaseHandleInfoDTO.getMerchantHeaderId());
										// 預約
										if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(srmCaseTransactionDTO.getCaseType())) {
											// 因預約件不會設定SLA，若案件類型為“預約”時，在計算警示時以案件類型為“一般”的SLA設定計算
											caseType = IAtomsConstants.TICKET_MODE_COMMON;
										} else {
											caseType = srmCaseHandleInfoDTO.getCaseType();
										}
										contractSlaDTOs = this.contractSlaDAO.listBy(srmCaseHandleInfoDTO.getCustomerId(), srmCaseHandleInfoDTO.getContractId(), merchantHeader.getArea(),
												srmCaseTransactionDTO.getCaseCategory(), caseType, null, null, null, null, false);
										if (CollectionUtils.isEmpty(contractSlaDTOs)) {
											// 無對應SLA，請到【合約SLA設定】設定
											msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_SLA_FOR_CASE);
											sessionContext.setReturnMessage(msg);
											slaMap = null;
											return sessionContext;
										}
										slaMap.put(srmCaseHandleInfoDTO.getCaseId(), contractSlaDTOs);
									}
								}
							//}
							//int i = 0;
							String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
							for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
								caseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, srmCaseHandleInfoDTO.getCaseId());
								// 保存案件記錄信息
								//i++;
								if (srmCaseHandleInfoDTO != null) {
									Boolean isTrue = Boolean.TRUE;
									//實際建案日期否有修改
									if((srmCaseHandleInfoDTO.getCreatedDate() != null) || (createDate != null)){
										if (srmCaseHandleInfoDTO.getCreatedDate() != null && createDate != null) {
											if((srmCaseHandleInfoDTO.getCreatedDate().getTime() != createDate.getTime())){
												isTrue = Boolean.FALSE;
											}
										} else {
											isTrue = Boolean.FALSE;
										}
									}
									//生成id
									transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
									if(!StringUtils.hasText(caseTransactionId)) {
										caseTransactionId = transactionId;
									} else {
										caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + transactionId;
									}
									formDTO.setCaseTransactionId(caseTransactionId);
									caseTransaction = new SrmCaseTransaction();
									transformer.transform(srmCaseTransactionDTO, caseTransaction);
									// 放置案件動作
									caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
									// 放置案件狀態
									caseTransaction.setCaseStatus(srmCaseHandleInfoDTO.getCaseStatus());
									caseTransaction.setDealById(srmCaseTransactionDTO.getDealById());
									caseTransaction.setDealByName(srmCaseTransactionDTO.getDealByName());
									// 實際執行時間處理
									caseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
									// 描述說明
									String description = srmCaseTransactionDTO.getDescription();
									StringBuffer buffer = new StringBuffer();
									//buffer.append();
									buffer.append(IAtomsConstants.MARK_CHINESE_BRACKET_LEFT);
									buffer.append(i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CREATE_DATE));
									buffer.append(IAtomsConstants.MARK_CHINESE_BRACKET_RIGHT);
									buffer.append(i18NUtil.getName(IAtomsMessageCode.UPDATE_BEFORE_AND_UPDATE_AFTER, 
											new String[]{caseHandleInfo.getCreatedDate() == null ? IAtomsConstants.MARK_EMPTY_STRING : DateTimeUtils.toString(caseHandleInfo.getCreatedDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH), 
													DateTimeUtils.toString(createDate, DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH)}, null));
									buffer.append(IAtomsConstants.MARK_SEMICOLON);
									buffer.append(IAtomsConstants.MARK_WRAP);
									if (StringUtils.hasText(description)) {
										description = description + IAtomsConstants.MARK_WRAP + buffer.toString();
									} else {
										description = buffer.toString();
									}
									// 描述處理
									caseTransaction.setDescription(description);
									caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
									caseTransaction.setTransactionId(transactionId);
									caseTransaction.setCreatedById(logonUser.getId());
									caseTransaction.setCreatedByName(logonUser.getName());
									caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
									this.srmCaseTransactionDAO.insert(caseTransaction);
									if (!isTrue) {
										
										//重新計算合約sla
										if(!isIgnoreSla && !IAtomsConstants.CASE_CATEGORY.OTHER.equals(formDTO.getCaseCategory())){
											ContractSlaDTO contractSlaDTO = null;
											if (!CollectionUtils.isEmpty(slaMap.get(srmCaseHandleInfoDTO.getCaseId()))) {
												// TODO
												contractSlaDTO = contractSlaDTOs.get(0);
												// 開始計算sla的時間--建案時間
												Date slaStartDate = createDate;
												srmCaseHandleInfoDTO = settingAcceptDate(contractSlaDTO, slaStartDate, srmCaseHandleInfoDTO);
												// 應回應時間
												caseHandleInfo.setAcceptableResponseDate(srmCaseHandleInfoDTO.getAcceptableResponseDate());
												// 應到達時間
												caseHandleInfo.setAcceptableArriveDate(srmCaseHandleInfoDTO.getAcceptableArriveDate());
												// 應完修時間
												caseHandleInfo.setAcceptableFinishDate(srmCaseHandleInfoDTO.getAcceptableFinishDate());
												// 放置警示時效
												caseHandleInfo.setResponseWarnning(contractSlaDTO.getResponseWarnning());
												caseHandleInfo.setArriveWarnning(contractSlaDTO.getArriveWarnning());
												caseHandleInfo.setCompleteWarnning(contractSlaDTO.getCompleteWarnning());
											}
										}
										//修改相應的案件信息
										caseHandleInfo.setCreatedDate(createDate);
										caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
										caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
										caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
										caseHandleInfo.setUpdatedById(logonUser.getId());
										caseHandleInfo.setUpdatedByName(logonUser.getName());
										caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
										this.srmCaseHandleInfoDAO.update(caseHandleInfo);
										//修改第一筆保存時間
										srmCaseTransactionDTO = this.srmCaseTransactionDAO.listNewCompleteDate(null, srmCaseHandleInfoDTO.getCaseId(), IAtomsConstants.PARAM_PAGE_ORDER);
										if (srmCaseTransactionDTO != null) {
											caseTransaction = this.srmCaseTransactionDAO.findByPrimaryKey(SrmCaseTransaction.class, srmCaseTransactionDTO.getTransactionId());
											caseTransaction.setDealDate(createDate);
										}
									}
								}
							}
						} else {
							LOGGER.error("CaseManagerService --> changeCreateDate() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
							msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CHANGE_CREATE_DATE)});
						}
						if(msg == null){
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CHANGE_CREATE_DATE)});	
						}
					} else {
						LOGGER.error("CaseManagerService --> changeCreateDate() --> ", "save error!!!", "caseIds is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CHANGE_CREATE_DATE)});
					}
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".changeCreateDate() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("changeCreateDate():" + e, e);
			throw new ServiceException( IAtomsMessageCode.SYSTEM_FAILED, new String[]{this.getMyName()}, e);
		}
		return sessionContext;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#buildCaseByApi(cafe.core.context.SessionContext)
	 */
	public SessionContext buildCaseByApi(SessionContext sessionContext)throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		try {
			
			if(formDTO != null){
				formDTO.setActionId(IAtomsConstants.UC_NO_SRM_05020);
				IAtomsLogonUser logonUser = new IAtomsLogonUser();
				logonUser.setId("CMS000000-0001");
				logonUser.setUserCode("cms_to_iatoms");
				logonUser.setName("cms_to_iatoms");
				//logonUser.setEmail(user.getEmail());
				
				formDTO.setLogonUser(logonUser);
				formDTO.setSrmCaseTransactionParameterDTOs(null);
				Transformer transformer = new SimpleDtoDmoTransformer();
				SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = formDTO.getSrmCaseHandleInfoDTO();
				boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfoDTO.getDtid(),null);
				SrmCaseHandleInfoDTO caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(srmCaseHandleInfoDTO.getDtid(), isNewHave);
				//查無資料時 該dtid不存在
				if (caseHandleInfoDTO == null) {
					Message msg = null;
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_DITD_FOR_CUSTOMER_AND_TYPE);
					sessionContext.setReturnMessage(msg);
					return sessionContext;
				}
				srmCaseHandleInfoDTO.setCustomerId(caseHandleInfoDTO.getCustomerId());
				srmCaseHandleInfoDTO.setContractId(caseHandleInfoDTO.getContractId());
				srmCaseHandleInfoDTO.setCompanyId(caseHandleInfoDTO.getCompanyId());
				srmCaseHandleInfoDTO.setDepartmentId(caseHandleInfoDTO.getDepartmentId());
				srmCaseHandleInfoDTO.setCaseType(caseHandleInfoDTO.getCaseType());
				srmCaseHandleInfoDTO.setIsVip(caseHandleInfoDTO.getIsVip());
				//聯繫地址-縣市 value
				BaseParameterItemDefDTO baseParameterItemDefDTO =  this.baseParameterItemDefDAO.getParameterItemByName(IATOMS_PARAM_TYPE.LOCATION.getCode(), null, srmCaseHandleInfoDTO.getContactAddressLocation());
				if (baseParameterItemDefDTO == null) {
					Message msg = null;
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.IMPORT_VALUE_NOT_FOUND);
					sessionContext.setReturnMessage(msg);
					return sessionContext;
				}
				srmCaseHandleInfoDTO.setContactAddressLocation(baseParameterItemDefDTO.getValue());
				
				//特店代號 id
				MerchantDTO merchantDTO = this.merchantDAO.getMerchantInfo(null, srmCaseHandleInfoDTO.getMerchantCode(), null, null);
				if (merchantDTO==null) {
					Message msg = null;
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.MERCHANT_CODE_NOT_EXIST);
					sessionContext.setReturnMessage(msg);
					return sessionContext;
				}
				//Task #3480 聯繫郵遞區域
				List<Parameter> postCodeList = this.baseParameterPostCodeDAO.getPostCodeList(baseParameterItemDefDTO.getValue(), srmCaseHandleInfoDTO.getContactPostArea(), srmCaseHandleInfoDTO.getContactPostCode());
				if (CollectionUtils.isEmpty(postCodeList) || postCodeList.get(0)==null) {
					Message msg = null;
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.INPUT_ERROR);
					sessionContext.setReturnMessage(msg);
					return sessionContext;
				}
				srmCaseHandleInfoDTO.setContactPostCode(postCodeList.get(0).getValue().toString());
				//檢核sla 是否存在
				/*List<ContractSlaDTO> contractSlaDTOList = this.contractSlaDAO.listBy(srmCaseHandleInfoDTO.getCustomerId(), srmCaseHandleInfoDTO.getContractId(), merchantDTO.getArea(),
						srmCaseHandleInfoDTO.getCaseCategory(), caseHandleInfoDTO.getCaseType(), null, null, null, null, false);
				if (CollectionUtils.isEmpty(contractSlaDTOList) || contractSlaDTOList.get(0)==null) {
					Message msg = null;
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_SLA_FOR_CASE);
					sessionContext.setReturnMessage(msg);
					return sessionContext;
				}*/
				srmCaseHandleInfoDTO.setMerchantCode(merchantDTO.getMerchantId());
				srmCaseHandleInfoDTO.setMerchantHeaderId(caseHandleInfoDTO.getMerchantHeaderId());
				srmCaseHandleInfoDTO.setMerLocation(caseHandleInfoDTO.getMerLocation());
				srmCaseHandleInfoDTO.setContactIsBussinessAddress(IAtomsConstants.PARAM_NO);
				srmCaseHandleInfoDTO.setContactIsBussinessContact(IAtomsConstants.PARAM_NO);
				srmCaseHandleInfoDTO.setContactIsBussinessContactPhone(IAtomsConstants.PARAM_NO);
				srmCaseHandleInfoDTO.setContactIsBussinessContactMobilePhone(IAtomsConstants.PARAM_NO);
				srmCaseHandleInfoDTO.setContactIsBussinessContactEmail(IAtomsConstants.PARAM_NO);
				
				srmCaseHandleInfoDTO.setEdcType(caseHandleInfoDTO.getEdcType());
				srmCaseHandleInfoDTO.setSoftwareVersion(caseHandleInfoDTO.getSoftwareVersion());
				srmCaseHandleInfoDTO.setBuiltInFeature(caseHandleInfoDTO.getBuiltInFeature());
				srmCaseHandleInfoDTO.setMultiModule(caseHandleInfoDTO.getMultiModule());
				srmCaseHandleInfoDTO.setPeripherals(caseHandleInfoDTO.getPeripherals());
				srmCaseHandleInfoDTO.setPeripherals2(caseHandleInfoDTO.getPeripherals2());
				srmCaseHandleInfoDTO.setPeripherals3(caseHandleInfoDTO.getPeripherals3());
				srmCaseHandleInfoDTO.setPeripheralsFunction(caseHandleInfoDTO.getPeripheralsFunction());
				srmCaseHandleInfoDTO.setPeripheralsFunction2(caseHandleInfoDTO.getPeripheralsFunction2());
				srmCaseHandleInfoDTO.setPeripheralsFunction3(caseHandleInfoDTO.getPeripheralsFunction3());
				srmCaseHandleInfoDTO.setEcrConnection(caseHandleInfoDTO.getEcrConnection());
				srmCaseHandleInfoDTO.setConnectionType(caseHandleInfoDTO.getConnectionType());
				
				srmCaseHandleInfoDTO.setLogoStyle(caseHandleInfoDTO.getLogoStyle());
				srmCaseHandleInfoDTO.setIsOpenEncrypt(caseHandleInfoDTO.getIsOpenEncrypt());
				srmCaseHandleInfoDTO.setElectronicInvoice(caseHandleInfoDTO.getElectronicInvoice());
				srmCaseHandleInfoDTO.setElectronicPayPlatform(caseHandleInfoDTO.getElectronicPayPlatform());
				srmCaseHandleInfoDTO.setCupQuickPass(caseHandleInfoDTO.getCupQuickPass());
				srmCaseHandleInfoDTO.setLocalhostIp(caseHandleInfoDTO.getLocalhostIp());
				srmCaseHandleInfoDTO.setNetVendorId(caseHandleInfoDTO.getNetVendorId());
				srmCaseHandleInfoDTO.setGateway(caseHandleInfoDTO.getGateway());
				srmCaseHandleInfoDTO.setNetmask(caseHandleInfoDTO.getNetmask());
				//srmCaseHandleInfoDTO.setDescription(caseHandleInfoDTO.getDescription());
				
				srmCaseHandleInfoDTO.setAttendanceTimes(0);
				srmCaseHandleInfoDTO.setIsSingle(true);
				srmCaseHandleInfoDTO.setInstallCompleteDate(caseHandleInfoDTO.getInstallCompleteDate());
				srmCaseHandleInfoDTO.setInstallCaseId(caseHandleInfoDTO.getInstallCaseId());
				srmCaseHandleInfoDTO.setInstalledPostCode(caseHandleInfoDTO.getInstalledPostCode());
				LOGGER.debug("buildCaseByApi() -->InstallCompleteDate="+caseHandleInfoDTO.getInstallCompleteDate());
				LOGGER.debug("buildCaseByApi() -->InstallCaseId="+caseHandleInfoDTO.getInstallCaseId());
				LOGGER.debug("buildCaseByApi() -->InstalledPostCode="+caseHandleInfoDTO.getInstalledPostCode());
				List<SrmCaseNewTransactionParameterDTO> caseNewTransactionParameterDTOs =  this.srmCaseNewTransactionParameterDAO.getTransactionParameterDTOsByDtid(srmCaseHandleInfoDTO.getDtid(), isNewHave);
				List<SrmCaseTransactionParameterDTO> caseTransactionParameterDTOs = new ArrayList<SrmCaseTransactionParameterDTO>();
				SrmCaseTransactionParameterDTO caseTransactionParameterDTO = null;
				for (SrmCaseNewTransactionParameterDTO srmCaseTransactionParameterDTO : caseNewTransactionParameterDTOs) {
					caseTransactionParameterDTO = (SrmCaseTransactionParameterDTO) transformer .transform(srmCaseTransactionParameterDTO, new SrmCaseTransactionParameterDTO());
					caseTransactionParameterDTOs.add(caseTransactionParameterDTO);
				}
				formDTO.setSrmCaseTransactionParameterDTOs(caseTransactionParameterDTOs);
				formDTO.setIsCmsCreate(IAtomsConstants.PARAM_YES);
				createCase(sessionContext);
				LOGGER.debug("buildCaseByApi() createCase end...");
			}
			
		} catch (DataAccessException e) {
			LOGGER.error("buildCaseByApi()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.UPLOAD_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("buildCaseByApi()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.UPLOAD_FAILURE, e);
		} 
		return sessionContext;
	}
	 /**
	 * Purpose: YYYYMMDD+A+3位流水碼組成
	 * @author tonychen
	 * @return String
	 *
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#createBatchNum(cafe.core.context.MultiParameterInquiryContext)
	 */
	@Override
	public String createBatchNum () throws ServiceException {				
		String yearMonthDay = DateTimeUtils.toString(DateTimeUtils.getCurrentDate(), DateTimeUtils.DT_FMT_YYYYMMDD);
		//流水號
		long id = this.getSequenceNumberControlDAO().getSeqNo(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_HANDLE_INFO_BATCH_NUM, yearMonthDay);
		if (id == 0) {
			id++;
		}
		String swiftNumber = StringUtils.toFixString(3, id);
		StringBuffer caseIdBuffer = new StringBuffer();
		//生成CaseId
		caseIdBuffer.append(yearMonthDay).append("A").append(swiftNumber);
		return caseIdBuffer.toString();
	}

	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#confirmAuthorizes(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext confirmAuthorizes(SessionContext sessionContext) throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = new IAtomsLogonUser();
		logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		Message msg = null;
		StringBuffer errorMsg = new StringBuffer();
		String message =  null;
		try {
			// 案件處理處理中資料DMO對象
			SrmCaseHandleInfo caseHandleInfo = null;
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if ((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)) {
				if(StringUtils.hasText(formDTO.getCaseId())){
					// 得到案件處理集合
					List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId());
					if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
						//Task #3336 call CMS API Task #3519
						Map<String, String> map = null;
						String api = "APIOP003";
						String json = null;
						ReceiveJobNoticeDTO jobNoticeDTO = null;
						Gson gson = new GsonBuilder().create();
						ReceiveJobNoticeDTO resultMsg = null;
						String tempMsg = null;
						String apiLogResult = null;
						List<SrmCaseHandleInfoDTO> successDto = new ArrayList<SrmCaseHandleInfoDTO>();
						String caseType = null;
						Map<String, String> callCmsMap = new HashMap<String, String>();
						String isProject = null;
						String isEcr = null;
						for(SrmCaseHandleInfoDTO dto : srmCaseHandleInfoDTOs){
							tempMsg = this.checkRequiredValue(dto, Boolean.FALSE);
							if (tempMsg.length() > 0) {
								LOGGER.debug("CaseManagerService --> confirmAuthorizes() --> ", "必填欄位爲null=" + tempMsg);
								errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), tempMsg}, null)).append("</br>");
								continue;
							}
							if (dto.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode())
									&& dto.getConfirmAuthorizes().equals(IAtomsConstants.NO)
									&& IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(dto.getInstallType())) {
								if (IAtomsConstants.TICKET_MODE_COMMON.equals(dto.getCaseType())) {
									caseType = "01";
								} else if (IAtomsConstants.TICKET_MODE_FAST.equals(dto.getCaseType())) {
									caseType = "02";
								} else if (IAtomsConstants.TICKET_MODE_EXTRA.equals(dto.getCaseType())) {
									caseType = "03";
								} else if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(dto.getCaseType())) {
									caseType = "04";
								}
								
								if (IAtomsConstants.NO.equals(dto.getIsProject())) {
									isProject = "0";
								} else if (IAtomsConstants.YES.equals(dto.getIsProject())) {
									isProject = "1";
								}
								
								if (IAtomsConstants.CASE_PARAM_NO_ECR_LINE.equals(dto.getEcrConnection())) {
									isEcr = "0";
								} else if (IAtomsConstants.CASE_PARAM_HAVE_ECR_LINE.equals(dto.getEcrConnection())) {
									isEcr = "1";
								}
								jobNoticeDTO = new ReceiveJobNoticeDTO(dto.getMerMid(), dto.getCaseId(), dto.getDtid(), "01", dto.getCustomerName(), 
									dto.getMerchantName(), dto.getTid(), dto.getUnityNumber(), dto.getContact(), dto.getContactTel(),
									dto.getContactEmail(), dto.getLocationName(), dto.getBusinessAddress(), dto.getPhone(), dto.getAoName(), dto.getAoemail(), dto.getEdcTypeName(),
									dto.getContactAreaCode(), dto.getContactPostArea(), caseType, isProject, isEcr, dto.getInstalledAdressLocationName(),
									dto.getInstallContactAreaCode(), dto.getInstallContactAreaName(), dto.getInstalledAddress(), dto.getInstalledContact(),
									dto.getInstalledContactPhone(), dto.getInstalledContactMobilePhone(), dto.getInstalledContactEmail());
								json = gson.toJson(jobNoticeDTO);
								LOGGER.debug("CaseManagerService --> confirmAuthorizes() --> ", "json=" + json);
								map =  NetUtil.sendHtppsNew(api, json);
								if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
									message = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
								}
								if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
									apiLogResult = "true";
								} else {
									apiLogResult = "false";
								}
								LOGGER.debug("CaseManagerService --> confirmAuthorizes() --> ", "message=" + message);
								//上行(RQ)
								this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, json);
								if (StringUtils.hasText(message)) {
									Object responseJson = (Object) gson.fromJson(message, Object.class);
									LOGGER.debug("CaseManagerService --> confirmAuthorizes() --> ", "responseJson=" + responseJson);
									resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
									LOGGER.debug("CaseManagerService --> confirmAuthorizes() --> ", "resultMsg=" + resultMsg.getRESULT_MSG());
									if (resultMsg.getRESULT().equals("True")) {
										successDto.add(dto);
										callCmsMap.put(dto.getCaseId(), message);
									} else {
										errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
										apiLogResult = "false";
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), message);
									}
								} else {
									LOGGER.debug("CaseManagerService --> confirmAuthorizes() --> ", "save error!!!", "message is null");
									tempMsg = i18NUtil.getName(IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CONFIRM_AUTHORIZES)}, null);
									errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), tempMsg}, null)).append("</br>");
									apiLogResult = "false";
									//下行(RS)
									this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
								}
							}
						}
						if (!CollectionUtils.isEmpty(successDto)) {
							for (SrmCaseHandleInfoDTO dto : successDto) {
								caseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, dto.getCaseId());
								if (caseHandleInfo != null) {
									caseHandleInfo.setConfirmAuthorizes(IAtomsConstants.YES);
									caseHandleInfo.setUpdatedById(logonUser.getId());
									caseHandleInfo.setUpdatedByName(logonUser.getName());
									caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
									this.srmCaseHandleInfoDAO.update(caseHandleInfo);
								}
								//新增一筆歷程
								//新增一筆歷程
								SrmCaseTransaction caseTransaction = new SrmCaseTransaction();
								// 放置案件動作
								caseTransaction.setActionId(IAtomsConstants.CASE_ACTION.CONFIRM_AUTHORIZES.getCode());
								// 放置案件狀態
								caseTransaction.setCaseStatus(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode());
								caseTransaction.setDealById(logonUser.getId());
								caseTransaction.setDealByName(logonUser.getName());
								/*description = srmCaseTransactionDTO.getDescription();
								if (StringUtils.hasText(description)) {
									description = description + "\n" + i18NUtil.getName(IAtomsConstants.FIELD_SRM_PAYMENT_INFO_PAUMENT_ID) + ":" + paymentInfo.getPaymentId();
								} else {
									description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_PAYMENT_INFO_PAUMENT_ID) + ":" + paymentInfo.getPaymentId();
								}*/
								caseTransaction.setDealDate(DateTimeUtils.getCurrentTimestamp());
								caseTransaction.setExpectedCompletionDate(DateTimeUtils.getCurrentTimestamp());
								caseTransaction.setDescription(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CONFIRM_AUTHORIZES_SUCCESS));
								caseTransaction.setCaseId(dto.getCaseId());
								caseTransaction.setTransactionId(this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION));
								caseTransaction.setCreatedById(logonUser.getId());
								caseTransaction.setCreatedByName(logonUser.getName());
								caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
								this.srmCaseTransactionDAO.insert(caseTransaction);
								//Task #3519 存儲下行電文 要有案件歷程id
								if(callCmsMap.containsKey(dto.getCaseId())){
									apiLogResult = "true";
									this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), caseTransaction.getTransactionId(), logonUser, apiLogResult, null, callCmsMap.get(dto.getCaseId()));
								}
							}
							if (errorMsg.length() > 0) {
								msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{errorMsg.toString()});
								Map tempMap = new HashMap();
								tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
								sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
							} else {
								msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_CMS_CONFIRM_AUTHORIZES_SUCCESS);
							}
						} else {
							msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{errorMsg.toString()});
						}
					} else {
						LOGGER.error("CaseManagerService --> complete() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CONFIRM_AUTHORIZES)});
					}
				} else {
					LOGGER.error("CaseManagerService --> complete() --> ", "save error!!!", "caseId is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CONFIRM_AUTHORIZES)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> confirmAuthorizes() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CONFIRM_AUTHORIZES)});
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error("CaseManagerService --> confirmAuthorizes() --> ", "message=" + message);
			LOGGER.error(this.getClass().getName() + ".confirmAuthorizes(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error("CaseManagerService --> confirmAuthorizes() --> ", "message=" + message);
			LOGGER.error(this.getClass().getName() + ".confirmAuthorizes(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	
	private String checkRequiredValue(SrmCaseHandleInfoDTO dto, boolean isCancel)  throws ServiceException {
		StringBuffer errorMsg = new StringBuffer();
		try {
			//for (SrmCaseHandleInfoDTO dto : srmCaseHandleInfoDTOs) {
				//核減【案件編號】是否有值
				if (!StringUtils.hasText(dto.getCaseId())) {
					errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_ID)}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
				}
				//核減【特店代號】是否有值
				if (!StringUtils.hasText(dto.getMerMid())) {
					errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_MERCHANT_CODE)}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
				}
				//核減【客戶】是否有值
				if (!StringUtils.hasText(dto.getCustomerName())) {
					errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CUSTOMER_ID)}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
				}
				//核減【DTID】是否有值
				if (!StringUtils.hasText(dto.getDtid())) {
					errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DTID)}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
				}
				//核減【TID】是否有值
				if (!StringUtils.hasText(dto.getTid())) {
					errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{"TID"}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
				}
				//核檢案件類型
				if (!StringUtils.hasText(dto.getCaseType())) {
					errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_CASE_TYPE)}, null))
					.append(IAtomsConstants.MARK_SEPARATOR);
				}
				if (!isCancel) {
					//核減【聯絡人】是否有值
					if (!StringUtils.hasText(dto.getContact())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_CONTACT)}, null))
							.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核減【聯絡人電話】是否有值
					if (!StringUtils.hasText(dto.getContactTel())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_CMS_CONTACT_TEL)}, null))
							.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核減【聯絡人Email】是否有值
					if (!StringUtils.hasText(dto.getContactEmail())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_CONTACT_EMAIL)}, null))
							.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核減【聯絡人Location】是否有值
					if (!StringUtils.hasText(dto.getLocationName())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_LOCATION)}, null))
							.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核減【聯絡人Location】是否有值
					if (!StringUtils.hasText(dto.getBusinessAddress())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_ADDRESS)}, null))
							.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核減【聯絡人手機】是否有值
					if (!StringUtils.hasText(dto.getPhone())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_BIM_MERCHANT_HEADER_PHONE)}, null))
							.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核檢【裝機案件-縣市】是否有值
					if (!StringUtils.hasText(dto.getInstalledAdressLocationName())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_LOCATION)}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核檢【裝機案件-郵遞區號】是否有值
					if (!StringUtils.hasText(dto.getInstallContactAreaCode())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_POST_CODE)}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核檢【裝機案件-郵遞區域】是否有值
					if (!StringUtils.hasText(dto.getInstallContactAreaName())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_AREA_NAME)}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核檢【裝機案件-地址】是否有值
					if (!StringUtils.hasText(dto.getInstalledAddress())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_ADRESS)}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核檢【裝機案件-聯絡人】是否有值
					if (!StringUtils.hasText(dto.getInstalledContact())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT)}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核檢【裝機案件-聯絡電話】是否有值
					if (!StringUtils.hasText(dto.getInstalledContactPhone())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_PHONE)}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核檢【裝機案件-聯絡行動電話】是否有值
					if (!StringUtils.hasText(dto.getInstalledContactMobilePhone())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_MOBILE_PHONE)}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
					}
					//核檢【裝機案件-聯絡EMAIL】是否有值
					if (!StringUtils.hasText(dto.getInstalledContactEmail())) {
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_INSTALLED_CONTACT_EMAIL)}, null))
						.append(IAtomsConstants.MARK_SEPARATOR);
					}
				}
			//}
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".checkRequiredValue(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		if (errorMsg.length() > 0) {
			return errorMsg.substring(0, errorMsg.length() - 1);
		} else {
			return errorMsg.toString();
		}
	}
	
	/**
	 * TMS參數POST
	 * @author tonychen
	 * @return map
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#TMSPost(cafe.core.context.MultiParameterInquiryContext)
	 */
	public Map TMSPost(MultiParameterInquiryContext param) { 
		 
		Map map = new HashMap();
		 boolean doSuccess = false; 
		 String result = "";
		 String msg = ""; 
		 
		 java.io.BufferedWriter wr = null; 
		 try { 
			  //加上"="以解決Ajax跨域問題
			  String data = "=" + (String) param.getParameter("paraContent");
			  String remoteAddr = (String) param.getParameter("remoteAddr");
			  String caseId = (String) param.getParameter("caseId");
			  String createdByName = (String) param.getParameter("createdByName");
			  String createdById = (String) param.getParameter("createdById");
			  String ucNo = (String) param.getParameter("ucNo");
			  
		      //上文寫入API_LOG
			  ApiLogDTO apiLogDTO = new ApiLogDTO();
			  apiLogDTO.setId(this.generateGeneralUUID("API_LOG"));
			  apiLogDTO.setIp(remoteAddr);
			  apiLogDTO.setClientCode(IAtomsConstants.TMS);
			  apiLogDTO.setFunctionCode(ucNo);
			  apiLogDTO.setMsgType(IAtomsConstants.RQ);
			  apiLogDTO.setMessage(data);
			  apiLogDTO.setFailReasonDesc(msg);
			  apiLogDTO.setResult(result);
			  apiLogDTO.setMasterId(caseId);
			  apiLogDTO.setCreatedById(createdById);
			  apiLogDTO.setCreatedByName(createdByName);
			  apiLogDTO.setCreatedDate(new Timestamp(System.currentTimeMillis()));
			  Transformer transformer = new SimpleDtoDmoTransformer();
			  ApiLog apiLog = null;
			  apiLog = (ApiLog)transformer.transform(apiLogDTO, new ApiLog());			  
			  this.apiLogDAO.getDaoSupport().save(apiLog); 

			  //從system.config取得TMS API URL
			  URL url = new URL(SystemConfigManager.getProperty("TMSURL")); 
			  HttpURLConnection URLConn = (HttpURLConnection) url.openConnection(); 		 
			  URLConn.setDoOutput(true); 
			  URLConn.setDoInput(true); 
			  ((HttpURLConnection) URLConn).setRequestMethod("POST"); 
			  URLConn.setUseCaches(false); 
			  URLConn.setAllowUserInteraction(true); 
			  HttpURLConnection.setFollowRedirects(true); 
			  URLConn.setInstanceFollowRedirects(true); 		 
			  URLConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
			  URLConn.setRequestProperty("Content-Length", String.valueOf(data.getBytes().length)); 		      
      
			  java.io.DataOutputStream dos = new java.io.DataOutputStream(URLConn.getOutputStream()); 
			  //dos.writeBytes(data); 
			  dos.write(data.getBytes("utf-8"));
      
			  java.io.BufferedReader rd = new java.io.BufferedReader(new java.io.InputStreamReader(URLConn.getInputStream(),"utf-8"));  
			  String line = "";		
			  if((line = rd.readLine()) != null) { 
		    	 doSuccess = true;	    
			  } 		 
			  rd.close(); 
		    
		      //使用GSON拆解json	  
		      JsonObject j = new JsonParser().parse(line).getAsJsonObject();
		      result = j.get("result").toString();
		      msg = j.get("msg").toString().replaceAll("\"","");
		    
		      //下文寫入API_LOG
			  apiLogDTO = new ApiLogDTO();
			  apiLogDTO.setId(this.generateGeneralUUID("API_LOG"));
			  apiLogDTO.setIp(remoteAddr);
			  apiLogDTO.setClientCode(IAtomsConstants.TMS);
			  apiLogDTO.setFunctionCode(ucNo);
			  apiLogDTO.setMsgType(IAtomsConstants.RS);
			  apiLogDTO.setMessage(line);
			  apiLogDTO.setFailReasonDesc(msg);
			  apiLogDTO.setResult(result);
			  apiLogDTO.setMasterId(caseId);
			  apiLogDTO.setCreatedById(createdById);
			  apiLogDTO.setCreatedByName(createdByName);
			  apiLogDTO.setCreatedDate(new Timestamp(System.currentTimeMillis()));
			  transformer = new SimpleDtoDmoTransformer();
			  apiLog = null;
			  apiLog = (ApiLog)transformer.transform(apiLogDTO, new ApiLog());			  
			  this.apiLogDAO.getDaoSupport().save(apiLog); 
		    } catch (java.io.IOException e) { 
		        doSuccess = false; 
		        msg = "系統錯誤";
		        LOGGER.error(this.getClass().getName() + ".TMSPost()" + e, e);
		        //new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);		 
		    } catch (Exception e) {
		    	doSuccess = false;
		    	 msg = "系統錯誤";
				LOGGER.error(this.getClass().getName() + ".TMSPost()" + e, e);
				//throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED,e);
			} finally { 
		      if (wr != null) { 
		        try { 
		          wr.close(); 		            
		        } catch (java.io.IOException ex) { 
		        	doSuccess = false;
		        	LOGGER.error(this.getClass().getName() + ".TMSPost() Exception:" + ex, ex);
		        } 
		        wr = null; 
		      } 
		    } 
		    map.put(IAtomsConstants.PARAM_FLAG,doSuccess);
		    map.put("result",result);
		    map.put("msg",msg);
		    return map; 
		  } 
	
	/**
	 * TMS整批參數匯入
	 * @author tonychen
	 * @return map
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#TMSParaContents(cafe.core.context.MultiParameterInquiryContext)
	 */
	public Map TMSParaContents(MultiParameterInquiryContext param) { 
		 
		 Map map = new HashMap();
		 boolean postSuccess = false; 
		 String result = "";
		 String resultMsg = "";
		 boolean messageSize = false;//false = small; true = big // Message Alert視窗大小使用 

		 try { 		 
			  String caseIds = (String) param.getParameter("caseIds");
			  String remoteAddr = (String) param.getParameter("remoteAddr");
			  String batchNum = (String) param.getParameter("batchNum");
			  postSuccess = true;
			  
			  List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(caseIds, null);				
			  
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
					
					for (int i = 0; i < srmCaseHandleInfoDTOs.size(); i++) {
						
						SrmCaseHandleInfoDTO srmCaseHandleInfoDTO = null;
						srmCaseHandleInfoDTO = srmCaseHandleInfoDTOs.get(i);	
						
						try{
						
							TMSParameterDTO TMSparameterDTO = new TMSParameterDTO();	

							TMSparameterDTO.batch_num = batchNum;
							TMSparameterDTO.CASE_ID = srmCaseHandleInfoDTO.getCaseId();				
							TMSparameterDTO.DTID = srmCaseHandleInfoDTO.getDtid();
							BimCompany company = (BimCompany) this.companyDAO.findByPrimaryKey(BimCompany.class, srmCaseHandleInfoDTO.getCustomerId());
							TMSparameterDTO.CUSTOMER_ID = company.getShortName();
							TMSparameterDTO.CASE_CATEGORY = "裝機";						
							if (IAtomsConstants.PARAM_INSTALL_TYPE_1.equals(srmCaseHandleInfoDTO.getInstallType())) {
								TMSparameterDTO.INSTALL_TYPE = "一般特店";
							}else if (IAtomsConstants.PARAM_INSTALL_TYPE_2.equals(srmCaseHandleInfoDTO.getInstallType())) {
								TMSparameterDTO.INSTALL_TYPE = "教育訓練機";
							}else if (IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(srmCaseHandleInfoDTO.getInstallType())) {
								TMSparameterDTO.INSTALL_TYPE = "微型商戶";
							}else{
								TMSparameterDTO.INSTALL_TYPE = "測試機";
							}
							BimMerchantHeader merchantHeader = this.merchantHeaderDAO.findByPrimaryKey(BimMerchantHeader.class, srmCaseHandleInfoDTO.getMerchantHeaderId());
							TMSparameterDTO.MERCHANT_HEADER_ID = merchantHeader.getHeaderName();
							TMSparameterDTO.INSTALLED_ADRESS_LOCATION = srmCaseHandleInfoDTO.getInstalledAdressLocationName();
							TMSparameterDTO.INSTALLED_ADRESS = srmCaseHandleInfoDTO.getInstalledAdress();
							TMSparameterDTO.IS_OPEN_ENCRYPT = srmCaseHandleInfoDTO.getIsOpenEncrypt().trim();
							TMSparameterDTO.ELECTRONIC_PAY_PLATFORM = srmCaseHandleInfoDTO.getElectronicPayPlatform().trim();
							TMSparameterDTO.EDC_TYPE = srmCaseHandleInfoDTO.getEdcTypeName();
							TMSparameterDTO.SOFTWARE_VERSION = srmCaseHandleInfoDTO.getSoftwareVersionName();
							if(!srmCaseHandleInfoDTO.getConnectionType().equals("")){
								TMSparameterDTO.CONNECTION_TYPE = srmCaseHandleInfoDTO.getConnectionTypeName();
							}else{
								TMSparameterDTO.CONNECTION_TYPE = srmCaseHandleInfoDTO.getConnectionType();
							}
							TMSparameterDTO.ECR_CONNECTION = srmCaseHandleInfoDTO.getEcrConnection();
							TMSparameterDTO.ELECTRONIC_INVOICE = srmCaseHandleInfoDTO.getElectronicInvoice().trim();
							if(!srmCaseHandleInfoDTO.getNetVendorId().equals("")){
								TMSparameterDTO.NET_VENDOR_ID = srmCaseHandleInfoDTO.getNetVendorName();
							}else{
								TMSparameterDTO.NET_VENDOR_ID = srmCaseHandleInfoDTO.getNetVendorId();
							}
							TMSparameterDTO.BUILT_IN_FEATURE = srmCaseHandleInfoDTO.getBuiltInFeature();
							if(!srmCaseHandleInfoDTO.getPeripherals().equals("")){
								TMSparameterDTO.PERIPHERALS = srmCaseHandleInfoDTO.getPeripheralsName();
							}else{
								TMSparameterDTO.PERIPHERALS = srmCaseHandleInfoDTO.getPeripherals();
							}
							if(!srmCaseHandleInfoDTO.getPeripheralsFunction().equals("")){
								TMSparameterDTO.PERIPHERALS_FUNCTION = srmCaseHandleInfoDTO.getPeripheralsFunctionName();
							}else{
								TMSparameterDTO.PERIPHERALS_FUNCTION = srmCaseHandleInfoDTO.getPeripheralsFunction();
							}
							if(!srmCaseHandleInfoDTO.getPeripherals2().equals("")){
								TMSparameterDTO.PERIPHERALS2 = srmCaseHandleInfoDTO.getPeripherals2Name();
							}else{
								TMSparameterDTO.PERIPHERALS2 = srmCaseHandleInfoDTO.getPeripherals2();
							}
							if(!srmCaseHandleInfoDTO.getPeripheralsFunction2().equals("")){
								TMSparameterDTO.PERIPHERALS_FUNCTION2 = srmCaseHandleInfoDTO.getPeripheralsFunction2Name();
							}else{
								TMSparameterDTO.PERIPHERALS_FUNCTION2 = srmCaseHandleInfoDTO.getPeripheralsFunction2();
							}
							if(!srmCaseHandleInfoDTO.getPeripherals3().equals("")){
								TMSparameterDTO.PERIPHERALS3 = srmCaseHandleInfoDTO.getPeripherals3Name();
							}else{
								TMSparameterDTO.PERIPHERALS3 = srmCaseHandleInfoDTO.getPeripherals3();
							}
							if(!srmCaseHandleInfoDTO.getPeripheralsFunction3().equals("")){
								TMSparameterDTO.PERIPHERALS_FUNCTION3 = srmCaseHandleInfoDTO.getPeripheralsFunction3Name();
							}else{
								TMSparameterDTO.PERIPHERALS_FUNCTION3 = srmCaseHandleInfoDTO.getPeripheralsFunction3();
							}
							TMSparameterDTO.CUP_QUICK_PASS = srmCaseHandleInfoDTO.getCupQuickPass().trim();
							TMSparameterDTO.DESCRIPTION = srmCaseHandleInfoDTO.getDescription();
							TMSparameterDTO.ACCOUNT = (String) param.getParameter("account");
							String ItemValue = "";
							SrmCaseTransactionParameterDTO srmcaseTransactionParameterDTO = null;						
							List<TMSTransactionParameterDTO> TMSTransactionparameterDTOs = new ArrayList<TMSTransactionParameterDTO>();
							List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(srmCaseHandleInfoDTO.getCaseId(), null);
						
							if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
								for (int j = 0; j < srmCaseTransactionParameterDTOs.size(); j++) {
									TMSTransactionParameterDTO TMSTransactionparameterDTO = new TMSTransactionParameterDTO();
									srmcaseTransactionParameterDTO = srmCaseTransactionParameterDTOs.get(j);					
									ItemValue = srmcaseTransactionParameterDTO.getItemValue();
																		
									if (ItemValue.indexOf("TSTID") > 0) {
										TMSTransactionparameterDTO.TSTID = SubStringMethod(ItemValue,"TSTID");
									}
									if (ItemValue.indexOf("TSMID") > 0) {
										TMSTransactionparameterDTO.TSMID = SubStringMethod(ItemValue,"TSMID");
									}
									if (ItemValue.indexOf("\"saleTransaction\":\"V\"") > 0) {
										TMSTransactionparameterDTO.saleTransaction = "V";
									} else {
										TMSTransactionparameterDTO.saleTransaction = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"cancelTransaction\":\"V\"") > 0) {
										TMSTransactionparameterDTO.cancelTransaction = "V";
									} else {
										TMSTransactionparameterDTO.cancelTransaction = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"checkoutTransaction\":\"V\"") > 0) {
										TMSTransactionparameterDTO.checkoutTransaction = "V";
									} else {
										TMSTransactionparameterDTO.checkoutTransaction = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"returnTransaction\":\"V\"") > 0) {
										TMSTransactionparameterDTO.returnTransaction = "V";
									} else {
										TMSTransactionparameterDTO.returnTransaction = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"manualInput\":\"V\"") > 0) {
										TMSTransactionparameterDTO.manualInput = "V";
									} else {
										TMSTransactionparameterDTO.manualInput = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"transactionFill\":\"V\"") > 0) {
										TMSTransactionparameterDTO.transactionFill = "V";
									} else {
										TMSTransactionparameterDTO.transactionFill = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"transactionFillOnline\":\"V\"") > 0) {
										TMSTransactionparameterDTO.transactionFillOnline = "V";
									} else {
										TMSTransactionparameterDTO.transactionFillOnline = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"openNumber\":\"V\"") > 0) {
										TMSTransactionparameterDTO.openNumber = "V";
									} else {
										TMSTransactionparameterDTO.openNumber = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"adjustmentAmount\":\"V\"") > 0) {
										TMSTransactionparameterDTO.adjustmentAmount = "V";
									} else {
										TMSTransactionparameterDTO.adjustmentAmount = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"preAuthorization\":\"V\"") > 0) {
										TMSTransactionparameterDTO.preAuthorization = "V";
									} else {
										TMSTransactionparameterDTO.preAuthorization = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"preAuthorized\":\"V\"") > 0) {
										TMSTransactionparameterDTO.preAuthorized = "V";
									} else {
										TMSTransactionparameterDTO.preAuthorized = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"cupCancelPreAuth\":\"V\"") > 0) {
										TMSTransactionparameterDTO.cupCancelPreAuth = "V";
									} else {
										TMSTransactionparameterDTO.cupCancelPreAuth = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"cupCancelPreAuthed\":\"V\"") > 0) {
										TMSTransactionparameterDTO.cupCancelPreAuthed = "V";
									} else {
										TMSTransactionparameterDTO.cupCancelPreAuthed = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"autoCall\":\"V\"") > 0) {
										TMSTransactionparameterDTO.autoCall = "V";
									} else {
										TMSTransactionparameterDTO.autoCall = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"autoCall\":\"V\"") > 0) {
										TMSTransactionparameterDTO.autoCall = "V";
									} else {
										TMSTransactionparameterDTO.autoCall = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"tipTransaction\":\"V\"") > 0) {
										TMSTransactionparameterDTO.tipTransaction = "V";
									} else {
										TMSTransactionparameterDTO.tipTransaction = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"4DBC\":\"V\"") > 0) {
										TMSTransactionparameterDTO._4DBC = "V";
									} else {
										TMSTransactionparameterDTO._4DBC = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("branch") > 0) {
										TMSTransactionparameterDTO.branch = SubStringMethod(ItemValue,"branch");
									}
									if (ItemValue.indexOf("MCC") > 0) {
										TMSTransactionparameterDTO.MCC = SubStringMethod(ItemValue,"MCC");
									}
									if (ItemValue.indexOf("\"veps\":\"V\"") > 0) {
										TMSTransactionparameterDTO.veps = "V";
									} else {
										TMSTransactionparameterDTO.veps = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"master\":\"V\"") > 0) {
										TMSTransactionparameterDTO.master = "V";
									} else {
										TMSTransactionparameterDTO.master = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"jcb\":\"V\"") > 0) {
										TMSTransactionparameterDTO.jcb = "V";
									} else {
										TMSTransactionparameterDTO.jcb = IAtomsConstants.MARK_EMPTY_STRING;
									}
									if (ItemValue.indexOf("\"cup\":\"V\"") > 0) {
										TMSTransactionparameterDTO.cup = "V";
									} else {
										TMSTransactionparameterDTO.cup = IAtomsConstants.MARK_EMPTY_STRING;
									}
									TMSTransactionparameterDTO.transactionType = srmcaseTransactionParameterDTO.getTransactionType();
									TMSTransactionparameterDTO.transactionTypeName = srmcaseTransactionParameterDTO.getTransactionTypeName();
									TMSTransactionparameterDTO.MID = srmcaseTransactionParameterDTO.getMerchantCode();
									TMSTransactionparameterDTO.MID2 = srmcaseTransactionParameterDTO.getMerchantCodeOther();
									TMSTransactionparameterDTO.TID = srmcaseTransactionParameterDTO.getTid();
									
									TMSTransactionparameterDTOs.add(TMSTransactionparameterDTO);
								}
								TMSparameterDTO.TXParam = TMSTransactionparameterDTOs;						
							}							
							Gson gson = new Gson();
							String TMSparameter = gson.toJson(TMSparameterDTO).replace("_4DBC", "4DBC");
						
							MultiParameterInquiryContext TMSPOSTparam = new MultiParameterInquiryContext();	
							//API_LOG 交易主檔ID	MASTER_ID
							TMSPOSTparam.addParameter("caseId",  srmCaseHandleInfoDTO.getCaseId());	
							TMSPOSTparam.addParameter("paraContent", TMSparameter);
							TMSPOSTparam.addParameter("remoteAddr",  remoteAddr);	
							//API_LOG 新增人員姓名	CREATED_BY_NAME
							TMSPOSTparam.addParameter("createdByName", (String) param.getParameter("createdByName"));
							//API_LOG 新增人員帳號	CREATED_BY_ID
							TMSPOSTparam.addParameter("createdById",  (String) param.getParameter("createdById"));	
							//API_LOG 功能代碼	FUNCTION_CODE
							TMSPOSTparam.addParameter("ucNo",  (String) param.getParameter("ucNo"));	
														
							//發送TMS參數資料至API
							map = this.TMSPost(TMSPOSTparam);
							postSuccess = postSuccess && (Boolean) map.get(IAtomsConstants.PARAM_FLAG);												
							//result = (String) map.get("result")=="0"? "匯入成功 /":"匯入失敗 / ";
							result = (String) map.get("result");
							result = result.equals("0")?"匯入成功 /":"匯入失敗 /";
							if(srmCaseHandleInfoDTOs.size()>1){
								messageSize = true;		
								resultMsg += "項次" + String.valueOf(i+1) + "." + (i>=9?"":"&nbsp;&nbsp;") + "案件編號: " + srmCaseHandleInfoDTO.getCaseId() + "," + "&nbsp;" + "結果: " + result + (String) map.get("msg") + "<br/>";								
								//resultMsg += "項次" + String.valueOf(i+1) + "." + "<br/>" + "&nbsp;" + "&nbsp;" + "案件編號: " + srmCaseHandleInfoDTO.getCaseId() + "<br/>" + "&nbsp;" + "&nbsp;" + "結果: " + result + (String) map.get("msg") + "<br/>";
								//resultMsg += "項次" + String.valueOf(i+1) + "." + "\r\n" +  "  案件編號: " + srmCaseHandleInfoDTO.getCaseId() + "\r\n" + "  結果: " + result + (String) map.get("msg") + "\r\n";
							}else{
								resultMsg = result + (String) map.get("msg");
							}
						}catch (Exception e){
							resultMsg += "項次" + String.valueOf(i+1) + "." + (i>=9?"":"&nbsp;&nbsp;") + "案件編號: " + srmCaseHandleInfoDTO.getCaseId() + "," + "&nbsp;" + "結果: 系統錯誤，匯入失敗" + "<br/>";
						}
					}
				}else{
					postSuccess = false;
					resultMsg = "匯入失敗，沒有案件資料，請重新執行";
				}
		    } catch (Exception e) {
		    	messageSize = true;
		    	postSuccess = false;
		    	//resultMsg = resultMsg.equals("")?"無":resultMsg;
		    	resultMsg = "執行成功如以下:" + "<br/>" + (resultMsg.equals("")?"無":resultMsg);
				LOGGER.error(this.getClass().getName() + ".TMSParaContents()" + e, e);
			}
		    map.put(IAtomsConstants.PARAM_FLAG,postSuccess);
		    map.put("resultMsg",resultMsg);
		    map.put("messageSize",messageSize);
		    return map; 
		  } 
	
	/*	 
	 * TonyChen 20180508
	 * method:TMSParaContents - 處理字串方法
	 */
	public String SubStringMethod(String ItemValue, String keyWord) throws ServiceException {
		
		String stringResult = "";//擷取結果
		int BeginIndex = 0;//找到參數名稱
		int ValueBeginIndex = 0;//找到參數名稱第一個"起始點
		int ValueEndIndex = 0;//找到參數名稱下一個"終點
		
		BeginIndex = ItemValue.indexOf(keyWord);
		ValueBeginIndex = ItemValue.indexOf('"',BeginIndex + 1);
		ValueEndIndex = ItemValue.indexOf('"',ValueBeginIndex + 3);		
		if(ValueEndIndex-ValueBeginIndex>3){
			stringResult = ItemValue.substring(ValueBeginIndex + 3 ,ValueEndIndex);
		} else {
			stringResult = IAtomsConstants.MARK_EMPTY_STRING;
		}	
		return stringResult;
	}

	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#arrivalInspection(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext arrivalInspection(SessionContext sessionContext) throws ServiceException {
		try {
			payment(sessionContext);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".arrivalInspection(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".arrivalInspection(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	
		}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#payment(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext payment(SessionContext sessionContext) throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		Message msg = null;
		String message = null;
		String json = null;
		try {
			// 案件處理記錄主鍵id
			String transactionId = null;
			// 案件處理記錄DMO對象
			SrmCaseTransaction caseTransaction = null;
			// 案件處理記錄DTO對象
			SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
			// dto/dmo轉換對象
			Transformer transformer = new SimpleDtoDmoTransformer();
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if ((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)) {
				if(StringUtils.hasText(formDTO.getCaseId())){
					// 實際執行時間處理
					if(srmCaseTransactionDTO.getDealDate() == null) {
						srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
					}
					// 得到案件處理集合
					// 得到案件處理集合
					List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = (List<SrmCaseHandleInfoDTO>) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT);
					if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
						String caseCategory = null;
						String api = null;
						Gson gson = new GsonBuilder().create();
						ReceiveJobNoticeDTO resultMsg = new ReceiveJobNoticeDTO();
						ReceiveJobNoticeDTO jobNoticeDTO = null;
						StringBuffer errorMsg = new StringBuffer();
						String tempMsg = null;
						//記錄需要保存的求償主檔信息
						Map<String, SrmPaymentInfo> infoMap = new HashMap<String, SrmPaymentInfo>();
						//記錄需要保存的求償副檔信息
						Map<String, List<SrmPaymentItem>> itemMap = new HashMap<String, List<SrmPaymentItem>>();
						//記錄需要保存的案件歷程信息
						Map<String, SrmCaseTransaction> transactionMap = new HashMap<String, SrmCaseTransaction>();
						//記錄需要異動的案件信息
						Map<String, SrmCaseHandleInfo> caseInfoMap = new HashMap<String, SrmCaseHandleInfo>();
						//判斷是否有CMS案件
						SrmPaymentInfo paymentInfo = null;
						String paymentId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_PAYMENT_INFO);
						String itemId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_PAYMENT_ITEM);
						// 案件處理記錄主鍵id
						transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
						int i = 1;
						int j = 1;
						int m = 1;
						// 實際執行時間處理
						if(srmCaseTransactionDTO.getDealDate() == null){
							srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
						}
						SrmCaseHandleInfo caseHandleInfo = null;
						StringBuffer tempCaseId = new StringBuffer();
						String description = null;
						List<SrmPaymentItem> paymentItems = new ArrayList<SrmPaymentItem>();
						for(SrmCaseHandleInfoDTO dto : srmCaseHandleInfoDTOs){
							//新增求償記錄
							paymentInfo = new SrmPaymentInfo();
							paymentInfo.setPaymentId(paymentId + "_" + Integer.toString(i++));
							paymentInfo.setCaseId(dto.getCaseId());
							paymentInfo.setRequirementNo(dto.getRequirementNo());
							paymentInfo.setCustomerId(dto.getCustomerId());
							paymentInfo.setDtid(dto.getDtid());
							paymentInfo.setTid(dto.getTid());
							paymentInfo.setMerchantId(dto.getMerchantCode());
							paymentInfo.setRealFinishDate(dto.getCompleteDate());
							paymentInfo.setCaseCreatedDate(dto.getCreatedDate());
							paymentInfo.setMerchantHeaderId(dto.getMerchantHeaderId());
							paymentInfo.setCreatedById(logonUser.getId());
							paymentInfo.setCreatedByName(logonUser.getName());
							paymentInfo.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							paymentInfo.setUpdatedById(logonUser.getId());
							paymentInfo.setUpdatedByName(logonUser.getName());
							paymentInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							paymentInfo.setIsCaseCreate(IAtomsConstants.YES);
							List<SrmCaseHandleInfoDTO> caseHandleInfoDTOs = this.srmCaseHandleInfoDAO.listBy(null, dto.getCustomerId(), 
									null, dto.getDtid(), null, null, dto.getCaseId(), SrmHistoryCaseHandleInfoDTO.ATTRIBUTE.CREATED_DATE.getValue(), null, -1, -1);
							
							SrmPaymentItem srmPaymentItem = null;
							paymentItems = new ArrayList<SrmPaymentItem>();
							if (CollectionUtils.isEmpty(caseHandleInfoDTOs)) {
								List<SrmCaseAssetLinkDTO> assetLinkDTOs = this.srmCaseAssetLinkDAO.listByCaseId(dto.getCaseId(), Integer.toString(20), Boolean.TRUE, Boolean.FALSE);
								if (!CollectionUtils.isEmpty(assetLinkDTOs)) {
									for (SrmCaseAssetLinkDTO linkDto : assetLinkDTOs) {
										srmPaymentItem = new SrmPaymentItem();
										srmPaymentItem.setItemName(linkDto.getItemId());
										srmPaymentItem.setSerialNumber(linkDto.getSerialNumber());
										srmPaymentItem.setContractId(linkDto.getContractId());
										srmPaymentItem.setPaymentItem(IAtomsConstants.PAYMENT_ITEM_ASSET);
										srmPaymentItem.setPaymentId(paymentInfo.getPaymentId());
										srmPaymentItem.setItemId(itemId + "_" + Integer.toString(j++));
										srmPaymentItem.setUpdatedById(logonUser.getId());
										srmPaymentItem.setUpdatedByName(logonUser.getName());
										srmPaymentItem.setStatus(IAtomsConstants.DATA_STATUS_CREATE);
										srmPaymentItem.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
										paymentItems.add(srmPaymentItem);
									}
								}
							} else {
								for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : caseHandleInfoDTOs) {
									srmPaymentItem = new SrmPaymentItem();
									srmPaymentItem.setItemName(srmCaseHandleInfoDTO.getAssetTypeId());
									srmPaymentItem.setSerialNumber(srmCaseHandleInfoDTO.getSerialNumber());
									srmPaymentItem.setContractId(srmCaseHandleInfoDTO.getContractId());
									srmPaymentItem.setPaymentItem(IAtomsConstants.PAYMENT_ITEM_ASSET);
									srmPaymentItem.setPaymentId(paymentInfo.getPaymentId());
									srmPaymentItem.setItemId(itemId + "_" + Integer.toString(j++));
									srmPaymentItem.setUpdatedById(logonUser.getId());
									srmPaymentItem.setUpdatedByName(logonUser.getName());
									srmPaymentItem.setStatus(IAtomsConstants.DATA_STATUS_CREATE);
									srmPaymentItem.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
 									paymentItems.add(srmPaymentItem);
								}
							}
							//新增一筆歷程
							caseTransaction = new SrmCaseTransaction();
							transformer.transform(srmCaseTransactionDTO, caseTransaction);
							// 放置案件動作
							caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
							// 放置案件狀態
							caseTransaction.setCaseStatus(dto.getCaseStatus());
							caseTransaction.setDealById(srmCaseTransactionDTO.getDealById());
							caseTransaction.setDealByName(srmCaseTransactionDTO.getDealByName());
							description = srmCaseTransactionDTO.getDescription();
							if (StringUtils.hasText(description)) {
								description = description + "\n" + i18NUtil.getName(IAtomsConstants.FIELD_SRM_PAYMENT_INFO_PAUMENT_ID) + ":" + paymentInfo.getPaymentId();
							} else {
								description = i18NUtil.getName(IAtomsConstants.FIELD_SRM_PAYMENT_INFO_PAUMENT_ID) + ":" + paymentInfo.getPaymentId();
							}
							caseTransaction.setDescription(description);
							caseTransaction.setCaseId(dto.getCaseId());
							caseTransaction.setTransactionId(transactionId + "_" + Integer.toString(m++));
							caseTransaction.setCreatedById(logonUser.getId());
							caseTransaction.setCreatedByName(logonUser.getName());
							caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							//this.srmCaseTransactionDAO.insert(caseTransaction);
							// 更新案件處理消息
							caseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, dto.getCaseId());
							//CR #2869 新增三個欄位 2017/11/22
							caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
							caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
							caseHandleInfo.setFirstDescription(caseTransaction.getDescription());
							caseHandleInfo.setUpdatedById(logonUser.getId());
							caseHandleInfo.setUpdatedByName(logonUser.getName());
							caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							//this.srmCaseHandleInfoDAO.update(caseHandleInfo);
							infoMap.put(dto.getCaseId(), paymentInfo);
							itemMap.put(dto.getCaseId(), paymentItems);
							transactionMap.put(dto.getCaseId(), caseTransaction);
							caseInfoMap.put(dto.getCaseId(), caseHandleInfo);
						}
						//Task #3336 call CMS API Task #3519
						Map<String, String> map = null;
						//Task #3519
						String apiLogResult = null;
						for (SrmCaseHandleInfoDTO dto : srmCaseHandleInfoDTOs) {
							paymentInfo = infoMap.get(dto.getCaseId());
							paymentItems = itemMap.get(dto.getCaseId());
							caseTransaction = transactionMap.get(dto.getCaseId());
							caseHandleInfo = caseInfoMap.get(dto.getCaseId());
							message = null;
							if (IAtomsConstants.YES.equals(dto.getCmsCase()) &&
									(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(dto.getCaseCategory())
											|| IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(dto.getCaseCategory()))) {
								caseCategory = dto.getCaseCategory();
								if (IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseCategory)) {
									api = "APIOP005";
								} else {
									//如果爲iatoms自行建案，且未進行過派工。則不需call cms
									if (!IAtomsConstants.YES.equals(dto.getIsIatomsCreateCms()) || dto.getDispatchDate() != null) {
										api = "APIOP004";
									}
								}
								if (StringUtils.hasText(api)) {
									jobNoticeDTO = new ReceiveJobNoticeDTO("06", dto.getMerMid(), dto.getCaseId(), dto.getDtid(), paymentInfo.getPaymentId());
									json = gson.toJson(jobNoticeDTO);
									LOGGER.debug("CaseManagerService --> payment() --> ", "json=" + json);
									map =  NetUtil.sendHtppsNew(api, json);
									if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
										message = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
									}
									if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
										apiLogResult = "true";
									} else {
										apiLogResult = "false";
									}
									LOGGER.debug("CaseManagerService --> payment() --> ", "message=" + message);
									//上行(RQ)
									this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, json);
									if (StringUtils.hasText(message)) {
										Object responseJson = (Object) gson.fromJson(message, Object.class);
										resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
										if (!resultMsg.getRESULT().equals("True")) {
											errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
											apiLogResult = "false";
											//下行(RS)
											this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), message);
											continue;
										}/* else {
											errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
										}*/
									} else {
										LOGGER.debug("CaseManagerService --> payment() --> ", "save error!!!", "message is null");
										tempMsg = i18NUtil.getName(IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_PAYMENT)}, null);
										errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), tempMsg}, null)).append("</br>");
										apiLogResult = "false";
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
										continue;
									}
								}
							}
							this.paymentInfoDAO.save(paymentInfo);
							for (SrmPaymentItem item : paymentItems) {
								this.srmPaymentItemDAO.save(item);
							}
							this.srmCaseTransactionDAO.insert(caseTransaction);
							this.srmCaseHandleInfoDAO.update(caseHandleInfo);
							if (StringUtils.hasText(message)) {
								apiLogResult = "true";
								this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), caseTransaction.getTransactionId(), logonUser, apiLogResult, null, message);
							}
							tempCaseId.append(dto.getCaseId()).append(IAtomsConstants.MARK_SEPARATOR);
						}
						String caseId = null;
						if (tempCaseId.length() > 0) {
							caseId = tempCaseId.substring(0, tempCaseId.length() - 1);
						} else {
							caseId = tempCaseId.toString();
						}
						srmCaseTransactionDTO.setCaseId(caseId);
						formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
						formDTO.setCaseId(caseId);
						if (errorMsg.length() > 0) {
							Map tempMap = new HashMap();
							tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
							sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
							tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{errorMsg.substring(0, errorMsg.length() - 5)}, null);
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
						} else {
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_PAYMENT)});
						}
					} else {
						LOGGER.error("CaseManagerService --> complete() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_PAYMENT)});
					}
				} else {
					LOGGER.error("CaseManagerService --> complete() --> ", "save error!!!", "caseId is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_PAYMENT)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> complete() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_PAYMENT)});
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error("CaseManagerService --> payment() --> ", "json=" + json);
			LOGGER.error("CaseManagerService --> payment() --> ", "message=" + message);
			LOGGER.error(this.getClass().getName() + ".complete(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".complete(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	/** (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#leaseSign(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext leaseSign(SessionContext sessionContext) throws ServiceException {
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
		String ids = this.checkTransactionParam(srmCaseTransactionDTO.getCaseId());
		StringBuffer cmsErrorMsg = new StringBuffer();
		if (ids.length() != 0) {
			Message msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_CASE_NO_TRANS_PARAM, new String[]{ids});
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
			return sessionContext;
		}
		Message msg = null;
		// 主鍵id
		String transactionId = null;
		Map<String, Object> resultMap = this.validateCaseAction(formDTO);
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		String oldCaseStatus = IAtomsConstants.MARK_EMPTY_STRING;
		try {
			if(!(Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> leaseSign() --> ", "sign validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_LEASE_SIGN)});
				}
				sessionContext.setReturnMessage(msg);
				return sessionContext;
			}
			//動作
			SrmCaseHandleInfo caseHandleInfo = null;
			SrmCaseTransaction caseTransaction = null;
			String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
			String[] caseIds = null;
			Transformer transformer = new SimpleDtoDmoTransformer();
			// 最新交易參數信息
			List<SrmCaseNewTransactionParameterDTO> srmCaseNewTransactionParameterDTOs = null;
			// 當前交易參數信息
			List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = null;
			// 之前有CUP的標記
			//boolean oldCUP = false;
			// 當前有CUP標記
			boolean newCUP = false;
			// 問題原因code
			String problemReasonCode = null;
			String problemReason = null;
			// 問題解決方式code
			String problemSolutionCode = null;
			String problemSolution = null;
			String tid = null;
			//所選擇行所有的設備鏈接和耗材list
			List<SrmCaseAssetLinkDTO> srmCaseAssetLinkDTOAllList = formDTO.getSrmCaseAssetLinkDTO();
			//每一行的設備鏈接和耗材list (同一個caseid)
			List<SrmCaseAssetLinkDTO> srmCaseAssetLinkDTOList = null;
			//存放所選擇行所有的設備鏈接和耗材list的map key 是 caseid value 是 此caseid下的 耗材設備鏈接list
			Map<String, List<SrmCaseAssetLinkDTO>> srmCaseAssetLinkDTOListMap = new HashMap<String, List<SrmCaseAssetLinkDTO>>();
			for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : srmCaseAssetLinkDTOAllList) {
				if(CollectionUtils.isEmpty(srmCaseAssetLinkDTOListMap.get(srmCaseAssetLinkDTO.getCaseId()))) {
					srmCaseAssetLinkDTOList = new ArrayList<SrmCaseAssetLinkDTO>();
				} 
				srmCaseAssetLinkDTOList.add(srmCaseAssetLinkDTO);
				srmCaseAssetLinkDTOListMap.put(srmCaseAssetLinkDTO.getCaseId(), srmCaseAssetLinkDTOList);
			}
			formDTO.setSrmCaseAssetLinkDTOListMap(srmCaseAssetLinkDTOListMap);
			//要進行刪除操作的caseId組成的字符串
			String caseIdString= IAtomsConstants.MARK_EMPTY_STRING;
			//Task #3519 存儲call cms 成功的案件 key 為 caseid， value 為 下行電文
	    	Map<String, String> callCmsMap = new HashMap<String, String>();
			if(StringUtils.hasText(srmCaseTransactionDTO.getCaseId())){
				caseIds = srmCaseTransactionDTO.getCaseId().split(IAtomsConstants.MARK_SEPARATOR);
				if(caseIds != null){
					String newCaseId = "";
					ReceiveJobNoticeDTO receiveJobNoticeDTO = null;
					List<SrmCaseAssetLinkDTO> assetLinkDTOs = null;
					Boolean isEqualEdc = false;
					Boolean isEqualPeripherals = false;
					for (int i = 0; i < caseIds.length; i++) {
						isEqualEdc = false;
						isEqualPeripherals = false;
						//獲取案件主檔
						caseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseIds[i]);
						if (caseHandleInfo != null) {
							//Task #3390 核檢租賃預載輸入之SN是否與簽收相符
							if ((StringUtils.hasText(caseHandleInfo.getPreloadSerialNumber())
									|| StringUtils.hasText(caseHandleInfo.getSimSerialNumber()))
									&& !IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory())) {
								assetLinkDTOs = srmCaseAssetLinkDTOListMap.get(caseIds[i]);
								if (!CollectionUtils.isEmpty(assetLinkDTOs)) {
									for (SrmCaseAssetLinkDTO dto : assetLinkDTOs) {
										if (StringUtils.hasText(caseHandleInfo.getPreloadSerialNumber()) && caseHandleInfo.getPreloadSerialNumber().equals(dto.getSerialNumber())) {
											isEqualEdc = true;
										}
										if (StringUtils.hasText(caseHandleInfo.getSimSerialNumber()) && caseHandleInfo.getSimSerialNumber().equals(dto.getSerialNumber())) {
											isEqualPeripherals = true;
										}
									}
								}
							}
							if (StringUtils.hasText(caseHandleInfo.getPreloadSerialNumber()) && !isEqualEdc) {
								cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{caseHandleInfo.getCaseId(), i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_SERIAL_NUMBER_COMPARE_ERROR)}, null)).append("</br>");
								continue;
							}
							if (StringUtils.hasText(caseHandleInfo.getSimSerialNumber()) && !isEqualPeripherals) {
								cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{caseHandleInfo.getCaseId(), i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_SIM_ERIAL_NUMBER_COMPARE_ERROR)}, null)).append("</br>");
								continue;
							}
							if((IAtomsConstants.PARAM_YES.equals(caseHandleInfo.getCmsCase()))
									&&((IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory()))
											|| (IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(caseHandleInfo.getCaseCategory())))
											&& (!(caseHandleInfo.getIsIatomsCreateCms().equals(IAtomsConstants.PARAM_YES)
													&& caseHandleInfo.getDispatchDate() == null))){
								
								Gson gson = new Gson();
								ReceiveJobNoticeDTO resultMsg = null;
								String oldSerialNumber = srmCaseAssetLinkDTOListMap.get(caseHandleInfo.getCaseId()).get(0).getUninstallSerialNumber();
								if (StringUtils.hasText(oldSerialNumber)&& !oldSerialNumber.equals(srmCaseAssetLinkDTOListMap.get(caseHandleInfo.getCaseId()).get(0).getSerialNumber())) {
								} else {
									oldSerialNumber="";
								}
								//處理參數
								BimMerchant bimMerchant = this.merchantDAO.findByPrimaryKey(BimMerchant.class, caseHandleInfo.getMerchantCode());
								//ReceiveJobNoticeDTO receiveJobNoticeDTO = new ReceiveJobNoticeDTO("03", bimMerchant.getMerchantCode(), caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), "", "", srmCaseAssetLinkDTOListMap.get(caseHandleInfo.getCaseId()).get(0).getSerialNumber());
								
								String jsonString = null;
								//Task #3358 call CMS API
								String resultString = null;
								if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())) {
									receiveJobNoticeDTO = new ReceiveJobNoticeDTO("03", bimMerchant.getMerchantCode(), caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), srmCaseAssetLinkDTOListMap.get(caseHandleInfo.getCaseId()).get(0).getSerialNumber(), "");
								} else {
									receiveJobNoticeDTO = new ReceiveJobNoticeDTO("03", bimMerchant.getMerchantCode(), caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), srmCaseAssetLinkDTOListMap.get(caseHandleInfo.getCaseId()).get(0).getSerialNumber(), oldSerialNumber);
								}
								jsonString = gson.toJson(receiveJobNoticeDTO);
								LOGGER.debug("CaseManagerService --> leaseSign() --> ", "json=" + jsonString);
								Map<String, String> map = null;
								String apiLogResult = null;								
								//裝機 call APIOP002
								if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())) {
									map = NetUtil.sendHtppsNew("APIOP002", jsonString);
								//報修 call APIOP004
								} else {
									map = NetUtil.sendHtppsNew("APIOP004", jsonString);
								}
								if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
									resultString = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
								}
								if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
									apiLogResult = "true";
								} else {
									apiLogResult = "false";
								}
								LOGGER.debug("CaseManagerService --> leaseSign() --> ", "message=" + resultString);
								//上行(RQ)
								this.insertApiLog(IAtomsConstants.API_RQ, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, null, jsonString);
								if (StringUtils.hasText(resultString)) {
									Object responseJson = (Object) gson.fromJson(resultString, Object.class);
									LOGGER.debug("CaseManagerService --> leaseSign() --> ", "responseJson=" + responseJson);
									resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
									if (!("True".equals(resultMsg.getRESULT()))) {
										cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{caseHandleInfo.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
										apiLogResult = "false";
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), resultString);
										continue;
									} else {
										callCmsMap.put(caseHandleInfo.getCaseId(), resultString);
									}
								} else {
									LOGGER.debug("CaseManagerService --> leaseSign() --> ", "save error!!!", "message is null");
									apiLogResult = "false";
									cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{caseHandleInfo.getCaseId(), "cms請求失敗"}, null)).append("</br>");
									//下行(RS)
									this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfo.getCaseId(), null, logonUser, apiLogResult, null, "");
									continue;
								}
							}
							//拼接新的caseId
							newCaseId = newCaseId + caseHandleInfo.getCaseId() + IAtomsConstants.MARK_SEPARATOR;
							
							caseIdString += IAtomsConstants.SINGLE_QUOTATION_MARKS + caseHandleInfo.getCaseId() 
									+ IAtomsConstants.SINGLE_QUOTATION_MARKS + IAtomsConstants.MARK_SEPARATOR;
							//若此次循環為最後一次循環則將caseIds最後的一位逗號截取
							if (i == caseIds.length - 1) {
								caseIdString = caseIdString.substring(0, caseIdString.length() - 1);
							}
							
							if(!StringUtils.hasText(oldCaseStatus)){
								oldCaseStatus = caseHandleInfo.getCaseStatus();
							}
							problemReasonCode = null;
							problemSolutionCode = null;
							problemReason = null;
							problemSolution = null;
							// 問題原因code
							if(StringUtils.hasText(srmCaseTransactionDTO.getProblemReason())){
								if(srmCaseTransactionDTO.getProblemReason().indexOf(IAtomsConstants.MARK_MIDDLE_LINE) > 0){
									problemReasonCode = srmCaseTransactionDTO.getProblemReason().substring(0, srmCaseTransactionDTO.getProblemReason().indexOf(IAtomsConstants.MARK_MIDDLE_LINE));
									problemReason = srmCaseTransactionDTO.getProblemReason().replace(problemReasonCode + IAtomsConstants.MARK_MIDDLE_LINE, IAtomsConstants.MARK_EMPTY_STRING);
								}
							}
							// 問題解決方式code
							if(StringUtils.hasText(srmCaseTransactionDTO.getProblemSolution())){
								if(srmCaseTransactionDTO.getProblemSolution().indexOf(IAtomsConstants.MARK_MIDDLE_LINE) > 0){
									problemSolutionCode = srmCaseTransactionDTO.getProblemSolution().substring(0, srmCaseTransactionDTO.getProblemSolution().indexOf(IAtomsConstants.MARK_MIDDLE_LINE));
									problemSolution = srmCaseTransactionDTO.getProblemSolution().replace(problemSolutionCode + IAtomsConstants.MARK_MIDDLE_LINE, IAtomsConstants.MARK_EMPTY_STRING);
								}
							}
							//生成id
							transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
							if(!StringUtils.hasText(caseTransactionId)) {
								caseTransactionId = transactionId;
							} else {
								caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + transactionId;
							}
							formDTO.setCaseTransactionId(caseTransactionId);
							caseTransaction = new SrmCaseTransaction();
							transformer.transform(srmCaseTransactionDTO, caseTransaction);
							// 放置執行動作
							caseTransaction.setActionId(IAtomsConstants.CASE_ACTION.SIGN.getCode());
							// 放置案件狀態
							caseTransaction.setCaseStatus(srmCaseTransactionDTO.getCaseStatus());
							
							// 實際執行時間處理
							if(srmCaseTransactionDTO.getDealDate() == null){
								caseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
							} else {
								caseTransaction.setDealDate(srmCaseTransactionDTO.getDealDate());
							}
							// 描述說明
							caseTransaction.setCheckResult(srmCaseTransactionDTO.getCheckResult());
							caseTransaction.setProblemReason(problemReason);
							caseTransaction.setProblemSolution(problemSolution);
							caseTransaction.setResponsibity(srmCaseTransactionDTO.getResponsibity());
							//問題原因code
							caseTransaction.setProblemReasonCode(problemReasonCode);
							//問題解決方式code
							caseTransaction.setProblemSolutionCode(problemSolutionCode);
							List<SrmCaseAssetLinkDTO> SrmCaseAssetLinkDTOList = srmCaseAssetLinkDTOListMap.get(caseHandleInfo.getCaseId());
							StringBuilder builder = new StringBuilder();
							builder.append(srmCaseTransactionDTO.getDescription());
							// 設備異動資訊描述
							//Bug #2342 加換行符 --update by 2017/09/04
							if (StringUtils.hasText(srmCaseTransactionDTO.getDescription())) {
								builder.append(IAtomsConstants.MARK_WRAP);
							}
							builder.append(i18NUtil.getName(IAtomsMessageCode.ASSET_CHANGE_INFORMATION)).append(IAtomsConstants.MARK_COLON).append(IAtomsConstants.MARK_WRAP);
							//專案件 設備異動資訊: 原設備-EDC: XX, 序號:XX 原設備-週邊設備: XX, 序號:XX
							if(IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(srmCaseTransactionDTO.getCaseCategory())) {
								builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_CHECK_RESULT)).append(srmCaseTransactionDTO.getCheckResultName()).append(IAtomsConstants.MARK_WRAP);
							//報修件 問題原因: XX 解決方式: XX  責任歸屬: XX  設備異動資訊: 原設備-EDC: XX, 序號:XX  原設備-週邊設備: XX, 序號:XX
							} else if(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(srmCaseTransactionDTO.getCaseCategory())) {
								builder.append(i18NUtil.getName(IAtomsMessageCode.CASE_PROBLEM_REASON)).append(srmCaseTransactionDTO.getProblemReasonName()).append(IAtomsConstants.MARK_WRAP);
								builder.append(i18NUtil.getName(IAtomsMessageCode.CASE_PROBLEM_SOLUTION)).append(srmCaseTransactionDTO.getProblemSolutionName()).append(IAtomsConstants.MARK_WRAP);
								builder.append(i18NUtil.getName(IAtomsMessageCode.CASE_RESPONSIBITY)).append(srmCaseTransactionDTO.getResponsibityName()).append(IAtomsConstants.MARK_WRAP);
							}
							// 其他案件類別處理說明
							if(!CollectionUtils.isEmpty(SrmCaseAssetLinkDTOList)) {
								int count = 0;
								for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO : SrmCaseAssetLinkDTOList) {
									if(!IAtomsConstants.PARAM_CASE_LINK_SUPPLIES.equals(srmCaseAssetLinkDTO.getItemType())) {
										//裝機件: 設備異動資訊:新增-EDC: XX, 序號: XX  新增-週邊設備: XX, 序號: XX
										if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseTransactionDTO.getCaseCategory())) {
											// 新增EDC
											if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLinkDTO.getItemType())) {
												builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ADD_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
											}
											// 新增周邊
											if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS.equals(srmCaseAssetLinkDTO.getItemType()) || IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2.equals(srmCaseAssetLinkDTO.getItemType()) || IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3.equals(srmCaseAssetLinkDTO.getItemType())) {
												builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ADD_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
											}
											//異動/併機件/專案件/報修件(部分): 設備異動資訊: 原設備-EDC: XX, 序號: XX  原設備-週邊設備: XX, 序號: XX	
										} else if(IAtomsConstants.CASE_CATEGORY.MERGE.getCode().equals(srmCaseTransactionDTO.getCaseCategory())
												|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(srmCaseTransactionDTO.getCaseCategory())
												|| IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(srmCaseTransactionDTO.getCaseCategory())
												|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseTransactionDTO.getCaseCategory())) {
											SrmCaseAssetLink srmCaseAssetLink = this.srmCaseAssetLinkDAO.findByPrimaryKey(SrmCaseAssetLink.class, srmCaseAssetLinkDTO.getAssetLinkId());
											// 原設備EDC
											if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLinkDTO.getItemType())) {
												if(srmCaseAssetLink != null) {
													// 新增EDC
													if(StringUtils.hasText(srmCaseAssetLink.getSerialNumber())) {
														if(!srmCaseAssetLink.getSerialNumber().equals(srmCaseAssetLinkDTO.getSerialNumber())){
															//移除原EDC
															if(StringUtils.hasText(srmCaseAssetLinkDTO.getActionValue())) {
																builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_ORIGINALLY_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
															} else {
																//移除edc
																builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
															}
															builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ADD_ORIGINALLY_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
														} else {
															//EDC未異動
															if(StringUtils.hasText(srmCaseAssetLinkDTO.getIsRepeatLink())) {
																//原EDC
																builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ORIGINALLY_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
															} else {
																//非 原EDC
																builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
															}
														}
													} else {
														//新增EDC
														builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ADD_ORIGINALLY_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
													}
												}
											}
											// 周邊
											if(IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS.equals(srmCaseAssetLinkDTO.getItemType()) 
													|| IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2.equals(srmCaseAssetLinkDTO.getItemType()) 
													|| IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3.equals(srmCaseAssetLinkDTO.getItemType())) {
												if(srmCaseAssetLink != null) {
													if(StringUtils.hasText(srmCaseAssetLink.getSerialNumber())) {
														// 新增周邊
														if(!srmCaseAssetLink.getSerialNumber().equals(srmCaseAssetLinkDTO.getSerialNumber())){
															// 移除原周邊
															if(StringUtils.hasText(srmCaseAssetLinkDTO.getActionValue())) {
																builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_ORIGINALLY_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
															} else {
																//移除 非 原周邊
																builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
															}
															//新增周邊
															builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ADD_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
														} else {
															//周邊不異動
															if(StringUtils.hasText(srmCaseAssetLinkDTO.getIsRepeatLink())) {
																//原 周邊
																builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ORIGINALLY_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
															} else {
																//周邊
																builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
															}
														}
													} else {
														//新增周邊
														builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_ADD_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLinkDTO.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
													}
												}
											}
											count ++;
											if(count == 1) {
												//所有要刪除的設備鏈接和耗材的id.
												String deleteCaseSuppliesLinkIds= formDTO.getDeleteCaseAssetLinkIds();
												if(StringUtils.hasText(deleteCaseSuppliesLinkIds)) {
													Gson gsonss = new GsonBuilder().create();
													List<SrmCaseAssetLinkDTO> srmCaseAssetLinkDTOs = (List<SrmCaseAssetLinkDTO>) gsonss.fromJson(
															deleteCaseSuppliesLinkIds, new TypeToken<List<SrmCaseAssetLinkDTO>>(){}.getType());
													for (SrmCaseAssetLinkDTO srmCaseAssetLinkDTO1 : srmCaseAssetLinkDTOs) {
														//R 傳過來通過;解開。 分別為刪除的id和選擇的動作 拆回或者遺失
														srmCaseAssetLink = this.srmCaseAssetLinkDAO.findByPrimaryKey(SrmCaseAssetLink.class, srmCaseAssetLinkDTO1.getAssetLinkId());
														if(srmCaseAssetLink != null) {
															DmmAssetType assetType = this.assetTypeDAO.findByPrimaryKey(DmmAssetType.class, srmCaseAssetLink.getItemId());
															if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLink.getItemType())) {
																//移除原EDC
																builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_ORIGINALLY_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
															} else {
																// 移除原周邊R
																builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_ORIGINALLY_PERIPHERALS, new String[]{assetType.getName(), srmCaseAssetLink.getSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
															}
														}														
													}
												}
												
											}
											//拆機件 設備異動資訊:移除-EDC: XX, 序號: XX  移除-週邊設備: XX, 序號: XX
										} else if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(srmCaseTransactionDTO.getCaseCategory())) {
											// 移除EDC
											if(IAtomsConstants.PARAM_CASE_LINK_EDC_TYPE.equals(srmCaseAssetLinkDTO.getItemType())) {
												//設備序號為空的時候改為分號 2017/12/11
												builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_EDC, new String[]{srmCaseAssetLinkDTO.getItemName(), !StringUtils.hasText(srmCaseAssetLinkDTO.getUninstallSerialNumber()) ? IAtomsConstants.MARK_SEMICOLON : srmCaseAssetLinkDTO.getUninstallSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
											}
											// 移除周邊
											if((IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS.equals(srmCaseAssetLinkDTO.getItemType()) 
													|| IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS2.equals(srmCaseAssetLinkDTO.getItemType()) 
													|| IAtomsConstants.PARAM_CASE_LINK_PERIPHERALS3.equals(srmCaseAssetLinkDTO.getItemType()))
													&& IAtomsConstants.NO.equals(srmCaseAssetLinkDTO.getIsLink())) {
												builder.append(i18NUtil.getName(IAtomsMessageCode.DESCRIPTION_FOR_DELETE_PERIPHERALS, new String[]{srmCaseAssetLinkDTO.getItemName(), !StringUtils.hasText(srmCaseAssetLinkDTO.getUninstallSerialNumber()) ? IAtomsConstants.MARK_SEMICOLON : srmCaseAssetLinkDTO.getUninstallSerialNumber()}, null)).append(IAtomsConstants.MARK_WRAP);
											}
										}
									}
								}
							}
							// 描述處理
							caseTransaction.setDescription(builder.toString());
							caseTransaction.setCaseId(caseIds[i]);
							// 主鍵
							caseTransaction.setTransactionId(transactionId);
							caseTransaction.setCreatedById(logonUser.getId());
							caseTransaction.setCreatedByName(logonUser.getName());
							caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							//當前關卡
							caseTransaction.setCaseStage(oldCaseStatus.toUpperCase());
							//當前關卡名稱
							caseTransaction.setCaseStageName(i18NUtil.getName(oldCaseStatus));
							//下一關關卡代碼
							caseTransaction.setNextCaseStage(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode().toUpperCase());
							//下一關關卡名稱
							caseTransaction.setNextCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode()));
							
							caseHandleInfo.setResponsibity(srmCaseTransactionDTO.getResponsibity());
							caseHandleInfo.setCloseUser(logonUser.getId());
							caseHandleInfo.setCloseUserName(logonUser.getName());
							if(srmCaseTransactionDTO.getDealDate() == null){
								caseHandleInfo.setCloseDate(DateTimeUtils.getCurrentTimestamp());
							} else {
								caseHandleInfo.setCloseDate(srmCaseTransactionDTO.getDealDate());
							}
							
							this.srmCaseTransactionDAO.insert(caseTransaction);
							
							//Task #3519 存儲下行電文 要有案件歷程id
							if(callCmsMap.containsKey(caseHandleInfo.getCaseId())){
								String apiLogResult = "true";
								this.insertApiLog(IAtomsConstants.API_RS, caseHandleInfo.getCaseId(), caseTransaction.getTransactionId(), logonUser, apiLogResult, null, callCmsMap.get(caseHandleInfo.getCaseId()));
							}
							caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode());
							// 簽收日期 畫面上輸入之實際執行時間,如果為空,則填入當前時間
							if(srmCaseTransactionDTO.getDealDate() == null){
								caseHandleInfo.setAnalyzeDate(DateTimeUtils.getCurrentTimestamp());
							} else {
								caseHandleInfo.setAnalyzeDate(srmCaseTransactionDTO.getDealDate());
							}
							// 填入最後一次派工的派工單位（排除客服，TMS，QA）
							//caseHandleInfo.setInstalledDeptId(IAtomsConstants.MARK_EMPTY_STRING);
							//caseHandleInfo.setInstalledUser(IAtomsConstants.MARK_EMPTY_STRING);
							//問題原因
							caseHandleInfo.setProblemReason(problemReason);
							//問題原因code
							caseHandleInfo.setProblemReasonCode(problemReasonCode);
							//問題解決方式
							caseHandleInfo.setProblemSolution(problemSolution);
							//問題解決方式code
							caseHandleInfo.setProblemSolutionCode(problemSolutionCode);
							//責任歸屬
							caseHandleInfo.setResponsibity(srmCaseTransactionDTO.getResponsibity());
							caseHandleInfo.setUpdatedById(logonUser.getId());
							caseHandleInfo.setUpdatedByName(logonUser.getName());
							caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							// 當前交易參數
							srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseHandleInfo.getCaseId(), null);
							tid = null;
							if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
								for(SrmCaseTransactionParameterDTO tempSrmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
									
									if(tempSrmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VM.getCode())
											|| tempSrmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJ.getCode())
											|| tempSrmCaseTransactionParameterDTO.getTransactionType().equals(IAtomsConstants.TRANSACTION_CATEGORY.COMMON_VMJU.getCode())){
										if(StringUtils.hasText(tempSrmCaseTransactionParameterDTO.getTid())){
											tid = tempSrmCaseTransactionParameterDTO.getTid();
											break;
										}
									}
								}
								sessionContext.setAttribute(SrmCaseHandleInfoDTO.ATTRIBUTE.TID.getValue(), tid);
							}
							setUserRoleFlag(formDTO);
							// 線上排除
							//if(IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode().equals(formDTO.getActionId())) {
								// 線上排除：軟派
								List<SrmCaseTransactionDTO> caseTransactionDTOs = this.srmCaseTransactionDAO.listAfterQAs(caseHandleInfo.getCaseId());
								if (CollectionUtils.isEmpty(caseTransactionDTOs)) {
									caseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_NO_DISPATCH);
								} else {
									caseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_SOFT_DISPATCH);
								}
								//caseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_SOFT_DISPATCH);
								//Task #3349
								boolean isInstallComplete = false;
								if(caseHandleInfo.getCompleteDate()==null && IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
									isInstallComplete = true;
								}
								// 實際執行時間記錄為該案件的完修時間
								if(srmCaseTransactionDTO.getDealDate() == null){
									caseHandleInfo.setCompleteDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
								} else {
									caseHandleInfo.setCompleteDate(srmCaseTransactionDTO.getDealDate());
								}
								if (isInstallComplete) {
									// 端末機代號啟用日: 實際完修日(裝機)，換機會繼承至新機
									caseHandleInfo.setInstallCompleteDate(caseHandleInfo.getCompleteDate());
								}
								// 完修人員信息
								caseHandleInfo.setCompleteUser(logonUser.getId());
								caseHandleInfo.setCompleteUserName(logonUser.getName());
								// Task #2547  新增，執行完修部門 欄位
								AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, logonUser.getId());
							//	caseHandleInfo.setCompleteDepartmentId(admUser.getDeptCode());
								// Task #2547 協調完成：若為客服執行，部門是客服  // CR #2951 廠商客服 //Task #3578 客戶廠商客服
								if(formDTO.getIsCustomerService() || formDTO.getIsVendorService() || formDTO.getIsCusVendorService()){
									caseHandleInfo.setCompleteDepartmentId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
								} else {
									caseHandleInfo.setCompleteDepartmentId(admUser.getDeptCode());
								}
								
								// 進件完工日  當脫離待派工狀態時，需寫入進件完工日 2018/01/08
								if(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(oldCaseStatus)) {
									caseHandleInfo.setCreatedFinishDate(caseTransaction.getDealDate());
								}
								
							//}
							newCUP = false;
							// 依據案件類別判斷CUP類別存取情況
							// 裝機只判斷當前是否有CUP
							if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
								// 當前交易參數
								//	srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseHandleInfo.getCaseId(), null);
								if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
									for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
										// 判斷有沒有CUP類別
										if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
											newCUP = true;
											break;
										}
									}
									//如果此筆案件交易參數有cup
									if(newCUP) {
										//判斷案件信息裡面的cup啟用日是否有值 無值 存儲完修日期 如果有值，不管
										if(caseHandleInfo.getCupEnableDate() == null) {
											caseHandleInfo.setCupEnableDate(caseHandleInfo.getCompleteDate());
										}
									} else {
										caseHandleInfo.setCupEnableDate(null);
									}
								}
								// 併機與異動可操作交易參數
							} else if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseHandleInfo.getCaseCategory())
										|| IAtomsConstants.CASE_CATEGORY.PROJECT.getCode().equals(caseHandleInfo.getCaseCategory())){
								if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
									for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
										// 判斷有沒有CUP類別
										if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
											newCUP = true;
											break;
										}
									}
									//有cup交易
									if(newCUP) {
										//案件資料檔cup啟用日有值
										if(caseHandleInfo.getCupEnableDate() != null) {
											//案件資料檔cup移除日有值
											if(caseHandleInfo.getCupDisableDate() != null) {
												//清空cup移除日
												caseHandleInfo.setCupDisableDate(null);
												//cup啟用日設置當前案件完修日期
												caseHandleInfo.setCupEnableDate(caseHandleInfo.getCompleteDate());
											}
										} else {
											//cup啟用日設置當前案件完修日期
											caseHandleInfo.setCupEnableDate(caseHandleInfo.getCompleteDate());
										}
										//沒有cup交易
									} else {
										if(caseHandleInfo.getCupEnableDate() != null) {
											//案件資料檔cup移除日無值
											if(caseHandleInfo.getCupDisableDate() == null) {
												//cup移除日設置當前案件完修日期
												caseHandleInfo.setCupDisableDate(caseHandleInfo.getCompleteDate());
											}
										}
									}
								}
								//update by 2017/08/30 Bug #2308
							} else if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
								if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
									for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
										// 判斷有沒有CUP類別
										if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
											newCUP = true;
											break;
										}
									}
									//如果此筆案件交易參數有cup
									if(newCUP) {
										//判斷案件信息裡面的cup移除日是否有值 無值 存儲完修日期 如果有值，說明其她案件已經移除過
										if(caseHandleInfo.getCupDisableDate() == null) {
											//cup移除日設置當前案件完修日期
											caseHandleInfo.setCupDisableDate(caseHandleInfo.getCompleteDate());
										}
									}
								}
							}
							//update by 2017/09/30  hermanwang Task #2544
							//if(IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode().equals(formDTO.getActionId())) {
								// 簽收人員id
								caseHandleInfo.setAnalyzeUser(srmCaseTransactionDTO.getAgentsId());
								// 簽收人員name
								caseHandleInfo.setAnalyzeUserName(srmCaseTransactionDTO.getAgentsName());
								
								caseHandleInfo.setDispatchProcessUser(srmCaseTransactionDTO.getAgentsId());
								caseHandleInfo.setDispatchProcessUsername(srmCaseTransactionDTO.getAgentsName());
								if(StringUtils.hasText(srmCaseTransactionDTO.getAgentsId())) {
									admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, srmCaseTransactionDTO.getAgentsId());
									caseHandleInfo.setDispatchDeptId(admUser.getDeptCode());
									// Task #2544 寫入維護廠商+維護部門 crisszhang edit
									caseHandleInfo.setCompanyId(admUser.getCompanyId());
									caseHandleInfo.setDepartmentId(caseHandleInfo.getDispatchDeptId());
								}
							/*} else {
								// 簽收人員id
								caseHandleInfo.setAnalyzeUser(logonUser.getId());
								// 簽收人員name
								caseHandleInfo.setAnalyzeUserName(logonUser.getName());
								
								caseHandleInfo.setDispatchProcessUser(logonUser.getId());
								caseHandleInfo.setDispatchProcessUsername(logonUser.getName());
								AdmUser admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, logonUser.getId());
								caseHandleInfo.setDispatchDeptId(admUser.getDeptCode());
								// Task #2544 寫入維護廠商+維護部門 crisszhang edit
								caseHandleInfo.setCompanyId(admUser.getCompanyId());
								caseHandleInfo.setDepartmentId(caseHandleInfo.getDispatchDeptId());
							}*/
							//Task #2725 案件管理 2017/10/31
							if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())
									&& StringUtils.hasText(caseHandleInfo.getDispatchDeptId())) {
								// 裝機時 填入派工單位
								caseHandleInfo.setInstalledDeptId(caseHandleInfo.getDispatchDeptId());
							}
							//案件狀態更新為結案
							caseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.CLOSED.getCode());
							
							
							SrmCaseTransaction srmCaseTransaction = new SrmCaseTransaction();
							// 主鍵
							srmCaseTransaction.setTransactionId(transactionId+"-1");
							srmCaseTransaction.setCaseId(caseHandleInfo.getCaseId());
							// 放置執行動作
							srmCaseTransaction.setActionId(IAtomsConstants.CASE_ACTION.CLOSED.getCode());
							// 放置案件狀態
							srmCaseTransaction.setCaseStatus(IAtomsConstants.CASE_STATUS.CLOSED.getCode());
							// 實際執行時間處理
							if(srmCaseTransactionDTO.getDealDate() == null){
								srmCaseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
							} else {
								srmCaseTransaction.setDealDate(srmCaseTransactionDTO.getDealDate());
							}
							//問題原因
							srmCaseTransaction.setProblemReason(problemReason);
							//解決方式
							srmCaseTransaction.setProblemSolution(problemSolution);
							//責任歸屬
							srmCaseTransaction.setResponsibity(srmCaseTransactionDTO.getResponsibity());
							
							if (IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(caseHandleInfo.getCaseCategory())){
								//拼接沒有輸入處理說明的描述
								StringBuffer stringBuffer = new StringBuffer();
								//Task #2401 update by 2017/09/13
								stringBuffer.append(i18NUtil.getName(IAtomsMessageCode.CASE_PROBLEM_REASON)).append(srmCaseTransactionDTO.getProblemReasonName()).append(IAtomsConstants.MARK_SEMICOLON).append(IAtomsConstants.MARK_WRAP);
								stringBuffer.append(i18NUtil.getName(IAtomsMessageCode.CASE_PROBLEM_SOLUTION)).append(srmCaseTransactionDTO.getProblemSolutionName()).append(IAtomsConstants.MARK_SEMICOLON).append(IAtomsConstants.MARK_WRAP)
									.append(i18NUtil.getName(IAtomsMessageCode.CASE_RESPONSIBITY)).append(srmCaseTransactionDTO.getResponsibityName());
								//沒有輸入的處理說明的描述
								String hasDescription = stringBuffer.toString();
								
								// 描述處理
								srmCaseTransaction.setDescription(hasDescription);
							}
							//當前關卡
							srmCaseTransaction.setCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_CLOSE);
							//當前關卡名稱
							srmCaseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.WAIT_CLOSE.getCode()));
							//下一關關卡代碼
							srmCaseTransaction.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_CASE_PROCESS_END);
							//下一關關卡名稱
							srmCaseTransaction.setNextCaseStageName(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_NAME_END);
							srmCaseTransaction.setCreatedById(logonUser.getId());
							srmCaseTransaction.setCreatedByName(logonUser.getName());
							srmCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							//Task #3349 實際完修日(裝機) 換機會繼承至新機，拆機後此欄位值為null
							if(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory())){
								caseHandleInfo.setInstallCompleteDate(null);
							}
							//CR #2869 新增三個欄位 2017/11/22
							caseHandleInfo.setThirdDescription(caseHandleInfo.getFirstDescription());
							caseHandleInfo.setSecondDescription(caseTransaction.getDescription());
							caseHandleInfo.setFirstDescription(srmCaseTransaction.getDescription());
							this.srmCaseTransactionDAO.insert(srmCaseTransaction);
							this.srmCaseHandleInfoDAO.update(caseHandleInfo);
							if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())
									&& caseHandleInfo.getInstallCompleteDate()!=null) {
								//'S' save 同dtid下InstallCompleteDate
								this.srmCaseHandleInfoDAO.changeInstallCaseId(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), null, caseHandleInfo.getInstallCompleteDate(), "S");
							} else if (IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(caseHandleInfo.getCaseCategory())
											&& caseHandleInfo.getInstallCompleteDate()==null) {
								//'D' delete 同dtid下InstallCompleteDate
								this.srmCaseHandleInfoDAO.changeInstallCaseId(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), null, null, "D");
							}
							//CR #3236 其他案件無設備，無需更新設備資料檔
							if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(caseHandleInfo.getCaseCategory())) {
								//不是 查核
								if(!IAtomsConstants.CASE_CATEGORY.CHECK.getCode().equals(caseHandleInfo.getCaseCategory())) {
									//查詢該案件 是否有簽收 和 線上排除的 記錄
									//if(!isWaitClose && !IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfo.getCaseCategory())) {
									//	saveNewAssetLinkAndSupplies(sessionContext,caseHandleInfo);
									//} else {
									//CR #3239 
									if (IAtomsConstants.PARAM_YES.equals(srmCaseTransactionDTO.getMobileFlag())) {
										updateAssetInfoInCheckCase(caseHandleInfo, logonUser, Boolean.FALSE);
									} else {
										// 線上排除存儲其他表
										saveAssetLinkAndSupplies(sessionContext,caseHandleInfo);
									}
									//}
								} else {
									updateAssetInfoInCheckCase(caseHandleInfo, logonUser, Boolean.FALSE);
								}
								// 線上排除--複製數據到歷史和最新模塊,刪除處理中的所有信息
								this.srmCaseHandleInfoDAO.copyToHis(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), IAtomsConstants.YES, IAtomsConstants.NO);
								
								//結案--複製數據到歷史和最新模塊,刪除處理中的所有信息 // Task #2682 結案時不複製最新資料當因線上排除與簽收已複製
								this.srmCaseHandleInfoDAO.copyToHis(caseHandleInfo.getCaseId(), caseHandleInfo.getDtid(), IAtomsConstants.YES, IAtomsConstants.YES);
							}
						}
					}
//					存入新的caseId
					newCaseId = newCaseId.trim();
					if(StringUtils.hasText(newCaseId) && newCaseId.substring(newCaseId.length()-1, newCaseId.length()).equals(IAtomsConstants.MARK_SEPARATOR)){
						srmCaseTransactionDTO.setCaseId(newCaseId.substring(0, newCaseId.length()-1));
					}else{
						srmCaseTransactionDTO.setCaseId(newCaseId);
					}
					String deleteCaseIds = newCaseId;
					if (deleteCaseIds.endsWith(",")) {
						deleteCaseIds = deleteCaseIds.substring(0, deleteCaseIds.length()-1);
					}
					deleteCaseIds = "'"+deleteCaseIds;
					deleteCaseIds = deleteCaseIds.replaceAll(",", "','")+"'";
					//if(formDTO.getCaseActionId().equals("onlineExclusion")){
						//线上排除时，处理cmsErrorMsg
						if (cmsErrorMsg.length() > 0) {
						       Map map = new HashMap();
						       map.put(IAtomsConstants.FIELD_CMS_RESULT, false);
						       sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
						       String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{cmsErrorMsg.substring(0, cmsErrorMsg.length() - 5)}, null);
						       msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
						       //
						       formDTO.setCaseIds(StringUtils.toList(srmCaseTransactionDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR));
						       if (!CollectionUtils.isEmpty(StringUtils.toList(srmCaseTransactionDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR))) {
						    	   if(StringUtils.hasText(oldCaseStatus)){
										formDTO.setActionId(IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode());
										//送至下一關
										this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
									}
									formDTO.setActionId(IAtomsConstants.CASE_ACTION.CLOSED.getCode());
									//送至下一關
									this.sendNextActiviti(logonUser, formDTO, IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_CLOSE, null);
									//調用CaseDetailDao的放法刪除CAFE_CASE_DETAIL和CAFE_CASE_TRANSACTION表的相關數據
									this.caseDetailDAO.deleteCaseInfos(deleteCaseIds);
						       }
						       
						       /*formDTO.setCaseIds(StringUtils.toList(srmCaseTransactionDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR));
								if(StringUtils.hasText(oldCaseStatus)){
									//送至下一關
									this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
								}*/
						   }
					//}
					if(msg == null){
						msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_LEASE_SIGN)});
						formDTO.setCaseIds(StringUtils.toList(srmCaseTransactionDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR));
						if (!CollectionUtils.isEmpty(StringUtils.toList(srmCaseTransactionDTO.getCaseId(), IAtomsConstants.MARK_SEPARATOR))) {
							if(StringUtils.hasText(oldCaseStatus)){
								formDTO.setActionId(IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode());
								//送至下一關
								this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
							}
							formDTO.setActionId(IAtomsConstants.CASE_ACTION.CLOSED.getCode());
							//送至下一關
							this.sendNextActiviti(logonUser, formDTO, IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_CLOSE, null);
							//調用CaseDetailDao的放法刪除CAFE_CASE_DETAIL和CAFE_CASE_TRANSACTION表的相關數據
							this.caseDetailDAO.deleteCaseInfos(deleteCaseIds);
						}
					}
					/*try {
						this.send(sessionContext);
					} catch (Exception e) {
						LOGGER.debug(".saveSignAndOnlineExclusion() --> send() is error... ");
					}*/
				} else {
					LOGGER.error("CaseManagerService --> leaseSign() --> ", "leaseSign save error!!!", "caseIds msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_LEASE_SIGN)});
				}
			} else {
			//	msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.IATOMS_FAILURE);
				if(IAtomsConstants.CASE_ACTION.ONLINE_EXCLUSION.getCode().equals(formDTO.getActionId())){
					LOGGER.error("CaseManagerService --> leaseSign() --> ", "leaseSign save error!!!", "srmCaseTransactionDTO.getCaseId() is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_LEASE_SIGN)});
				} else {
					LOGGER.error("CaseManagerService --> leaseSign() --> ", "leaseSign save error!!!", "srmCaseTransactionDTO.getCaseId() is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_LEASE_SIGN)});
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".leaseSign(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".leaseSign(SessionContext sessionContext):" + e, e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	
	}
	/** (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#leasePreload(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext leasePreload(SessionContext sessionContext)throws ServiceException{
		CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		Message msg = null;
		StringBuffer cmsErrorMsg = new StringBuffer();
		//Task #3519 存儲call cms 成功的案件 key 為 caseid， value 為 下行電文
    	Map<String, String> callCmsMap = new HashMap<String, String>();
		try {
			// 調用驗證方法
			Map<String, Object> resultMap = this.validateCaseAction(formDTO);
			if((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)){
				// 案件處理記錄主鍵id
				String transactionId = null;
				// 案件處理處理中資料DMO對象
				SrmCaseHandleInfo caseHandleInfo = null;
				// 案件處理記錄DMO對象
				SrmCaseTransaction caseTransaction = null;
				// 案件處理記錄DTO對象
				SrmCaseTransactionDTO srmCaseTransactionDTO = formDTO.getSrmCaseTransactionDTO();
				// dto/dmo轉換對象
				Transformer transformer = new SimpleDtoDmoTransformer();
				String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
				// 實際執行時間處理
				if(srmCaseTransactionDTO.getDealDate() == null){
					srmCaseTransactionDTO.setDealDate(new Timestamp(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0).getTime()));
				}
				// 案件處理記錄主鍵id
				transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
				// 得到案件處理集合
				List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = (List<SrmCaseHandleInfoDTO>) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT);
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
					Gson gson = new Gson();
					ReceiveJobNoticeDTO resultMsg = null;
					List<SrmCaseHandleInfoDTO> failDto = new ArrayList<SrmCaseHandleInfoDTO>();
					
					String newCaseId = "";
					//若為CMS案件(裝機、報修)
					for(SrmCaseHandleInfoDTO dto : srmCaseHandleInfoDTOs){
						if((IAtomsConstants.PARAM_YES.equals(dto.getCmsCase()))
								&&((IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(dto.getCaseCategory()))
										|| (IAtomsConstants.CASE_CATEGORY.REPAIR.getCode().equals(dto.getCaseCategory())))
										&& (!(dto.getIsIatomsCreateCms().equals(IAtomsConstants.PARAM_YES)
												&& dto.getDispatchDate() == null))){
							String apiLogResult = null;
							//Task #3595 若之前已預載過，要先將既有主機SN取消預載，再傳送新主機SN進行預載
							if (StringUtils.hasText(dto.getPreloadSerialNumber())) {
								ReceiveJobNoticeDTO receiveJobNoticeDTO = new ReceiveJobNoticeDTO(IAtomsConstants.REQUIREMENT_NO_LENGTH, dto.getMerMid(), dto.getCaseId(), dto.getDtid(), "", "", dto.getPreloadSerialNumber(), "");
								String jsonString = gson.toJson(receiveJobNoticeDTO);
								LOGGER.debug("CaseManagerService --> leasePreload() --> ", "json=" + jsonString);
								//Task #3336 call CMS API Task #3519
								Map<String, String> map = null;
								String resultString = null;
								//裝機 call APIOP002
								if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(dto.getCaseCategory())) {
									map = NetUtil.sendHtppsNew("APIOP002", jsonString);
								//報修 call APIOP004
								} else {
									map = NetUtil.sendHtppsNew("APIOP004", jsonString);
								}
								
								if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
									resultString = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
								}
								if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
									apiLogResult = "true";
								} else {
									apiLogResult = "false";
								}
								LOGGER.debug("CaseManagerService --> leasePreload() --> ", "message=" + resultString);
								//上行(RQ)
								this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, jsonString);
								if (StringUtils.hasText(resultString)) {
									Object responseJson = (Object) gson.fromJson(resultString, Object.class);
									LOGGER.debug("CaseManagerService --> leasePreload() --> ", "responseJson=" + responseJson);
									resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
									if (!("True".equals(resultMsg.getRESULT()))) {
										failDto.add(dto);
										cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
										apiLogResult = "false";
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), resultString);
									} else {
										//callCmsMap.put(dto.getCaseId(), resultString);
										this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, "true", null, resultString);
									}
								} else {
									LOGGER.debug("CaseManagerService --> leasePreload() --> ", "save error!!!", "message is null");
									apiLogResult = "false";
									cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), "cms請求失敗"}, null)).append("</br>");
									//下行(RS)
									this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
									failDto.add(dto);
								}
							}
							if ((!StringUtils.hasText(apiLogResult)) || (!"false".equals(apiLogResult))) {
								//處理參數
								ReceiveJobNoticeDTO receiveJobNoticeDTO = new ReceiveJobNoticeDTO(IAtomsConstants.LEAVE_CASE_STATUS_TEN, dto.getMerMid(), dto.getCaseId(), dto.getDtid(), "", "", srmCaseTransactionDTO.getSerialNumber(), "");
								String jsonString = gson.toJson(receiveJobNoticeDTO);
								LOGGER.debug("CaseManagerService --> leasePreload() --> ", "json=" + jsonString);
								//Task #3336 call CMS API Task #3519
								Map<String, String> map = null;
								String resultString = null;
								//Task #3519
								//裝機 call APIOP002
								if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(dto.getCaseCategory())) {
									map = NetUtil.sendHtppsNew("APIOP002", jsonString);
								//報修 call APIOP004
								} else {
									map = NetUtil.sendHtppsNew("APIOP004", jsonString);
								}
								
								if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
									resultString = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
								}
								if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
									apiLogResult = "true";
								} else {
									apiLogResult = "false";
								}
								LOGGER.debug("CaseManagerService --> leasePreload() --> ", "message=" + resultString);
								//上行(RQ)
								this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, jsonString);
								if (StringUtils.hasText(resultString)) {
									Object responseJson = (Object) gson.fromJson(resultString, Object.class);
									LOGGER.debug("CaseManagerService --> leasePreload() --> ", "responseJson=" + responseJson);
									resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
									if (!("True".equals(resultMsg.getRESULT()))) {
										failDto.add(dto);
										cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
										apiLogResult = "false";
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), resultString);
									} else {
										callCmsMap.put(dto.getCaseId(), resultString);
									}
								} else {
									LOGGER.debug("CaseManagerService --> leasePreload() --> ", "save error!!!", "message is null");
									apiLogResult = "false";
									cmsErrorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), "cms請求失敗"}, null)).append("</br>");
									//下行(RS)
									this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
									failDto.add(dto);
								}
							}
						}
					}
					if (!CollectionUtils.isEmpty(failDto)) {
						for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : failDto) {
							srmCaseHandleInfoDTOs.remove(srmCaseHandleInfoDTO);
						}
						if (srmCaseHandleInfoDTOs.size() == 0) {
							Map map = new HashMap();
						    map.put(IAtomsConstants.FIELD_CMS_RESULT, false);
						    String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{cmsErrorMsg.substring(0, cmsErrorMsg.length() - 5)}, null);
						    msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
						    sessionContext.setReturnMessage(msg);
						    srmCaseTransactionDTO.setCaseId("");
						    sessionContext.setResponseResult(formDTO);
						    sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
							return sessionContext;
						}
					}
					
					int i = 0;
					String description = srmCaseTransactionDTO.getDescription() + IAtomsConstants.MARK_EMPTY_STRING;
					if (StringUtils.hasText(srmCaseTransactionDTO.getSerialNumber())) {
						if (StringUtils.hasText(description)) {
							description = description + IAtomsConstants.MARK_WRAP;
						}
						description = description + i18NUtil.getName(IAtomsConstants.FIELD_EQUIPMENT_NUMBER)
											+ IAtomsConstants.MARK_COLON 
											+ srmCaseTransactionDTO.getSerialNumber();
						srmCaseTransactionDTO.setDescription(description);
					}
					if (StringUtils.hasText(srmCaseTransactionDTO.getSimSerialNumber())) {
						if (StringUtils.hasText(description)) {
							description = description + IAtomsConstants.MARK_WRAP;
						}
						description = description + i18NUtil.getName(IAtomsConstants.FIELD_SIM_EQUIPMENT_NUMBER)
											+ IAtomsConstants.MARK_COLON
											+ srmCaseTransactionDTO.getSimSerialNumber();
						srmCaseTransactionDTO.setDescription(description);
					}
					for(SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs){
						//拼接新的caseId
						newCaseId = newCaseId + srmCaseHandleInfoDTO.getCaseId() + IAtomsConstants.MARK_SEPARATOR;
						// 更新案件處理消息
						caseHandleInfo = (SrmCaseHandleInfo) transformer.transform(srmCaseHandleInfoDTO, new SrmCaseHandleInfo());
						//CR #2869 新增三個欄位 2017/11/22
						caseHandleInfo.setThirdDescription(caseHandleInfo.getSecondDescription());
						caseHandleInfo.setSecondDescription(caseHandleInfo.getFirstDescription());
						caseHandleInfo.setFirstDescription(srmCaseTransactionDTO.getDescription());
						caseHandleInfo.setUpdatedById(logonUser.getId());
						caseHandleInfo.setUpdatedByName(logonUser.getName());
						caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
						caseHandleInfo.setPreloadSerialNumber(srmCaseTransactionDTO.getSerialNumber());
						//設備序號(SIM卡)
						caseHandleInfo.setSimSerialNumber(srmCaseTransactionDTO.getSimSerialNumber());
						this.srmCaseHandleInfoDAO.update(caseHandleInfo);
						
						// 保存案件記錄信息
						i++;
						caseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTO, new SrmCaseTransaction());
						caseTransaction.setActionId(srmCaseTransactionDTO.getCaseActionId());
						//Bug #2634
						String tempTransactionId = transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i);
						if(!StringUtils.hasText(caseTransactionId)) {
							caseTransactionId = tempTransactionId;
						} else {
							caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + tempTransactionId;
						}
						formDTO.setCaseTransactionId(caseTransactionId);
						caseTransaction.setTransactionId(transactionId + IAtomsConstants.MARK_UNDER_LINE +String.valueOf(i));
						caseTransaction.setCaseId(srmCaseHandleInfoDTO.getCaseId());
						// 當前關卡
						caseTransaction.setCaseStage(srmCaseHandleInfoDTO.getCaseStatus());
						caseTransaction.setCaseStageName(i18NUtil.getName(srmCaseHandleInfoDTO.getCaseStatus()));
						// 下一關關卡代碼
						caseTransaction.setNextCaseStage(caseTransaction.getCaseStatus());
						caseTransaction.setNextCaseStageName(i18NUtil.getName(caseTransaction.getCaseStatus()));
						caseTransaction.setCreatedById(logonUser.getId());
						caseTransaction.setCreatedByName(logonUser.getName());
						caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
						this.srmCaseTransactionDAO.insert(caseTransaction);
						
						//Task #3519 存儲下行電文 要有案件歷程id
						if(callCmsMap.containsKey(srmCaseHandleInfoDTO.getCaseId())){
							String apiLogResult = "true";
							this.insertApiLog(IAtomsConstants.API_RS, srmCaseHandleInfoDTO.getCaseId(), caseTransaction.getTransactionId(), logonUser, apiLogResult, null, callCmsMap.get(srmCaseHandleInfoDTO.getCaseId()));
						}
					}
					if(newCaseId.length() > 0){
						newCaseId = newCaseId.trim();
						if(newCaseId.substring(newCaseId.length()-1, newCaseId.length()).equals(IAtomsConstants.MARK_SEPARATOR)){
							srmCaseTransactionDTO.setCaseId(newCaseId.substring(0, newCaseId.length()-1));
						}else{
							srmCaseTransactionDTO.setCaseId(newCaseId);
						}
					}
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.DELIVERY)});
					//bug2374，新增記錄時不發送mail
					/*try {
						this.send(formDTO);
					} catch (Exception e) {
						LOGGER.debug(".addRecord() --> send() is error... ");
					}*/
					if (cmsErrorMsg.length() > 0) {
					       Map map = new HashMap();
					       map.put(IAtomsConstants.FIELD_CMS_RESULT, false);
					       sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
					       String tempMsg = i18NUtil.getName(IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{cmsErrorMsg.substring(0, cmsErrorMsg.length() - 5)}, null);
					       msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{tempMsg});
					      } else {
								msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_LEASE_PRELOAD)});
					      }
					
					
				} else {
					LOGGER.error("CaseManagerService --> leasePreload() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_LEASE_PRELOAD)});
				}
			} else {
				// 消息不爲空
				if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
					msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
				} else {
					LOGGER.error("CaseManagerService --> leasePreload() --> ", "validate error!!!", "resultMap msg is null");
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_DISPATCHING)});
				}
			}
			sessionContext.setReturnMessage(msg);
			sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".leasePreload(SessionContext sessionContext) is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".leasePreload(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	/**
	 * Purpose: 查詢台新銀行資料上傳sftp
	 * @author amandawang
	 * @param sessionContext :上下文SessionContext
	 * @throws ServiceException ： 出錯時拋出ServiceException
	 * @return SessionContext :上下文SessionContext
	 */
	public void queryCaseInfo() throws ServiceException{
		List<String> pathList = new ArrayList<String>();
		try {
			StringBuilder builder = new StringBuilder();
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CUSTOMER_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_STATUS_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_TYPE_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.RESPONSE_CONDITION.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ARRIVE_CONDITION.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPLETE_CONDITION.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.RESPONSE_STATUS.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ARRIVE_STATUS.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPLETE_STATUS.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.INSTALL_TYPE_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.UNINSTALL_TYPE_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_CATEGORY_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.REQUIREMENT_NO.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTRACT_CODE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.EDC_TYPE_CONTRACT.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.IS_PROJECT.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PROJECT_CODE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PROJECT_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPANY_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.VENDOR_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.DEPARTMENT_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.VENDOR_STAFF.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.SAME_INSTALLED.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ATTENDANCE_TIMES.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.DTID.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.TID.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.MERCHANT_CODE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.MERCHANT_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.HEADER_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.OLD_MERCHANT_CODE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.AREA_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_TEL.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_TEL2.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			//Task #3343
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_EMAIL.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PHONE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.BUSINESS_HOURS.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.AO_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.AO_EMAIL.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			//Task #3117 新增 案件區域欄位
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_AREA.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.BUSINESS_ADDRESS.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.INSTALLED_ADRESS.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_ADDRESS.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.INSTALLED_CONTACT.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_USER.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.INSTALLED_CONTACT_PHONE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_USER_PHONE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			//Task #3343
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.INSTALLED_CONTACT_MOBILE_PHONE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_MOBILE_PHONE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.INSTALLED_CONTACT_EMAIL.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CONTACT_USER_EMAIL.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.EDC_TYPE_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.EDC_SERIAL_NUMBER.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ENABLE_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.WAREHOUSE_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.OPEN_FUNCTION_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.APPLICATION_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.MULTI_MODULE_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ECR_CONNECTION.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.NETWORK_LINE_NUMBER.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_SERIAL_NUMBER.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_CONTRACT.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS2_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION2_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS2_SERIAL_NUMBER.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS2_CONTRACT.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS3_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION3_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS3_SERIAL_NUMBER.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS3_CONTRACT.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CONNECTION_TYPE_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.LOGO_STYLE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.IS_OPEN_ENCRYPT.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ELECTRONIC_PAY_PLATFORM.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ELECTRONIC_INVOICE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CUP_QUICK_PASS.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.NET_VENDOR_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.LOCALHOST_IP.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.NETMASK.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.GATEWAY.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.DESCRIPTION.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.MERCHANT_CODE_OTHER.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CUP_TRANS_TYPE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.DCC_TRANS_TYPE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.AE_MID.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.AE_TID.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.TMS_PARAM_DESC.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.UPDATED_DESCRIPTION.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.REPAIR_REASON_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PROBLEM_REASON_CATEGORY_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PROBLEM_REASON_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PROBLEM_SOLUTION_CATEGORY_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PROBLEM_SOLUTION_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.RESPONSIBITY_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ACCEPTABLE_RESPONSE_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ACCEPTABLE_ARRIVE_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ACCEPTABLE_FINISH_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.DISPATCH_USER_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.DISPATCH_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.RESPONSE_USER_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.RESPONSE_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ARRIVE_USER_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ARRIVE_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPLETE_USER_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPLETE_DEPARTMENT_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.COMPLETE_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ANALYZE_USER_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.ANALYZE_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CLOSE_USER_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CLOSE_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.PROCESS_TYPE_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.DISPATCH_PROCESS_USERNAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.UPDATED_BY_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.UPDATED_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CREATED_BY_NAME.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.CREATED_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			//CR #2869 新增三個欄位 2017/11/22
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.FIRST_DESCRIPTION.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.SECOND_DESCRIPTION.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.THIRD_DESCRIPTION.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			builder.append(SrmCaseHandleInfoDTO.ATTRIBUTE.EXPECTED_COMPLETION_DATE.getValue()).append(IAtomsConstants.MARK_SEPARATOR);
			// Task #3205 是否執行過延期
			builder.append(IAtomsConstants.MARK_SEPARATOR).append(SrmCaseHandleInfoDTO.ATTRIBUTE.HAS_DELAY.getValue());
			String exportField = builder.toString();
			List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = null;
			List<SrmCaseTransactionDTO> srmCaseTransactionDTOs = null;
			List<DmmRepositoryDTO> dmmRepositoryDTOs = null;
			AssetManageFormDTO assetManageFormDTO = null;
			String[] caseTransactionRow = null;
			List<String> caseTransactionRowsList =  new ArrayList<String>();
			String[] caseParamRow = null;
			List<String> caseParamRowsList = new ArrayList<String>();
			String[] assetRow = null;
			List<String> assetRowsList = new ArrayList<String>();
			//String[] exportFields = null;
			if(StringUtils.hasText(exportField)){
				String tempPath = SystemConfigManager.getProperty(IAtomsConstants.FILE_PATH, IAtomsConstants.FILE_TEMP_PATH);
				Map<String, String> queryColumnMap = new HashMap<String, String>();
				if(StringUtils.hasText(exportField)){
					for(String tempColumn : StringUtils.toList(exportField, IAtomsConstants.MARK_SEPARATOR)){
						queryColumnMap.put(tempColumn, tempColumn);
					}
				}
				List<Parameter> retireReasonList = (List<Parameter>) this.baseParameterItemDefDAO.getAvailableParameterItems(IATOMS_PARAM_TYPE.RETIRE_REASON.getCode(), null);

				CaseManagerFormDTO formDTO = new CaseManagerFormDTO();
				CompanyDTO company = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_TSB_EDC);
				if (company == null) {
					LOGGER.error(this.getClass().getName() + ".queryCaseInfo() is error TSB-EDC has no company " );
					return;
				}
				formDTO.setQueryCompanyId(company.getCompanyId());
				//Task #3584.  案件: (客戶=台新)或(客戶=宣揚&需求單號有值)
				company = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_BCC);
				if (company == null) {
					LOGGER.error(this.getClass().getName() + ".queryCaseInfo() is error code BCC has no company " );
					formDTO.setBccCustomerId(null);
				} else {
					formDTO.setBccCustomerId(company.getCompanyId());
				}
				
				formDTO.setQueryColumnMap(queryColumnMap);//還有狀態：已派工，已回應，延期中，已到場，完修，待結案審查
				formDTO.setQueryCaseStatus("Dispatched,Responsed,Delaying,Arrived,Completed,WaitClose");
				formDTO.setIsInstant(true);//
				//formDTO.setQueryCreateDateStart(DateTimeUtils.getCurrentDate());
				formDTO.setQueryTsbFlag(IAtomsConstants.PARAM_YES);
				//Task #3584 reopen 1. 調整抓案件類別=裝機、併機、異動、拆機、查核、報修，不要 專案了
				//formDTO.setQueryCaseCategory("INSTALL,MERGE,UPDATE,UNINSTALL,PROJECT,REPAIR");
				formDTO.setQueryCaseCategory("INSTALL,MERGE,UPDATE,UNINSTALL,CHECK,REPAIR");
				List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.queryListBy(formDTO);	
				Map<String, String> cupDccMap = new HashMap<String, String>();
				List<String> srmCaseHandleInfoRows = new ArrayList<String>();
				//Task #3584 reopen 案件類別要用需求單號前2位判斷，要轉，不能直接抓系統的
				Map<String, String> caseCategoryMap = new HashMap<String, String>();
				caseCategoryMap.put("EI", i18NUtil.getName(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode()));
				caseCategoryMap.put("EC", i18NUtil.getName(IAtomsConstants.CASE_CATEGORY.MERGE.getCode()));
				caseCategoryMap.put("EM", i18NUtil.getName(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode()));
				caseCategoryMap.put("EU", i18NUtil.getName(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode()));
				caseCategoryMap.put("EA", i18NUtil.getName(IAtomsConstants.CASE_CATEGORY.CHECK.getCode()));
				caseCategoryMap.put("ER", i18NUtil.getName(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode()));
				caseCategoryMap.put("ei", i18NUtil.getName(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode()));
				caseCategoryMap.put("ec", i18NUtil.getName(IAtomsConstants.CASE_CATEGORY.MERGE.getCode()));
				caseCategoryMap.put("em", i18NUtil.getName(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode()));
				caseCategoryMap.put("eu", i18NUtil.getName(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode()));
				caseCategoryMap.put("ea", i18NUtil.getName(IAtomsConstants.CASE_CATEGORY.CHECK.getCode()));
				caseCategoryMap.put("er", i18NUtil.getName(IAtomsConstants.CASE_CATEGORY.REPAIR.getCode()));
				if (!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)) {
					//以caseid為key，以案件編號或者需求單號為value
					Map<String, String> caseIdMap = new HashMap<String, String>();
					String caseIds = IAtomsConstants.MARK_EMPTY_STRING;
					String[] row = new String[70];
					for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
						if (StringUtils.hasText(caseIds)) {
							caseIds = caseIds + "," + srmCaseHandleInfoDTO.getCaseId();
						} else {
							caseIds = srmCaseHandleInfoDTO.getCaseId();
						}
						//Task #3584 reopen 或(客戶=宣揚&需求單號有值)，當此狀況下，匯出資料 1) 案件單號=需求單號
						if (StringUtils.hasText(formDTO.getBccCustomerId()) && formDTO.getBccCustomerId().equals(srmCaseHandleInfoDTO.getCustomerId())) {
							caseIdMap.put(srmCaseHandleInfoDTO.getCaseId(), srmCaseHandleInfoDTO.getRequirementNo());
						} else {
							//案件單號
							//Task #3584 reopen 2) IATOMS其餘類別案件，若需求單號有值，則需求單號為ATOMS案件編號，否則 以IATOMS案件編號為ATOMS案件編號
							if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
										|| StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo())) {
								caseIdMap.put(srmCaseHandleInfoDTO.getCaseId(), srmCaseHandleInfoDTO.getRequirementNo());
							} else {
								caseIdMap.put(srmCaseHandleInfoDTO.getCaseId(), srmCaseHandleInfoDTO.getCaseId());
							}
						}
					}
					Map<String, Object>	currentJsonMap = null;
					Gson gson = new GsonBuilder().create();
					srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.getTransactionParameterByCaseIds(caseIds);
					//Task #3584 reopen 1. 端末機代號 統一取 一般交易項目之TID
					//以caseid為key，以tid為value
					Map<String, String> commonMap = new HashMap<String, String>();
					//交易參數明細檔(PARAMETER.CSV)
					for (int j = 0; j < srmCaseTransactionParameterDTOs.size(); j++) {
						caseParamRow = new String[32];
						//1. 端末機代號 統一取 一般交易項目之TID
						if (srmCaseTransactionParameterDTOs.get(j).getTransactionType().startsWith("COMMON_")) {
							if (!commonMap.containsKey(srmCaseTransactionParameterDTOs.get(j).getCaseId())) {
								commonMap.put(srmCaseTransactionParameterDTOs.get(j).getCaseId(),srmCaseTransactionParameterDTOs.get(j).getTid());
							}
						}
						//如果該筆案件存在dcc交易，將其放入map中
						if ("DCC".equals(srmCaseTransactionParameterDTOs.get(j).getTransactionType())) {
							if (cupDccMap.containsKey(srmCaseTransactionParameterDTOs.get(j).getCaseId())) {
								cupDccMap.put(srmCaseTransactionParameterDTOs.get(j).getCaseId(),cupDccMap.get(srmCaseTransactionParameterDTOs.get(j).getCaseId()) + ",DCC");
							} else {
								cupDccMap.put(srmCaseTransactionParameterDTOs.get(j).getCaseId(), "DCC");
							}
							//如果該筆案件存在cup交易，將其放入map中
						} else if ("CUP".equals(srmCaseTransactionParameterDTOs.get(j).getTransactionType())) {
							if (cupDccMap.containsKey(srmCaseTransactionParameterDTOs.get(j).getCaseId())) {
								cupDccMap.put(srmCaseTransactionParameterDTOs.get(j).getCaseId(),cupDccMap.get(srmCaseTransactionParameterDTOs.get(j).getCaseId()) + ",CUP");
							} else {
								cupDccMap.put(srmCaseTransactionParameterDTOs.get(j).getCaseId(), "CUP");
							}
						}
						//交易類別
						caseParamRow[0] = srmCaseTransactionParameterDTOs.get(j).getTransactionTypeName();
						//案件單號
						caseParamRow[1] = caseIdMap.get(srmCaseTransactionParameterDTOs.get(j).getCaseId());
						//特店代號
						caseParamRow[2] = srmCaseTransactionParameterDTOs.get(j).getMerchantCode();
						//端末機代號
						caseParamRow[3] = srmCaseTransactionParameterDTOs.get(j).getTid();
						//銷售交易
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"saleTransaction\":\"V\"") > 0) {
							caseParamRow[4] = "V";
						} else {
							caseParamRow[4] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//取消交易
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"cancelTransaction\":\"V\"") > 0) {
							caseParamRow[5] = "V";
						} else {
							caseParamRow[5] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//結帳交易
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"checkoutTransaction\":\"V\"") > 0) {
							caseParamRow[6] = "V";
						} else {
							caseParamRow[6] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//退貨交易
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"returnTransaction\":\"V\"") > 0) {
							caseParamRow[7] = "V";
						} else {
							caseParamRow[7] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//人工輸入
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"manualInput\":\"V\"") > 0) {
							caseParamRow[8] = "V";
						} else {
							caseParamRow[8] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//交易補登
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"transactionFill\":\"V\"") > 0) {
							caseParamRow[9] = "V";
						} else {
							caseParamRow[9] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//開放櫃號
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"openNumber\":\"V\"") > 0) {
							caseParamRow[10] = "V";
						} else {
							caseParamRow[10] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//調整金額
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"adjustmentAmount\":\"V\"") > 0) {
							caseParamRow[11] = "V";
						} else {
							caseParamRow[11] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//預先授權
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"preAuthorization\":\"V\"") > 0) {
							caseParamRow[12] = "V";
						} else {
							caseParamRow[12] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//預授完成
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"preAuthorized\":\"V\"") > 0) {
							caseParamRow[13] = "V";
						} else {
							caseParamRow[13] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//自動撥號
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"autoCall\":\"V\"") > 0) {
							caseParamRow[14] = "V";
						} else {
							caseParamRow[14] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//小費交易
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"tipTransaction\":\"V\"") > 0) {
							caseParamRow[15] = "V";
						} else {
							caseParamRow[15] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//儲值交易
						caseParamRow[16] = IAtomsConstants.MARK_EMPTY_STRING;
						//儲值取消
						caseParamRow[17] = IAtomsConstants.MARK_EMPTY_STRING;
						//身份檢核
						caseParamRow[18] = IAtomsConstants.MARK_EMPTY_STRING;
						//開卡
						caseParamRow[19] = IAtomsConstants.MARK_EMPTY_STRING;
						//FDBC
						caseParamRow[20] = IAtomsConstants.MARK_EMPTY_STRING;
						//下載
						caseParamRow[21] = IAtomsConstants.MARK_EMPTY_STRING;
						//查詢
						caseParamRow[22] = IAtomsConstants.MARK_EMPTY_STRING;
						//熱鍵
						caseParamRow[23] = IAtomsConstants.MARK_EMPTY_STRING;
						//交易電話1
						//caseParamRow[24] = IAtomsConstants.MARK_EMPTY_STRING;
						currentJsonMap = new HashMap<String, Object>();
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"phone1\":") > 0
									&& srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"phone1\":\"\"") < 0) {
							// 將item_value中交易參數轉爲map集合對象
							currentJsonMap = gson.fromJson(srmCaseTransactionParameterDTOs.get(j).getItemValue(), currentJsonMap.getClass());
							caseParamRow[24] = (String) currentJsonMap.get("phone1");
						} else {
							caseParamRow[24] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//交易電話2
						//caseParamRow[25] = IAtomsConstants.MARK_EMPTY_STRING;
						if (srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"phone2\":") > 0
										&& srmCaseTransactionParameterDTOs.get(j).getItemValue().indexOf("\"phone2\":\"\"") < 0) {
							if (CollectionUtils.isEmpty(currentJsonMap)) {
								currentJsonMap = new HashMap<String, Object>();
								// 將item_value中交易參數轉爲map集合對象
								currentJsonMap = gson.fromJson(srmCaseTransactionParameterDTOs.get(j).getItemValue(), currentJsonMap.getClass());
							}
							caseParamRow[25] = (String) currentJsonMap.get("phone2");
						} else {
							caseParamRow[25] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//交易 IP
						caseParamRow[26] = IAtomsConstants.MARK_EMPTY_STRING;
						//交易 PORT
						caseParamRow[27] = IAtomsConstants.MARK_EMPTY_STRING;
						//Task #3603
						//人工預先授權
						caseParamRow[28] = IAtomsConstants.MARK_EMPTY_STRING;
						//人工預授完成
						caseParamRow[29] = IAtomsConstants.MARK_EMPTY_STRING;
						//人工取消交易
						caseParamRow[30] = IAtomsConstants.MARK_EMPTY_STRING;
						//人工退貨交易
						caseParamRow[31] = IAtomsConstants.MARK_EMPTY_STRING;
						caseParamRowsList.add(org.apache.commons.lang3.StringUtils.join(caseParamRow,"\t"));
					}
					
					for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : srmCaseHandleInfoDTOs) {
						
						row = new String[70];
						//案件單號
						//Task #3584 reopen 或(客戶=宣揚&需求單號有值)，當此狀況下，匯出資料 1) 案件單號=需求單號
						if (StringUtils.hasText(formDTO.getBccCustomerId()) && formDTO.getBccCustomerId().equals(srmCaseHandleInfoDTO.getCustomerId())) {
							row[0] = srmCaseHandleInfoDTO.getRequirementNo();
						} else {
							if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfoDTO.getCaseCategory())
									|| StringUtils.hasText(srmCaseHandleInfoDTO.getRequirementNo())) {
								row[0] = srmCaseHandleInfoDTO.getRequirementNo();
							} else {
								row[0] = srmCaseHandleInfoDTO.getCaseId();
							}
						}
						//狀態
						if (IAtomsConstants.CASE_STATUS.IMMEDIATE_CLOSE.getCode().equals(srmCaseHandleInfoDTO.getCaseStatus())) {
							row[1] = i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CLOSED);
						} else {
							row[1] = srmCaseHandleInfoDTO.getCaseStatusName();
						}
						//案件類別
						//Task #3584 reopen 2) 案件類別要用需求單號前2位判斷，要轉，不能直接抓系統的
						if (StringUtils.hasText(formDTO.getBccCustomerId()) && formDTO.getBccCustomerId().equals(srmCaseHandleInfoDTO.getCustomerId())) {
							if (srmCaseHandleInfoDTO.getRequirementNo().length()>1) {
								row[2] = caseCategoryMap.get(srmCaseHandleInfoDTO.getRequirementNo().substring(0, 2));
							} else {
								row[2] = IAtomsConstants.MARK_EMPTY_STRING;
								LOGGER.error("companyCode BCC requirementNo's length less than 2, requirementNo=" + srmCaseHandleInfoDTO.getRequirementNo());
							}
						} else {
							row[2] = srmCaseHandleInfoDTO.getCaseCategoryName();
						}
						//裝機原因//Task #3584 reopen 2. 裝機原因不用帶了，空著
						//row[3] = i18NUtil.getName(IAtomsConstants.FIELD_MICRO_MERCHANT);
						row[3] = IAtomsConstants.MARK_EMPTY_STRING;
						//原案件單號
						row[4] = IAtomsConstants.MARK_EMPTY_STRING;
						//原TID
						row[5] = IAtomsConstants.MARK_EMPTY_STRING;
						//報修原因
						row[6] = srmCaseHandleInfoDTO.getRepairReasonName();
						
						//問題分析！！！
						row[7] = srmCaseHandleInfoDTO.getProblemReasonName();
						
						//解決方式!!!
						row[8] = srmCaseHandleInfoDTO.getProblemSolutionName();
						
						//廠商責任
						if (StringUtils.hasText(srmCaseHandleInfoDTO.getResponsibity())) {
							if ("NOT_RESPON_ATTRIBUTION".equals(srmCaseHandleInfoDTO.getResponsibity())) {
								row[9] = "0";
							} else {
								row[9] = "1";
							}
						} else {
							row[9] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//特店代號
						row[10] = srmCaseHandleInfoDTO.getMerchantCode();
						//端末機代號
						row[11] = (!CollectionUtils.isEmpty(commonMap) && commonMap.containsKey(srmCaseHandleInfoDTO.getCaseId()))?commonMap.get(srmCaseHandleInfoDTO.getCaseId()):IAtomsConstants.MARK_EMPTY_STRING;
						//刷卡機名稱
						row[12] = srmCaseHandleInfoDTO.getEdcTypeName();
						//刷卡機啟用功能
						row[13] = srmCaseHandleInfoDTO.getOpenFunctionName();
						if (StringUtils.hasText(srmCaseHandleInfoDTO.getApplicationName())) {
							String[] appArr = srmCaseHandleInfoDTO.getApplicationName().split("【");
							if(appArr.length>1){
								//程式名稱
								row[14] = appArr[0];
								//程式版本
								row[15] = appArr[1].substring(0,appArr[1].length()-1);
							}else {
								//程式名稱
								row[14] = IAtomsConstants.MARK_EMPTY_STRING;
								row[15] = IAtomsConstants.MARK_EMPTY_STRING;
							}
						} else {
							//程式名稱
							row[14] = IAtomsConstants.MARK_EMPTY_STRING;
							row[15] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						
						//程式版本
						//row[15] = srmCaseHandleInfoDTO.getSoftwareVersionName();
						//雙模組模式
						row[16] = srmCaseHandleInfoDTO.getMultiModuleName();
						//是否有ECR
						if (StringUtils.hasText(srmCaseHandleInfoDTO.getEcrConnection())) {
							if ("haveEcrLine".equals(srmCaseHandleInfoDTO.getEcrConnection())) {
								row[17] = "1";
							} else {
								row[17] = "0";
							}
						} else {
							row[17] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						if (cupDccMap.containsKey(srmCaseHandleInfoDTO.getCaseId())) {
							//是否有CUP
							if (cupDccMap.get(srmCaseHandleInfoDTO.getCaseId()).indexOf("CUP") >= 0) {
								row[18] = "1";
							} else {
								row[18] = "0";
							}
							//是否有DCC
							if (cupDccMap.get(srmCaseHandleInfoDTO.getCaseId()).indexOf("DCC") >= 0) {
								row[19] = "1";
							} else {
								row[19] = "0";
							}
						} else {
							row[18] = "0";
							row[19] = "0";
						}
						//通訊模式 取第一項
						String connectionTypeName = srmCaseHandleInfoDTO.getConnectionTypeName();
						if(StringUtils.hasText(connectionTypeName) && connectionTypeName.indexOf("，") > 0){
							connectionTypeName = connectionTypeName.substring(0,connectionTypeName.indexOf("，")); 
						}
						//通訊模式
						row[20] = connectionTypeName;
						//寬頻連線業者
						row[21] = srmCaseHandleInfoDTO.getNetVendorName();
						//EDC_IP
						row[22] = srmCaseHandleInfoDTO.getLocalhostIp();
						//EDC_Netmask
						row[23] = srmCaseHandleInfoDTO.getNetmask();
						//EDC_Gateway
						row[24] = srmCaseHandleInfoDTO.getGateway();
						//說明
						if (StringUtils.hasText(srmCaseHandleInfoDTO.getDescription())) {
							row[25] = srmCaseHandleInfoDTO.getDescription().replace(IAtomsConstants.RETURN_LINE_FEED, "<br/>").replace(IAtomsConstants.MARK_WRAP, "<br/>");
						} else {
							row[25] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//row[25] = srmCaseHandleInfoDTO.getDescription();
						//案件類型
						row[26] = srmCaseHandleInfoDTO.getCaseTypeName();
						//預定完成日
						if (i18NUtil.getName(IAtomsConstants.FIELD_MAKE_APPOINTMENT).equals(row[26]) && srmCaseHandleInfoDTO.getExpectedCompletionDate() != null) {
							row[27] = DateTimeUtils.toString( srmCaseHandleInfoDTO.getExpectedCompletionDate(),  DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH);
						} else {
							row[27] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//應回應日期
						row[28] = (srmCaseHandleInfoDTO.getAcceptableResponseDate() != null)?DateTimeUtils.toString( srmCaseHandleInfoDTO.getAcceptableResponseDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						//應到場日期
						row[29] = (srmCaseHandleInfoDTO.getAcceptableArriveDate() != null)?DateTimeUtils.toString( srmCaseHandleInfoDTO.getAcceptableArriveDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						//應完修日期
						row[30] = (srmCaseHandleInfoDTO.getAcceptableFinishDate() != null)?DateTimeUtils.toString( srmCaseHandleInfoDTO.getAcceptableFinishDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						//到場次數
						row[31] = (srmCaseHandleInfoDTO.getAttendanceTimes() != null)? srmCaseHandleInfoDTO.getAttendanceTimes().toString():"";
						//廠商名稱
						row[32] = i18NUtil.getName(IAtomsConstants.FIELD_CYBERSOFT);
						//廠商工程部門名稱
						row[33] = srmCaseHandleInfoDTO.getDepartmentName();
						//廠商工程師代碼
						row[34] = srmCaseHandleInfoDTO.getVendorStaff();
						//派件動作人員 ID
						row[35] = IAtomsConstants.MARK_EMPTY_STRING;
						//派件動作人員姓名 ID
						row[36] = IAtomsConstants.MARK_EMPTY_STRING;
						//派件動作日期 ID
						row[37] = IAtomsConstants.MARK_EMPTY_STRING;
						//派工動作人員 ID
						row[38] = srmCaseHandleInfoDTO.getDispatchUser();
						//派工動作人員姓名
						row[39] = srmCaseHandleInfoDTO.getDispatchUserName();
						//派工動作日期
						row[40] = (srmCaseHandleInfoDTO.getDispatchDate() != null)?DateTimeUtils.toString( srmCaseHandleInfoDTO.getDispatchDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						//回應動作人員 ID
						row[41] = srmCaseHandleInfoDTO.getResponseUser();
						//回應動作人員姓名
						row[42] = srmCaseHandleInfoDTO.getResponseUserName();
						//回應動作日期
						row[43] = (srmCaseHandleInfoDTO.getResponseDate() != null)?DateTimeUtils.toString(srmCaseHandleInfoDTO.getResponseDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						//到場動作人員 ID
						row[44] = srmCaseHandleInfoDTO.getArriveUser();
						//到場動作人員姓名
						row[45] = srmCaseHandleInfoDTO.getArriveUserName();
						//到場動作日期
						row[46] = (srmCaseHandleInfoDTO.getArriveDate() != null)?DateTimeUtils.toString(srmCaseHandleInfoDTO.getArriveDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						//完修動作人員 ID
						row[47] = srmCaseHandleInfoDTO.getCompleteUser();
						//完修動作人員姓名
						row[48] = srmCaseHandleInfoDTO.getCompleteUserName();
						//完修動作日期
						row[49] = (srmCaseHandleInfoDTO.getCompleteDate() != null)?DateTimeUtils.toString(srmCaseHandleInfoDTO.getCompleteDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						//簽收動作人員 ID
						row[50] = srmCaseHandleInfoDTO.getAnalyzeUser();
						//簽收動作人員姓名
						row[51] = srmCaseHandleInfoDTO.getAnalyzeUserName();
						//簽收動作日期
						row[52] = (srmCaseHandleInfoDTO.getAnalyzeDate() != null)?DateTimeUtils.toString(srmCaseHandleInfoDTO.getAnalyzeDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						//結案者代號
						row[53] = srmCaseHandleInfoDTO.getCloseUser();
						//結案者姓名
						row[54] = srmCaseHandleInfoDTO.getCloseUserName();
						//結案日期
						row[55] = (srmCaseHandleInfoDTO.getCloseDate() != null)?DateTimeUtils.toString(srmCaseHandleInfoDTO.getCloseDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						//建立者代號
						row[56] = srmCaseHandleInfoDTO.getCreatedById();
						//建立者姓名
						row[57] = srmCaseHandleInfoDTO.getCreatedByName();
						//建立日期
						row[58] = (srmCaseHandleInfoDTO.getCreatedDate() != null)?DateTimeUtils.toString(srmCaseHandleInfoDTO.getCreatedDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						//更新者代號
						row[59] = srmCaseHandleInfoDTO.getUpdatedById();
						//更新者姓名
						row[60] = srmCaseHandleInfoDTO.getUpdatedByName();
						//更新日期
						row[61] = (srmCaseHandleInfoDTO.getUpdatedDate() != null)?DateTimeUtils.toString(srmCaseHandleInfoDTO.getUpdatedDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						//異動項目說明
						if (StringUtils.hasText(srmCaseHandleInfoDTO.getUpdatedDescription())) {
							row[62] = srmCaseHandleInfoDTO.getUpdatedDescription().replace(IAtomsConstants.RETURN_LINE_FEED, "<br/>").replace(IAtomsConstants.MARK_WRAP, "<br/>");
						} else {
							row[62] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//row[62] = srmCaseHandleInfoDTO.getUpdatedDescription();
						//裝機案件單號
						row[63] = srmCaseHandleInfoDTO.getInstallCaseId();
						//周邊設備1設備名稱
						/*row[64] = srmCaseHandleInfoDTO.getPeripheralsName();
						//周邊設備2設備名稱
						row[65] = srmCaseHandleInfoDTO.getPeripherals2Name();
						//周邊設備3設備名稱
						row[66] = srmCaseHandleInfoDTO.getPeripherals3Name();
						//周邊設備1啟用功能
						row[67] = srmCaseHandleInfoDTO.getPeripheralsFunctionName();
						//周邊設備2啟用功能
						row[68] = srmCaseHandleInfoDTO.getPeripheralsFunction2Name();
						//周邊設備3啟用功能
						row[69] = srmCaseHandleInfoDTO.getPeripheralsFunction3Name();*/
						//周邊設備1設備名稱
					    row[64] = IAtomsConstants.MARK_EMPTY_STRING;
					    //周邊設備2設備名稱
					    row[65] = IAtomsConstants.MARK_EMPTY_STRING;
					    //周邊設備3設備名稱
						row[66] = IAtomsConstants.MARK_EMPTY_STRING;
					    //周邊設備1啟用功能
					    row[67] = IAtomsConstants.MARK_EMPTY_STRING;
					    //周邊設備2啟用功能
					    row[68] = IAtomsConstants.MARK_EMPTY_STRING;
					    //周邊設備3啟用功能
					    row[69] = IAtomsConstants.MARK_EMPTY_STRING;
						srmCaseHandleInfoRows.add(org.apache.commons.lang3.StringUtils.join(row,"\t"));
					}
					
					//查詢按鍵記錄當
					srmCaseTransactionDTOs = this.srmCaseTransactionDAO.listByCaseId(caseIds, IAtomsConstants.STATUS_ACTIVE, null, null);
					caseTransactionRow = new String[8];
					//案件紀錄檔
					for (int j = 0; j < srmCaseTransactionDTOs.size(); j++) {
						caseTransactionRow = new String[8];
						//案件單號
						caseTransactionRow[0] = caseIdMap.get(srmCaseTransactionDTOs.get(j).getCaseId());
						//案件動作
						caseTransactionRow[1] = srmCaseTransactionDTOs.get(j).getActionName();
						//執行動作後狀態
						caseTransactionRow[2] = srmCaseTransactionDTOs.get(j).getAfterActionStatus();
						//案件處理說明
						if (StringUtils.hasText(srmCaseTransactionDTOs.get(j).getDescription())) {
							caseTransactionRow[3] = srmCaseTransactionDTOs.get(j).getDescription().replace(IAtomsConstants.RETURN_LINE_FEED, "<br/>").replace(IAtomsConstants.MARK_WRAP, "<br/>");
						} else {
							caseTransactionRow[3] = IAtomsConstants.MARK_EMPTY_STRING;
						}
						//實際執行時間
						caseTransactionRow[4] = (srmCaseTransactionDTOs.get(j).getDealDate() != null)?DateTimeUtils.toString(srmCaseTransactionDTOs.get(j).getDealDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						//建立者代號
						caseTransactionRow[5] = srmCaseTransactionDTOs.get(j).getCreatedById();
						//建立者姓名
						caseTransactionRow[6] = srmCaseTransactionDTOs.get(j).getCreatedByName();
						//建立日期
						caseTransactionRow[7] = (srmCaseTransactionDTOs.get(j).getCreatedDate() != null)?DateTimeUtils.toString(srmCaseTransactionDTOs.get(j).getCreatedDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
						caseTransactionRowsList.add(org.apache.commons.lang3.StringUtils.join(caseTransactionRow,"\t"));
						
					}
					
				}
				int n= 0;
				assetManageFormDTO = new AssetManageFormDTO();
				assetManageFormDTO.setUserId(null);
				assetManageFormDTO.setQueryFtpsFlag(IAtomsConstants.PARAM_YES);
				//設備主檔 --(使用人=台新銀行)且(為CMS案件使用)且(設備狀態為 使用中或停用中)
				//Task #3584 設備:(狀態=使用中、停用中)&設備對應之案件={(客戶=台新)或(客戶=宣揚&需求單號有值)}
				List<SrmCaseHandleInfoDTO> repositoryDTOList = this.srmCaseHandleInfoDAO.getAssetByCompanyId(formDTO.getQueryCompanyId(), formDTO.getBccCustomerId());
				if (!CollectionUtils.isEmpty(repositoryDTOList)) {
					int size = repositoryDTOList.size();
					String serialNumbers = IAtomsConstants.MARK_EMPTY_STRING;
					Map<String, SrmCaseHandleInfoDTO> caseHandleInfoDTOMap = new HashMap<String, SrmCaseHandleInfoDTO>();
					//當數量大於100條時，出於效率考慮，每一百條查詢一次
					if (size>100) {
						for (SrmCaseHandleInfoDTO caseHandleDTO : repositoryDTOList) {
							if (!caseHandleInfoDTOMap.containsKey(caseHandleDTO.getSerialNumber())) {
								caseHandleInfoDTOMap.put(caseHandleDTO.getSerialNumber(), caseHandleDTO);
							}
							if ((n%100 == 1 || n == 0 ) && n!=1) {
								serialNumbers = caseHandleDTO.getSerialNumber();
							} else if (n < repositoryDTOList.size()) {
								serialNumbers +=  "," + caseHandleDTO.getSerialNumber();
							}
							if ((n%100 == 0 || n == repositoryDTOList.size()-1) && n>1) {
								assetManageFormDTO.setQuerySerialNumbers(serialNumbers);
								//assetRow = new String[52];
								if (StringUtils.hasText(assetManageFormDTO.getQuerySerialNumbers())) {
									dmmRepositoryDTOs = this.dmmRepositoryDAO.listBy(assetManageFormDTO);
									if (!CollectionUtils.isEmpty(dmmRepositoryDTOs)) {
										for (DmmRepositoryDTO dmmRepositoryDTO : dmmRepositoryDTOs) {
											assetRow = this.dealRespoitory(dmmRepositoryDTO, caseHandleInfoDTOMap, retireReasonList, formDTO.getBccCustomerId());
											assetRowsList.add(org.apache.commons.lang3.StringUtils.join(assetRow,"\t"));
										}
									}
								} else {
									assetRowsList.add(IAtomsConstants.MARK_EMPTY_STRING);
								}
								serialNumbers = IAtomsConstants.MARK_EMPTY_STRING;
								caseHandleInfoDTOMap = new HashMap<String, SrmCaseHandleInfoDTO>();
							}
							n++;
						}
					} else {
						if (size < 2) {
							serialNumbers = repositoryDTOList.get(0).getSerialNumber();
							if (!caseHandleInfoDTOMap.containsKey(serialNumbers)) {
								caseHandleInfoDTOMap.put(serialNumbers, repositoryDTOList.get(0));
							}
						} else {
							for (SrmCaseHandleInfoDTO caseHandleDTO : repositoryDTOList) {
								//將設備相關的案件資訊放入以設備序號為key的map中
								if (!caseHandleInfoDTOMap.containsKey(caseHandleDTO.getSerialNumber())) {
									caseHandleInfoDTOMap.put(caseHandleDTO.getSerialNumber(), caseHandleDTO);
								}
								if (n == 0) {
									serialNumbers = caseHandleDTO.getSerialNumber();
								} else if (n < repositoryDTOList.size()) {
									serialNumbers +=  "," + caseHandleDTO.getSerialNumber();
								}
								n++;
							}
						}
						assetManageFormDTO.setQuerySerialNumbers(serialNumbers);
						//assetRow = new String[52];
						if (StringUtils.hasText(assetManageFormDTO.getQuerySerialNumbers())) {
							dmmRepositoryDTOs = this.dmmRepositoryDAO.listBy(assetManageFormDTO);
							if (!CollectionUtils.isEmpty(dmmRepositoryDTOs)) {
								for (DmmRepositoryDTO dmmRepositoryDTO : dmmRepositoryDTOs) {
									assetRow = this.dealRespoitory(dmmRepositoryDTO, caseHandleInfoDTOMap, retireReasonList, formDTO.getBccCustomerId());
									assetRowsList.add(org.apache.commons.lang3.StringUtils.join(assetRow,"\t"));
								}
							}
						} else {
							assetRowsList.add(IAtomsConstants.MARK_EMPTY_STRING);
						}
					}
				}
				
				String fname = tempPath+ File.separator + "VDR_TO_ATOMS_TICKET.CSV";
				pathList.add(fname);
				String caseTransactionFname = tempPath+ File.separator + "VDR_TO_ATOMS_TICKET_RECORD.CSV";
				pathList.add(caseTransactionFname);
				String caseParamFname = tempPath+ File.separator + "VDR_TO_ATOMS_PARAMETER.CSV";
				pathList.add(caseParamFname);
				String assetFname = tempPath+ File.separator + "VDR_TO_ATOMS_REPOSITORY.CSV";
				pathList.add(assetFname);
				for (String path : pathList) {
					FileUtils.removeFile(path);
				}
				String[] heads = {"TICKET_ID	STATUS	TICKET_TYPE	INSTALL_TYPE	ORIGINAL_TICKET_ID	ORIGINAL_TID	REASON	QUESTION	SOLUTION	IS_VENDOR_RESPONSIBILITY	MID	TID	EDC_NAME	EDC_FUNC	APPLICATION_NAME	APPLICATION_VERSION	MULTI_MODULE	HAVE_ECR	HAVE_CUP	HAVE_DCC	COMM_MODE	NET_VENDOR	EDC_IP	EDC_NETMASK	EDC_GATEWAY	COMMENT	IMPORTANCE	ESTIMATED_FINISH_DATE	ESTIMATED_RESPONSE_DATE	ESTIMATED_ARRIVE_DATE	ESTIMATED_COMPLETE_DATE	ARRIVED_COUNT	VENDOR_NAME	DEPT_NAME	ENGINEER_ID	DISPATCH_USER	DISPATCH_USER_NAME	DISPATCH_DATE	ASSIGN_USER	ASSIGN_USER_NAME	ASSIGN_DATE	RESPONSE_USER	RESPONSE_USER_NAME	RESPONSE_DATE	ARRIVE_USER	ARRIVE_USER_NAME	ARRIVE_DATE	COMPLETE_USER	COMPLETE_USER_NAME	COMPLETE_DATE	ANALYZE_USER	ANALYZE_USER_NAME	ANALYZE_DATE	CLOSE_USER	CLOSE_USER_NAME	CLOSE_DATE	CREATE_USER	CREATE_USER_NAME	CREATE_DATE	UPDATE_USER	UPDATE_USER_NAME	UPDATE_DATE	MODIFY_COMMENT	ROOT_TICKET_ID	ExtDev1_NAME	ExtDev2_NAME	ExtDev3_NAME	ExtDev1_FUNC	ExtDev2_FUNC	ExtDev3_FUNC"};
				CSVUtils.writeCsv(heads, srmCaseHandleInfoRows, fname);
				String[] head = {"TICKET_ID	ACTION	STATUS	COMMENT	ACTUALLY_TIME	CREATE_USER	CREATE_USER_NAME	CREATE_DATE"};
				CSVUtils.writeCsv(head, caseTransactionRowsList, caseTransactionFname);
				//Task #3603
				String[] paramheads = {"TRANS_TYPE	TICKET_ID	MID	TID	SALE	VOID	SETTLEMENT	REFUND	MANUAL_KEYIN	OFFLINE	CASHER_ID	ADJUST	PREAUTH	PREAUTH_COMPLETE	REFERRAL_DIAL	TIPS	STORE_CASH	STORE_CANCEL	CHARGE_CANCEL	OPEN_CARD	FDBC	DOWNLOAD	QUERY	HOTKEY	TRANS_TEL1	TRANS_TEL2	HOST_IP	HOST_PORT	EXT_PARA1	EXT_PARA2	EXT_PARA3	EXT_PARA4"};
				CSVUtils.writeCsv(paramheads, caseParamRowsList, caseParamFname);
				String[] assetheads = {"ASSET_TYPE_NAME	SERIAL_NUMBER	PROPERTY_ID	ACTION	STATUS	KEEPER_NAME	WAREHOUSE_NAME	PURCHASE_CONTRACT_ID	MAINTENANCE_CONTRACT_ID	MA_TYPE	IS_SPARE_PARTS	IS_CUP	CARRIER	CARRY_START	CARRY_END	CARRY_COMMENT	TICKET_ID	TICKET_COMPLETION_DATE	TICKET_CLOSE_DATE	MID	TID	MER_REGISTERED_NAME	MER_ANNOUNCED_NAME	MER_INSTALL_ADDRESS	MER_INSTALL_POSITION_DESC	MER_LOCATION	ASSET_IN_ID	ASSET_TRANS_ID	ORDER_NO	IS_ENABLED	ENABLE_DATE	TID_ENABLE_DATE	VENDOR_NAME	APPLICATION_NAME	APPLICATION_VERSION	GET_DATE	IS_CHECKED	APPROVE_DATE	GUARANTEE_DATE	REPAIR_VENDOR	REPAIR_COMMENT	RETIRE_REASON_CODE	RETIRE_COMMENT	CREATE_USER	CREATE_USER_NAME	CREATE_DATE	UPDATE_USER	UPDATE_USER_NAME	UPDATE_DATE	DELETED	SIM_ENABLE_DATE	ROOT_TICKET_ID"};
				CSVUtils.writeCsv(assetheads, assetRowsList, assetFname);
				
				String name = SystemConfigManager.getProperty("ATOMS_FTPS", "name");
				name = PasswordEncoderUtilities.decodePassword(name);
				String pwd = SystemConfigManager.getProperty("ATOMS_FTPS", "pwd");
				pwd = PasswordEncoderUtilities.decodePassword(pwd);
				String ip = SystemConfigManager.getProperty("ATOMS_FTPS", "ip");
				String port = SystemConfigManager.getProperty("ATOMS_FTPS", "port");
				String ftpsPath = SystemConfigManager.getProperty("ATOMS_FTPS", "ftpsPath");
						
				boolean uploaded = FtpClient.uploadFile(ip, Integer.parseInt(port), name, pwd, ftpsPath, pathList);
				if (!uploaded) {
					LOGGER.error(this.getClass().getName() + ".queryCaseInfo() uploaded iatoms case is failed...");
				} else {
					LOGGER.debug(this.getClass().getName() + ".queryCaseInfo() upload success ");
				}
				for (String path : pathList) {
					FileUtils.removeFile(path);
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".queryCaseInfo() is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".queryCaseInfo():" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		} finally {
			for (String path : pathList) {
				try {
					FileUtils.removeFile(path);
				} catch (Exception e) {
					LOGGER.error(this.getClass().getName() + ".queryCaseInfo() removeFile is error" + e);
					e.printStackTrace();
				}
			}
		}
	}
	/**
	 * 將設備資料放入需要匯出的數組中
	 * @param dmmRepositoryDTO
	 * @param installCaseIdMap
	 * @param caseHandleInfoDTOMap
	 * @param retireReasonList
	 * @return String[]
	 * @throws Exception
	 */
	private String[] dealRespoitory(DmmRepositoryDTO dmmRepositoryDTO, Map<String, SrmCaseHandleInfoDTO> caseHandleInfoDTOMap, List<Parameter> retireReasonList,String bccCustomerId) throws Exception{
		String[] assetRow = new String[52];
		try {
			//設備名稱
			assetRow[0] = dmmRepositoryDTO.getName();
			//設備序號
			assetRow[1] = dmmRepositoryDTO.getSerialNumber();
			//財產編號
			assetRow[2] = dmmRepositoryDTO.getPropertyId();
			//庫存動作
			assetRow[3] = dmmRepositoryDTO.getAction();
			//狀態
			if (i18NUtil.getName(IAtomsConstants.ACTION_REMOVE).equals(dmmRepositoryDTO.getStatus())) {
				assetRow[4] = i18NUtil.getName(IAtomsConstants.FIELD_FAULT);
			} else {
				assetRow[4] = dmmRepositoryDTO.getStatus();
			}
			//保管人
			assetRow[5] = dmmRepositoryDTO.getKeeperName();
			//倉庫名稱
			String[] list = dmmRepositoryDTO.getItemName().split("-");
			assetRow[6] = IAtomsConstants.MARK_EMPTY_STRING;
			for (int k1 = 1; k1 < list.length; k1++) {
				assetRow[6]=assetRow[6]+list[k1];
			}
			//assetRow[6] = list[1];
			//採購合約
			assetRow[7] = i18NUtil.getName(IAtomsConstants.FIELD_MICRO_MERCHANT);
			//維護合約
			assetRow[8] = i18NUtil.getName(IAtomsConstants.FIELD_MICRO_MERCHANT);
			//維護模式
			if (i18NUtil.getName(IAtomsConstants.FIELD_LEASE).equals(dmmRepositoryDTO.getMaType())) {
				assetRow[9] = dmmRepositoryDTO.getMaType();
			} else {
				assetRow[9] = i18NUtil.getName(IAtomsConstants.FIELD_BUY_OFF);
			}
			
			//是否為備機
			assetRow[10] = "0";
			//是否為銀聯機
			if (IAtomsConstants.PARAM_YES.equals(dmmRepositoryDTO.getIsCup())) {
				assetRow[11] = "1";
			} else {
				assetRow[11] = "0";
			}
			//領用人
			assetRow[12] = dmmRepositoryDTO.getCarrier();
			//領用起
			assetRow[13] = (dmmRepositoryDTO.getCarryDate() != null)?DateTimeUtils.toString(dmmRepositoryDTO.getCarryDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
			//領用迄
			assetRow[14] = IAtomsConstants.MARK_EMPTY_STRING;
			//領用說明
			assetRow[15] = dmmRepositoryDTO.getCarryComment();
			//案件單號
			//Task #3584 reopen  1) 案件單號=需求單號
			if (caseHandleInfoDTOMap.containsKey(dmmRepositoryDTO.getSerialNumber())) {
				if (StringUtils.hasText(bccCustomerId) && bccCustomerId.equals(caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getCustomerId())) {
					assetRow[16] = caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getRequirementNo();
				} else {
					//需求單號
					//Task #3584 reopen 2) IATOMS其餘類別案件，若需求單號有值，則需求單號為ATOMS案件編號，否則 以IATOMS案件編號為ATOMS案件編號
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getCaseCategory())
							|| StringUtils.hasText(caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getRequirementNo())) {
						assetRow[16] = caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getRequirementNo();
					} else {
						//案件編號
						assetRow[16] = caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getCaseId();
					}
				}
			} else {
				assetRow[16] = IAtomsConstants.MARK_EMPTY_STRING;
			}
			//案件完修日
			assetRow[17] = (dmmRepositoryDTO.getCaseCompletionDate() != null) ? DateTimeUtils.toString(dmmRepositoryDTO.getCaseCompletionDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
			//案件結案日
			assetRow[18] = (caseHandleInfoDTOMap.containsKey(dmmRepositoryDTO.getSerialNumber()) && caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getCloseDate() != null) ? DateTimeUtils.toString(caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getCloseDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
			//特店代號
			assetRow[19] = dmmRepositoryDTO.getMerchantCode();
			//端末機代號 //Task #3584 reopen 1. 端末機代號 統一取 一般交易項目之TID
			assetRow[20] = (caseHandleInfoDTOMap.containsKey(dmmRepositoryDTO.getSerialNumber()) && StringUtils.hasText(caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getTid()))? caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getTid() : IAtomsConstants.MARK_EMPTY_STRING;
			//特店登記名稱
			assetRow[21] = dmmRepositoryDTO.getMerName();
			//特店對外名稱
			assetRow[22] = dmmRepositoryDTO.getHeaderName();
			//特店安裝地址
			assetRow[23] = dmmRepositoryDTO.getMerInstallAddress();
			//特店安裝位置
			assetRow[24] = IAtomsConstants.MARK_EMPTY_STRING;
			//特店區域
			assetRow[25] = dmmRepositoryDTO.getAreaName();
			//設備入庫單號
			assetRow[26] = dmmRepositoryDTO.getAssetInId();
			//設備轉倉單號
			assetRow[27] = dmmRepositoryDTO.getAssetTransId();
			//訂單號碼
			assetRow[28] = IAtomsConstants.MARK_EMPTY_STRING;
			//是否啟用
			if (IAtomsConstants.PARAM_YES.equals(dmmRepositoryDTO.getIsEnabled())) {
				assetRow[29] = "1";
			} else {
				assetRow[29] = "0";
			}
			//啟用日
			assetRow[30] = (dmmRepositoryDTO.getEnableDate() != null) ? DateTimeUtils.toString(dmmRepositoryDTO.getEnableDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
			//端末機代號啟用日 繼承至新機 未拆一直存在
			assetRow[31] = (caseHandleInfoDTOMap.containsKey(dmmRepositoryDTO.getSerialNumber()) && caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getInstallCompleteDate() != null) ? DateTimeUtils.toString(caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getInstallCompleteDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
			//廠商名稱 
			assetRow[32] = dmmRepositoryDTO.getMaintainCompany();
			//程式名稱
			assetRow[33] = dmmRepositoryDTO.getAppName();
			//程式版本
			assetRow[34] = dmmRepositoryDTO.getAppVersion();
			//取得日
			assetRow[35] = (dmmRepositoryDTO.getAssetInTime() != null) ? DateTimeUtils.toString(dmmRepositoryDTO.getAssetInTime(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
			//是否驗收
			if (IAtomsConstants.PARAM_YES.equals(dmmRepositoryDTO.getIsChecked())) {
				assetRow[36] = "1";
			} else {
				assetRow[36] = "0";
			}
			//驗收日
			assetRow[37] = (dmmRepositoryDTO.getCustomerApproveDate() != null) ? DateTimeUtils.toString(dmmRepositoryDTO.getCustomerApproveDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
			//保固日
			assetRow[38] = (dmmRepositoryDTO.getCustomerWarrantyDate() != null) ? DateTimeUtils.toString(dmmRepositoryDTO.getCustomerWarrantyDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
			//維修廠商
			assetRow[39] = dmmRepositoryDTO.getRepairVendor();
			//維修說明
			assetRow[40] = dmmRepositoryDTO.getRepairComment();
			//報廢原因
			assetRow[41] = IAtomsConstants.MARK_EMPTY_STRING;
			for (int j = 0; j < retireReasonList.size(); j++) {
				if (retireReasonList.get(j).getValue().equals(dmmRepositoryDTO.getRetireReasonCode())) {
					assetRow[41] = retireReasonList.get(j).getName();
					break;
				}
			}
			//報廢說明
			assetRow[42] = dmmRepositoryDTO.getDisabledComment();
			//建立者代號
			assetRow[43] = dmmRepositoryDTO.getCreateUser();
			//建立者姓名
			assetRow[44] = dmmRepositoryDTO.getCreateUserName();
			//建立日期
			assetRow[45] = (dmmRepositoryDTO.getCreateDate() != null) ? DateTimeUtils.toString(dmmRepositoryDTO.getCreateDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
			//更新者代號
			assetRow[46] = dmmRepositoryDTO.getUpdateUser();
			//更新者姓名
			assetRow[47] = dmmRepositoryDTO.getUpdateUserName();
			//更新日期
			assetRow[48] = (dmmRepositoryDTO.getUpdateDate() != null) ? DateTimeUtils.toString(dmmRepositoryDTO.getUpdateDate(), DateTimeUtils.DT_FMT_YYYYMMDDHHMMSS_SLASH):"";
			//已刪除
			assetRow[49] = "0";
			//租賃啟用日
			assetRow[50] = IAtomsConstants.MARK_EMPTY_STRING;
			//裝機案件單號
			assetRow[51] = caseHandleInfoDTOMap.containsKey(dmmRepositoryDTO.getSerialNumber()) ? caseHandleInfoDTOMap.get(dmmRepositoryDTO.getSerialNumber()).getInstallCaseId() : IAtomsConstants.MARK_EMPTY_STRING;
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".dealRespoitory() is error" + e);
			e.printStackTrace();
		}
		return assetRow;
	}
	
	private Map<String, String> repairCaseSign(List<SrmCaseHandleInfoDTO> caseHandleInfoDTOs, Boolean isUseNewCase, IAtomsLogonUser logonUser,
			Map<String, String> callCmsMap) {
		Map<String, String> tempMap = new HashMap<String, String>();
		try {
			String api = "APIOP004";
			String json = null;
			String message = null;
			String caseId = null;
			Gson gson = new GsonBuilder().create();
			ReceiveJobNoticeDTO resultMsg = null;
			StringBuffer tempCaseId = new StringBuffer();
			SrmCaseHandleInfoDTO caseHandleInfoDTO = null;
			ReceiveJobNoticeDTO jobNoticeDTO = null;
			List<SrmCaseHandleInfoDTO> errorDto = new ArrayList<SrmCaseHandleInfoDTO>();
			StringBuffer errorMsg = new StringBuffer();
			Map<String, String> map = null;
			String apiLogResult = null;
			List<SrmCaseHandleInfoDTO> dtos = null;
			for(SrmCaseHandleInfoDTO dto : caseHandleInfoDTOs){
				dtos = this.srmCaseHandleInfoDAO.getCaseInfoById(dto.getCaseId());
				if (dtos != null) {
					caseHandleInfoDTO = dtos.get(0);
				}
				//caseHandleInfoDTO = this.srmCaseHandleInfoDAO.getCaseInfoById(dto.getCaseId());
				if (IAtomsConstants.YES.equals(caseHandleInfoDTO.getCmsCase()) && IAtomsConstants.YES.equals(caseHandleInfoDTO.getIsIatomsCreateCms())
						&& caseHandleInfoDTO.getDispatchDate() == null) {
					jobNoticeDTO = new ReceiveJobNoticeDTO("01", caseHandleInfoDTO.getMerMid(), dto.getCaseId(), caseHandleInfoDTO.getDtid(), 
							caseHandleInfoDTO.getContactUser(), caseHandleInfoDTO.getContactUserPhone(), caseHandleInfoDTO.getContactMobilePhone(), 
							caseHandleInfoDTO.getContactUserEmail(), caseHandleInfoDTO.getContactAddressLocationName(), 
							caseHandleInfoDTO.getContactAddress(), isUseNewCase?dto.getRepairReasonName():caseHandleInfoDTO.getRepairReasonName(), caseHandleInfoDTO.getContactAreaCode(),
							caseHandleInfoDTO.getContactPostArea());
					json = gson.toJson(jobNoticeDTO);
					map =  NetUtil.sendHtppsNew(api, json);
					if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
						message = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
					}
					if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
						apiLogResult = "true";
					} else {
						apiLogResult = "false";
					}
					LOGGER.debug("CaseManagerService --> repairCaseSign() --> ", "message=" + message);
					//上行(RQ)
					this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, json);
					if (StringUtils.hasText(message)) {
						Object responseJson = (Object) gson.fromJson(message, Object.class);
						resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
						if (!(resultMsg.getRESULT().equals("True"))) {
							errorDto.add(dto);
							errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
							apiLogResult = "false";
							//下行(RS)
							this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), message);
						} else {
							tempCaseId.append(dto.getCaseId()).append(IAtomsConstants.MARK_SEPARATOR);
							callCmsMap.put(dto.getCaseId(), message);
						}
					} else {
						errorDto.add(dto);
						errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), "cms請求失敗"}, null)).append("</br>");
						apiLogResult = "false";
						//下行(RS)
						this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
					}
				}
			}
			if (errorDto.size() != 0) {
				for (SrmCaseHandleInfoDTO srmCaseHandleInfoDTO : errorDto) {
					caseHandleInfoDTOs.remove(srmCaseHandleInfoDTO);
				}
				if (caseHandleInfoDTOs.size() != 0) {
					caseId = StringUtils.toList(tempCaseId.substring(0, tempCaseId.length() - 1), IAtomsConstants.MARK_SEPARATOR).get(0);
				}
			}
			tempMap.put("caseId", caseId);
			tempMap.put("msg", errorMsg.toString());
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".repairCaseSign() is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".repairCaseSign():" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return tempMap;
	}
	
	/**
	 * 存儲案件call cms的log
	 * @param msgType：電文類型,01：上行(RQ),02：下行(RS)
	 * @param masterId：交易主檔
	 * @param detailId：交易明細檔
	 * @param userId：登陸者id
	 * @param userName：登陸者name
	 * @param result：交易結果
	 * @param failReasonDesc：交易回覆錯誤訊息
	 * @param message：電文內容
	 * @throws ServiceException
	 */
	private void insertApiLog(String msgType, String masterId, String detailId, IAtomsLogonUser logonUser, String result, String failReasonDesc, String message) throws ServiceException{
		LOGGER.debug(".insertApiLog()--> msgType=" + msgType);
		LOGGER.debug(".insertApiLog()--> masterId=" + masterId);
		LOGGER.debug(".insertApiLog()--> detailId=" + detailId);
		LOGGER.debug(".insertApiLog()--> userId=" + logonUser.getId());
		LOGGER.debug(".insertApiLog()--> userName=" + logonUser.getName());
		LOGGER.debug(".insertApiLog()--> result=" + result);
		LOGGER.debug(".insertApiLog()--> failReasonDesc=" + failReasonDesc);
		LOGGER.debug(".insertApiLog()--> message=" + message);
		try {
			  //上下文寫入API_LOG
			  ApiLogDTO apiLogDTO = new ApiLogDTO();
			  apiLogDTO.setId(this.generateGeneralUUID("API_LOG"));
			  apiLogDTO.setIp(logonUser.getFromIp());
			  apiLogDTO.setClientCode("CMS");
			  apiLogDTO.setFunctionCode("SRM05020");
			  apiLogDTO.setMsgType(msgType);//上行
			  apiLogDTO.setMasterId(masterId);
			  apiLogDTO.setDetailId(detailId);//歷程id
			  apiLogDTO.setResult(result);
			  apiLogDTO.setMessage(message);
			  apiLogDTO.setFailReasonDesc(failReasonDesc);
			  apiLogDTO.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
			  apiLogDTO.setCreatedById(logonUser.getId());
			  apiLogDTO.setCreatedByName(logonUser.getName());
			  Transformer transformer = new SimpleDtoDmoTransformer();
			  ApiLog apiLog = null;
			  apiLog = (ApiLog)transformer.transform(apiLogDTO, new ApiLog());			  
			  this.apiLogDAO.getDaoSupport().save(apiLog); 
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".insertApiLog() is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".insertApiLog():" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
	}
	/**
	 * Purpose:設置當前登陸者角色屬性(客戶角色與廠商角色)
	 * @author CrissZhang
	 * @return void
	 */
	public SessionContext getUserRoleAttribute(MultiParameterInquiryContext inquiryContext)throws ServiceException {
		SessionContext sessionContext = new SessionContext();
		try {
			// 得到當前登陸者信息
			IAtomsLogonUser logonUser = (IAtomsLogonUser) inquiryContext.getParameter("logonUser");
			//當前登入者對應之公司
			String logonUserCompanyId = logonUser.getAdmUserDTO().getCompanyId();
			//當前登入者角色屬性
			String userAttribute = null;
			//得到用戶角色列表
			List<AdmRoleDTO> userRoleList = logonUser.getUserFunctions();
			// 是客戶角色
			Boolean isCustomerAttribute = false;
			// 是廠商角色
			Boolean isVendorAttribute = false;
			// 是客戶廠商角色
			Boolean isCustomerVendorAttribute = false;
			if(StringUtils.hasText(logonUserCompanyId)){
				// 得到公司信息
				BimCompany bimCompany = (BimCompany) this.companyDAO.findByPrimaryKey(BimCompany.class, logonUserCompanyId);
				if(bimCompany != null){
					// 公司是否刪除
					if(IAtomsConstants.NO.equals(bimCompany.getDeleted())){
						// 處理得到的角色屬性集合
						if(!CollectionUtils.isEmpty(userRoleList)){
							for (AdmRoleDTO admRoleDTO : userRoleList) {
								userAttribute = admRoleDTO.getAttribute();
								// 是廠商角色
								if (IAtomsConstants.VECTOR_ROLE_ATTRIBUTE.equals(userAttribute)) {
									// 如果即是客戶角色又是廠商角色則設置為廠商角色
									isVendorAttribute = true;
									//Task #3583  客戶廠商      如果即是客戶廠商角色又是廠商角色則設置為廠商角色
								} else if (IAtomsConstants.CUSTOMER_VECTOR_ROLE_ATTRIBUTE.equals(userAttribute)) {
									isCustomerVendorAttribute = true;
									// 是客戶角色
								} else if(IAtomsConstants.CUSTOMER_ROLE_ATTRIBUTE.equals(userAttribute)){
									isCustomerAttribute = true;
								}
							}
							if (isVendorAttribute) {
								isVendorAttribute = true;
								isCustomerVendorAttribute = false;
								isCustomerAttribute = false;
							} else if (isCustomerVendorAttribute) {
								isVendorAttribute = false;
								isCustomerVendorAttribute = true;
								isCustomerAttribute = false;
							} else if (isCustomerAttribute) {
								isVendorAttribute = false;
								isCustomerVendorAttribute = false;
								isCustomerAttribute = true;
							}
						}
					}
				}
			}
			// 放置客戶角色與廠商角色標志
			sessionContext.setAttribute("isCustomerAttribute", isCustomerAttribute);
			sessionContext.setAttribute("isVendorAttribute", isVendorAttribute);
			sessionContext.setAttribute("isCustomerVendorAttribute", isCustomerVendorAttribute);
		} catch (DataAccessException e) {
			LOGGER.error("getUserRoleAttribute()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.UPLOAD_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("getUserRoleAttribute()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.UPLOAD_FAILURE, e);
		}
		return sessionContext;
	}
	
	/** (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#cancelConfirmAuthorizes(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext cancelConfirmAuthorizes(SessionContext sessionContext) throws ServiceException {
		// TODO Auto-generated method stub
		try {
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			IAtomsLogonUser logonUser = new IAtomsLogonUser();
			logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
			Message msg = null;
			StringBuffer errorMsg = new StringBuffer();
			String message =  null;
			try {
				// 案件處理處理中資料DMO對象
				SrmCaseHandleInfo caseHandleInfo = null;
				// 調用驗證方法
				Map<String, Object> resultMap = this.validateCaseAction(formDTO);
				if ((Boolean) resultMap.get(IAtomsConstants.PARAM_FLAG)) {
					if(StringUtils.hasText(formDTO.getCaseId())){
						// 得到案件處理集合
						List<SrmCaseHandleInfoDTO> srmCaseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(formDTO.getCaseId());
						if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
							//Task #3336 call CMS API Task #3519
							Map<String, String> map = null;
							String api = "APIOP003";
							String json = null;
							ReceiveJobNoticeDTO jobNoticeDTO = null;
							Gson gson = new GsonBuilder().create();
							ReceiveJobNoticeDTO resultMsg = null;
							String tempMsg = null;
							String apiLogResult = null;
							List<SrmCaseHandleInfoDTO> successDto = new ArrayList<SrmCaseHandleInfoDTO>();
							String caseType = null;
							String isProject = null;
							String isEcr = null;
							Map<String, String> callCmsMap = new HashMap<String, String>();
							for(SrmCaseHandleInfoDTO dto : srmCaseHandleInfoDTOs){
								tempMsg = this.checkRequiredValue(dto, Boolean.TRUE);
								if (tempMsg.length() > 0) {
									LOGGER.debug("CaseManagerService --> cancelConfirmAuthorizes() --> ", "必填欄位爲null=" + tempMsg);
									errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), tempMsg}, null)).append("</br>");
									continue;
								}
								if (dto.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode())
										&& dto.getConfirmAuthorizes().equals(IAtomsConstants.YES)
										&& IAtomsConstants.PARAM_INSTALL_TYPE_4.equals(dto.getInstallType())) {
									if (IAtomsConstants.TICKET_MODE_COMMON.equals(dto.getCaseType())) {
										caseType = "01";
									} else if (IAtomsConstants.TICKET_MODE_FAST.equals(dto.getCaseType())) {
										caseType = "02";
									} else if (IAtomsConstants.TICKET_MODE_EXTRA.equals(dto.getCaseType())) {
										caseType = "03";
									} else if (IAtomsConstants.TICKET_MODE_APPOINTMENT.equals(dto.getCaseType())) {
										caseType = "04";
									}
									
									if (IAtomsConstants.NO.equals(dto.getIsProject())) {
										isProject = "0";
									} else if (IAtomsConstants.YES.equals(dto.getIsProject())) {
										isProject = "1";
									}
									
									if (IAtomsConstants.CASE_PARAM_NO_ECR_LINE.equals(dto.getEcrConnection())) {
										isEcr = "0";
									} else if (IAtomsConstants.CASE_PARAM_HAVE_ECR_LINE.equals(dto.getEcrConnection())) {
										isEcr = "1";
									}
									
									jobNoticeDTO = new ReceiveJobNoticeDTO("02", dto.getMerMid(), dto.getCaseId(), dto.getDtid(), dto.getEdcTypeName(), 
											dto.getCustomerName(), dto.getMerchantName(), dto.getTid(), caseType, isProject, isEcr);
									json = gson.toJson(jobNoticeDTO);
									LOGGER.debug("CaseManagerService --> cancelConfirmAuthorizes() --> ", "json=" + json);
									map =  NetUtil.sendHtppsNew(api, json);
									if (map != null && map.containsKey(IAtomsConstants.PARAM_ACTION_RESULT)) {
										message = map.get(IAtomsConstants.PARAM_ACTION_RESULT);
									}
									if (map != null && map.containsKey(IAtomsConstants.API_OUT_PUT) && "true".endsWith(map.get(IAtomsConstants.API_OUT_PUT))) {
										apiLogResult = "true";
									} else {
										apiLogResult = "false";
									}
									LOGGER.debug("CaseManagerService --> cancelConfirmAuthorizes() --> ", "message=" + message);
									//上行(RQ)
									this.insertApiLog(IAtomsConstants.API_RQ, dto.getCaseId(), null, logonUser, apiLogResult, null, json);
									if (StringUtils.hasText(message)) {
										Object responseJson = (Object) gson.fromJson(message, Object.class);
										LOGGER.debug("CaseManagerService --> cancelConfirmAuthorizes() --> ", "responseJson=" + responseJson);
										resultMsg = (ReceiveJobNoticeDTO) gson.fromJson(responseJson.toString(), new TypeToken<ReceiveJobNoticeDTO>(){}.getType());
										LOGGER.debug("CaseManagerService --> cancelConfirmAuthorizes() --> ", "resultMsg=" + resultMsg.getRESULT_MSG());
										if (resultMsg.getRESULT().equals("True")) {
											successDto.add(dto);
											callCmsMap.put(dto.getCaseId(), message);
										} else {
											errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), resultMsg.getRESULT_MSG()}, null)).append("</br>");
											apiLogResult = "false";
											//下行(RS)
											this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, resultMsg.getRESULT_MSG(), message);
										}
									} else {
										LOGGER.debug("CaseManagerService --> cancelConfirmAuthorizes() --> ", "save error!!!", "message is null");
										tempMsg = i18NUtil.getName(IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CONFIRM_AUTHORIZES)}, null);
										errorMsg.append(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CASE_ERROR, new String[]{dto.getCaseId(), tempMsg}, null)).append("</br>");
										apiLogResult = "false";
										//下行(RS)
										this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), null, logonUser, apiLogResult, null, "");
									}
								}
							}
							if (!CollectionUtils.isEmpty(successDto)) {
								for (SrmCaseHandleInfoDTO dto : successDto) {
									caseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, dto.getCaseId());
									if (caseHandleInfo != null) {
										caseHandleInfo.setConfirmAuthorizes(IAtomsConstants.NO);
										caseHandleInfo.setUpdatedById(logonUser.getId());
										caseHandleInfo.setUpdatedByName(logonUser.getName());
										caseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
										this.srmCaseHandleInfoDAO.update(caseHandleInfo);
									}
									//新增一筆歷程
									//新增一筆歷程
									SrmCaseTransaction caseTransaction = new SrmCaseTransaction();
									// 放置案件動作
									caseTransaction.setActionId(IAtomsConstants.CASE_ACTION.CANCEL_CONFIRM_AUTHORIZES.getCode());
									// 放置案件狀態
									caseTransaction.setCaseStatus(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode());
									caseTransaction.setDealById(logonUser.getId());
									caseTransaction.setDealByName(logonUser.getName());
									caseTransaction.setDealDate(DateTimeUtils.getCurrentTimestamp());
									caseTransaction.setExpectedCompletionDate(DateTimeUtils.getCurrentTimestamp());
									caseTransaction.setDescription(i18NUtil.getName(IAtomsMessageCode.PARAM_CMS_CANCEL_CONFIRM_AUTHORIZES_SUCCESS));
									caseTransaction.setCaseId(dto.getCaseId());
									caseTransaction.setTransactionId(this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION));
									caseTransaction.setCreatedById(logonUser.getId());
									caseTransaction.setCreatedByName(logonUser.getName());
									caseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
									this.srmCaseTransactionDAO.insert(caseTransaction);
									//Task #3519 存儲下行電文 要有案件歷程id
									if(callCmsMap.containsKey(dto.getCaseId())){
										apiLogResult = "true";
										this.insertApiLog(IAtomsConstants.API_RS, dto.getCaseId(), caseTransaction.getTransactionId(), logonUser, apiLogResult, null, callCmsMap.get(dto.getCaseId()));
									}
								}
								if (errorMsg.length() > 0) {
									msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{errorMsg.toString()});
									Map tempMap = new HashMap();
									tempMap.put(IAtomsConstants.FIELD_CMS_RESULT, false);
									sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, tempMap);
								} else {
									msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.PARAM_CMS_CANCEL_CONFIRM_AUTHORIZES_SUCCESS);
								}
							} else {
								msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_INPUT_MESSAGE, new String[]{errorMsg.toString()});
							}
						} else {
							LOGGER.error("CaseManagerService --> cancelConfirmAuthorizes() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
							msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CANCEL_CONFIRM_AUTHORIZES)});
						}
					} else {
						LOGGER.error("CaseManagerService --> cancelConfirmAuthorizes() --> ", "save error!!!", "caseId is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CANCEL_CONFIRM_AUTHORIZES)});
					}
				} else {
					// 消息不爲空
					if(resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG) != null){
						msg = (Message) resultMap.get(IAtomsConstants.PARAM_ACTION_RESULT_MSG);
					} else {
						LOGGER.error("CaseManagerService --> cancelConfirmAuthorizes() --> ", "validate error!!!", "resultMap msg is null");
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_CANCEL_CONFIRM_AUTHORIZES)});
					}
				}
				sessionContext.setReturnMessage(msg);
				sessionContext.setResponseResult(formDTO);
			} catch (DataAccessException e) {
				LOGGER.error("CaseManagerService --> cancelConfirmAuthorizes() --> ", "message=" + message);
				LOGGER.error(this.getClass().getName() + ".cancelConfirmAuthorizes(SessionContext sessionContext) is error" + e);
				throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
			} catch (Exception e) {
				LOGGER.error("CaseManagerService --> cancelConfirmAuthorizes() --> ", "message=" + message);
				LOGGER.error(this.getClass().getName() + ".cancelConfirmAuthorizes(SessionContext sessionContext):" + e, e);
				throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
			}
		} catch (DataAccessException e) {
			LOGGER.error(this.getClass().getName() + ".cancelConfirmAuthorizes() is error" + e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName() + ".cancelConfirmAuthorizes():" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return sessionContext;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#uploadCoordinatedCompletion(cafe.core.context.SessionContext)
	 */
	public SessionContext uploadCoordinatedCompletion(SessionContext sessionContext)throws ServiceException {
		CaseManagerFormDTO formDTO = null;
		//用於記錄錯誤信息以及錯誤行號
		List<String> errorMsgs = new ArrayList<String>();
		try {
			formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			//匯入的文件
			Map<String, MultipartFile> uploadFiled = formDTO.getFileMap();
			if (uploadFiled != null) {
				Message msg = null;
				//需要上傳的文件
				MultipartFile multipartFile = uploadFiled.entrySet().iterator().next().getValue();
				//記錄需要保存的案件信息
				List<SrmCaseTransactionDTO> srmCaseTransactionDTOs = new ArrayList<SrmCaseTransactionDTO>();
				
				//下載的錯誤文件信息名稱
				Map errorFileMap = new HashMap();
				//記錄文件是否錯誤
				List<SrmCaseHandleInfo> srmCaseHandleInfoList =new ArrayList<SrmCaseHandleInfo>();
				//
				msg  = this.checkCoordinatedCompletion(multipartFile, srmCaseTransactionDTOs, errorMsgs, formDTO, srmCaseHandleInfoList);
				//如果超過500行，直接返回錯誤信息。
				Map map = new HashMap();
				if (msg == null) {
					if (CollectionUtils.isEmpty(errorMsgs)) {
						formDTO.setSrmCaseTransactionDTOList(srmCaseTransactionDTOs);
						msg = this.coordinatedCompletion(formDTO, srmCaseHandleInfoList);
						if (msg != null && msg.isSuccess()) {
							//發給建案之客服
							formDTO.getSrmCaseTransactionDTO().setToMail(i18NUtil.getName(IAtomsConstants.CASE_TO_MAIL_CREATE_USER) + IAtomsConstants.MARK_SEMICOLON);
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_COMPLETION_UPLOAD_SUCCESS);
						} else {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)}, null));
							errorFileMap = this.saveErrorMsg(errorMsgs);
							map.put(CaseManagerFormDTO.ERROR_FILE_NAME, errorFileMap.get(CaseManagerFormDTO.ERROR_FILE_NAME));
							map.put(CaseManagerFormDTO.ERROR_FILE_PATH, errorFileMap.get(CaseManagerFormDTO.ERROR_FILE_PATH));
							msg = new Message(Message.STATUS.FAILURE, i18NUtil.getName(IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)}, null));
						}
						sessionContext.setResponseResult(formDTO);
					} else {
						errorFileMap = this.saveErrorMsg(errorMsgs);
						map.put(CaseManagerFormDTO.ERROR_FILE_NAME, errorFileMap.get(CaseManagerFormDTO.ERROR_FILE_NAME));
						map.put(CaseManagerFormDTO.ERROR_FILE_PATH, errorFileMap.get(CaseManagerFormDTO.ERROR_FILE_PATH));
						msg = new Message(Message.STATUS.FAILURE, i18NUtil.getName(IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)}, null));
					}
				}
				sessionContext.setReturnMessage(msg);
				if (Message.STATUS.SUCCESS.equals(msg.getStatus())) {
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, true);
				} else {
					map.put(IAtomsConstants.PARAM_ACTION_RESULT_SUCCESS, false);
				}
				sessionContext.setAttribute(IAtomsConstants.PARAM_ACTION_RESULT, map);
			}
		} catch (DataAccessException e) {
			LOGGER.error("uploadCoordinatedCompletion()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.UPLOAD_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("uploadCoordinatedCompletion()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.UPLOAD_FAILURE, e);
		} finally {
			if (!CollectionUtils.isEmpty(errorMsgs)) {
				String fileName = formDTO.getFileName();
				String path = this.getSaveTempFilePath(true, fileName, null);
				try {
					FileUtils.removeFile(path);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return sessionContext;
	}
	/**
	 *  匯入 協調完成處理     
	 */
	private Message coordinatedCompletion(CaseManagerFormDTO formDTO, List<SrmCaseHandleInfo> srmCaseHandleInfoDTOs)
			throws ServiceException {
		Message msg = null;
		// 主鍵id
		String transactionId = null;
		// Task #2547 得到登陸者角色
		this.setUserRoleFlag(formDTO);
		
		IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
		//動作
		SrmCaseHandleInfo srmCaseHandleInfo = null;
		SrmCaseTransaction srmCaseTransaction = null;
		//存放案件編號集合的列表
		List<String> caseIdLists = new ArrayList<String>();
		//CaseDetail caseDetail = new CaseDetail();
		// 最新交易參數信息
		List<SrmCaseNewTransactionParameterDTO> srmCaseNewTransactionParameterDTOs = null;
		// 當前交易參數信息
		List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs = null;
		try {
			Transformer transformer = new SimpleDtoDmoTransformer();
			String oldCaseStatus = null;
			if(StringUtils.hasText(formDTO.getCaseId())){
				if(!CollectionUtils.isEmpty(srmCaseHandleInfoDTOs)){
					SrmCaseTransactionDTO srmCaseTransactionDTO = new SrmCaseTransactionDTO();
					srmCaseTransactionDTO.setCaseId(formDTO.getCaseId());
					formDTO.setSrmCaseTransactionDTO(srmCaseTransactionDTO);
					List<SrmCaseTransactionDTO> srmCaseTransactionDTOList = formDTO.getSrmCaseTransactionDTOList();
					// 之前有CUP的標記
					boolean oldCUP = false;
					// 當前有CUP標記
					boolean newCUP = false;
					//要進行刪除操作的caseId組成的字符串
					String caseIds= IAtomsConstants.MARK_EMPTY_STRING;
					String caseTransactionId = IAtomsConstants.MARK_EMPTY_STRING;
					AdmUser admUser = null;
					String newCaseId = "";
					
					for (int i = 0; i < srmCaseHandleInfoDTOs.size(); i++) {
						admUser = null;
						srmCaseHandleInfo = srmCaseHandleInfoDTOs.get(i);
						caseIds += IAtomsConstants.SINGLE_QUOTATION_MARKS + srmCaseHandleInfo.getCaseId() 
								+ IAtomsConstants.SINGLE_QUOTATION_MARKS + IAtomsConstants.MARK_SEPARATOR;
						//拼接新的caseId
						newCaseId = newCaseId + srmCaseHandleInfo.getCaseId() + IAtomsConstants.MARK_SEPARATOR;
						//若此次循環為最後一次循環則將caseIds最後的一位逗號截取
						if (i == srmCaseHandleInfoDTOs.size() - 1) {
							caseIds = caseIds.substring(0, caseIds.length() - 1);
						}
						oldCUP = false;
						newCUP = false;
						if(!StringUtils.hasText(oldCaseStatus)){
							oldCaseStatus = srmCaseHandleInfo.getCaseStatus();
						}
						caseIdLists.add(srmCaseHandleInfo.getCaseId());
						
						//處理方式(task2517--要判斷是否有經過QA，若有，就是軟派，否則是 不需派工)
						//srmCaseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_NO_DISPATCH);
						List<SrmCaseTransactionDTO> caseTransactionDTOs = this.srmCaseTransactionDAO.listAfterQAs(srmCaseHandleInfo.getCaseId());
						if (CollectionUtils.isEmpty(caseTransactionDTOs)) {
							srmCaseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_NO_DISPATCH);
						} else {
							srmCaseHandleInfo.setProcessType(IAtomsConstants.PROCESS_TYPE_SOFT_DISPATCH);
						}
						srmCaseHandleInfo.setCompleteUser(logonUser.getId());
						srmCaseHandleInfo.setCompleteUserName(logonUser.getName());
						// Task #2547  新增，執行完修部門 欄位
						admUser = (AdmUser) this.admUserDAO.findByPrimaryKey(AdmUser.class, logonUser.getId());
						// Task #2547 協調完成：若為客服執行，部門是客服 // CR #2951 廠商客服  //Task #3578 客戶廠商客服
						if(formDTO.getIsCustomerService() || formDTO.getIsVendorService() || formDTO.getIsCusVendorService()){
							srmCaseHandleInfo.setCompleteDepartmentId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
						} else {
							srmCaseHandleInfo.setCompleteDepartmentId(admUser.getDeptCode());
						}
						//Task #3349
						boolean isInstallComplete = false;
						if(srmCaseHandleInfo.getCompleteDate()==null && IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())){
							isInstallComplete = true;
						}
						//srmCaseHandleInfo.setCompleteDate(DateTimeUtils.getCurrentTimestamp());
						// 修改Bug2494\2493,實際執行時間未輸入，則完修日期選擇當前時間，否則完修日期為所選世紀之星時間
						if(srmCaseTransactionDTOList.get(i).getDealDate() == null){
							srmCaseHandleInfo.setCompleteDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
						} else {
							srmCaseHandleInfo.setCompleteDate(srmCaseTransactionDTOList.get(i).getDealDate());
						}
						if (isInstallComplete) {
							// 端末機代號啟用日: 實際完修日(裝機)，換機會繼承至新機
							srmCaseHandleInfo.setInstallCompleteDate(srmCaseHandleInfo.getCompleteDate());
						}
						// Task #2602 若 未派工 和 客服自行協調完成 and 進件完工日為空，則取紀錄時間寫入
						if(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfo.getCaseStatus())
								&& srmCaseHandleInfo.getCreatedFinishDate() == null){
							srmCaseHandleInfo.setCreatedFinishDate(srmCaseHandleInfo.getCompleteDate());
						}
						srmCaseHandleInfo.setCloseUser(logonUser.getId());
						srmCaseHandleInfo.setCloseUserName(logonUser.getName());
						if(srmCaseTransactionDTOList.get(i).getDealDate() == null){
							srmCaseHandleInfo.setCloseDate(DateTimeUtils.getCurrentTimestamp());
						} else {
							srmCaseHandleInfo.setCloseDate(srmCaseTransactionDTOList.get(i).getDealDate());
						}
						srmCaseHandleInfo.setUpdatedById(logonUser.getId());
						srmCaseHandleInfo.setUpdatedByName(logonUser.getName());
						srmCaseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
						setUserRoleFlag(formDTO);
						//如果當前登入着 是 客服
						//Bug #2305 // CR #2951 廠商客服   //Task #3578 客戶廠商客服
						if(formDTO.getIsCustomerService() || formDTO.getIsVendorService() || formDTO.getIsCusVendorService()) {
							srmCaseHandleInfo.setDispatchDeptId(IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode());
							srmCaseHandleInfo.setDispatchProcessUser(logonUser.getId());
							srmCaseHandleInfo.setDispatchProcessUsername(logonUser.getName());
							//update by 2017/07/26 Bug #2040
							//紀錄最新的派工單位與人員(USER選擇的)，若USER沒選人員，做直接結案時，更新派工處理人員=作業人員
						}
						if(!StringUtils.hasText(srmCaseHandleInfo.getDispatchProcessUser())) {
							srmCaseHandleInfo.setDispatchProcessUser(logonUser.getId());
							srmCaseHandleInfo.setDispatchProcessUsername(logonUser.getName());
							srmCaseHandleInfo.setDispatchDeptId(admUser.getDeptCode());
						}
						if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(formDTO.getCaseCategory())) {
							// 之前交易參數信息
							//	srmCaseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.listTransactionParameterDTOsByDtid(srmCaseHandleInfo.getDtid());
							// CR #2551 查詢最新資料檔是否有該dtid Bug #3055
							boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(srmCaseHandleInfo.getDtid(), null);
							// CR #2551  查詢交易參數 Bug #3055
							srmCaseNewTransactionParameterDTOs = this.srmCaseNewTransactionParameterDAO.getTransactionParameterDTOsByDtid(srmCaseHandleInfo.getDtid(), isNewHave);
							srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(srmCaseHandleInfo.getCaseId(), null);
							if(IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())){
								// 當前交易參數
								if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
									for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
										// 判斷有沒有CUP類別
										if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
											newCUP = true;
											break;
										}
									}
									//如果此筆案件交易參數有cup
									if(newCUP) {
										//判斷案件信息裡面的cup啟用日是否有值 無值 存儲完修日期 如果有值，不管
										if(srmCaseHandleInfo.getCupEnableDate() == null) {
											srmCaseHandleInfo.setCupEnableDate(srmCaseHandleInfo.getCompleteDate());
										}
									} else {
										srmCaseHandleInfo.setCupEnableDate(null);
									}
								}
								// 併機與異動可操作交易參數
							} else if(IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(srmCaseHandleInfo.getCaseCategory())){
								// 當前交易參數
								//	srmCaseTransactionParameterDTOs = this.srmCaseTransactionParameterDAO.listByCaseId(caseHandleInfo.getCaseId(), null);
								if(!CollectionUtils.isEmpty(srmCaseTransactionParameterDTOs)){
									for(SrmCaseTransactionParameterDTO srmCaseTransactionParameterDTO : srmCaseTransactionParameterDTOs){
										// 判斷有沒有CUP類別
										if(IAtomsConstants.TRANSACTION_CATEGORY.CUP.getCode().equals(srmCaseTransactionParameterDTO.getTransactionType())){
											newCUP = true;
											break;
										}
									}
									//有cup交易
									if(newCUP) {
										//案件資料檔cup啟用日有值
										if(srmCaseHandleInfo.getCupEnableDate() != null) {
											//案件資料檔cup移除日有值
											if(srmCaseHandleInfo.getCupDisableDate() != null) {
												//清空cup移除日
												srmCaseHandleInfo.setCupDisableDate(null);
												//cup啟用日設置當前案件完修日期
												srmCaseHandleInfo.setCupEnableDate(srmCaseHandleInfo.getCompleteDate());
											}
										} else {
											//cup啟用日設置當前案件完修日期
											srmCaseHandleInfo.setCupEnableDate(srmCaseHandleInfo.getCompleteDate());
										}
									//沒有cup交易
									} else {
										if(srmCaseHandleInfo.getCupEnableDate() != null) {
											//案件資料檔cup移除日無值
											if(srmCaseHandleInfo.getCupDisableDate() == null) {
												//cup移除日設置當前案件完修日期
												srmCaseHandleInfo.setCupDisableDate(srmCaseHandleInfo.getCompleteDate());
											}
										}
									}
								}
							}
						}
						//案件狀態更新為立即結案
						srmCaseHandleInfo.setCaseStatus(IAtomsConstants.CASE_STATUS.IMMEDIATE_CLOSE.getCode());
						//CR #2869 新增三個欄位 2017/11/22
						srmCaseHandleInfo.setThirdDescription(srmCaseHandleInfo.getSecondDescription());
						srmCaseHandleInfo.setSecondDescription(srmCaseHandleInfo.getFirstDescription());
						srmCaseHandleInfo.setFirstDescription(srmCaseTransactionDTOList.get(i).getDescription());
						this.srmCaseHandleInfoDAO.update(srmCaseHandleInfo);
						if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(formDTO.getCaseCategory())) {
							//update by hermanwang 2017/08/30 Bug #2273
							updateAssetInfoInCheckCase(srmCaseHandleInfo, logonUser, Boolean.TRUE);
						}
						
						//生成id
						transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
						srmCaseTransaction = (SrmCaseTransaction) transformer.transform(srmCaseTransactionDTOList.get(i), new SrmCaseTransaction());
						
						if(!StringUtils.hasText(caseTransactionId)) {
							caseTransactionId = transactionId;
						} else {
							caseTransactionId = caseTransactionId + IAtomsConstants.MARK_SEPARATOR + transactionId;
						}
						formDTO.setCaseTransactionId(caseTransactionId);
						
						// 主鍵
						srmCaseTransaction.setTransactionId(transactionId);
						srmCaseTransaction.setCaseId(srmCaseHandleInfo.getCaseId());
						// 放置執行動作
						srmCaseTransaction.setActionId(IAtomsConstants.CASE_ACTION.IMMEDIATELY_CLOSING.getCode());
						// 放置案件狀態
						srmCaseTransaction.setCaseStatus(IAtomsConstants.CASE_STATUS.IMMEDIATE_CLOSE.getCode());
						// 實際執行時間處理
						if(srmCaseTransactionDTOList.get(i).getDealDate() == null){
							srmCaseTransaction.setDealDate(setHourForDate(DateTimeUtils.getCurrentTimestamp(), null, null, 0, 0));
						} else {
							srmCaseTransaction.setDealDate(srmCaseTransactionDTOList.get(i).getDealDate());
						}
						// 描述處理
						srmCaseTransaction.setDescription(srmCaseTransactionDTOList.get(i).getDescription());
						//當前關卡
						srmCaseTransaction.setCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH);
						//當前關卡名稱
						srmCaseTransaction.setCaseStageName(i18NUtil.getName(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode()));
						//下一關關卡代碼
						srmCaseTransaction.setNextCaseStage(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_CASE_PROCESS_END);
						//下一關關卡名稱
						srmCaseTransaction.setNextCaseStageName(IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_NAME_END);
						srmCaseTransaction.setCreatedById(logonUser.getId());
						srmCaseTransaction.setCreatedByName(logonUser.getName());
						srmCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
						this.srmCaseTransactionDAO.insert(srmCaseTransaction);
						if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(formDTO.getCaseCategory())) {
							//複製數據到歷史和最新模塊,刪除處理中的所有信息
							this.srmCaseHandleInfoDAO.copyToHis(srmCaseHandleInfo.getCaseId(), srmCaseHandleInfo.getDtid(), IAtomsConstants.YES, IAtomsConstants.NO);
						}
						if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())
								&& srmCaseHandleInfo.getInstallCompleteDate()!=null) {
							//'S' save 同dtid下InstallCompleteDate
							this.srmCaseHandleInfoDAO.changeInstallCaseId(srmCaseHandleInfo.getCaseId(), srmCaseHandleInfo.getDtid(), null, srmCaseHandleInfo.getInstallCompleteDate(), "S");
						} else if (IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())
										&& srmCaseHandleInfo.getInstallCompleteDate()==null) {
							//'D' delete 同dtid下InstallCompleteDate
							this.srmCaseHandleInfoDAO.changeInstallCaseId(srmCaseHandleInfo.getCaseId(), srmCaseHandleInfo.getDtid(), null, null, "D");
						}
					}
					formDTO.setCaseIds(caseIdLists);
					//送至下一關 Bug #2331
				//	this.sendNextActiviti(logonUser, formDTO, IAtomsConstants.ACTIVITI_CURRENT_ACTIVITI_CODE_WAIT_DISPATCH, null);
				//	Bug #2331
					formDTO.setActionId("immediatelyClosing");
					this.sendNextActiviti(logonUser, formDTO, this.getCaseStatusNameByValue(oldCaseStatus), null);
					//調用CaseDetailDao的放法刪除CAFE_CASE_DETAIL和CAFE_CASE_TRANSACTION表的相關數據
					this.caseDetailDAO.deleteCaseInfos(caseIds);
					/*try {
						this.send(formDTO);
					} catch (Exception e) {
						LOGGER.debug(".immediatelyClosing() --> send() is error... ");
					}*/
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CASE_ACTION_SUCCESS, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)});
				}
			} else {
				LOGGER.error("CaseManagerService --> coordinatedCompletion() --> ", "save error!!!", "srmCaseHandleInfoDTOs is null");
				msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.CASE_ACTION_FAILURE, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)});
			}
		
			//sessionContext.setReturnMessage(msg);
			//sessionContext.setResponseResult(formDTO);
		} catch (DataAccessException e) {
			LOGGER.error("CaseManagerService", ".coordinatedCompletion(SessionContext sessionContext) is error", e);
			throw new ServiceException(IAtomsMessageCode.UPDATE_FAILURE, new String[]{this.getMyName()}, e);
		} catch (Exception e) {
			LOGGER.error("CaseManagerService", ".coordinatedCompletion(SessionContext sessionContext) is error", e);
			Message errorMsg = null;
			if(e instanceof ICommonException) errorMsg = ((ICommonException)e).getErrorMessage();
			if (errorMsg != null && errorMsg.getCode() != null) {
				if (errorMsg.getCode().equals(IAtomsMessageCode.BPM_PERFORM_TASK_FAILED)) {
					LOGGER.error("CaseManagerService", ".coordinatedCompletion(SessionContext sessionContext) is error... because:"+IAtomsMessageCode.BPM_PERFORM_TASK_FAILED, e);
					throw new ServiceException(e);
				}
			}
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED, e);
		}
		return msg;
	}
	/**
	 * 
	 * Purpose:檢核協調完成匯入xls文檔
	 * @author amandawang
	 * @param uploadFiled
	 * @param srmCaseTransactionDTOs
	 * @param errorMsgs
	 * @param formDTO
	 * @param srmCaseHandleInfolist
	 * @return Message
	 */
	private Message checkCoordinatedCompletion(MultipartFile uploadFiled, List<SrmCaseTransactionDTO> srmCaseTransactionDTOs, 
			List<String> errorMsgs, CaseManagerFormDTO formDTO, List<SrmCaseHandleInfo> srmCaseHandleInfolist) {
		Message message = null;
		LOGGER.debug("checkCoordinatedCompletion() START---->"+DateTimeUtils.getCurrentTimestamp());
		try{
			if (uploadFiled != null) {
				//獲取當前登錄者信息
				IAtomsLogonUser logonUser = (IAtomsLogonUser) formDTO.getLogonUser();
				String caseIds = IAtomsConstants.MARK_EMPTY_STRING;
				// 客戶角色只能建立公司為該客戶的案件
				this.setUserRoleAttribute(formDTO);
				//判斷角色
				setUserRoleFlag(formDTO);
				String queryCustomerId = null;
				// Task #3578 客戶廠商客服
				if ((formDTO.getIsCustomerAttribute()|| formDTO.getIsCustomerVendorAttribute()) && !formDTO.getIsVendorAttribute()) {
					queryCustomerId = logonUser.getCompanyId();
				}
				
				// 获取上传文件输入流
				InputStream inputStream = uploadFiled.getInputStream();
				Workbook workbook = null;
				Sheet sheet = null;
				Row row = null;
				int rowCount = 0;
				String fileName = uploadFiled.getOriginalFilename();
				String fileTxt = fileName.substring(fileName.lastIndexOf(IAtomsConstants.MARK_NO) + 1);
				if (IAtomsConstants.FILE_TXT_MSEXCEL.equals(fileTxt)) {
					//2003版本
					workbook = new HSSFWorkbook(inputStream);
				} else if (IAtomsConstants.FILE_TXT_MSEXCEL_X.equals(fileTxt)) {
					//2007版本
					workbook = new XSSFWorkbook(inputStream);
				}
				if (workbook != null) {
					sheet = workbook.getSheetAt(0);
				} else {
					errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.FILE_FORMAT_ERROR));
					LOGGER.error("workbook is null >>> ");
					throw new ServiceException();
				}
				// 獲取行數
				rowCount = this.getExcelRealRowCount(sheet);
				if (rowCount <= 1) {
					errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.IATOMS_MSG_NONE_DATA));
				} else if (rowCount > 501) {
					message = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.ABOUCHEMENT_FAILURE_FOR_OVER_LIMIT, new String[]{PropertyNumberImportFormDTO.UPLOAD_NUMBER });
				} else {
					//標記是否錯誤
					boolean isError = false;
					String caseId = null;
					String dealDateString = null;
					String description = null;
					String tempCaseStatus = IAtomsConstants.MARK_EMPTY_STRING;
					String tempCaseCategory = IAtomsConstants.MARK_EMPTY_STRING;
					Map<String, Integer> caseIdRepeatMap = new HashMap<String, Integer>();
					int j = 0;
					for (int i = 1; i <= rowCount; i++) {
						//獲取行
						row = sheet.getRow(i);
						if (isRowEmpty(row)) continue;
						//获取案件編號
						caseId = this.getCellFormatValue(row.getCell(0), null, Boolean.TRUE);
						//获取處理說明
						description = this.getCellFormatValue(row.getCell(1), null, Boolean.TRUE);
						//获取實際完成時間
						dealDateString = this.getCellFormatValue(row.getCell(2), "yyyy/MM/dd HH:mm", Boolean.FALSE);
						isError = false;
						//核檢案件編號是否為空
						if (!StringUtils.hasText(caseId)) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
									.concat(i18NUtil.getName(IAtomsMessageCode.INPUT_BLANK, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_DMM_REPOSITORY_CASE_ID)}, null)) );
						} else {
							if (caseIdRepeatMap.containsKey(caseId)) {
								errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_AND_ROW, new String[]{String.valueOf((i+1)), caseIdRepeatMap.get(caseId).toString()}, null) + 
										i18NUtil.getName(IAtomsMessageCode.INPUT_REPEAT, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_DMM_REPOSITORY_CASE_ID)}, null));
								continue;
							} else {
								caseIdRepeatMap.put(caseId, i+1);
							}
							//驗證處理說明長度是否符合標準
							if (StringUtils.hasText(description)) {
								if (!ValidateUtils.length(description, 0, 200)) {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
											+ i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_TRANSACTION_DESCRIPTION)
											+ i18NUtil.getName(IAtomsMessageCode.IMPORT_LENGTH_LIMIT, new String[]{IAtomsConstants.DESCRIPTION_LENGTH}, null));
									isError = true;
								}
							}
							//驗證實際完成時間長度是否符合標準
							if (StringUtils.hasText(dealDateString)) {
								dealDateString = dealDateString.trim();
								if (!ValidateUtils.length(dealDateString, 0, 16)) {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
											+ i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEAL_DATE)
											+ i18NUtil.getName(IAtomsMessageCode.IMPORT_LENGTH_LIMIT, new String[]{IAtomsConstants.LEAVE_CASE_STATUS_SIXTEEN}, null));
									isError = true;
								} 
								dealDateString = dealDateString +":00";
								Date dealDate = DateTimeUtils.toDate(dealDateString);
								if (dealDate == null) {
									//核檢日期格式是否正確
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null)
												+ i18NUtil.getName(IAtomsMessageCode.INPUT_NOT_TIME_FORMAT_YYYY_MM_DD_HH_MM, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_DEAL_DATE)}, null));
										isError = Boolean.TRUE;
								}
							}
							SrmCaseHandleInfo srmCaseHandleInfo = null;
							//核檢DB中是否存在該案件編號
							if (!isError) {
								boolean flag = false;
								srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, caseId.trim());
								if (srmCaseHandleInfo != null 
										&& ((!StringUtils.hasText(queryCustomerId))
												|| srmCaseHandleInfo.getCustomerId().equals(queryCustomerId))) {
									//CyberEDC案件不可進行協調完成匯入操作
									if(IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfo.getCmsCase())){
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
												+ i18NUtil.getName(IAtomsMessageCode.CYBER_EDC_CAN_NOT_IMPORT));
										continue;
									}
									//此案件已經過簽收或線上排除，不可進行協調完成
									if(IAtomsConstants.PARAM_YES.equals(srmCaseHandleInfo.getHasRetreat())){
										errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
												+ i18NUtil.getName(IAtomsMessageCode.CASE_RETREAT_CAN_NOT_IMPORT));
										continue;
									}
									if (!IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(srmCaseHandleInfo.getCaseCategory())) {
										//請客服先將caseid結案
										MultiParameterInquiryContext inquiryContext = new MultiParameterInquiryContext();
										inquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.DTID.getValue(), srmCaseHandleInfo.getDtid());
										inquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue(), caseId);
										Map<String, String> repeatMap = getCaseRepeatList(inquiryContext);
										if (!CollectionUtils.isEmpty(repeatMap)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
													+ i18NUtil.getName(IAtomsMessageCode.END_THE_CASE_BEFORE, new String[]{repeatMap.get(caseId)}, null));
											continue;
										}
									}
									if (!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(srmCaseHandleInfo.getCaseCategory())
												&& !IAtomsConstants.CASE_CATEGORY.OTHER.getCode().equals(srmCaseHandleInfo.getCaseCategory())) {
										//DTID之裝機案件不存在，請派工客服作廢
										MultiParameterInquiryContext inquiryContext = new MultiParameterInquiryContext();
										inquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.DTID.getValue(), srmCaseHandleInfo.getDtid());
										inquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue(), caseId);
										String isForCancel = getCountByInstall(inquiryContext);
										if (IAtomsConstants.PARAM_YES.equals(isForCancel)) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
													+ i18NUtil.getName(IAtomsMessageCode.CASE_NOT_EXIST));
											continue;
										}
										Map<String, Object> caseMap = getCaseLinkIsChange(inquiryContext);
										//驗證該案件設備是否被之前同dtid的案件修改過
										if (!CollectionUtils.isEmpty(caseMap) 
															&& caseMap.containsKey(IAtomsConstants.IS_CHANGE_CASE_LINK) 
															&& (Boolean) caseMap.get(IAtomsConstants.IS_CHANGE_CASE_LINK)){
											if (!(caseMap.containsKey(IAtomsConstants.INIT_EDIT_CHECK_UPDATE) && IAtomsConstants.PARAM_YES.equals(caseMap.get(IAtomsConstants.INIT_EDIT_CHECK_UPDATE)))) {
												if (formDTO.getIsCustomerService() || formDTO.getIsCusVendorService()){	//Task #3578 客戶廠商客服
													//{0}於{1}已更新案件最新設備連接資料，請至處理頁面點✔重新帶入最新資料
													errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
															+ i18NUtil.getName(IAtomsMessageCode.CASE_NEW_IS_CHANGE, new String[]{(String) caseMap.get("caseId"), (String) caseMap.get("closeDate")}, null));
													continue;
												} else {
													if (formDTO.getIsVendorService()){
														BimCompany company = this.companyDAO.findByPrimaryKey(BimCompany.class,srmCaseHandleInfo.getCreatedById());
														if (company != null && logonUser.getCompanyId().equals(company.getCompanyId())){
															//{0}於{1}已更新案件最新設備連接資料，請至處理頁面點✔重新帶入最新資料
															errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
																	+ i18NUtil.getName(IAtomsMessageCode.CASE_NEW_IS_CHANGE, new String[]{(String) caseMap.get("caseId"), (String) caseMap.get("closeDate")}, null));
															continue;	
														} else {
															//{0}於{1}異動設備與此案件不符，請聯繫Cyber客服確認
															errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
																	+ i18NUtil.getName(IAtomsMessageCode.CASE_IS_CHANGE_CALL_CYBER, new String[]{(String) caseMap.get("caseId"), (String) caseMap.get("closeDate")}, null));
															continue;
														}
													} else {
														//{0}於{1}異動設備與此案件不符，請聯繫客服確認
														errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
																+ i18NUtil.getName(IAtomsMessageCode.CASE_IS_CHANGE_CALL_SERVICE, new String[]{(String) caseMap.get("caseId"), (String) caseMap.get("closeDate")}, null));
														continue;
													}
												}
											} else {
												//本案件dtid之EDC設備已拆除，請退回客服作廢
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
														+ i18NUtil.getName(IAtomsMessageCode.ASSET_IS_REMOVED));
												continue;
											}
										}
										
										inquiryContext = new MultiParameterInquiryContext();
										inquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASE_ID.getValue(), caseId);
										boolean reasult = false;
										//案件設備有異動，不可進行協調完成
										reasult = isChangeAsset(inquiryContext);
										if (reasult) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
													+ i18NUtil.getName(IAtomsMessageCode.CASE_ASSET_HAS_CHANGE));
											continue;
										}
									}
									  																	//Task #3578 客戶廠商客服
									if (formDTO.getIsCustomerService() || formDTO.getIsVendorService() || formDTO.getIsCusVendorService()) {
										if(!(IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfo.getCaseStatus())
												|| IAtomsConstants.CASE_STATUS.DISPATCHED.getCode().equals(srmCaseHandleInfo.getCaseStatus())
												|| IAtomsConstants.CASE_STATUS.RESPONSED.getCode().equals(srmCaseHandleInfo.getCaseStatus())
												|| IAtomsConstants.CASE_STATUS.ARRIVED.getCode().equals(srmCaseHandleInfo.getCaseStatus())
												|| IAtomsConstants.CASE_STATUS.DELAYING.getCode().equals(srmCaseHandleInfo.getCaseStatus()))){
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
													+ i18NUtil.getName(IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)}, null));
										} else {
											if((!IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfo.getCaseStatus()))
														&& (!IAtomsConstants.CASE_ROLE.CUSTOMER_SERVICE.getCode().equals(srmCaseHandleInfo.getDispatchDeptId()))){
												errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
														+ i18NUtil.getName(IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)}, null));
											} else {
												flag = true;
											}
										}
									} else {
										if (!IAtomsConstants.CASE_STATUS.WAIT_DISPATCH.getCode().equals(srmCaseHandleInfo.getCaseStatus())) {
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX, new String[]{String.valueOf(i + 1)}, null) 
													+ i18NUtil.getName(IAtomsMessageCode.CASE_STATUS_NOT_MATCH, new String[]{i18NUtil.getName(IAtomsConstants.FIELD_CASE_ACTION_IMMEDIATELY_CLOSING)}, null));
										} else {
											flag = true;
										}
									}
								} else {
									errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.ROW_INDEX_IS_NOT_EXIST, new String[]{String.valueOf((i+1)), 
											i18NUtil.getName(IAtomsConstants.FIELD_DMM_REPOSITORY_CASE_ID), i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANLD_INFO)}, null));
									
								}
								if (flag) {
									if(j==0){
										tempCaseStatus = srmCaseHandleInfo.getCaseStatus();
										tempCaseCategory =  srmCaseHandleInfo.getCaseCategory();
									}
									if(j>0){
										if(!tempCaseStatus.equals(srmCaseHandleInfo.getCaseStatus()) || !tempCaseCategory.equals(srmCaseHandleInfo.getCaseCategory())){
											errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.SAME_STATUS_AND_SAME_CATEGORY));
											continue;
										}
									}
									caseIds = caseIds + caseId + ",";
									formDTO.setCaseId(caseIds);
									SrmCaseTransactionDTO srmCaseTransactionDTO = new SrmCaseTransactionDTO();
									srmCaseTransactionDTO.setCaseId(caseId);
									srmCaseTransactionDTO.setDescription(description);
									if (StringUtils.hasText(dealDateString)) {
										srmCaseTransactionDTO.setDealDate(DateTimeUtils.toTimestamp(dealDateString));
									}
									srmCaseTransactionDTOs.add(srmCaseTransactionDTO);	
									srmCaseHandleInfolist.add(srmCaseHandleInfo);
									j++;
								}
							}
						}
					}
					if(!CollectionUtils.isEmpty(srmCaseHandleInfolist)){
						formDTO.setCaseId(formDTO.getCaseId().substring(0,formDTO.getCaseId().length()-1));
						String ids = this.checkTransactionParam(formDTO.getCaseId());
						if (ids.length() != 0) {
							errorMsgs.add(i18NUtil.getName(IAtomsMessageCode.PARAM_CASE_NO_TRANS_PARAM, new String[]{ids}, null));
						}
					}
				}
			}
			LOGGER.debug("checkCoordinatedCompletion() END---->"+DateTimeUtils.getCurrentTimestamp());
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".checkCoordinatedCompletion(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.INIT_PAGE_FAILURE);
		}
		return message;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#queryCaseInfoByApi(cafe.core.context.SessionContext)
	 */
	public SessionContext queryCaseInfoByApi(SessionContext sessionContext) {
		Message msg = null;
		try {
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			if(formDTO != null){
				LOGGER.debug("queryCaseInfoByApi() query begin...");
				boolean isNewHave = this.srmCaseNewHandleInfoDAO.isInCase(formDTO.getQueryDtid(),null);
				SrmCaseHandleInfoDTO caseHandleInfoDTO = this.srmCaseNewHandleInfoDAO.getCaseHandleInfoDTO(formDTO.getQueryDtid(), isNewHave);
				//查無資料時 該dtid不存在
				if (caseHandleInfoDTO == null) {
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_DITD_FOR_CUSTOMER_AND_TYPE);
					sessionContext.setReturnMessage(msg);
					return sessionContext;
				}
				List<SrmCaseHandleInfoDTO> caseHandleInfoDTOs = null;
				caseHandleInfoDTOs = this.srmCaseHandleInfoDAO.getCaseInfoById(caseHandleInfoDTO.getCaseId());
				if (!CollectionUtils.isEmpty(caseHandleInfoDTOs)) {
					caseHandleInfoDTO = caseHandleInfoDTOs.get(0);
				} else {
					caseHandleInfoDTO = null;
				}
				if (caseHandleInfoDTO != null) {
					//聯繫聯絡人 聯繫電話 聯繫手機 聯繫EMAIL 聯繫郵遞區號 聯繫郵遞區域 聯繫地址-縣市 聯繫地址
					ApiAuthorizationInfoDTO apiAuthorizationInfoDTO = new ApiAuthorizationInfoDTO();
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseHandleInfoDTO.getCaseCategory())
								|| IAtomsConstants.CASE_CATEGORY.UPDATE.getCode().equals(caseHandleInfoDTO.getCaseCategory())) {
						//聯繫聯絡人
						apiAuthorizationInfoDTO.setContact(caseHandleInfoDTO.getInstalledContact());
						//聯繫手機
						apiAuthorizationInfoDTO.setContactPhone(caseHandleInfoDTO.getInstalledContactMobilePhone());
						//聯繫電話
						apiAuthorizationInfoDTO.setContactTel(caseHandleInfoDTO.getInstalledContactPhone());
						//聯繫EMAIL
						apiAuthorizationInfoDTO.setContactEmail(caseHandleInfoDTO.getInstalledContactEmail());
						//聯繫地址
						apiAuthorizationInfoDTO.setContactAddress(caseHandleInfoDTO.getInstalledAddress());
						//聯繫地址-縣市
						apiAuthorizationInfoDTO.setContactCounty(caseHandleInfoDTO.getInstalledAdressLocationName());
						//聯繫郵遞區號
						apiAuthorizationInfoDTO.setContactCode(caseHandleInfoDTO.getInstallContactAreaCode());
						//聯繫郵遞區域
						apiAuthorizationInfoDTO.setContactArea(caseHandleInfoDTO.getInstallContactAreaName());
					} else {
						//聯繫聯絡人
						apiAuthorizationInfoDTO.setContact(caseHandleInfoDTO.getContactUser());
						//聯繫手機
						apiAuthorizationInfoDTO.setContactPhone(caseHandleInfoDTO.getContactMobilePhone());
						//聯繫電話
						apiAuthorizationInfoDTO.setContactTel(caseHandleInfoDTO.getContactUserPhone());
						//聯繫EMAIL
						apiAuthorizationInfoDTO.setContactEmail(caseHandleInfoDTO.getContactUserEmail());
						//聯繫地址
						apiAuthorizationInfoDTO.setContactAddress(caseHandleInfoDTO.getContactAddress());
						//聯繫地址-縣市
						apiAuthorizationInfoDTO.setContactCounty(caseHandleInfoDTO.getContactAddressLocationName());
						//聯繫郵遞區號
						apiAuthorizationInfoDTO.setContactCode(caseHandleInfoDTO.getContactAreaCode());
						//聯繫郵遞區域
						apiAuthorizationInfoDTO.setContactArea(caseHandleInfoDTO.getContactPostArea());
					}
					apiAuthorizationInfoDTO.setCaseId(caseHandleInfoDTO.getCaseId());
					formDTO.setApiAuthorizationInfoDTO(apiAuthorizationInfoDTO);
					msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.QUERY_SUCCESS);
					sessionContext.setReturnMessage(msg);
				} else {
					//查無資料時 該dtid不存在
					msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.NO_DITD_FOR_CUSTOMER_AND_TYPE);
					sessionContext.setReturnMessage(msg);
					return sessionContext;
				}
				sessionContext.setResponseResult(formDTO);
				LOGGER.debug("queryCaseInfoByApi() query end...");
			}
		} catch (DataAccessException e) {
			LOGGER.error("queryCaseInfoByApi()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.UPLOAD_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("queryCaseInfoByApi()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.UPLOAD_FAILURE, e);
		} 
		return sessionContext;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#changeCaseInfoByApi(cafe.core.context.SessionContext)
	 */
	public SessionContext changeCaseInfoByApi(SessionContext sessionContext) {
		Message msg = null;
		try {
			//Task #3548  到場註記
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			if(formDTO != null){
				LOGGER.debug("changeCaseInfoByApi() change begin...");
				if (StringUtils.hasText(formDTO.getQueryCaseId())) {
					SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, formDTO.getQueryCaseId());
					if (srmCaseHandleInfo != null) {
						srmCaseHandleInfo.setHasArrive(formDTO.getHasArrive());
						srmCaseHandleInfo.setThirdDescription(srmCaseHandleInfo.getSecondDescription());
						srmCaseHandleInfo.setSecondDescription(srmCaseHandleInfo.getFirstDescription());
						LOGGER.debug("changeCaseInfoByApi() ==> hasArrive=" + formDTO.getHasArrive());
						if ("Y".equals(formDTO.getHasArrive())) {
							String arriveDesc = i18NUtil.getName(srmCaseHandleInfo.getCaseCategory()) + i18NUtil.getName(SrmCaseHandleInfoDTO.ATTRIBUTE.ARRIVE_CONDITION.getValue());
							if (StringUtils.hasText(formDTO.getDescription())) {
								srmCaseHandleInfo.setFirstDescription(formDTO.getDescription() + IAtomsConstants.MARK_WRAP + arriveDesc);
							} else {
								srmCaseHandleInfo.setFirstDescription(arriveDesc);
							}
						} else {
							srmCaseHandleInfo.setFirstDescription(formDTO.getDescription());
						}
						srmCaseHandleInfo.setUpdatedById("CMS000000-0001");
						srmCaseHandleInfo.setUpdatedByName("cms_to_iatoms");
						srmCaseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
						
						SrmCaseTransaction srmCaseTransaction = new SrmCaseTransaction();
						String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
						LOGGER.debug("changeCaseInfoByApi() ==> transactionId=" + transactionId);
						// 存案件歷程
						srmCaseTransaction.setTransactionId(transactionId);
						srmCaseTransaction.setCaseId(formDTO.getQueryCaseId());
						srmCaseTransaction.setActionId(IAtomsConstants.CASE_ACTION.ADD_RECORD.getCode());
						srmCaseTransaction.setCreatedById("CMS000000-0001");
						srmCaseTransaction.setCreatedByName("cms_to_iatoms");
						srmCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
						srmCaseTransaction.setCaseStatus(srmCaseHandleInfo.getCaseStatus());
						srmCaseTransaction.setDealById("CMS000000-0001");
						srmCaseTransaction.setDealByName("cms_to_iatoms");
						srmCaseTransaction.setDealDate(DateTimeUtils.getCurrentTimestamp());
						if ("Y".equals(formDTO.getHasArrive())) {
							String arriveDesc = i18NUtil.getName(srmCaseHandleInfo.getCaseCategory()) + i18NUtil.getName(SrmCaseHandleInfoDTO.ATTRIBUTE.ARRIVE_CONDITION.getValue());
							if (StringUtils.hasText(formDTO.getDescription())) {
								srmCaseTransaction.setDescription(formDTO.getDescription() + IAtomsConstants.MARK_WRAP + arriveDesc);
							} else {
								srmCaseTransaction.setDescription(arriveDesc);
							}
						} else {
							srmCaseTransaction.setDescription(formDTO.getDescription());
						}
						this.srmCaseTransactionDAO.insert(srmCaseTransaction);
						LOGGER.debug("changeCaseInfoByApi() insert srmCaseTransaction end...");
						this.srmCaseHandleInfoDAO.update(srmCaseHandleInfo);
						LOGGER.debug("changeCaseInfoByApi() update srmCaseHandleInfo end...");
						sessionContext.setAttribute("apiTransactionId", transactionId);
						msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.QUERY_SUCCESS);
					} else {
						//查無資料時 該案件編號不存在
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_CMS_CASE_ERROR);
						sessionContext.setReturnMessage(msg);
						return sessionContext;
					}
				}
				LOGGER.debug("changeCaseInfoByApi() change end...");
			}
			sessionContext.setResponseResult(formDTO);
			sessionContext.setReturnMessage(msg);
		} catch (DataAccessException e) {
			LOGGER.error("changeCaseInfoByApi()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.SAVE_DATA_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("changeCaseInfoByApi()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.SAVE_DATA_FAILURE, e);
		} 
		return sessionContext;
	}
	
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#checkGpInfo(cafe.core.context.SessionContext)
	 */
	@Override
	public SessionContext checkGpInfo(SessionContext sessionContext) throws ServiceException {
		try {
			String message = null;
			CaseManagerFormDTO caseManagerFormDTO = (CaseManagerFormDTO)sessionContext.getRequestParameter();
			IAtomsLogonUser logonUser = (IAtomsLogonUser) caseManagerFormDTO.getLogonUser();
			if (logonUser != null && caseManagerFormDTO != null) {
				//案件處理信息
				SrmCaseHandleInfoDTO caseHandleInfoDTO = caseManagerFormDTO.getSrmCaseHandleInfoDTO();
				//交易參數信息
				List<SrmCaseTransactionParameterDTO> caseTransactionParameterDTOs = caseManagerFormDTO.getSrmCaseTransactionParameterDTOs();
				
				if (caseHandleInfoDTO != null) {
					message = this.getCheckGpCusInfoResult(caseHandleInfoDTO, caseTransactionParameterDTOs, Boolean.FALSE);
				}
			}
			if (StringUtils.hasText(message)) {
				sessionContext.setReturnMessage(new Message(Message.STATUS.FAILURE, message));
			} else {
				sessionContext.setReturnMessage(new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.CHECK_SESSION_SUCCESS));
			}
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".checkGpInfo(SessionContext sessionContext):" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED);
		}
		return sessionContext;
	}
	
	/**
	 * Purpose:核檢GP信息
	 * @author CarrieDuan
	 * @param caseHandleInfoDTO：案件信息
	 * @param srmCaseTransactionParameterDTOs：交易參數
	 * @param isUpload：是否匯入核檢
	 * @throws ServiceException
	 * @return String
	 */
	private String getCheckGpCusInfoResult(SrmCaseHandleInfoDTO caseHandleInfoDTO, List<SrmCaseTransactionParameterDTO> srmCaseTransactionParameterDTOs, boolean isUpload) throws ServiceException {
		String message = null;
		try {
			if (caseHandleInfoDTO != null) {
				String edcTypeName = caseHandleInfoDTO.getEdcTypeName();
				MultiParameterInquiryContext parameterInquiryContext = new MultiParameterInquiryContext();
				parameterInquiryContext = new MultiParameterInquiryContext();
				parameterInquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CONNECTION_TYPE_NAME.getValue(), caseHandleInfoDTO.getConnectionTypeName());
				parameterInquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.BUILT_IN_FEATURE.getValue(), caseHandleInfoDTO.getBuiltInFeatureName());
				parameterInquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.RECEIPT_TYPE.getValue(), caseHandleInfoDTO.getReceiptType());
				parameterInquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.CASETRANSACTION_PARAMETER_DTOS.getValue(), srmCaseTransactionParameterDTOs);
				parameterInquiryContext.addParameter("isUpload", isUpload);
				if (!"S80 RF".equals(edcTypeName)) {
					parameterInquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_NAME.getValue(), caseHandleInfoDTO.getPeripheralsName());
					parameterInquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS2_NAME.getValue(), caseHandleInfoDTO.getPeripherals2Name());
					parameterInquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS3_NAME.getValue(), caseHandleInfoDTO.getPeripherals3Name());
				}
				//判斷刷卡機型
				if ("S80 Ethernet".equals(edcTypeName)) {
					parameterInquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION.getValue(), caseHandleInfoDTO.getPeripheralsFunctionName());
					parameterInquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION2.getValue(), caseHandleInfoDTO.getPeripheralsFunction2Name());
					parameterInquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.PERIPHERALS_FUNCTION3.getValue(), caseHandleInfoDTO.getPeripheralsFunction3Name());
					//parameterInquiryContext.addParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.AO_NAME.getValue(), caseHandleInfoDTO.getAoName());
					message = this.caseCheckInfoService.checkS80EthernetAsset(parameterInquiryContext);
				} else if ("S80 RF".equals(edcTypeName)) {
					message = this.caseCheckInfoService.checkS80RFAsset(parameterInquiryContext);
				} else if ("S90 RF".equals(edcTypeName)) {
					message = this.caseCheckInfoService.checkS90RFAsset(parameterInquiryContext);
				} else if ("S90 3G".equals(edcTypeName)) {
					message = this.caseCheckInfoService.checkS903GAsset(parameterInquiryContext);
				}
			}
		} catch (Exception e) {
			LOGGER.error(this.getClass().getName()+".getCheckGpCusInfoResult():" + e, e);
			throw new ServiceException(IAtomsMessageCode.SYSTEM_FAILED);
		}
		return message;
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#getInstallCaseId(cafe.core.context.MultiParameterInquiryContext)
	 */
	public String getInstallCaseId(MultiParameterInquiryContext inquiryContext)throws ServiceException {
		String installCaseId = null;
		try {
			String dtid = (String) inquiryContext.getParameter(SrmCaseHandleInfoDTO.ATTRIBUTE.DTID.getValue());
			installCaseId = this.srmCaseHandleInfoDAO.getInstallCaseId(dtid);
		} catch (DataAccessException e) {
			LOGGER.error(".getCountByInstall() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(".getCountByInstall() Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		}
		return installCaseId;
	}
	/**
	 * Purpose:匯入 宣揚 需求單號 檢核
	 * @author amandawang
	 * @param requirementNo
	 * @param dtid
	 * @param caseHandleInfoDTO
	 * @throws ServiceException
	 * @return String
	 */
	private String checkRequirementNo(String requirementNo, String dtid, SrmCaseHandleInfoDTO caseHandleInfoDTO, String caseCategory)throws ServiceException {
		String errorMsg = null;
		try {
			String customer = null;
			//Task #3584 匯入 宣揚 需求單號 檢核
			if (!StringUtils.hasText(caseHandleInfoDTO.getCompanyCode())) {
				CompanyDTO companyDTO = this.companyDAO.getCompanyByCompanyCode(IAtomsConstants.PARAM_BCC);
				if (companyDTO != null) {
					customer = companyDTO.getCompanyId();
					if (customer.equals(caseHandleInfoDTO.getCustomerId())) {
						customer = IAtomsConstants.PARAM_BCC;
					} else {
						customer = IAtomsConstants.MARK_EMPTY_STRING;
					}
				} else {
					return errorMsg;
				}
			} else {
				customer = caseHandleInfoDTO.getCompanyCode();
			}
			if(requirementNo.length() > 1 && IAtomsConstants.PARAM_BCC.equals(customer)){
				if(requirementNo.substring(0,2).toLowerCase().equals("ei")){
					if (!IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
						String installCaseId = this.srmCaseHandleInfoDAO.getInstallCaseId(dtid);
						if (StringUtils.hasText(installCaseId)) {
							//此DTID台新裝機件已存在
							errorMsg = i18NUtil.getName(IAtomsMessageCode.TSB_INSTALL_CASE_IS_EXIST);
						}
					}
				} else if (requirementNo.substring(0,2).toLowerCase().equals("ec")
								|| requirementNo.substring(0,2).toLowerCase().equals("em")
								|| requirementNo.substring(0,2).toLowerCase().equals("eu")
								|| requirementNo.substring(0,2).toLowerCase().equals("ea")
								|| requirementNo.substring(0,2).toLowerCase().equals("er")){
					if (IAtomsConstants.CASE_CATEGORY.INSTALL.getCode().equals(caseCategory)) {
						errorMsg = i18NUtil.getName(IAtomsMessageCode.NO_TSB_INSTALL_CASE);
					} else {
						String installCaseId = this.srmCaseHandleInfoDAO.getInstallCaseId(dtid);
						if (!StringUtils.hasText(installCaseId)) {
							//此DTID台新裝機件尚未建案
							errorMsg = i18NUtil.getName(IAtomsMessageCode.NO_TSB_INSTALL_CASE);
						}
					}
				}
			}
		} catch (DataAccessException e) {
			LOGGER.error(".getCountByInstall() DataAccess Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error(".getCountByInstall() Exception:" + e, e);
			throw new ServiceException(IAtomsMessageCode.QUERY_FAILURE, e);
		}
		return errorMsg;
		
	}
	/**
	 * (non-Javadoc)
	 * @see com.cybersoft4u.xian.iatoms.services.ICaseManagerService#changeCaseOverdueByApi(cafe.core.context.SessionContext)
	 */
	public SessionContext changeCaseOverdueByApi(SessionContext sessionContext) {
		Message msg = null;
		try {
			//Task #3600 IATOMS_API(設備逾期未還)
			CaseManagerFormDTO formDTO = (CaseManagerFormDTO) sessionContext.getRequestParameter();
			if(formDTO != null){
				LOGGER.debug("changeCaseOverdueByApi() change begin...");
				if (StringUtils.hasText(formDTO.getQueryCaseId())) {
					SrmCaseHandleInfo srmCaseHandleInfo = this.srmCaseHandleInfoDAO.findByPrimaryKey(SrmCaseHandleInfo.class, formDTO.getQueryCaseId());
					if (srmCaseHandleInfo != null) {
						if (srmCaseHandleInfo.getCaseCategory().equals(IAtomsConstants.CASE_CATEGORY.UNINSTALL.getCode())) {
							//1. 將該案件編號(拆機件)的拆機原因更新為強制解約
							srmCaseHandleInfo.setUninstallType("COMPULSORY_DISSOLUTION");
							srmCaseHandleInfo.setThirdDescription(srmCaseHandleInfo.getSecondDescription());
							srmCaseHandleInfo.setSecondDescription(srmCaseHandleInfo.getFirstDescription());
							//設備逾期未還
				            //拆機類型：強制解約 
							String overdueDesc = i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_OVERDUE_MSG) + IAtomsConstants.MARK_WRAP
														+ i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_UNINSTALL_TYPE) + IAtomsConstants.MARK_COLON
														+ i18NUtil.getName(IAtomsConstants.FIELD_SRM_CASE_HANDLE_UNINSTALL_TYPE_COMPULSORY);
							if (StringUtils.hasText(formDTO.getDescription())) {
								srmCaseHandleInfo.setFirstDescription(formDTO.getDescription() + IAtomsConstants.MARK_WRAP + overdueDesc);
							} else {
								srmCaseHandleInfo.setFirstDescription(overdueDesc);
							}
							LOGGER.debug("changeCaseOverdueByApi() ==> overdueDesc=" + overdueDesc);
						
							srmCaseHandleInfo.setUpdatedById("CMS000000-0001");
							srmCaseHandleInfo.setUpdatedByName("cms_to_iatoms");
							srmCaseHandleInfo.setUpdatedDate(DateTimeUtils.getCurrentTimestamp());
							
							SrmCaseTransaction srmCaseTransaction = new SrmCaseTransaction();
							String transactionId = this.generateGeneralUUID(IAtomsConstants.IATOMS_TB_NAME_SRM_CASE_TRANSACTION);
							LOGGER.debug("changeCaseOverdueByApi() ==> transactionId=" + transactionId);
							// 存案件歷程
							srmCaseTransaction.setTransactionId(transactionId);
							srmCaseTransaction.setCaseId(formDTO.getQueryCaseId());
							srmCaseTransaction.setActionId(IAtomsConstants.CASE_ACTION.ADD_RECORD.getCode());
							srmCaseTransaction.setCreatedById("CMS000000-0001");
							srmCaseTransaction.setCreatedByName("cms_to_iatoms");
							srmCaseTransaction.setCreatedDate(DateTimeUtils.getCurrentTimestamp());
							srmCaseTransaction.setCaseStatus(srmCaseHandleInfo.getCaseStatus());
							srmCaseTransaction.setDealById("CMS000000-0001");
							srmCaseTransaction.setDealByName("cms_to_iatoms");
							srmCaseTransaction.setDealDate(DateTimeUtils.getCurrentTimestamp());
							srmCaseTransaction.setDescription(srmCaseHandleInfo.getFirstDescription());
							
							this.srmCaseTransactionDAO.insert(srmCaseTransaction);
							LOGGER.debug("changeCaseOverdueByApi() insert srmCaseTransaction end...");
							this.srmCaseHandleInfoDAO.update(srmCaseHandleInfo);
							LOGGER.debug("changeCaseOverdueByApi() update srmCaseHandleInfo end...");
							sessionContext.setAttribute("apiTransactionId", transactionId);
							msg = new Message(Message.STATUS.SUCCESS, IAtomsMessageCode.QUERY_SUCCESS);
						} else {
							//非拆機件 不可強制解約
							msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.VIEW_FAILURE);
							sessionContext.setReturnMessage(msg);
							return sessionContext;
						}
					} else {
						//查無資料時 該案件編號不存在
						msg = new Message(Message.STATUS.FAILURE, IAtomsMessageCode.PARAM_CMS_CASE_ERROR);
						sessionContext.setReturnMessage(msg);
						return sessionContext;
					}
				}
				LOGGER.debug("changeCaseOverdueByApi() change end...");
			}
			sessionContext.setResponseResult(formDTO);
			sessionContext.setReturnMessage(msg);
		} catch (DataAccessException e) {
			LOGGER.error("changeCaseOverdueByApi()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.SAVE_DATA_FAILURE, e);
		} catch (Exception e) {
			LOGGER.error("changeCaseOverdueByApi()", "DataAccess Exception:", e);
			throw new ServiceException(IAtomsMessageCode.SAVE_DATA_FAILURE, e);
		} 
		return sessionContext;
	}
	
	/**
	 * @return the handleTypeDefaultValueMap
	 */
	public Map<String, String> getHandleTypeDefaultValueMap() {
		return handleTypeDefaultValueMap;
	}

	/**
	 * @param handleTypeDefaultValueMap the handleTypeDefaultValueMap to set
	 */
	public void setHandleTypeDefaultValueMap(
			Map<String, String> handleTypeDefaultValueMap) {
		this.handleTypeDefaultValueMap = handleTypeDefaultValueMap;
	}

	/**
	 * @return the srmTransactionParameterItemDAO
	 */
	public ISrmTransactionParameterItemDAO getSrmTransactionParameterItemDAO() {
		return srmTransactionParameterItemDAO;
	}

	/**
	 * @param srmTransactionParameterItemDAO the srmTransactionParameterItemDAO to set
	 */
	public void setSrmTransactionParameterItemDAO(
			ISrmTransactionParameterItemDAO srmTransactionParameterItemDAO) {
		this.srmTransactionParameterItemDAO = srmTransactionParameterItemDAO;
	}
	
	/**
	 * @return the srmCaseHandleInfoDAO
	 */
	public ISrmCaseHandleInfoDAO getSrmCaseHandleInfoDAO() {
		return srmCaseHandleInfoDAO;
	}

	/**
	 * @param srmCaseHandleInfoDAO the srmCaseHandleInfoDAO to set
	 */
	public void setSrmCaseHandleInfoDAO(ISrmCaseHandleInfoDAO srmCaseHandleInfoDAO) {
		this.srmCaseHandleInfoDAO = srmCaseHandleInfoDAO;
	}

	/**
	 * @return the srmTransactionParameterDetailDAO
	 */
	public ISrmTransactionParameterDetailDAO getSrmTransactionParameterDetailDAO() {
		return srmTransactionParameterDetailDAO;
	}
	/**
	 * @param srmTransactionParameterDetailDAO the srmTransactionParameterDetailDAO to set
	 */
	public void setSrmTransactionParameterDetailDAO(
			ISrmTransactionParameterDetailDAO srmTransactionParameterDetailDAO) {
		this.srmTransactionParameterDetailDAO = srmTransactionParameterDetailDAO;
	}

	/**
	 * @return the srmCaseNewTransactionParameterDAO
	 */
	public ISrmCaseNewTransactionParameterDAO getSrmCaseNewTransactionParameterDAO() {
		return srmCaseNewTransactionParameterDAO;
	}

	/**
	 * @param srmCaseNewTransactionParameterDAO the srmCaseNewTransactionParameterDAO to set
	 */
	public void setSrmCaseNewTransactionParameterDAO(
			ISrmCaseNewTransactionParameterDAO srmCaseNewTransactionParameterDAO) {
		this.srmCaseNewTransactionParameterDAO = srmCaseNewTransactionParameterDAO;
	}
	
	/**
	 * @return the companyDAO
	 */
	public ICompanyDAO getCompanyDAO() {
		return companyDAO;
	}
	/**
	 * @param companyDAO the companyDAO to set
	 */
	public void setCompanyDAO(ICompanyDAO companyDAO) {
		this.companyDAO = companyDAO;
	}
	/**
	 * @return the srmCaseTransactionParameterDAO
	 */
	public ISrmCaseTransactionParameterDAO getSrmCaseTransactionParameterDAO() {
		return srmCaseTransactionParameterDAO;
	}
	/**
	 * @param srmCaseTransactionParameterDAO the srmCaseTransactionParameterDAO to set
	 */
	public void setSrmCaseTransactionParameterDAO(
			ISrmCaseTransactionParameterDAO srmCaseTransactionParameterDAO) {
		this.srmCaseTransactionParameterDAO = srmCaseTransactionParameterDAO;
	}

	/**
	 * @return the contractSlaDAO
	 */
	public IContractSlaDAO getContractSlaDAO() {
		return contractSlaDAO;
	}

	/**
	 * @param contractSlaDAO the contractSlaDAO to set
	 */
	public void setContractSlaDAO(IContractSlaDAO contractSlaDAO) {
		this.contractSlaDAO = contractSlaDAO;
	}

	/**
	 * @return the srmCaseAttFileDAO
	 */
	public ISrmCaseAttFileDAO getSrmCaseAttFileDAO() {
		return srmCaseAttFileDAO;
	}

	/**
	 * @param srmCaseAttFileDAO the srmCaseAttFileDAO to set
	 */
	public void setSrmCaseAttFileDAO(ISrmCaseAttFileDAO srmCaseAttFileDAO) {
		this.srmCaseAttFileDAO = srmCaseAttFileDAO;
	}

	/**
	 * @return the srmCaseNewHandleInfoDAO
	 */
	public ISrmCaseNewHandleInfoDAO getSrmCaseNewHandleInfoDAO() {
		return srmCaseNewHandleInfoDAO;
	}

	/**
	 * @param srmCaseNewHandleInfoDAO the srmCaseNewHandleInfoDAO to set
	 */
	public void setSrmCaseNewHandleInfoDAO(
			ISrmCaseNewHandleInfoDAO srmCaseNewHandleInfoDAO) {
		this.srmCaseNewHandleInfoDAO = srmCaseNewHandleInfoDAO;
	}

	/**
	 * @return the dtidDefDAO
	 */
	public IPvmDtidDefDAO getDtidDefDAO() {
		return dtidDefDAO;
	}

	/**
	 * @param dtidDefDAO the dtidDefDAO to set
	 */
	public void setDtidDefDAO(IPvmDtidDefDAO dtidDefDAO) {
		this.dtidDefDAO = dtidDefDAO;
	}

	/**
	 * @return the contractDAO
	 */
	public IContractDAO getContractDAO() {
		return contractDAO;
	}

	/**
	 * @param contractDAO the contractDAO to set
	 */
	public void setContractDAO(IContractDAO contractDAO) {
		this.contractDAO = contractDAO;
	}

	/**
	 * @return the calendarDayDAO
	 */
	public ICalendarDayDAO getCalendarDayDAO() {
		return calendarDayDAO;
	}

	/**
	 * @param calendarDayDAO the calendarDayDAO to set
	 */
	public void setCalendarDayDAO(ICalendarDayDAO calendarDayDAO) {
		this.calendarDayDAO = calendarDayDAO;
	}

	/**
	 * @return the assetTypeDAO
	 */
	public IAssetTypeDAO getAssetTypeDAO() {
		return assetTypeDAO;
	}

	/**
	 * @param assetTypeDAO the assetTypeDAO to set
	 */
	public void setAssetTypeDAO(IAssetTypeDAO assetTypeDAO) {
		this.assetTypeDAO = assetTypeDAO;
	}

	/**
	 * @return the baseParameterItemDefDAO
	 */
	public IBaseParameterItemDefDAO getBaseParameterItemDefDAO() {
		return baseParameterItemDefDAO;
	}

	/**
	 * @param baseParameterItemDefDAO the baseParameterItemDefDAO to set
	 */
	public void setBaseParameterItemDefDAO(
			IBaseParameterItemDefDAO baseParameterItemDefDAO) {
		this.baseParameterItemDefDAO = baseParameterItemDefDAO;
	}

	/**
	 * @return the srmCaseTransactionDAO
	 */
	public ISrmCaseTransactionDAO getSrmCaseTransactionDAO() {
		return srmCaseTransactionDAO;
	}

	/**
	 * @param srmCaseTransactionDAO the srmCaseTransactionDAO to set
	 */
	public void setSrmCaseTransactionDAO(
			ISrmCaseTransactionDAO srmCaseTransactionDAO) {
		this.srmCaseTransactionDAO = srmCaseTransactionDAO;
	}
	
	/**
	 * @return the mailComponent
	 */
	public MailComponent getMailComponent() {
		return mailComponent;
	}

	/**
	 * @param mailComponent the mailComponent to set
	 */
	public void setMailComponent(MailComponent mailComponent) {
		this.mailComponent = mailComponent;
	}

	/**
	 * @return the srmCaseAssetLinkDAO
	 */
	public ISrmCaseAssetLinkDAO getSrmCaseAssetLinkDAO() {
		return srmCaseAssetLinkDAO;
	}

	/**
	 * @param srmCaseAssetLinkDAO the srmCaseAssetLinkDAO to set
	 */
	public void setSrmCaseAssetLinkDAO(ISrmCaseAssetLinkDAO srmCaseAssetLinkDAO) {
		this.srmCaseAssetLinkDAO = srmCaseAssetLinkDAO;
	}

	/**
	 * @return the srmCaseAssetFunctionDAO
	 */
	public ISrmCaseAssetFunctionDAO getSrmCaseAssetFunctionDAO() {
		return srmCaseAssetFunctionDAO;
	}

	/**
	 * @param srmCaseAssetFunctionDAO the srmCaseAssetFunctionDAO to set
	 */
	public void setSrmCaseAssetFunctionDAO(
			ISrmCaseAssetFunctionDAO srmCaseAssetFunctionDAO) {
		this.srmCaseAssetFunctionDAO = srmCaseAssetFunctionDAO;
	}

	/**
	 * @return the departmentDAO
	 */
	public IDepartmentDAO getDepartmentDAO() {
		return departmentDAO;
	}

	/**
	 * @param departmentDAO the departmentDAO to set
	 */
	public void setDepartmentDAO(IDepartmentDAO departmentDAO) {
		this.departmentDAO = departmentDAO;
	}


	/**
	 * @return the suppliesDAO
	 */
	public ISuppliesTypeDAO getSuppliesDAO() {
		return suppliesDAO;
	}

	/**
	 * @param suppliesDAO the suppliesDAO to set
	 */
	public void setSuppliesDAO(ISuppliesTypeDAO suppliesDAO) {
		this.suppliesDAO = suppliesDAO;
	}

	/**
	 * @return the merchantHeaderDAO
	 */
	public IMerchantHeaderDAO getMerchantHeaderDAO() {
		return merchantHeaderDAO;
	}

	/**
	 * @param merchantHeaderDAO the merchantHeaderDAO to set
	 */
	public void setMerchantHeaderDAO(IMerchantHeaderDAO merchantHeaderDAO) {
		this.merchantHeaderDAO = merchantHeaderDAO;
	}

	/**
	 * @return the caseDetailDAO
	 */
	public ICaseDetailDAO getCaseDetailDAO() {
		return caseDetailDAO;
	}

	/**
	 * @param caseDetailDAO the caseDetailDAO to set
	 */
	public void setCaseDetailDAO(ICaseDetailDAO caseDetailDAO) {
		this.caseDetailDAO = caseDetailDAO;
	}

	/**
	 * @return the iAtomsActivitiUtilsService
	 */
	public IIAtomsActivitiUtilsService getiAtomsActivitiUtilsService() {
		return iAtomsActivitiUtilsService;
	}

	/**
	 * @param iAtomsActivitiUtilsService the iAtomsActivitiUtilsService to set
	 */
	public void setiAtomsActivitiUtilsService(
			IIAtomsActivitiUtilsService iAtomsActivitiUtilsService) {
		this.iAtomsActivitiUtilsService = iAtomsActivitiUtilsService;
	}

	/**
	 * @return the pvmApplicationDAO
	 */
	public IPvmApplicationDAO getPvmApplicationDAO() {
		return pvmApplicationDAO;
	}

	/**
	 * @param pvmApplicationDAO thsrmCaseNewTransactionParameterDTOe pvmApplicationDAO to set
	 */
	public void setPvmApplicationDAO(IPvmApplicationDAO pvmApplicationDAO) {
		this.pvmApplicationDAO = pvmApplicationDAO;
	}
	/**
	 * @return the caseSuppliesTypeMap
	 */
	public Map<String, String> getCaseSuppliesTypeMap() {
		return caseSuppliesTypeMap;
	}

	/**
	 * @param caseSuppliesTypeMap the caseSuppliesTypeMap to set
	 */
	public void setCaseSuppliesTypeMap(Map<String, String> caseSuppliesTypeMap) {
		this.caseSuppliesTypeMap = caseSuppliesTypeMap;
	}

	/**
	 * @return the dmmRepositoryDAO
	 */
	public IDmmRepositoryDAO getDmmRepositoryDAO() {
		return dmmRepositoryDAO;
	}

	/**
	 * @param dmmRepositoryDAO the dmmRepositoryDAO to set
	 */
	public void setDmmRepositoryDAO(IDmmRepositoryDAO dmmRepositoryDAO) {
		this.dmmRepositoryDAO = dmmRepositoryDAO;
	}

	/**
	 * @return the dmmRepositoryHistoryDAO
	 */
	public IDmmRepositoryHistoryDAO getDmmRepositoryHistoryDAO() {
		return dmmRepositoryHistoryDAO;
	}

	/**
	 * @param dmmRepositoryHistoryDAO the dmmRepositoryHistoryDAO to set
	 */
	public void setDmmRepositoryHistoryDAO(
			IDmmRepositoryHistoryDAO dmmRepositoryHistoryDAO) {
		this.dmmRepositoryHistoryDAO = dmmRepositoryHistoryDAO;
	}

	/**
	 * @return the contractAssetDAO
	 */
	public IContractAssetDAO getContractAssetDAO() {
		return contractAssetDAO;
	}

	/**
	 * @param contractAssetDAO the contractAssetDAO to set
	 */
	public void setContractAssetDAO(IContractAssetDAO contractAssetDAO) {
		this.contractAssetDAO = contractAssetDAO;
	}

	/**
	 * @return the merchantDAO
	 */
	public IMerchantDAO getMerchantDAO() {
		return merchantDAO;
	}

	/**
	 * @param merchantDAO the merchantDAO to set
	 */
	public void setMerchantDAO(IMerchantDAO merchantDAO) {
		this.merchantDAO = merchantDAO;
	}
	/**
	 * @return the srmCaseNewAssetLinkDAO
	 */
	public ISrmCaseNewAssetLinkDAO getSrmCaseNewAssetLinkDAO() {
		return srmCaseNewAssetLinkDAO;
	}

	/**
	 * @param srmCaseNewAssetLinkDAO the srmCaseNewAssetLinkDAO to set
	 */
	public void setSrmCaseNewAssetLinkDAO(
			ISrmCaseNewAssetLinkDAO srmCaseNewAssetLinkDAO) {
		this.srmCaseNewAssetLinkDAO = srmCaseNewAssetLinkDAO;
	}

	/**
	 * @return the srmCaseTemplatesDAO
	 */
	public ISrmCaseTemplatesDAO getSrmCaseTemplatesDAO() {
		return srmCaseTemplatesDAO;
	}

	/**
	 * @param srmCaseTemplatesDAO the srmCaseTemplatesDAO to set
	 */
	public void setSrmCaseTemplatesDAO(ISrmCaseTemplatesDAO srmCaseTemplatesDAO) {
		this.srmCaseTemplatesDAO = srmCaseTemplatesDAO;
	}

	/**
	 * @return the admUserDAO
	 */
	public IAdmUserDAO getAdmUserDAO() {
		return admUserDAO;
	}

	/**
	 * @param admUserDAO the admUserDAO to set
	 */
	public void setAdmUserDAO(IAdmUserDAO admUserDAO) {
		this.admUserDAO = admUserDAO;
	}	

	/**
	 * @return the mailListDAO
	 */
	public IMailListDAO getMailListDAO() {
		return mailListDAO;
	}

	/**
	 * @param mailListDAO the mailListDAO to set
	 */
	public void setMailListDAO(IMailListDAO mailListDAO) {
		this.mailListDAO = mailListDAO;
	}

	/**
	 * @return the admRoleDAO
	 */
	public IAdmRoleDAO getAdmRoleDAO() {
		return admRoleDAO;
	}

	/**
	 * @param admRoleDAO the admRoleDAO to set
	 */
	public void setAdmRoleDAO(IAdmRoleDAO admRoleDAO) {
		this.admRoleDAO = admRoleDAO;
	}

	/**
	 * @return the historyCaseHandleInfoDAO
	 */
	public ISrmHistoryCaseHandleInfoDAO getHistoryCaseHandleInfoDAO() {
		return historyCaseHandleInfoDAO;
	}

	/**
	 * @param historyCaseHandleInfoDAO the historyCaseHandleInfoDAO to set
	 */
	public void setHistoryCaseHandleInfoDAO(
			ISrmHistoryCaseHandleInfoDAO historyCaseHandleInfoDAO) {
		this.historyCaseHandleInfoDAO = historyCaseHandleInfoDAO;
	}

	/**
	 * @return the srmHistoryCaseTransactionDAO
	 */
	public ISrmHistoryCaseTransactionDAO getSrmHistoryCaseTransactionDAO() {
		return srmHistoryCaseTransactionDAO;
	}

	/**
	 * @param srmHistoryCaseTransactionDAO the srmHistoryCaseTransactionDAO to set
	 */
	public void setSrmHistoryCaseTransactionDAO(
			ISrmHistoryCaseTransactionDAO srmHistoryCaseTransactionDAO) {
		this.srmHistoryCaseTransactionDAO = srmHistoryCaseTransactionDAO;
	}

	/**
	 * @return the baseParameterManagerService
	 */
	public IBaseParameterManagerService getBaseParameterManagerService() {
		return baseParameterManagerService;
	}

	/**
	 * @param baseParameterManagerService the baseParameterManagerService to set
	 */
	public void setBaseParameterManagerService(
			IBaseParameterManagerService baseParameterManagerService) {
		this.baseParameterManagerService = baseParameterManagerService;
	}

	/**
	 * @return the caseStatusList
	 */
	public List<String> getCaseStatusList() {
		return caseStatusList;
	}

	/**
	 * @param caseStatusList the caseStatusList to set
	 */
	public void setCaseStatusList(List<String> caseStatusList) {
		this.caseStatusList = caseStatusList;
	}

	/**
	 * @return the reportSettingDAO
	 */
	public IReportSettingDAO getReportSettingDAO() {
		return reportSettingDAO;
	}

	/**
	 * @param reportSettingDAO the reportSettingDAO to set
	 */
	public void setReportSettingDAO(IReportSettingDAO reportSettingDAO) {
		this.reportSettingDAO = reportSettingDAO;
	}

	/**
	 * @return the srmCaseCommModeDAO
	 */
	public ISrmCaseCommModeDAO getSrmCaseCommModeDAO() {
		return srmCaseCommModeDAO;
	}

	/**
	 * @param srmCaseCommModeDAO the srmCaseCommModeDAO to set
	 */
	public void setSrmCaseCommModeDAO(ISrmCaseCommModeDAO srmCaseCommModeDAO) {
		this.srmCaseCommModeDAO = srmCaseCommModeDAO;
	}

	/**
	 * @return the paymentInfoDAO
	 */
	public ISrmPaymentInfoDAO getPaymentInfoDAO() {
		return paymentInfoDAO;
	}

	/**
	 * @param paymentInfoDAO the paymentInfoDAO to set
	 */
	public void setPaymentInfoDAO(ISrmPaymentInfoDAO paymentInfoDAO) {
		this.paymentInfoDAO = paymentInfoDAO;
	}

	/**
	 * @return the srmPaymentItemDAO
	 */
	public ISrmPaymentItemDAO getSrmPaymentItemDAO() {
		return srmPaymentItemDAO;
	}

	/**
	 * @param srmPaymentItemDAO the srmPaymentItemDAO to set
	 */
	public void setSrmPaymentItemDAO(ISrmPaymentItemDAO srmPaymentItemDAO) {
		this.srmPaymentItemDAO = srmPaymentItemDAO;
	}
	/**
	 * @return the apiLogDAO
	 */
	public IApiLogDAO getApiLogDAO() {
		return apiLogDAO;
	}
	/**
	 * @param apiLogDAO the apiLogDAO to set
	 */
	public void setApiLogDAO(IApiLogDAO apiLogDAO) {
		this.apiLogDAO = apiLogDAO;
	}

	/**
	 * @return the baseParameterPostCodeDAO
	 */
	public IBaseParameterPostCodeDAO getBaseParameterPostCodeDAO() {
		return baseParameterPostCodeDAO;
	}

	/**
	 * @param baseParameterPostCodeDAO the baseParameterPostCodeDAO to set
	 */
	public void setBaseParameterPostCodeDAO(
			IBaseParameterPostCodeDAO baseParameterPostCodeDAO) {
		this.baseParameterPostCodeDAO = baseParameterPostCodeDAO;
	}

	/**
	 * @return the caseCheckInfoService
	 */
	public ICaseCheckInfoService getCaseCheckInfoService() {
		return caseCheckInfoService;
	}

	/**
	 * @param caseCheckInfoService the caseCheckInfoService to set
	 */
	public void setCaseCheckInfoService(ICaseCheckInfoService caseCheckInfoService) {
		this.caseCheckInfoService = caseCheckInfoService;
	}
}
